<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>David Raab</title>
 <link href="https://sidburn.github.io/atom.xml" rel="self"/>
 <link href="https://sidburn.github.io/"/>
 <updated>2019-08-25T21:34:11+02:00</updated>
 <id>https://sidburn.github.io</id>
 <author>
   <name>David Raab</name>
   <email></email>
 </author>

 
 <entry>
   <title>Wie Cannabis mein Leben veränderte</title>
   <link href="https://sidburn.github.io/blog/2019/08/25/wie-cannabis-mein-leben-veraenderte"/>
   <updated>2019-08-25T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2019/08/25/wie-cannabis-mein-leben-veraenderte</id>
   <content type="html">&lt;p&gt;Heute möchte ich dir meine Geschichte erzählen wie Cannabis mein Leben verändert hat. Um eine Veränderung jedoch Begreifen zu können,
muss ich aber erst einmal Erzählen, wie mein Leben zuvor verlaufen ist. Oder genauer gesagt, was alles falsch gelaufen ist.&lt;/p&gt;
&lt;p&gt;Natürlich wirst du dich Fragen, was nun auf dich zukommt. Also hier einen kleiner Spoiler. Ich werde über meine psychische Erkrankung, die
Depression sprechen und wie diese mein Leben in gewisse Weise zerstört, und gleichzeitig gerettet hat.&lt;/p&gt;
&lt;h2&gt;Wie ist es Depressiv zu sein?&lt;/h2&gt;
&lt;p&gt;Zuerst einmal muss man verstehen, dass es nicht &quot;Die Depression&quot; gibt. Grob unterteilt man zwischen der unipolaren (man hat Schübe
wo es einem schlecht geht), bipolar (Wechsel von extrem schlecht zu extrem gute Phasen) und der chronischen Depression (Auch Dysthymie genannt).&lt;/p&gt;
&lt;p&gt;Letzteres, ist &quot;Meine Depression&quot;. Aber wie genau äußert sich eine chronische Depression?&lt;/p&gt;
&lt;p&gt;Nun, der Vorteil einer Dysthymie ist, das sie zuerst einmal nicht so ausgeprägt und stark ist wie bei den anderen Depressionen.
Man hat keine Phasen in der man komplett Selbstzerstörerisch handelt. Sich selber verletzt, oder Suizid Gedanken hat.&lt;/p&gt;
&lt;p&gt;Der Nachteil ist aber, dass sie zuerst einmal nicht so ausgeprägt und stark ist wie bei den anderen Depressionen.
Anstatt kurze Phasen zu haben, hat man stattdessen sehr schöne lange Phasen. Oder besser gesagt, eine einzige Phase. Bei mir ca.
15 Jahre (oder länger) in denen man wunderbar Lernt, sich langsam und schleichend zu zerstören, ohne das man es selber merkt. Bis zu
den Suizid Gedanken dauert es dann etwas länger, aber wenn sie dann endlich da sind, schocken diese einen auch gar nicht mehr. Ich denke,
sowas könnte man bestimmt als Win-Win Situation verkaufen.&lt;/p&gt;
&lt;p&gt;Aber zurück zum Thema. Dadurch das dieser Prozess so schleichend vorangeht, merkt man selber einfach gar nicht das man überhaupt krank ist.
Man hat einfach keine großen Gefühlsschwankungen mehr. Glück oder Freude sind über die Jahre hinweg für mich bedeutungslose Wörter geworden.&lt;/p&gt;
&lt;p&gt;Letztendlich lebt man im Sumpf der Negativität &amp;amp; Neutralität. Negativ da man unglücklich ist, keine Freude mehr spürt, man kann den Sinn
des eigenen Lebens nicht mehr sehen, und man wünscht sich nur noch, morgen nicht mehr aufzuwachen, und einfach tot zu sein.&lt;/p&gt;
&lt;p&gt;Natürlich fragt man sich wie sowas Neutral sein kann, sowas muss doch negativ sein, oder?&lt;/p&gt;
&lt;p&gt;Antwort: Naja, das Problem ist das ich ausschließlich solche Gedanken gehabt habe. 24 Stunden am Tag, 7 Tage die Woche, 365 Tage im Jahr,
und das ca. 15 Jahre lang. Wenn man nichts anderes kennt auser genau diesen Gedanken, dann wird das empfundene ewige Leid des Lebens zur
Normalität. Das was man als &quot;Neutral&quot; wahr nimmt, verschiebt sich also ins Negative.&lt;/p&gt;
&lt;p&gt;Wenn der Kopf mit einem also so leichte Spielchen treibt, dann kann man sich wohl vorstellen das dies auch kleinere Auswirkungen auf sein
Leben hat. Und oh man, da habe ich tolle Geschichten zu Erzählen!&lt;/p&gt;
&lt;p&gt;Und ich denke so 08/15 kram wie schlechten und wenig Schlaf durch Grübeln, Antriebslosigkeit, Soziale Isolation oder bei mir Heißhunger,
wodurch ich stetig zugenommen habe, der Verlust von immer mehr Hobbys, da sie einem nicht mehr Spaß machen. Naja, das ist ja pille palle.
Dieser 08/15 kram kann man überall nachlesen. Was ich erzählen möchte sind richtige Erlebnisse und die dazugehörigen Gedankengänge die man als
Depressiver durchlebt.&lt;/p&gt;
&lt;h2&gt;Der Abstieg&lt;/h2&gt;
&lt;p&gt;Da der Prozess bei mir so schleichend gewesen ist, kann ich keinen exakten Zeitpunkt nennen wann es angefangen hat. Ich weiß jedoch was
Auslöser waren, und das diese bereits in meiner Kindheit begonnen haben. So hatte ich in meiner Kindheit schon Gedankengänge vom Tod &amp;amp; Sterben.&lt;/p&gt;
&lt;p&gt;Hiermit meine ich aber nicht die normalen Gedankengänge die jeder als Kind durchlebt. Wie das die Eltern sterben, und man als Kind Alpträume
und Angst hat, seine Eltern zu verlieren.&lt;/p&gt;
&lt;p&gt;Nein, meine Gedankengänge drehten sich primär darum dass ICH Sterbe. Und hiermit meine ich nicht einfach nur schnell. Sondern langsam. Meist
dachte ich das ich eine schlimme Krankheit hätte. Zum Beispiel Krebs. Manchmal würde er mich über Jahre hinweg langsam töten, ein ander mal
hätte ich Sachen wie Bauchspeicheldrüsenkrebs, dass mich in 1 Woche tötet.&lt;/p&gt;
&lt;p&gt;Wieder andere male hätte ich schwerste Unfälle, jedoch nicht so schwer das ich sofort tot bin, aber so schwer das ich etliche Operationen,
Amputationen oder sonstiges über mich ergehen lassen müsste um mich zu retten. Meine Familie diesen Schrecken mitbekommt, ich jedoch dabei
zusehen kann wie jemand um mich trauert. Und ich dann zufrieden Sterben kann. Ein Schrei, nach Aufmerksamkeit.&lt;/p&gt;
&lt;p&gt;Solche Gedankengänge sind aber nicht &quot;mal&quot; vorgekommen, sondern solche Gedankengänge waren bei mir dominant. Sich mit solchen Gedanken Abends
ins Bett zu weinen, war Normalität für mich.&lt;/p&gt;
&lt;h2&gt;Der Superheld&lt;/h2&gt;
&lt;p&gt;Irgendwann habe ich dann angefangen immer komplexere Geschichten zu kreieren. Zuerst war ich einfach jemand der anderen Menschen das Leben
rettet, natürlich immer auf Kosten meines eigenen Leben.&lt;/p&gt;
&lt;p&gt;Mal springt man vor einem Auto um ein Kind das Leben zu retten. Mal rettete ich mit meinem Handeln ganze Gruppen. Irgendwann bin ich dann
ein Superheld gewesen, der meist durch Aufopferung und der letzten eigenen Kraft die ganze Menschheit rettet.&lt;/p&gt;
&lt;p&gt;Die Geschichten wurden dabei immer länger. Oder anders gesagt: Vor meinen endgültigen Tod, wie jede Geschichte letztendlich ausging. Musste
ich meist so viel Schmerz, Erniedrigung und jegliche Art der Schande über mich ergehen lassen. Die Geschichten wurden so komplex, das andere
sogar erst nach meinem Tod begriffen haben, das ich durch meinen Tod, etwas gutes bewirkt habe. Letztendlich war der Tod am ende jeder
Geschichte nur eins für mich. Die Erlösung vom Schmerz.&lt;/p&gt;
&lt;p&gt;Diese Geschichten hat natürlich einen Zweck. Auf der einen Seite habe ich versucht meinen inneren Schmerz einen Sinn zu geben. Und auf
der anderen Seite werden solche Geschichten unpersönlicher wenn man anfängt über sich als Superheld nachzudenken. In Gewisser weiße war
dies eine Flucht in die Phantasie-Welt. Ich glaube anders hätte ich es wohl auch nicht ausgehalten.&lt;/p&gt;
&lt;h2&gt;Lebensmüde Gedanken?&lt;/h2&gt;
&lt;p&gt;Im ungefähren alter von 20 Jahren, haben dann bei mir die sogenannten Lebensmüden Gedanken angefangen. Der Unterschied zu Suizid Gedanken
ist, dass man hier passiv stirbt, anstatt das man sich aktiv selbst tötet.&lt;/p&gt;
&lt;p&gt;Wenn ich also Beispielsweise über eine Straße gelaufen bin, dann erschienen in meinen Gedanken Bilder das ich vom Auto angefahren werde.
Wenn ich Abends alleine gelaufen bin, hatte ich ständige Angst ich werde verfolgt und getötet. Wenn ich unter einer Brücke gelaufen bin,
dann dachte ich etwas fällt von der Brücke, und erschlägt mich. Wenn ich mit der Bahn gefahren bin, dann dachte ich die Bahn entgleist
und ein Unglück würde passieren. In absolut allem was mich umgibt, habe ich eine Bedrohung für mein Leben gesehen.&lt;/p&gt;
&lt;p&gt;Diese Gedanken haben mein Verhalten jedoch dahin verändert, dass ich allgemein Vorsichtiger wurde. Öfters schauen bevor ich über die Straße
laufe. Das ich verfolgt &amp;amp; getötet werde, oder etwas mich erschlägt habe ich durch Logik bekämpft indem ich mir sagte das solche Tode natürlich
passieren können, sie jedoch einfach selten und unwahrscheinlich sind. Ich wurde zu Mr. Spock.&lt;/p&gt;
&lt;p&gt;Und naja, wenn es doch passiert wäre. In dem Fall wäre es mir egal gewesen, den der Tod war für mich die Erlösung. Genau das habe ich mir
in meinen Geschichten ja eingeredet.&lt;/p&gt;
&lt;p&gt;Heute sehe ich darin aber auch, dass ich irgendeinen drang hatte weiter zu Leben. Ein innerer Kampf wo ich versuchte mich gegen diese Gedanken
zu wehren. Ich hätte sonst ja auch über die Straße laufen können und dabei unvorsichtiger werden können. Aber irgendetwas in meinen inneren
wehrte sich dagegen.&lt;/p&gt;
&lt;p&gt;Was dies genau war? Ich weiß es nicht. Vielleicht war es der normale Überlebens trieb eines Menschen. Vielleicht etwas anderes. Vielleicht
sollte ich diese Frage nochmal versuchen zu ergründen. Aber ehrlich gesagt, mir ist es auch egal geworden, da ich nicht mehr mit meinen
Gedanken ständig in der Vergangenheit stecken möchte.&lt;/p&gt;
&lt;p&gt;Der drang zu überleben war da, dafür empfinde ich einfach nur Dankbarkeit.&lt;/p&gt;
&lt;h2&gt;Apathie&lt;/h2&gt;
&lt;p&gt;Bisher muss ich aber immer noch eine Sache betonen, sollte dies noch immer nicht klar sein. Bei allem was ich bisher geschrieben habe, war
mir nicht klar das ich unter einer Depression leide. Nicht nur das ich nicht wusste das ich nicht krank war. Nein, ich dachte ich wäre Kern
Gesund, dass es mir gut geht, und das alles was ich bisher erzählt habe das normale Leben ist.&lt;/p&gt;
&lt;p&gt;Noch heute kann ich mich jedoch an einen einzigen Moment erinnern als ich ungefähr 25 war, als mir die Depression bewusst wurde. Ich stand
in meinem Zimmer und die ersten Suizid Gedanken kamen mir hoch. Ich hatte zwar keinen Konkreten Plan mich umzubringen, jedoch fing ich an über
den Suizid nachzudenken.&lt;/p&gt;
&lt;p&gt;Das erste mal war ich geschockt. Mein Gedanke: Oh mein Gott, worüber denkst du den jetzt nach? Weg mit diesen Gedanken! Ich will die nicht.
Sowas muss ich unterbinden. Keine negativen Gedanken mehr. Ich bin doch nicht Depressiv und will nicht depressiv werden.&lt;/p&gt;
&lt;p&gt;Von diesem Moment an dachte ich mir das ich solche Gefühle abschalten muss. Bloß nichts mehr negatives an sich heran lassen. Sich nicht mehr
aus der Bahn bringen lassen. Gleichgültig zu allem werden. Ich wurde Apathisch.&lt;/p&gt;
&lt;p&gt;Mit dieser Entscheidung wurde jedoch alles nur noch schlimmer.&lt;/p&gt;
&lt;p&gt;Das Gefühlsleben ist wie das Yin &amp;amp; Yang. Schöne Gefühle kann es nur geben, wenn man auch die für sich negativ assoziierten Gefühle zulässt. Man
kann sich nicht entscheiden nur die negativen Gefühle auszublenden. Entweder bekommt man das ganze Programm, oder gar nichts.
Ich entschied mich, für letzteres.&lt;/p&gt;
&lt;h2&gt;Selbstständigkeit&lt;/h2&gt;
&lt;p&gt;An dieser Stelle mache ich einen Sprung vorwärts, bis zum Jahre 2014 (da war ich dann 31 Jahre alt) als ich meine Selbstständigkeit als
Indie-Game-Developer begonnen hatte. Natürlich war ich zu diesem Zeitpunkt immer noch krank, nicht nur das, ich dachte immer noch das ich Gesund wäre.&lt;/p&gt;
&lt;p&gt;Rückblickend kann ich das gar nicht mehr begreifen. Über die Jahre hinweg hat sich meine Situation nur noch verschlimmert. Ich habe mich über
die Jahre hinweg immer mehr Isoliert. Meine Isolation ging soweit das ich regelrecht Angst hatte draußen gesehen zu werden, und mit irgendeinen Menschen zu sprechen.&lt;/p&gt;
&lt;p&gt;Meine Sucht die mich am Leben gelassen hat, war wohl die Sucht immer besser zu werden. Und das im Bezug auf meinem Job gesehen. Ich habe immer
mehr Bücher gelesen über Programmierung und die verschiedensten Themen dazu. Ich habe 6 Programmiersprachen gelernt, habe unzählige Bücher
über die diversen Themen gelesen. Mein Ziel war es auf diesem Feld so gut und erfolgreich zu werden wie es nur geht. Und wenn ich dann irgendwann
mal den Erfolg hätte den ich mir gewünscht habe, dann würde ich irgendwann Glücklich sein.&lt;/p&gt;
&lt;p&gt;Wie naiv von mir. Heute begreife ich das man zuerst einmal Glücklich sein muss, nur aus dieser Kraft heraus kann man irgendetwas im Leben erreichen
ohne sich dabei selbst zu zerstören. Ebenfalls habe ich mittlerweile Begriffen das Glücklich sein kein Zustand ist den man erreicht, sondern
man entscheidet sich einfach dafür.&lt;/p&gt;
&lt;p&gt;Aber wie sah eigentlich mein Alltag mittlerweile aus?&lt;/p&gt;
&lt;p&gt;Durch eine Förderung und durch Selbst Erspartes Geld, konnte ich mich ungefähr 1,5 Jahre selbst finanzieren. Jedoch ist es nicht so gewesen
das ich Gesund war. Meine Situation hatte sich so verschlimmert, dass ich im Grunde gar nicht mehr Arbeitsfähig war. Nicht nur war ich nicht Arbeitsfähig,
ich habe im Grunde meinen ganzen Alltag nicht mehr auf die Reihe bekommen.&lt;/p&gt;
&lt;p&gt;Selbst unheimlich wichtige Sachen wie die Zahlung meiner Krankenkasse habe ich nicht mehr geregelt bekommen. Was dann auch irgendwann dazu führte
das mein Konto gepfändet wurde. Dies führte dazu das ich meine Miete nicht mehr bezahlen konnte. Mir der Strom abgestellt wurde, und ich später
irgendwann mit einer Zwangsräumung aus meiner Wohnung geflogen bin. Aber eins nach dem anderen.&lt;/p&gt;
&lt;p&gt;Da ich nur noch Angst hatte Menschen zu begegnen, war es mir selbst unheimlich schwierig dinge zu erledigen, wie den Müll heraus zu bringen.
Das Ergebnis war: Stapelnde Müllsäcke in der Küche, und irgendwann dann auch Maden die durch die Wohnung krochen.&lt;/p&gt;
&lt;p&gt;Wann immer dies passierte räumte und säuberte ich danach alles. Dies kostete mich jedoch unheimlich viel Kraft. Nicht nur kraft, ich ekelte
mich vor mir selber. Habe ich daraus aber gelernt? Nein, immer und immer wieder wiederholte sich dieser Prozess. Und jedes mal wenn wieder die
Maden da waren, erzählte ich mir was für ein Versager, Nichtsnutz und wie widerwärtig ich war. Ich hatte nur noch Selbsthass für mich.&lt;/p&gt;
&lt;p&gt;Ich verstand auch nicht mehr warum ich so handelte. Nicht falsch verstehen, zu keinem Zeitpunkt dachte ich das sowas normal war. Ganz im Gegenteil,
ich Wuste wie abartig ich war, genau deswegen konnte ich mich nur noch selber Hassen das ich so Grundelementare dinge wie den Müll heraus
bringen nicht mehr hinbekomme.&lt;/p&gt;
&lt;p&gt;Als mir mein Geld dank Kontopfändung ausging musste ich natürlich noch etwas Essen, so fing ich an Dinge zu verkaufen. Hauptsächlich
Spiele-Konsolen und Videospiele. Da ich nicht Wuste wie lange ich mit dem Geld auskomme, musste ich schauen das Geld so effizient wie möglich auszugeben.&lt;/p&gt;
&lt;p&gt;Ich machte auch immer wieder Pausen und fing an mehre Wochen gar nichts zu essen. Die längste Zeit die ich mal gar nichts gegessen
hatte umfasste ca. 1 Monat. Manchmal aß ich einen Tag, und machte dann wieder mehrere Tage Pause.&lt;/p&gt;
&lt;p&gt;Als mir der Strom abgeschaltet wurde, naja spätestens da hätte ich eigentlich reagieren müssen. Okay, ich hätte schon viel
früher reagieren müssen, aber die Krankheit ließ mich nicht. Aber spätestens als der Strom weg war, und ich ja ein
Indie-Game-Developer war, der am Computer Video-Spiele programmieren wollte. Spätestens da hätte ich doch eigentlich
reagieren sollen!? Aber ich tat es nicht!&lt;/p&gt;
&lt;p&gt;Stattdessen saß ich 3 Monate ohne Strom in meiner Wohnung und lies mir Bücher über Computer Algorithmen durch. Mein Gedanke war:
Hauptsache ich lenke mich irgendwie ab, bitte nicht mit meinen Problemen beschäftigen. Wenn ich das tue, dann drehe ich noch durch.&lt;/p&gt;
&lt;p&gt;Ich hätte schon sehr viel früher meine Selbstständigkeit aufgeben sollen und dann zum Jobcenter gehen sollen. Jedoch konnte
ich es nicht ertragen schon wieder ein Versager zu sein, der es nicht schafft seinen größten Traum zu verwirklichen. Also tat
ich gar nichts. Und machte damit alles nur noch schlimmer.&lt;/p&gt;
&lt;p&gt;Irgendwann war natürlich alles verkauft, was ich noch irgendwie zu Geld machen konnte, und erst als gar kein Ausweg mehr da
war und ich gar kein Geld mehr hatte, erst dann gab ich meinen Traum auf, und ging zum Jobcenter.&lt;/p&gt;
&lt;p&gt;Als ich dann das erste mal zum Jobcenter ging, und dort meine Geschichte erzählte sagte mir jeder das er diese Geschichte
gar nicht glauben könne. Man erzählte mir das dies eine Depression sein könnte. Was war meine Antwort darauf?&lt;/p&gt;
&lt;p&gt;Waaaas? Ich bin doch nicht Depressiv!&lt;/p&gt;
&lt;p&gt;Da ich dies jedoch von mehreren Seiten hörte, fing ich das erste mal an mich über diese Krankheit zu informieren. Und tatsächlich,
ich fand mich in allen Beschreibungen wieder. Dies hob aber nicht unbedingt meine Stimmung, sondern verschlechterte Sie nur noch.&lt;/p&gt;
&lt;p&gt;Letztendlich lief es nur auf eine Sache hinaus. Ich schaffte es auch nicht die unterlagen die vom Jobcenter benötigt wurden
auszufüllen. Ich verlor auch diese Grundlage wieder, und der Termin zur Zwangsräumung rückte immer Näher. Ein Termin den ich
erfolgreich schaffte aus dem Weg zu gehen, und mich nicht einmal dazu bewegte nach einer neuen Unterbleibe zu suchen.&lt;/p&gt;
&lt;p&gt;Einen Tag vor meiner Zwangsräumung schaffte ich es dann irgendwie um Hilfe zu bitten. Natürlich war niemand mehr da der
etwas von mir hören wollte. Mein engster Freund erzählte mir das die Freundschaft erkaltet war, meine Mutter erzählte
mir das ich verschwinden soll, und was ich ihr den für schreckliche Dinge antue.&lt;/p&gt;
&lt;p&gt;Zum ersten mal in meinen Leben dachte ich nicht mehr darüber nach OB ich mir das Leben sollte.
Ich dachte darüber nach WIE ich es mir nehme.&lt;/p&gt;
&lt;p&gt;Meine Wahl fiel darauf einfach so viele Schlaftabletten zu schlucken wie es nur ging. Das Problem: Ich hatte keine,
und auch kein Geld welche zu kaufen. Zum Glück, sonst würde ich diesen Text hier nicht schreiben.&lt;/p&gt;
&lt;p&gt;Mich selber verletzen, Pulsadern aufschneiden? Davor hatte ich zum Glück zu viel Angst. Erschießen wäre aber
okay gewesen, aber wie an eine Waffe kommen, ohne Geld?&lt;/p&gt;
&lt;h2&gt;Der Aufschwang&lt;/h2&gt;
&lt;p&gt;Zum Glück wurde ich aber nicht obdachlos. Mit sehr viel Glück fand ich noch einen Platz in einem Männerheim
das mich aufnahm. Ich musste zwar so gut wie alle meine Habseligkeiten zurück lassen, aber zumindest hatte ich einen
Platz zum Schlafen und ein Dach über den Kopf.&lt;/p&gt;
&lt;p&gt;Beim Aufnahmegespräch war es das erste mal das ich offener über meine Geschichte erzählte. Ich brach dabei
in Tränen aus und realisierte das ich alleine gar nicht mehr Überlebensfähig war. Zum ersten mal realisierte
ich wirklich wie schlecht es mir ging, weil ich meine negativen Gefühle zu ließ. Dies brachte mir jedoch im nachhinein
eher Kraft meine Probleme anzugehen, und nicht mehr vor Ihnen weg zu rennen.&lt;/p&gt;
&lt;p&gt;Ich meldete mich bei einer Tagesklinik und machte eine drei Monatige Therapie durch. Mir wurde Setralin (ein
Antidepressiva) verschrieben, das auch ziemlich rasch eine Besserung zeigte. Ich lernte neue Menschen kennen und neue Freunde.&lt;/p&gt;
&lt;p&gt;Dieses kurze hoch war aber nicht von Dauer. Irgendwann ließ auch die Wirkung von Setralin nach, ich konnte nicht mehr
schlafen, war erschöpft, und hatte keinerlei Antrieb mehr. Mein Arzt änderte nichts an der Medikamentation, und ich brach dann
irgendwann die Behandlung vollständig ab. Dies führte zu einer Woche Bett mit Schüttelfrost und Fieber und schlief dabei ca. 20 Stunden am Tag.&lt;/p&gt;
&lt;p&gt;Nach dieser Woche Entzug, ging es mir jedoch genauso gut/schlecht wie mit Setralin. Mein Arzt verschrieb mir daraufhin
noch andere Antidepressiva. Hauptsächlich quälten mich Schlafprobleme. Sprich mir fiel es sehr schwer einzuschlafen, und wenn
ich dann mal schlief, dann wie ein Toter, und das sehr lange. Doch vollkommen egal welches Medikament ich ausprobierte,
geholfen hat letztendlich keins.&lt;/p&gt;
&lt;p&gt;Da ich bis zu diesem Zeitpunkt neue Menschen kennen gelernt hatte, darunter auch einige Cannabis Nutzer, kam mir irgendwann der
Gedanke es einfach mit Cannabis auszuprobieren. Ich wusste zuvor schon das es auch bei Schlafproblemen helfen kann, oder das
es Ansätze gibt es könnte bei Depressionen helfen.&lt;/p&gt;
&lt;p&gt;Ich bin an Cannabis heran gegangen das es mir helfen wird. Angst vor negativen Auswirkungen hatte ich keine. Und ich denke
das ist schonmal der erste wichtige Schritt den man als Cannabis Nutzer haben sollte. Psychedelische Drogen wie Cannabis
(LSD, Psilocybin) wirken nämlich anders wie z.B. Alkohol, Nikotin, Kokain, Ecstasy etc. Cannabis macht nicht einfach nur
glücklich, ganz im Gegenteil, es verstärkt einfach alles. Man nimmt Gefühle stärker war, Emotionen sind verstärkt, man nimmt
Musik intensiver war, man hat einen besseren Geruchs &amp;amp; Geschmackssinn.&lt;/p&gt;
&lt;p&gt;Ein Cannabis-Rausch entfaltet sich ganz nachdem welche Erwartungen man hat, welche Gedanken man hat, und wie die aktuelle
Gefühlslage ist. Aus diesem Grund empfehlen etliche Menschen kein Cannabis bei Depressionen zu nehmen.&lt;/p&gt;
&lt;p&gt;Warum habe ich es trotzdem getan? Warum hatte ich keine Angst?&lt;/p&gt;
&lt;p&gt;Wenn man so wie ich schon als kleines Kind ständig über den Tod am grübeln ist. Und eine so lange Geschichte von Lebensmüden Gedanken hat, dann …&lt;/p&gt;
&lt;p&gt;A) Ist man ohnehin irgendwann abgestumpft, und wenig Sachen können einen Schockieren.&lt;br /&gt;
B) Wäre es mir auch egal wenn ich gestorben wäre. (Was bei Cannabis ohnehin nicht passiert, es hätte aber meine Suizid Gedanken verstärken können, und das war mir egal)&lt;/p&gt;
&lt;h2&gt;Der Umgang mit Cannabis&lt;/h2&gt;
&lt;p&gt;An dieser Stelle wollte ich übrigens meinen Cannabis Konsum beschreiben, und welche Resultate dieser hatte. Als ich beim Meditieren
unter Cannabis über das Thema nachdachte lernte ich wie komplex dieses Thema ist.&lt;/p&gt;
&lt;p&gt;Das worüber ich also zuerst schreiben muss ist eher, wie nutze ich Cannabis, wie wirkt es, wie schaut die Häufigkeit aus,
Und wie geht man damit sinnvoll um? Tatsächlich ist jede Frage für sich schon ein eigener Artikel wert. Jedoch kann ich all
das nicht hier unterbringen. Daher versuche ich das wichtigste im groben schnellverlauf zu beschreiben. Ausführlichere Artikel
zu den einzelnen Themen schreibe ich später.&lt;/p&gt;
&lt;p&gt;Zuerst halte ich es für wichtig auf den Drogenmischkonsum mit Tabak einzugehen. Nikotin und THC haben eine gegenseitige Wechselwirkung.
Nikotin schwächt die Wirkung des Cannabis, und Cannabis stärkt die Wirkung des Nikotin. Wer beides mischt erlebt eigentlich eher eine
sehr starke Nikotin Wirkung, den sogenannten Nikotin-Flash. Da ich keinerlei Tabak rauche, und auch nicht vor habe Nikotin abhängig
zu werden, rauche ich nicht mit Tabak. Die Tatsache das ich mich jedes mal übergeben muss wenn ich mit Tabak rauche, hat natürlich
auch einen Grund daran.&lt;/p&gt;
&lt;p&gt;Entweder rauche ich Cannabis pur, oder aber in Kombination mit Damiana (bekommt man im Reformhaus).&lt;/p&gt;
&lt;p&gt;Damiana &amp;amp; Cannabis hat eine eigene Wechselwirkung. Tatsächlich verstärken sich beide Pflanzen gegenseitig. Damiana verstärkt hierbei
vor allem die psychedelische Wirkung des Cannabis stark. Genau die ist es aber auch, nach der ich Suche!&lt;/p&gt;
&lt;p&gt;Ich schrieb das ich über das Thema Meditativ nachdenke. Und denke das ist jetzt der richtige Moment dies zu erläutern. Die
Meisten Menschen verstehen darunter das man für sich selber ist, seine Gedanken los lässt, und einfach nur da ist. In Gewisser
weiße tue ich das auch. Ich komme zur Ruhe, ich entspanne, jedoch ist das Ziel nicht seine Gedanken zu unterbinden, sondern sie
Schweifen zu lassen. Man fällt in einem Modus der Konzentration und des Nachdenkens. Man macht es sich automatisch bequem, schließt
oftmals die Augen, und ist in einem Modus einen Film vor sich zu sehen.&lt;/p&gt;
&lt;p&gt;Es geht auch nicht darum seine Gedanken zu unterbinden, sondern seinen Gefühlen und Gedanken freien lauf zu lassen. Durch die
Entspannung kommt man in einem Modus wodurch man sich selber gut analysieren kann. Gleichzeitig ist man jedoch hoch-emotional.
Tatsächlich würde ich diesen Bewusstseinszustand als ein Wach-Traum beschreiben. Man ist wach, kann logisch und analytisch denken.
Und gleichzeitig ist man in einem Zustand wo man Traumartig Bilder vor sich sieht, und Erlebnisse erleben kann, die sich unheimlich
real anfühlen.&lt;/p&gt;
&lt;p&gt;Mit unheimlich real meine ich nicht das man Halluzinationen hat, oder reale Bilder vor sich sieht. Hiermit meine ich vor allem
die emotionale Ebene. Ich kann dir Dinge erzählen die ich im Rausch durchlebt habe. Du wirst diese Dinge vielleicht Logisch
nachvollziehen können, aber nie wirklich emotional nachvollziehen können. Stelle es dir wie ein Bungee Jump vor. Du kannst dir
noch so viele Videos dazu anschauen, und noch so viele Erzählungen dazu durchlesen. Verstehen wirst du es erst, wenn du es
selber durchlebst.&lt;/p&gt;
&lt;p&gt;Mit diesem Verständnis werde ich dir nun von meinen ersten Horror-Trip erzählen. Ich werde nicht jeden Gedanken und jede Erkenntnis
erzählen die ich aus den verschiedenen Themen gewonnen habe. Ich beschreibe den Ablauf jedoch grob, damit du siehst was ich mit Gedanken
schweifen meine.&lt;/p&gt;
&lt;h2&gt;Der Horror-Trip&lt;/h2&gt;
&lt;p&gt;Ich weiß gar nicht mehr wie ich auf das Thema gekommen bin. Vielleicht war es ein Thema das Unterbewusst in mir schlummerte. Vielleicht schaute
ich gerade ein Film oder ich habe etwas gelesen, ich weiß es nicht mehr. Jedoch beginnen so die meisten Trips. Ich schaue einen Film, beschäftige
mich mit einem Thema, oder sage mir vorher schon bewusst das ich über bestimmte Themen Nachdenken möchte, meistens klappt das.&lt;/p&gt;
&lt;p&gt;Jedoch erzwinge ich nichts, eher im Gegenteil, ich lasse alles auf mich zukommen. Mir kommt es manchmal vor das ich das Tor zum Unterbewusstsein
damit geöffnet habe. All das was ich über Jahre gelernt habe in mich zu verschließen kommt nun hoch. Da man hoch-emotional ist, ist so etwas jedoch
nicht automatisch schön. Beim Erleben meiner Trips mache ich Notizen, entweder am PC, Smartphone oder in einen Buch, je nachdem was zur Verfügung
steht, und worauf ich gerade Lust habe.&lt;/p&gt;
&lt;p&gt;Ich fing an über Religion nachzudenken. Tatsächlich formte ich aus, das Glauben, Religion und Institutionen wie die Kirche für mich drei
unterschiedliche Dinge sind. Ich persönlich lernte dabei auch, dass ich nur den Glauben als etwas positives ansehen kann. Doch wofür stellt
man sich eigentlich die Frage nach dem Glauben?&lt;/p&gt;
&lt;p&gt;Ging es um den Tod, und was danach kommt? Aus meiner Sicht gibt es auf diese Frage keine Antwort. Weshalb ich auch Agnostiker bin. Wenn es eine
Antwort auf diese Frage geben sollte, dann werden wir diese Antwort erst im Augenblicke unseres Todes Erfahren. Agnostiker zu sein heißt jedoch
nicht das man alles andere ablehnt. Viel mehr heißt es für mich das ich jede Theorie hinterfrage, mir Vorstelle sie würde stimmen, und daraus
Schlüsse ziehe was sein könnte.&lt;/p&gt;
&lt;p&gt;Ich saß bequem auf den Stuhl, und hatte meine Augen zu, und war sehr vertieft in den Gedanken über den Tod. Ich stellte mir vor das ich bereits
Tod sein würde und in einem Sarg liegen würde, ich würde mich wahrnehmen, und mein Bewusstsein wäre noch vollständig da. Daher, ich könnte noch
Denken und Fühlen. Jedoch ist mein Körper tot, und ich könnte Ihn nicht mehr Bewegen.&lt;/p&gt;
&lt;p&gt;An der Stelle möchte ich Erwähnen das wenn man an einem Gott (oder mehrere) glaubt, und glaubt der Mensch hat eine Seele und lebt nach dem Tod
weiter. Die Idee bei vollem Bewusstsein im Sarg zu liegen durchaus real sein kann! Nur ein Atheist der nicht an ein Leben nach dem Tod glaubt
und das als Absolut sieht, sollte nicht in der Lage sein so etwas nachvollziehen zu können. Als Agnostiker kann ich mich übrigens in beide
Situationen hinein versetzen!&lt;/p&gt;
&lt;p&gt;Ich lag also im Sarg, konnte mich nicht mehr bewegen, und war nun Tod. Langsam merkte ich das mir unbequem wurde. Meine Atmung wurde schneller,
ich fing an Angst zu spüren. Mein Magen zog sich zusammen, und alle Muskeln in meinen Körper fingen an sich zu verkrampfen.&lt;/p&gt;
&lt;p&gt;Dann dachte ich darüber nach was als nächstes passieren würde. Die Bakterien auf und in meinen Körper würden anfangen mich zu essen. Meine
Organe würden sich zersetzen und ich fing an all dieses Entsetzen zu spüren. Ich sah auf meinen Körper Millionen von Bakterien die nun anfangen
würden mich zu fressen.&lt;/p&gt;
&lt;p&gt;Alle Insekten in der Erde wo ich vergraben war, würden wahrnehmen das etwas essbares in der Nähe ist. Käfer, Würmer und Maden würden sich auf
den Weg zu mir machen. Zum ersten mal Begriff ich was eine Fressorgie ist. Sie findet immer statt, wann immer ein Mensch stirbt.&lt;/p&gt;
&lt;p&gt;Die Gefühle in mir wurden dabei so stark das ich mich kaum mehr halten konnte. Eigentlich hätte ich die ganze Zeit schreien können, jedoch war
ich dabei so verkrampft das ich dies nicht konnte. Ein so großes Gefühl von Angst und Ekel habe ich mein ganzes Leben noch nie gespürt.&lt;/p&gt;
&lt;p&gt;An diesem Punkt wurde mir das aber zu viel und ich fing an mich wieder zu normalisieren. Zwar brauch ich dafür ein paar Minuten, jedoch kann
ich mich ziemlich gut kontrollieren, wenn ich es möchte. Den genau das habe ich während meiner Depression gelernt! Das was ich vorher nicht
konnte, war das Gegenteil, meine Gefühle freien lauf zu lassen.&lt;/p&gt;
&lt;p&gt;Mein Trip ging an der Stelle noch viel weiter. Jedoch nicht im negativen Sinne. Das erste mal in meine Leben war ich dankbar das Ich Lebe.
Ich wurde danach von unheimlich positive Gedanken und Glücksgefühle überströmt. Ich fing an mir alles aufzuschreiben und seit dem mein Leben
umzugestalten.&lt;/p&gt;
&lt;p&gt;Die allererste Umgestaltung war das ich mich endgültig dazu entschied mich Vegan zu ernähren. Denn der Spaß am Fressen anderer Lebewesen ist mir
seit diesem Erlebnis doch etwas unangenehm geworden.&lt;/p&gt;
&lt;h2&gt;Cannabis &amp;amp; Depressionen&lt;/h2&gt;
&lt;p&gt;Mittlerweile sehe ich mich von meiner Depression als geheilt an. Dieser Horror-Trip hat mir wahrhaftig die Augen geöffnet. Seit diesem
Erlebnis scheint es mir das meine Apathie vollkommen weg gesprengt wurde. Mir kommt es vor das Mauern die mich vorher hinderten zu fühlen
weg sind und ich diese Gefühle akzeptieren kann.&lt;/p&gt;
&lt;p&gt;Stattdessen höre ich viel mehr auf meine Gefühle. Analysiere diese, und Frage mich was mein Körper mir sagen möchte, und ob das Gefühl
das ich nun Erlebe gerechtfertigt ist, oder es ein schlecht antrainiertes Gefühl ist dass ich überdenken muss.&lt;/p&gt;
&lt;p&gt;Wichtig ist jedoch zu verstehen das der Rausch Zustand das ist, was dazu führt das ich mein Leben, meine Gefühle, meine Gedanken und
meine Zukunft neu überdenke. Es ist nicht die Substanz selber die irgendwelche Symptome bekämpft wie es Antidepressiva tun.&lt;/p&gt;
&lt;p&gt;Daher muss ich auch nicht ständig Cannabis konsumieren. Ich konsumiere auch zum Genuss, aber mittlerweile bin ich eher so etwas was
man als Wochenende-Konsument bezeichnet. Müsste ich Cannabis in irgendeiner Form täglich zu mir führen, würde ich mich auch nicht als geheilt ansehen.&lt;/p&gt;
&lt;p&gt;Natürlich heißt das nicht das all meine Lebensprobleme die durch meine Depression entstanden sind auf einmal gelöst sind. Jedoch
habe ich nun endlich die nötige Kraft gefunden, diese Probleme anzugehen, und daran zu Arbeiten.&lt;/p&gt;
&lt;h2&gt;Warum ich das hier Schreibe?&lt;/h2&gt;
&lt;p&gt;Ich schreibe das ganze weil ich näher bringen möchte wie ein Depressiver denkt. Jedoch gilt das was ich geschrieben habe nicht für
alle Depressive. Nicht jeder denkt so wie ich. Jede Depression ist individuell.&lt;/p&gt;
&lt;p&gt;Übrigens ist meine ganze Geschichte über meine Gefühle und meine Lebensgeschichte ein Produkt dessen, weil ich im Cannabis-Rausch
meine Vergangenheit durcherlebt habe und mich so selber Analysiert habe. Sonst hätte ich diesen ganzen Artikel wohl nicht schreiben können.&lt;/p&gt;
&lt;p&gt;Weiterhin will ich das Stigma über Cannabis brechen. Und natürlich bin ich für eine Legalisierung von Cannabis (tatsächlich sogar ALLER Drogen).&lt;/p&gt;
&lt;p&gt;Manche mögen sich Fragen wie ich so offen meine Lebensgeschichte Erzählen kann. Die Antwort dazu einfach. Ich habe vorher nicht gelebt.
Ich war Depressiv und krank. Mein eigentliches Leben hat erst jetzt begonnen. Für mich beginnt nun ein neuer Abschnitt in meinen Leben,
und ich werfe all den Ballast den ich durchlebt habe einfach über Bord.&lt;/p&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Cannabis hat mir gezeigt das wenn ich Glück &amp;amp; Liebe spüren möchte, ich alle Emotionen zulassen muss, auch die &quot;schlechten&quot;. Abschotten
nur von den negativen Gefühlen, ist nicht möglich. Entweder durchlebt man all seine Gefühle, oder gar keine.&lt;/p&gt;
&lt;p&gt;Und so richtig, gibt es eigentlich gar keine negativen Gefühle. In Zukunft werde ich weitere Geschichten, Ideen, Denkanstöße
und vieles andere publizieren.&lt;/p&gt;
&lt;p&gt;Wenn Ihr Fragen oder Kritik habt, so ist diese gerne Gesehen.&lt;/p&gt;
&lt;p&gt;Danke, das du bis hier gelesen hast.&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>Meine Erfahrung mit Cannabis und Depressionen</title>
   <link href="https://sidburn.github.io/blog/2018/08/31/depression-and-cannabis"/>
   <updated>2018-08-31T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2018/08/31/depression-and-cannabis</id>
   <content type="html">&lt;p&gt;Meine Erfahrung mit Cannabis und Depressionen&lt;/p&gt;
&lt;h2&gt;Einleitung&lt;/h2&gt;
&lt;p&gt;Hallo, mein Name ist David Raab und ich wurde 1983 geboren. Ich bin gelernter
Fachinformatiker-Systemintegration und habe mir das Programmieren selbst
beigebracht. Nach meinem Abi war ich jobmäßig immer unterwegs, doch meine
Depression hat mir mein Leben sprichwörtlich zur Hölle gemacht.&lt;/p&gt;
&lt;p&gt;Ich denke ich werde in Zukunft noch mehr über mein Leben preisgeben, darüber
was mir gefällt, meine Philosophie und Lebenseinstellung.&lt;/p&gt;
&lt;h2&gt;Was möchte ich bezwecken?&lt;/h2&gt;
&lt;p&gt;Ich möchte, dass Depressionen besser verstanden und akzeptiert werden. Von euch Lesern
und von mir selbst. Denn auch für mich ist die Krankheit noch neu und der Umgang mit Ihr
ein Lernprozess.&lt;/p&gt;
&lt;p&gt;Durch das öffentliche Schreiben erhoffe ich mir natürlich auch den positiven Effekt,
mich selbst besser zu verstehen. Auch wenn ich anderen in meiner Lage nicht direkt
helfen kann, hoffe ich trotzdem, dass ich anderen dazu verhelfen lkann, Depressionen besser
verstehen, oder zu ermutigen, sich Hilfe zu holen.&lt;/p&gt;
&lt;h2&gt;Drogen&lt;/h2&gt;
&lt;p&gt;Desweiteren schreibe ich diesen Text kurz nachdem ich Cannabis konsumiert habe.
Sprich: Ich bin dicht!&lt;/p&gt;
&lt;p&gt;Dies ist auch die Einleitung zu meinem ersten Thema. Der Drogenkonsum generell
und im speziellen die Erfahrungen, die ich mit Cannabis mache.&lt;/p&gt;
&lt;h2&gt;Sind Drogen schlecht?&lt;/h2&gt;
&lt;p&gt;Das Wort &quot;Drogen&quot; ist in vielen Köpfen sehr negativ belastet. Man sieht Junkies
irgendwo in der Ecke. Leute die ihr Leben nicht in den Griff bekommen, oder
sonstige Horror Geschichten. Doch ist dieses Thema komplett surreal für mich
geworden.&lt;/p&gt;
&lt;p&gt;Wir Menschen sind im Grunde alle Abhängig. Wir sind Abhängig nach Freude. Diese
Freude kann etliches sein.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Liebe eines Partners&lt;/li&gt;
&lt;li&gt;Die Zeit mit Freunden verbringen&lt;/li&gt;
&lt;li&gt;Im Restaurant Essen gehen (Ich liebe Griechisch...)&lt;/li&gt;
&lt;li&gt;Zuckerkonsum durch Süßigkeiten (Tue ich auch gerade!)&lt;/li&gt;
&lt;li&gt;Ins Kino gehen&lt;/li&gt;
&lt;li&gt;Fettiges Essen (Mhhhh Burger King!!!)&lt;/li&gt;
&lt;li&gt;Sport&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;und natürlich gehört auch Drogenkonsum dazu!&lt;/p&gt;
&lt;p&gt;Das schlimme wäre nur, wenn wir Menschen an nichts mehr Freude verspüren würden.
Hätten wir keinen Ansporn im Leben, dann würde sich die Frage auftun, wofür man den
überhaupt noch Lebt.&lt;/p&gt;
&lt;p&gt;Stell dir vor:
Du kannst essen was du willst und es schmeckt dir nicht. Du willst einfach nur alleine sein.
Die Süßigkeiten schmecken nicht. Den Burger den man isst ruft nur Schuldgefühle
hervor und kein Partner in ausschau. Klingt gräßlich?&lt;/p&gt;
&lt;p&gt;Nun, so verläuft mein Leben seit ca. 15 Jahren. Wenn man mich noch vor einem
halben jahr gefragt hätte, was Freude ist, ich hätte nicht darauf antworten
können. Auch kann ich mich nicht erinnern das letzte mal Freude verspürt zu haben.&lt;/p&gt;
&lt;p&gt;Naja, so ganz richtig ist das nicht. Seit ich Kiffe, nämlich seit einem
halben Jahr, habe ich mal wieder an etwas Freude. Ich kann Filme an einem Stück
zu Ende schauen, kann mich konzentrieren. Mir kommen sinvolle Gedanken die mich
weiter führen und mich nicht andauernd über dasselbe grübeln lassen. Ich bin auf einmal
in der Lage, Dinge nicht einfach nur schwarz oder weiß zu sehen.&lt;/p&gt;
&lt;p&gt;Natürlich gefällt mir auch der Rausch des Cannabis. Man ist zugleich sediert und
wenn man es möchte kann man auch mal seinen Kopf abschalten und genießen. Das Konzentrieren
fällt mir leichter und das denken tut nicht weh. Oder der Geschmackssinn wird
verbessert und ich kann mein Essen mal geniessen.&lt;/p&gt;
&lt;p&gt;Für jemanden der nicht wirklich weiß, wofür er auf dieser Welt ist, sind das äußerst
positive Effekte. Positive Effekte die einen wieder lernen lassen, das Leben
zu genießen.&lt;/p&gt;
&lt;p&gt;Die Frage die sich mir stellt ist: Warum möchte man mich als Cannabiskonsument
eigentlich krimialisieren? Wem habe ich Schaden zugefügt, außer (höchstens) mir
selbst? Warum sollte der Drogenkonsum überhaupt etwas Schlechtes sein?&lt;/p&gt;
&lt;p&gt;Klingt verrückt? Sehe ich nicht so. Nehmen wir zuerst einmal ein Vergleich.&lt;/p&gt;
&lt;h2&gt;Süßigkeiten &amp;amp; Sport&lt;/h2&gt;
&lt;p&gt;Nun, wir alle Wissen, dass Süßigkeiten unserer Gesundheit nicht gut tun. Sport
tut es schon (auch nur zu einem gewissen Maß, denn die Dosis macht das Gift!),
aber mit der Motivation Sport zu treiben, wer kennt das nicht?&lt;/p&gt;
&lt;p&gt;Es ist natürlich leichter, auf der Couch zu sitzen, etwas süßes zu essen und einen
Film zu geniessen. Leider ist das ungesund und macht dick.&lt;/p&gt;
&lt;p&gt;Aber halt! Dafür haben wir ja das Fitness-Studio! Das Training erlaubt es uns,
auch mal etwas ungesundes zu machen.&lt;/p&gt;
&lt;p&gt;Wäre es nicht logischer, einfach auf alle Süßigkeiten zu verzichten? Dann werden
wir nicht dick und müssen generell weniger Sport treiben und Fit zu bleiben.&lt;/p&gt;
&lt;p&gt;Wir würden Geld bei den Süßigkeiten sparen, müssen weniger Sport betreiben um unsere
Fitness aufrecht zu erhalten. Aber&lt;/p&gt;
&lt;p&gt;Wir sparen doppelt Geld. Bei den Süßigkeiten und beim Fitness Studio. Macht doch
mehr Sinn, oder etwa nicht?&lt;/p&gt;
&lt;p&gt;Nun kann man machen! Aber was ist der Zweck davon? Dann hat man weniger Spaß
an den Süßigkeiten, und sollten wir deswegen weniger Sport treiben, auch noch weniger
Spaß durch den Sport.&lt;/p&gt;
&lt;p&gt;Natürlich schadet man sich und seiner Gesundheit durch Fett und Süßigkeiten, aber
das macht unser Leben nunmal aus. Freude spüren und das auch auf Kosten der Gesundheit.&lt;/p&gt;
&lt;h2&gt;Cannabis&lt;/h2&gt;
&lt;p&gt;Und hier landen wir bei meinen Cannabiskonsum.&lt;/p&gt;
&lt;p&gt;Ja, ich nehme Cannabis. Es hilft mir durch meine Depression. Ich bin wieder
in der Lage, Freude an dingen zu spüren. Das Computerspielen macht mir Spaß, ich
werde Kontaktfreudiger und generell aktiver, außerdem verspüre ich den Antrieb
meine Probleme anzugehen.&lt;/p&gt;
&lt;p&gt;Die Gesundheitlichen Schäden? Ich bin alt genug, so das der Cannabiskonsum keine
langzeitlichen Schäden mehr auf mein Gehirn anrichtet (Bitte nicht kiffen, wenn
ihr jünger als 18, besser noch 21 Jahre alt seid!).&lt;/p&gt;
&lt;p&gt;Psychosen hat es bei mir nicht ausgelöst, und es ist immer noch umstritten ob es
das überhaupt tut!&lt;/p&gt;
&lt;p&gt;Ich habe jetzt zwei packungen zwiback mit kokos und Dunkler Schokolade gegessen,
saure bonbons und Marzipanschokolade. Dies war meiner gesundheit wahrscheinlich
schädlicher, als der Cannabiskonsum. Aber hey, dafür habe ich ja das Fitness-Studio!&lt;/p&gt;
&lt;p&gt;Sind Drogen also schädlich? Ja und nein. Vieles was uns nunmal gut tut, richtet
auch Schaden an. Dies gilt für alles in unserem Leben. Zu viel von etwas kann uns immer
Schaden. So kann man genauso sexsüchtig sein, fettsüchtig oder von jeder anderer
Sache die uns Spaß bereitet. Die Frage sollte also kein schwarz/weiß denken sein
im Sinne von: Ist etwas gut oder schlecht.&lt;/p&gt;
&lt;p&gt;Sondern die Frage sollte immer sein:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Überwiegen die positiven die negativen Effekte &amp;amp; kann ich es meiner Gesundheit
antun?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Auch muss die Antwort nicht eine volkommene Abstinenz von etwas sein. Es macht
immer die Dosis das Gift. Wieviel Süßigkeiten, Fettes Essen, Alkohol, Koffein,
Cannabis, Zucker, oder Sport tut uns den gut?&lt;/p&gt;
&lt;p&gt;Evtl. sollten wir das eine oder andere erhöhen oder verringern, es kommt
immer auf ein Gesundes mittelmaß an! Die Frage stellt sich eher wo das mittelmaß
beim Cannabis Konsum ist.&lt;/p&gt;
&lt;p&gt;Vielleicht einfach so viel das man sich gut fühlt jedoch nicht Abhängig von etwas
ist? Wie ist Abhängigkeit eigentlich definiert? Ich denke in einem nächsten Blog
werde ich auf diese Dinge genauer eingehen.&lt;/p&gt;
&lt;h2&gt;Schlußszene&lt;/h2&gt;
&lt;p&gt;Hinterlasst mir doch einen Kommentar wie euch dieser Artikel gefallen hat, oder
was Ihr gerne Erfahren möchtet. Welche Erfahrung habt ihr mit Cannabis und
seit ihr auch von Depressionen betroffen?&lt;/p&gt;


</content>
 </entry>
 
 <entry>
   <title>Understanding Fold</title>
   <link href="https://sidburn.github.io/blog/2017/03/19/understanding-fold"/>
   <updated>2017-03-19T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2017/03/19/understanding-fold</id>
   <content type="html">&lt;p&gt;A very important function in List-processing is the &lt;code&gt;List.fold&lt;/code&gt; function.
&lt;code&gt;List.fold&lt;/code&gt; is a very powerful function that gives you a lot of flexibility
to do any kind of list transformation. The disadvantage is that this kind of
power makes understanding &lt;code&gt;List.fold&lt;/code&gt; a lot harder. In this article we
look at some visualizations to better understand &lt;code&gt;List.fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we need to understand how we visualize a function. A function has some
inputs and one output and we visualize it as a box with the inputs on
the top and the output on the bottom. As an example this function and
functions call:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 4)&quot; onmouseover=&quot;showTip(event, 'fs3', 4)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs2', 5)&quot; onmouseover=&quot;showTip(event, 'fs2', 5)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 6)&quot; onmouseover=&quot;showTip(event, 'fs2', 6)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 14&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 7)&quot; onmouseover=&quot;showTip(event, 'fs2', 7)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Will be visualized like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/01-times2.svg&quot; alt=&quot;The times2 functions as boxes&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We visualze a list like &lt;code&gt;[1;2;3;4;5]&lt;/code&gt; like that:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/02-list.svg&quot; alt=&quot;A list containing elements 1 to 5&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We don't directly jump to &lt;code&gt;List.fold&lt;/code&gt;, instead we work towards &lt;code&gt;List.fold&lt;/code&gt; by
first looking at &lt;code&gt;List.map&lt;/code&gt; and then &lt;code&gt;List.reduce&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;List.map&lt;/h2&gt;
&lt;p&gt;We could visualize a call like &lt;code&gt;List.map times2 [1;2;3;4;5]&lt;/code&gt; with the technique
we have seen so far. Draw a box with two inputs and a list as output. But we
are not interested in visualizing the &lt;code&gt;List.map&lt;/code&gt; call itself, we want to
visualize how &lt;code&gt;List.map&lt;/code&gt; internally works.&lt;/p&gt;
&lt;p&gt;We can think of &lt;code&gt;List.map&lt;/code&gt; as a function that applies its first argument, a function,
to every element of the list passed as the second argument.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/03-map.svg&quot; alt=&quot;Visualization for List.map example&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;List.map&lt;/code&gt; is a very useful function as executing a function for every element is
often needed in programming. On the other hand it is the exact opposite
of powerful, it is a very specific function that only can manipulate one element
of a list at a time. For example we cannot add all values of a list together, filter a
list and do other kind of things with a list.&lt;/p&gt;
&lt;h2&gt;List.reduce&lt;/h2&gt;
&lt;p&gt;To understand &lt;code&gt;List.reduce&lt;/code&gt; I use an example that is often used by others.
First let me say that I don't think this is the best way to explain &lt;code&gt;List.reduce&lt;/code&gt;
but it is still a good start.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 8)&quot; onmouseover=&quot;showTip(event, 'fs4', 8)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The result of the above statement is &lt;code&gt;15&lt;/code&gt;. You can imagine that &lt;code&gt;List.reduce&lt;/code&gt;
just puts the &lt;code&gt;+&lt;/code&gt; between every element in the list:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It isn't the best explanation because as it doesn't explain what this means:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 10)&quot; onmouseover=&quot;showTip(event, 'fs4', 10)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 11)&quot; onmouseover=&quot;showTip(event, 'fs5', 11)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Putting &lt;code&gt;someFunc&lt;/code&gt; between every element doesn't seem to make any sense!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// What does that mean?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we ignore this for a moment.&lt;/p&gt;
&lt;p&gt;First, we need to understand that &lt;code&gt;+&lt;/code&gt; is also just a function. For example
we could visualize &lt;code&gt;7 + 9&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/04-plus.svg&quot; alt=&quot;Visualization of: 7 + 9&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Second, if we calculate &lt;code&gt;1 + 2 + 3 + 4 + 5&lt;/code&gt; in our head then we don't do
it in one big step. We actually do a lot of steps and create a lot of
intermediate results.&lt;/p&gt;
&lt;p&gt;We first calculate &lt;code&gt;1 + 2&lt;/code&gt; and keep &lt;code&gt;3&lt;/code&gt; in our head. Then we calculate
&lt;code&gt;3 + 3&lt;/code&gt; and keep &lt;code&gt;6&lt;/code&gt; in our head. Then we calculate &lt;code&gt;6 + 4&lt;/code&gt; and finally
we do &lt;code&gt;10 + 5&lt;/code&gt; in our head. If we add parenthesis around every step we
do something like this in our head:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;((((&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This idea of doing multiple calculations and remembering an intermediate
value after each step is exactly how &lt;code&gt;List.reduce&lt;/code&gt; works.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/05-reduce.svg&quot; alt=&quot;Visualization of reduce&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;This visualization also explains how &lt;code&gt;List.reduce&lt;/code&gt; works if we pass it other
functions instead of operators like &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 12)&quot; onmouseover=&quot;showTip(event, 'fs4', 12)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 13)&quot; onmouseover=&quot;showTip(event, 'fs5', 13)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 14)&quot; onmouseover=&quot;showTip(event, 'fs6', 14)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;18&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/06-max.svg&quot; alt=&quot;Visualization of reduce with max&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We also can write it with parenthesis:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs6', 15)&quot; onmouseover=&quot;showTip(event, 'fs6', 15)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 16)&quot; onmouseover=&quot;showTip(event, 'fs6', 16)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 17)&quot; onmouseover=&quot;showTip(event, 'fs6', 17)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 18)&quot; onmouseover=&quot;showTip(event, 'fs6', 18)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;18&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is how &lt;code&gt;List.reduce&lt;/code&gt; works, but also &lt;code&gt;List.reduce&lt;/code&gt; has some limitations.&lt;/p&gt;
&lt;p&gt;First, what should &lt;code&gt;List.reduce&lt;/code&gt; do if you only pass a list with one or zero
elements? In the case of one argument it just returns this one element without
that functions like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt; is executed once. In the case of zero arguments
it throws an exception.&lt;/p&gt;
&lt;p&gt;A second limitation is that we are still limited in which kind of list
transformations we can create. This becomes more obvious if we look at the
types of the function that we must pass to &lt;code&gt;List.reduce&lt;/code&gt;. We must pass
a function where all input and output types are the same and must be of
the type that the list contains.&lt;/p&gt;
&lt;p&gt;This becomes obvious if we look at how &lt;code&gt;List.reduce (+) [1;2;3;4;5]&lt;/code&gt; works. The
first calculation it does is &lt;code&gt;1 + 2&lt;/code&gt;. So it passes &lt;code&gt;1&lt;/code&gt; as the first argument
and &lt;code&gt;2&lt;/code&gt; as the second argument to &lt;code&gt;+&lt;/code&gt;. As both values come from the same list
and all values in a list must be of the same type it means both input values
must be the exact same type of the list.&lt;/p&gt;
&lt;p&gt;As the result of &lt;code&gt;1 + 2&lt;/code&gt; is again passed as the first argument to the next
&lt;code&gt;+&lt;/code&gt; call it also means the output of a function must be the same as its
input type.&lt;/p&gt;
&lt;p&gt;This means when we pass a list of &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;List.reduce&lt;/code&gt; then we must pass a
&lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt; function to &lt;code&gt;List.reduce&lt;/code&gt; and overall it also returns
an &lt;code&gt;int&lt;/code&gt; as the final value. More general, we need a function of type:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Another way to describe how &lt;code&gt;List.reduce&lt;/code&gt; works is to say it combines the first
two values of a list into a new single value and repeats doing this step until
we end up with a single value that is then returned.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/07-reduce2.svg&quot; alt=&quot;Another visualization of reduce&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The first visualization we have seen is more accurate, but also this
kind of idea leads you to the correct result of any &lt;code&gt;List.reduce&lt;/code&gt; call.&lt;/p&gt;
&lt;h2&gt;List.fold&lt;/h2&gt;
&lt;p&gt;Finally we are at &lt;code&gt;List.fold&lt;/code&gt;. The way how &lt;code&gt;List.fold&lt;/code&gt; works is pretty much
the exact same as &lt;code&gt;List.reduce&lt;/code&gt;! The only difference is that we pass an
initial starting value. Doesn't seems like a big deal but this initial
value fixes all limitations of &lt;code&gt;List.reduce&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 19)&quot; onmouseover=&quot;showTip(event, 'fs4', 19)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 20)&quot; onmouseover=&quot;showTip(event, 'fs7', 20)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;List.fold&lt;/code&gt; call above internally does something like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/08-fold.svg&quot; alt=&quot;Visualization of fold&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Overall &lt;code&gt;List.fold&lt;/code&gt; does one additional calculation compared to &lt;code&gt;List.reduce&lt;/code&gt;
because we pass it an initial value. But because of this it also always can
return a value even if we pass it an empty list. This way it doesn't need
to throw an exception.&lt;/p&gt;
&lt;p&gt;The biggest advantage is that we can use different types. As the initial
value is not part of the list it also can be another type.&lt;/p&gt;
&lt;p&gt;The initial value is passed as the first argument to the folder function,
the folder function then returns a new intermediate result that is used
for the next call. This tells us that the first argument and the return
value must be of the same type.&lt;/p&gt;
&lt;p&gt;Only the second argument of the folder function must be the type thats inside
of our list.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/09-fold-func.svg&quot; alt=&quot;List.fold annotated&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Let's say we want to traverse a list and build a string where every number
is just concatenated. Then we already know that the initial value must be
a string. The initial value must be a starting value, so we use the empty
string. Next we know that the the first argument of the folder function
is the initial value or any intermediate string, the second argument is
one element from the list, and we must return the next intermediate string
(or final return value).&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 21)&quot; onmouseover=&quot;showTip(event, 'fs4', 21)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 22)&quot; onmouseover=&quot;showTip(event, 'fs7', 22)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 23)&quot; onmouseover=&quot;showTip(event, 'fs8', 23)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 24)&quot; onmouseover=&quot;showTip(event, 'fs3', 24)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 25)&quot; onmouseover=&quot;showTip(event, 'fs8', 25)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs9', 26)&quot; onmouseover=&quot;showTip(event, 'fs9', 26)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 27)&quot; onmouseover=&quot;showTip(event, 'fs3', 27)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// &amp;quot;12345&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The execution of the above function looks like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/10-fold-string.svg&quot; alt=&quot;Building a string&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Instead of &lt;strong&gt;initial&lt;/strong&gt; or &lt;strong&gt;intermediate&lt;/strong&gt; value we use the term &lt;strong&gt;accumulator&lt;/strong&gt;,
hence the name &lt;code&gt;acc&lt;/code&gt; in the anonymous function.&lt;/p&gt;
&lt;p&gt;Now i want you to look at the following code:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 28)&quot; onmouseover=&quot;showTip(event, 'fs10', 28)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 29)&quot; onmouseover=&quot;showTip(event, 'fs3', 29)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs10', 30)&quot; onmouseover=&quot;showTip(event, 'fs10', 30)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 31)&quot; onmouseover=&quot;showTip(event, 'fs10', 31)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs9', 32)&quot; onmouseover=&quot;showTip(event, 'fs9', 32)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 33)&quot; onmouseover=&quot;showTip(event, 'fs3', 33)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Can you see the similarities with the &lt;code&gt;List.fold&lt;/code&gt; function call?&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/11-fold-vs-loop.svg&quot; alt=&quot;Comparing fold with a loop&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In some way we can say that &lt;code&gt;List.fold&lt;/code&gt; for immutable data-types is what a
&lt;strong&gt;for-loop&lt;/strong&gt; is for mutable data-types. &lt;code&gt;List.fold&lt;/code&gt; is what you get if you try
to eliminate all mutable variables and data-types. The whole purpose of looping
is to mutate some state that is usually defined outside of the loop. In
&lt;code&gt;List.fold&lt;/code&gt; on the other hand the new state is always passed as an argument
and we need to return the new state for the next function call.&lt;/p&gt;
&lt;p&gt;It becomes more obvious if we go through the states of &lt;code&gt;acc&lt;/code&gt; in the loop based
code. We start with the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;. In the first loop iteration &lt;code&gt;x&lt;/code&gt; is
assigned &lt;code&gt;1&lt;/code&gt; and we append this to &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;acc&lt;/code&gt; is set to &lt;code&gt;&quot;1&quot;&lt;/code&gt;. The second
loop iteration assigns &lt;code&gt;&quot;12&quot;&lt;/code&gt; to &lt;code&gt;acc&lt;/code&gt; and so on. These are exactly the states
our &lt;strong&gt;folder&lt;/strong&gt; function return in the &lt;code&gt;List.fold&lt;/code&gt; example.&lt;/p&gt;
&lt;p&gt;You also can easily convert other loop code to a &lt;code&gt;List.fold&lt;/code&gt;. As an example:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 34)&quot; onmouseover=&quot;showTip(event, 'fs11', 34)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 35)&quot; onmouseover=&quot;showTip(event, 'fs12', 35)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 36)&quot; onmouseover=&quot;showTip(event, 'fs13', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 37)&quot; onmouseover=&quot;showTip(event, 'fs13', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs11', 38)&quot; onmouseover=&quot;showTip(event, 'fs11', 38)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 39)&quot; onmouseover=&quot;showTip(event, 'fs11', 39)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs12', 40)&quot; onmouseover=&quot;showTip(event, 'fs12', 40)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 41)&quot; onmouseover=&quot;showTip(event, 'fs12', 41)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 42)&quot; onmouseover=&quot;showTip(event, 'fs13', 42)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs11', 43)&quot; onmouseover=&quot;showTip(event, 'fs11', 43)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 44)&quot; onmouseover=&quot;showTip(event, 'fs12', 44)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Written as a fold:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 45)&quot; onmouseover=&quot;showTip(event, 'fs14', 45)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 46)&quot; onmouseover=&quot;showTip(event, 'fs15', 46)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs16', 47)&quot; onmouseover=&quot;showTip(event, 'fs16', 47)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs3', 48)&quot; onmouseover=&quot;showTip(event, 'fs3', 48)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs3', 49)&quot; onmouseover=&quot;showTip(event, 'fs3', 49)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 50)&quot; onmouseover=&quot;showTip(event, 'fs15', 50)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs16', 51)&quot; onmouseover=&quot;showTip(event, 'fs16', 51)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 52)&quot; onmouseover=&quot;showTip(event, 'fs3', 52)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 53)&quot; onmouseover=&quot;showTip(event, 'fs15', 53)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs16', 54)&quot; onmouseover=&quot;showTip(event, 'fs16', 54)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;)

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 55)&quot; onmouseover=&quot;showTip(event, 'fs17', 55)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs18', 56)&quot; onmouseover=&quot;showTip(event, 'fs18', 56)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 57)&quot; onmouseover=&quot;showTip(event, 'fs4', 57)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 58)&quot; onmouseover=&quot;showTip(event, 'fs7', 58)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 59)&quot; onmouseover=&quot;showTip(event, 'fs14', 59)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs17', 60)&quot; onmouseover=&quot;showTip(event, 'fs17', 60)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs18', 61)&quot; onmouseover=&quot;showTip(event, 'fs18', 61)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It's a bit different. As a &lt;code&gt;List.fold&lt;/code&gt; only supports one initial value
we use a Tuple with two values. In the mutation based code we don't need an
&lt;em&gt;else&lt;/em&gt; branch as nothing happens with an odd number. In the &lt;code&gt;List.fold&lt;/code&gt;
example we must explicitly return the unchanged state.&lt;/p&gt;
&lt;h2&gt;List.foldBack&lt;/h2&gt;
&lt;p&gt;As &lt;code&gt;List.fold&lt;/code&gt; is basically just a for-loop it should now become clear why it
is so powerful, yet some task are harder as it seems. As an example we want
to build our own &lt;code&gt;List.map&lt;/code&gt; with the help of &lt;code&gt;List.fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As the return value is a list our initial value also must be a list and we
start with the empty list as the initial value. Then we execute a user-defined function
for every element and the result must be added to the empty list.&lt;/p&gt;
&lt;p&gt;We could write something like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 62)&quot; onmouseover=&quot;showTip(event, 'fs19', 62)&quot; class=&quot;f&quot;&gt;map&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 63)&quot; onmouseover=&quot;showTip(event, 'fs20', 63)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 64)&quot; onmouseover=&quot;showTip(event, 'fs21', 64)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 65)&quot; onmouseover=&quot;showTip(event, 'fs22', 65)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 66)&quot; onmouseover=&quot;showTip(event, 'fs23', 66)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 67)&quot; onmouseover=&quot;showTip(event, 'fs24', 67)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 68)&quot; onmouseover=&quot;showTip(event, 'fs25', 68)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 69)&quot; onmouseover=&quot;showTip(event, 'fs20', 69)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 70)&quot; onmouseover=&quot;showTip(event, 'fs24', 70)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs25', 71)&quot; onmouseover=&quot;showTip(event, 'fs25', 71)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 72)&quot; onmouseover=&quot;showTip(event, 'fs23', 72)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs4', 73)&quot; onmouseover=&quot;showTip(event, 'fs4', 73)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 74)&quot; onmouseover=&quot;showTip(event, 'fs7', 74)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 75)&quot; onmouseover=&quot;showTip(event, 'fs22', 75)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; [] &lt;span onmouseout=&quot;hideTip(event, 'fs21', 76)&quot; onmouseover=&quot;showTip(event, 'fs21', 76)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs19', 77)&quot; onmouseover=&quot;showTip(event, 'fs19', 77)&quot; class=&quot;f&quot;&gt;map&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 78)&quot; onmouseover=&quot;showTip(event, 'fs2', 78)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [10; 8; 6; 4; 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The problem is how we build the list. The cons operator &lt;code&gt;::&lt;/code&gt; only can prepend
an element to a list, not append. Because of this we get &lt;code&gt;[10;8;6;4;2]&lt;/code&gt; instead
of the expected &lt;code&gt;[2;4;6;8;10]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is possible to write an &lt;code&gt;append&lt;/code&gt; function that appends a single element to
a list. The general problem is that this is a very inefficient operation with
an immutable list. Whenever you append an element a whole new list must be
created and all elements must be copied.&lt;/p&gt;
&lt;p&gt;A better approach would be to traverse the list in reverse order. We start at
the end (the right side) and prepend the result to an empty list. This is
excactly how &lt;code&gt;List.foldBack&lt;/code&gt; works.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 79)&quot; onmouseover=&quot;showTip(event, 'fs26', 79)&quot; class=&quot;f&quot;&gt;map&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 80)&quot; onmouseover=&quot;showTip(event, 'fs20', 80)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 81)&quot; onmouseover=&quot;showTip(event, 'fs21', 81)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 82)&quot; onmouseover=&quot;showTip(event, 'fs27', 82)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 83)&quot; onmouseover=&quot;showTip(event, 'fs24', 83)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 84)&quot; onmouseover=&quot;showTip(event, 'fs23', 84)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 85)&quot; onmouseover=&quot;showTip(event, 'fs25', 85)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 86)&quot; onmouseover=&quot;showTip(event, 'fs20', 86)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 87)&quot; onmouseover=&quot;showTip(event, 'fs24', 87)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs25', 88)&quot; onmouseover=&quot;showTip(event, 'fs25', 88)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 89)&quot; onmouseover=&quot;showTip(event, 'fs23', 89)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs4', 90)&quot; onmouseover=&quot;showTip(event, 'fs4', 90)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 91)&quot; onmouseover=&quot;showTip(event, 'fs28', 91)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 92)&quot; onmouseover=&quot;showTip(event, 'fs27', 92)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 93)&quot; onmouseover=&quot;showTip(event, 'fs21', 93)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; []

&lt;span onmouseout=&quot;hideTip(event, 'fs26', 94)&quot; onmouseover=&quot;showTip(event, 'fs26', 94)&quot; class=&quot;f&quot;&gt;map&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 95)&quot; onmouseover=&quot;showTip(event, 'fs2', 95)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [2;4;6;8;10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/12-foldback.svg&quot; alt=&quot;FoldBack that shows the map implementation&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;If you look at the visualization it also becomes clear why the order of the initial
value is different. In &lt;code&gt;List.fold&lt;/code&gt; you start from the left and the initial value
is also places on the left-side from the list.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;List.foldBack&lt;/code&gt; we start at the right and we also place the initial value at the
right-side of the list. The &lt;code&gt;List.fold&lt;/code&gt; and &lt;code&gt;List.foldBack&lt;/code&gt; resembles that idea.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 96)&quot; onmouseover=&quot;showTip(event, 'fs4', 96)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 97)&quot; onmouseover=&quot;showTip(event, 'fs7', 97)&quot; class=&quot;i&quot;&gt;fold&lt;/span&gt;     &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initialValue&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 98)&quot; onmouseover=&quot;showTip(event, 'fs29', 98)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 99)&quot; onmouseover=&quot;showTip(event, 'fs4', 99)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 100)&quot; onmouseover=&quot;showTip(event, 'fs28', 100)&quot; class=&quot;i&quot;&gt;foldBack&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 101)&quot; onmouseover=&quot;showTip(event, 'fs29', 101)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;         &lt;span class=&quot;i&quot;&gt;initialValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Also the folder function receives the accumulator as the second argument
(right argument) in &lt;code&gt;List.foldback&lt;/code&gt; while &lt;code&gt;List.fold&lt;/code&gt; receives it as the first
argument (left argument).&lt;/p&gt;
&lt;h2&gt;Exercises&lt;/h2&gt;
&lt;p&gt;If you truly want to understand those function you should do some exercises.
As an exercise you should re-create the following List functions with either
&lt;code&gt;List.fold&lt;/code&gt; or &lt;code&gt;List.foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Function&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;length xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Returns the amount of elements in a list&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;rev xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Reverses a list&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;map f xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Runs a function on every element of a list&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;filter predicate xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Only keep those elements that predicate returns true for&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;forAll predicate xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Returns true if all elements of the list return true for the predicate&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Other languages use different namens for these operations, but the logic
stays the same.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;left&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;List.fold&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;List.foldBack&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;List.reduce&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Comment&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;C# (LINQ)&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Aggregate&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Aggregate&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Aggregate accepts 2 or 3 arguments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduceRight&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduce accepts 2 or 3 arguments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;Elm&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldl&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldr&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;None&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldl&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldr&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldl1&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;None&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;Clojure&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;reduce accepts 2 or 3 arguments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;List.fold&lt;/code&gt; and &lt;code&gt;List.foldBack&lt;/code&gt; functions are powerful function, but this
doesn't mean they are &quot;good&quot;. In general you should avoid powerful language
constructs. Functions like &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; are overall less powerful but
many times easier to understand. This is also the idea of
&lt;a href=&quot;/blog/2016/03/09/structured-programming&quot;&gt;Structured Programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But avoiding doesn't mean: &quot;Never use it&quot;. If you need a special list manipulation
and there doesn't exists a built-in function then use &lt;code&gt;List.fold&lt;/code&gt; or &lt;code&gt;List.foldBack&lt;/code&gt;
and create the needed function on your own.&lt;/p&gt;
&lt;p&gt;Besides list manipulation (list as input and list as output), &lt;code&gt;List.fold&lt;/code&gt; and
&lt;code&gt;List.foldBack&lt;/code&gt; are the best functions if you want to convert a list to any other
non-list data-types.&lt;/p&gt;
&lt;p&gt;If you are interested in more code examples and you want to know how to implement
&lt;code&gt;List.fold&lt;/code&gt; and &lt;code&gt;List.foldBack&lt;/code&gt; yourself you also can read
&lt;a href=&quot;/blog/2016/04/05/mutable-loops-to-immutability&quot;&gt;From mutable loops to immutable folds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nowadays &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; functions are not only implemented for the List
data-type. The idea was generalized and is known as
&lt;a href=&quot;/blog/2016/05/28/catamorphisms&quot;&gt;Catamorphisms&lt;/a&gt;. You should
know about &lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic Data-Types&lt;/a&gt;
especially recursive data-types beforehand to understand them.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val times2 : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.times2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val acc : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val mutable acc : string&lt;br /&gt;&lt;br /&gt;Full name: Main.acc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val mutable amountOfEvenNumbers : int&lt;br /&gt;&lt;br /&gt;Full name: Main.amountOfEvenNumbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val mutable sumOfEvenNumbers : int&lt;br /&gt;&lt;br /&gt;Full name: Main.sumOfEvenNumbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val x : int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val folder : amount:int * sum:int -&amp;gt; x:int -&amp;gt; int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.folder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val amount : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val sum : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val amount : int&lt;br /&gt;&lt;br /&gt;Full name: Main.amount&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val sum : int&lt;br /&gt;&lt;br /&gt;Full name: Main.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val map&amp;#39; : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.map&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;a list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val folder : (&amp;#39;b list -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;b list)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val acc : &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val newElement : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val map&amp;#39;&amp;#39; : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.map&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;b list -&amp;gt; &amp;#39;b list)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val foldBack : folder:(&amp;#39;T -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;T list -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Variable Arguments in F#</title>
   <link href="https://sidburn.github.io/blog/2017/03/13/variable-arguments"/>
   <updated>2017-03-13T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2017/03/13/variable-arguments</id>
   <content type="html">&lt;p&gt;One question that appears in F# from time to time is: How do you create a
function that expects a variable amount of arguments?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A short answer is:&lt;/strong&gt; You can't do that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A longer and correct answer:&lt;/strong&gt; You can do it with (static) methods.
But you probably don't want to use this and look for an alternative.&lt;/p&gt;
&lt;p&gt;First we should look at the difference between an F# function and a (static)
method.&lt;/p&gt;
&lt;h2&gt;F# Functions vs. (static) methods&lt;/h2&gt;
&lt;p&gt;Usually I don't distinguish between those two as both just execute
some code and return some value. But in this case we must differentiate
them. An F# function is any function defined with the &lt;code&gt;let&lt;/code&gt; keyword.
F# functions are usually defined inside of modules or inside of other
functions.&lt;/p&gt;
&lt;p&gt;A (static) method on the other hand is part of a class definition. The
definition is different, but using (static) methods or functions can look
the same. The biggest difference is that (static) methods often use
tupled-syntax while F# functions use currying. But you are not restricted
to the one or other.&lt;/p&gt;
&lt;p&gt;You can use currying and a tupled syntax in F# functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;SomeModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Currying&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;funcC&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Tuple&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;f&quot;&gt;funcT&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 6)&quot; onmouseover=&quot;showTip(event, 'fs3', 6)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You could call both functions like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;t&quot;&gt;SomeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 9)&quot; onmouseover=&quot;showTip(event, 'fs2', 9)&quot; class=&quot;f&quot;&gt;funcC&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs6', 10)&quot; onmouseover=&quot;showTip(event, 'fs6', 10)&quot; class=&quot;t&quot;&gt;SomeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 11)&quot; onmouseover=&quot;showTip(event, 'fs5', 11)&quot; class=&quot;f&quot;&gt;funcT&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The second version looks a lot like calling a function in other languages
from C, C#, Java and so on and this is not an accident. But F# is
really consistent in its syntax. Whenever you see parenthesis
and values separated with commas then you really just define a tuple.
Because of this you also could write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 12)&quot; onmouseover=&quot;showTip(event, 'fs7', 12)&quot; class=&quot;i&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;t&quot;&gt;SomeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 14)&quot; onmouseover=&quot;showTip(event, 'fs5', 14)&quot; class=&quot;f&quot;&gt;funcT&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 15)&quot; onmouseover=&quot;showTip(event, 'fs7', 15)&quot; class=&quot;i&quot;&gt;args&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is something you cannot do in C, C#, Java and so on. Calling a function
looks the same but the meaning is different. All of this is also possible
with (static) methods.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 16)&quot; onmouseover=&quot;showTip(event, 'fs8', 16)&quot; class=&quot;t&quot;&gt;SomeClass&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;funcC&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;funcT&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;you can call it in the same way&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 17)&quot; onmouseover=&quot;showTip(event, 'fs8', 17)&quot; class=&quot;i&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;funcC&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;i&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;funcT&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, why is any of this important?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In F# you usually want to work with curried functions.&lt;/li&gt;
&lt;li&gt;Variable Arguments are only supported with tupled (static) methods.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Variable Arguments&lt;/h2&gt;
&lt;p&gt;First lets focus on the second point. So we only can use variable
arguments if we create a class, and use tupled syntax. As a light
example let's build a &lt;code&gt;max&lt;/code&gt; function that returns the biggest
element from all arguments we pass to it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Util&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 51)&quot; onmouseover=&quot;showTip(event, 'fs27', 51)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;([&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 52)&quot; onmouseover=&quot;showTip(event, 'fs11', 52)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 53)&quot; onmouseover=&quot;showTip(event, 'fs12', 53)&quot; class=&quot;t&quot;&gt;ParamArray&lt;/span&gt;&amp;gt;] &lt;span onmouseout=&quot;hideTip(event, 'fs28', 54)&quot; onmouseover=&quot;showTip(event, 'fs28', 54)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 55)&quot; onmouseover=&quot;showTip(event, 'fs14', 55)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 56)&quot; onmouseover=&quot;showTip(event, 'fs15', 56)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 57)&quot; onmouseover=&quot;showTip(event, 'fs16', 57)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 58)&quot; onmouseover=&quot;showTip(event, 'fs28', 58)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 59)&quot; onmouseover=&quot;showTip(event, 'fs9', 59)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 60)&quot; onmouseover=&quot;showTip(event, 'fs29', 60)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)         &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 61)&quot; onmouseover=&quot;showTip(event, 'fs9', 61)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 62)&quot; onmouseover=&quot;showTip(event, 'fs29', 62)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 63)&quot; onmouseover=&quot;showTip(event, 'fs9', 63)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 64)&quot; onmouseover=&quot;showTip(event, 'fs29', 64)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)         &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The concept of a variable argument function is easy. You just use a normal
argument and add the attribute &lt;code&gt;[&amp;lt;System.ParamArray&amp;gt;]&lt;/code&gt; to it. Only the
last argument can be flagged with the attribute. And finally, you receive all
arguments as an array.&lt;/p&gt;
&lt;h2&gt;Why you should avoid variable arguments&lt;/h2&gt;
&lt;p&gt;Previously I said that when you use parenthesis and separate values with
comma it is a tuple. In fact this kind of consistency is broken with &lt;code&gt;ParamArray&lt;/code&gt;.
You can see the difference in this extended example:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 65)&quot; onmouseover=&quot;showTip(event, 'fs30', 65)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 66)&quot; onmouseover=&quot;showTip(event, 'fs31', 66)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;([&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 67)&quot; onmouseover=&quot;showTip(event, 'fs11', 67)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 68)&quot; onmouseover=&quot;showTip(event, 'fs12', 68)&quot; class=&quot;t&quot;&gt;ParamArray&lt;/span&gt;&amp;gt;] &lt;span onmouseout=&quot;hideTip(event, 'fs32', 69)&quot; onmouseover=&quot;showTip(event, 'fs32', 69)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 70)&quot; onmouseover=&quot;showTip(event, 'fs14', 70)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 71)&quot; onmouseover=&quot;showTip(event, 'fs15', 71)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 72)&quot; onmouseover=&quot;showTip(event, 'fs16', 72)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 73)&quot; onmouseover=&quot;showTip(event, 'fs32', 73)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 74)&quot; onmouseover=&quot;showTip(event, 'fs33', 74)&quot; class=&quot;f&quot;&gt;max4&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs34', 75)&quot; onmouseover=&quot;showTip(event, 'fs34', 75)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 76)&quot; onmouseover=&quot;showTip(event, 'fs35', 76)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 77)&quot; onmouseover=&quot;showTip(event, 'fs36', 77)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 78)&quot; onmouseover=&quot;showTip(event, 'fs37', 78)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;)                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 79)&quot; onmouseover=&quot;showTip(event, 'fs14', 79)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 80)&quot; onmouseover=&quot;showTip(event, 'fs15', 80)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 81)&quot; onmouseover=&quot;showTip(event, 'fs16', 81)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [|&lt;span onmouseout=&quot;hideTip(event, 'fs34', 82)&quot; onmouseover=&quot;showTip(event, 'fs34', 82)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 83)&quot; onmouseover=&quot;showTip(event, 'fs35', 83)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 84)&quot; onmouseover=&quot;showTip(event, 'fs36', 84)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs37', 85)&quot; onmouseover=&quot;showTip(event, 'fs37', 85)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;|]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 86)&quot; onmouseover=&quot;showTip(event, 'fs38', 86)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs9', 87)&quot; onmouseover=&quot;showTip(event, 'fs9', 87)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 88)&quot; onmouseover=&quot;showTip(event, 'fs39', 88)&quot; class=&quot;f&quot;&gt;max4&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 89)&quot; onmouseover=&quot;showTip(event, 'fs9', 89)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 90)&quot; onmouseover=&quot;showTip(event, 'fs39', 90)&quot; class=&quot;f&quot;&gt;max4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 91)&quot; onmouseover=&quot;showTip(event, 'fs38', 91)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 92)&quot; onmouseover=&quot;showTip(event, 'fs9', 92)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 93)&quot; onmouseover=&quot;showTip(event, 'fs29', 93)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;  (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 94)&quot; onmouseover=&quot;showTip(event, 'fs9', 94)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 95)&quot; onmouseover=&quot;showTip(event, 'fs29', 95)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs38', 96)&quot; onmouseover=&quot;showTip(event, 'fs38', 96)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;// (1,10,30,15)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Both &lt;code&gt;Util.max4&lt;/code&gt; calls return &lt;code&gt;30&lt;/code&gt; because this function expects a tuple with
four arguments and we pass this to &lt;code&gt;Util.max4&lt;/code&gt; in both cases.&lt;/p&gt;
&lt;p&gt;But the &lt;code&gt;Util.max&lt;/code&gt; calls completely differ. In the first example we really pass
four arguments, but in the second &lt;code&gt;Util.max&lt;/code&gt; example we really pass a single
value, a tuple containing four elements.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParamArray&lt;/code&gt; really is an inconsistency in the language. I wouldn't even say this
was a bad decision. If you use a variable arguments function defined in C# from F#
it absolutely makes sense to break this consistency. In fact this inconsistency can
even feel more consistent. A C# static method that you call from F# with four
arguments looks like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 102)&quot; onmouseover=&quot;showTip(event, 'fs40', 102)&quot; class=&quot;i&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Func&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs34', 103)&quot; onmouseover=&quot;showTip(event, 'fs34', 103)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 104)&quot; onmouseover=&quot;showTip(event, 'fs35', 104)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 105)&quot; onmouseover=&quot;showTip(event, 'fs36', 105)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 106)&quot; onmouseover=&quot;showTip(event, 'fs37', 106)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;a static method with variable arguments that you also pass four arguments also looks like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 102)&quot; onmouseover=&quot;showTip(event, 'fs40', 102)&quot; class=&quot;i&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Func&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs34', 103)&quot; onmouseover=&quot;showTip(event, 'fs34', 103)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 104)&quot; onmouseover=&quot;showTip(event, 'fs35', 104)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 105)&quot; onmouseover=&quot;showTip(event, 'fs36', 105)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 106)&quot; onmouseover=&quot;showTip(event, 'fs37', 106)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So it is consistent or inconsistent depending from which way you look at it.&lt;/p&gt;
&lt;p&gt;But rather arguing with consistency the important part I consider is that it
behaves differently and you cannot see that from the code. When I look at
code like &lt;code&gt;Class.func(a,b,c,d)&lt;/code&gt; I could assume that it is a function that
expects four arguments. It isn't obvious that I can add a fifth argument
or probably use less arguments.&lt;/p&gt;
&lt;p&gt;The biggest problem in my opinion is that most of the time you already have
a collection like a list and you just want to pass that list to a function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 107)&quot; onmouseover=&quot;showTip(event, 'fs41', 107)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs9', 108)&quot; onmouseover=&quot;showTip(event, 'fs9', 108)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 109)&quot; onmouseover=&quot;showTip(event, 'fs29', 109)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [20;14;37;16]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 110)&quot; onmouseover=&quot;showTip(event, 'fs9', 110)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 111)&quot; onmouseover=&quot;showTip(event, 'fs29', 111)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 112)&quot; onmouseover=&quot;showTip(event, 'fs41', 112)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;// [20;14;37;16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If you already have a list, then variable arguments doesn't help you at all.
In fact you must write other code like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 113)&quot; onmouseover=&quot;showTip(event, 'fs42', 113)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs43', 114)&quot; onmouseover=&quot;showTip(event, 'fs43', 114)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 115)&quot; onmouseover=&quot;showTip(event, 'fs44', 115)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 116)&quot; onmouseover=&quot;showTip(event, 'fs45', 116)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 117)&quot; onmouseover=&quot;showTip(event, 'fs9', 117)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 118)&quot; onmouseover=&quot;showTip(event, 'fs29', 118)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs44', 119)&quot; onmouseover=&quot;showTip(event, 'fs44', 119)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs45', 120)&quot; onmouseover=&quot;showTip(event, 'fs45', 120)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 121)&quot; onmouseover=&quot;showTip(event, 'fs41', 121)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is pretty much exactly how &lt;code&gt;Util.max()&lt;/code&gt; itself is implemented! On top
it's a bit longer, because you cannot just write
&lt;code&gt;List.reduce Util.max numbers&lt;/code&gt;. &lt;code&gt;List.reduce&lt;/code&gt; expect a curried two argument
function, not a tupled two argument function!&lt;/p&gt;
&lt;p&gt;The funny thing is: It works differently with an Array. Actually you can write
stuff like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 122)&quot; onmouseover=&quot;showTip(event, 'fs46', 122)&quot; class=&quot;i&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;|]

&lt;span onmouseout=&quot;hideTip(event, 'fs9', 123)&quot; onmouseover=&quot;showTip(event, 'fs9', 123)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 124)&quot; onmouseover=&quot;showTip(event, 'fs29', 124)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 125)&quot; onmouseover=&quot;showTip(event, 'fs46', 125)&quot; class=&quot;i&quot;&gt;array&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 126)&quot; onmouseover=&quot;showTip(event, 'fs9', 126)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 127)&quot; onmouseover=&quot;showTip(event, 'fs29', 127)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;|]     &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 128)&quot; onmouseover=&quot;showTip(event, 'fs9', 128)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 129)&quot; onmouseover=&quot;showTip(event, 'fs29', 129)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs14', 130)&quot; onmouseover=&quot;showTip(event, 'fs14', 130)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 131)&quot; onmouseover=&quot;showTip(event, 'fs47', 131)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 132)&quot; onmouseover=&quot;showTip(event, 'fs41', 132)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So you can pass arrays, and arrays are not considered as passing one argument.
This also works with functions with fixed arguments.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 133)&quot; onmouseover=&quot;showTip(event, 'fs30', 133)&quot; class=&quot;i&quot;&gt;Util&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;amount&lt;/span&gt;, [&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 134)&quot; onmouseover=&quot;showTip(event, 'fs11', 134)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 135)&quot; onmouseover=&quot;showTip(event, 'fs12', 135)&quot; class=&quot;i&quot;&gt;ParamArray&lt;/span&gt;&amp;gt;] &lt;span class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 136)&quot; onmouseover=&quot;showTip(event, 'fs14', 136)&quot; class=&quot;i&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 137)&quot; onmouseover=&quot;showTip(event, 'fs25', 137)&quot; class=&quot;i&quot;&gt;collect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs14', 138)&quot; onmouseover=&quot;showTip(event, 'fs14', 138)&quot; class=&quot;i&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 139)&quot; onmouseover=&quot;showTip(event, 'fs26', 139)&quot; class=&quot;i&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;amount&lt;/span&gt;) &lt;span class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The idea is that you can pass a variable amount of elements, and the first argument
describes how often every element gets repeated.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 140)&quot; onmouseover=&quot;showTip(event, 'fs9', 140)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 141)&quot; onmouseover=&quot;showTip(event, 'fs48', 141)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)      &lt;span class=&quot;c&quot;&gt;// [|1; 1; 1; 2; 2; 2; 3; 3; 3|]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 142)&quot; onmouseover=&quot;showTip(event, 'fs9', 142)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 143)&quot; onmouseover=&quot;showTip(event, 'fs48', 143)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, [|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]) &lt;span class=&quot;c&quot;&gt;// [|1; 1; 1; 2; 2; 2; 3; 3; 3|]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 144)&quot; onmouseover=&quot;showTip(event, 'fs9', 144)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 145)&quot; onmouseover=&quot;showTip(event, 'fs48', 145)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;])   &lt;span class=&quot;c&quot;&gt;// [|[1; 2; 3]; [1; 2; 3]; [1; 2; 3]|]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So the first and second function calls are the same, but the third one is different.
It works with arrays but not with lists. By the way here we see how &lt;code&gt;ParamArray&lt;/code&gt;
could be implemented in F# from the beginning and still maintain consistency by
always expecting an &lt;code&gt;Array&lt;/code&gt; and disallowing the first notation.&lt;/p&gt;
&lt;p&gt;The Last reason why it might be a bad idea is because in F# everything is really
build around the concepts of currying. A tupled syntax like in &lt;code&gt;Util.replicate&lt;/code&gt;
means we always must pass all arguments. We cannot just partial apply
only the first argument and write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs30', 146)&quot; onmouseover=&quot;showTip(event, 'fs30', 146)&quot; class=&quot;i&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The reason why we want to write this is to allow a more sequence based approach.
As an example. We would want to write it like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// This doesn&amp;#39;t work&lt;/span&gt;
[|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 147)&quot; onmouseover=&quot;showTip(event, 'fs30', 147)&quot; class=&quot;i&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, in this small example you gain not much from this kind of piping-style.
But you usually want functions that work well with piping. It's important to notice
that piping doesn't work because we have the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator. Piping really works
because we have curried function that we can call without passing all arguments!&lt;/p&gt;
&lt;p&gt;Currying is the reason we can choose to write &lt;code&gt;func a b&lt;/code&gt; or &lt;code&gt;b |&amp;gt; func a&lt;/code&gt;.
With tupled-syntax we really lose this advantage, and we also must write
more parenthesis and commas.&lt;/p&gt;
&lt;h2&gt;The Alternative&lt;/h2&gt;
&lt;p&gt;So, instead of variable arguments, what should we do instead? We should just
expect a collection as an argument! If you expect &lt;code&gt;Seq&lt;/code&gt; then a user also can
pass an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;List&lt;/code&gt; as an argument.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 148)&quot; onmouseover=&quot;showTip(event, 'fs49', 148)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 149)&quot; onmouseover=&quot;showTip(event, 'fs50', 149)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 150)&quot; onmouseover=&quot;showTip(event, 'fs51', 150)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 151)&quot; onmouseover=&quot;showTip(event, 'fs52', 151)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 152)&quot; onmouseover=&quot;showTip(event, 'fs16', 152)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 153)&quot; onmouseover=&quot;showTip(event, 'fs50', 153)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 154)&quot; onmouseover=&quot;showTip(event, 'fs53', 154)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 155)&quot; onmouseover=&quot;showTip(event, 'fs23', 155)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 156)&quot; onmouseover=&quot;showTip(event, 'fs54', 156)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 157)&quot; onmouseover=&quot;showTip(event, 'fs51', 157)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs55', 158)&quot; onmouseover=&quot;showTip(event, 'fs55', 158)&quot; class=&quot;f&quot;&gt;collect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 159)&quot; onmouseover=&quot;showTip(event, 'fs51', 159)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs56', 160)&quot; onmouseover=&quot;showTip(event, 'fs56', 160)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 161)&quot; onmouseover=&quot;showTip(event, 'fs23', 161)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs54', 162)&quot; onmouseover=&quot;showTip(event, 'fs54', 162)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 163)&quot; onmouseover=&quot;showTip(event, 'fs57', 163)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs49', 164)&quot; onmouseover=&quot;showTip(event, 'fs49', 164)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 165)&quot; onmouseover=&quot;showTip(event, 'fs57', 165)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 166)&quot; onmouseover=&quot;showTip(event, 'fs49', 166)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]        &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 167)&quot; onmouseover=&quot;showTip(event, 'fs49', 167)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]      &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 168)&quot; onmouseover=&quot;showTip(event, 'fs49', 168)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs58', 169)&quot; onmouseover=&quot;showTip(event, 'fs58', 169)&quot; class=&quot;i&quot;&gt;seq&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;}) &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs53', 170)&quot; onmouseover=&quot;showTip(event, 'fs53', 170)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 171)&quot; onmouseover=&quot;showTip(event, 'fs57', 171)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs53', 172)&quot; onmouseover=&quot;showTip(event, 'fs53', 172)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]        &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs53', 173)&quot; onmouseover=&quot;showTip(event, 'fs53', 173)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]      &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs53', 174)&quot; onmouseover=&quot;showTip(event, 'fs53', 174)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs58', 175)&quot; onmouseover=&quot;showTip(event, 'fs58', 175)&quot; class=&quot;i&quot;&gt;seq&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;}) &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Instead of variable arguments you should just expect a &lt;code&gt;Seq&lt;/code&gt; as an argument
to a function. It's very easy to create &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; in F# and you can
directly inline those creations with a function call. You don't get problems
if you already have a collection. With currying you can use functions in a
piping-style and you can use partial application.&lt;/p&gt;
&lt;p&gt;But more important, its easy to see that arguments are variable because you
pass a &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Seq&lt;/code&gt; as an argument. My recommendation is just
simply: &lt;strong&gt;Avoid functions with variable arguments.&lt;/strong&gt;&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val funcC : a:&amp;#39;a -&amp;gt; b:&amp;#39;b -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeModule.funcC&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val a : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val b : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val funcT : a:&amp;#39;a * b:&amp;#39;b -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeModule.funcT&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;module SomeModule&lt;br /&gt;&lt;br /&gt;from variablearguments&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val args : obj * obj&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.args&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;Multiple items&lt;br /&gt;type SomeClass =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; SomeClass&lt;br /&gt;&amp;#160;&amp;#160;static member max : [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeClass&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; SomeClass&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;Multiple items&lt;br /&gt;type Util =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Util&lt;br /&gt;&amp;#160;&amp;#160;static member max : [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;c [] -&amp;gt; &amp;#39;c (requires comparison)&lt;br /&gt;&amp;#160;&amp;#160;static member max4 : a:&amp;#39;b * b:&amp;#39;b * c:&amp;#39;b * d:&amp;#39;b -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&amp;#160;&amp;#160;static member replicate : amount:int * [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a []&lt;br /&gt;&lt;br /&gt;Full name: Main.Util&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; Util&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;static member Util.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;c [] -&amp;gt; &amp;#39;c (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.Util.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;Multiple items&lt;br /&gt;type ParamArrayAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; ParamArrayAttribute&lt;br /&gt;&lt;br /&gt;Full name: System.ParamArrayAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.ParamArrayAttribute() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val xs : &amp;#39;c [] (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;module Array&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; array:&amp;#39;T [] -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;static member Util.max4 : a:&amp;#39;b * b:&amp;#39;b * c:&amp;#39;b * d:&amp;#39;b -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.Util.max4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val a : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val b : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val c : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val d : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;static member Util.replicate : amount:int * [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a []&lt;br /&gt;&lt;br /&gt;Full name: Main.Util.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val amount : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val xs : &amp;#39;a []&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val collect : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U []) -&amp;gt; array:&amp;#39;T [] -&amp;gt; &amp;#39;U []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.collect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val replicate : count:int -&amp;gt; initial:&amp;#39;T -&amp;gt; &amp;#39;T []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;static member SomeClass.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeClass.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val xs : &amp;#39;a [] (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;static member Util.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;c [] -&amp;gt; &amp;#39;c (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;Multiple items&lt;br /&gt;type Util =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Util&lt;br /&gt;&amp;#160;&amp;#160;static member max : [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;b [] -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&amp;#160;&amp;#160;static member max4 : a:&amp;#39;a * b:&amp;#39;a * c:&amp;#39;a * d:&amp;#39;a -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.Util&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; Util&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;static member Util.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;b [] -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.Util.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val xs : &amp;#39;b [] (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;static member Util.max4 : a:&amp;#39;a * b:&amp;#39;a * c:&amp;#39;a * d:&amp;#39;a -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.Util.max4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val a : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val b : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val c : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val d : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val nums : int * int * int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.nums&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;static member Util.max4 : a:&amp;#39;b * b:&amp;#39;b * c:&amp;#39;b * d:&amp;#39;b -&amp;gt; &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;Multiple items&lt;br /&gt;type ClassAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; ClassAttribute&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ClassAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; ClassAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;Multiple items&lt;br /&gt;val list : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;Multiple items&lt;br /&gt;val array : int []&lt;br /&gt;&lt;br /&gt;Full name: Main.array&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T array = &amp;#39;T []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.array&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val ofList : list:&amp;#39;T list -&amp;gt; &amp;#39;T []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.ofList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;static member Util.replicate : amount:int * [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a []&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val max : xs:seq&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val xs : seq&amp;lt;&amp;#39;a&amp;gt; (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;module Seq&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val replicate : amount:int -&amp;gt; xs:seq&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val xs : seq&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val collect : mapping:(&amp;#39;T -&amp;gt; #seq&amp;lt;&amp;#39;U&amp;gt;) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;U&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.collect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val replicate : count:int -&amp;gt; initial:&amp;#39;T -&amp;gt; seq&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val numbers : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;Multiple items&lt;br /&gt;val seq : sequence:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.seq&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type seq&amp;lt;&amp;#39;T&amp;gt; = System.Collections.Generic.IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.seq&amp;lt;_&amp;gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Mutability vs. Immutability: Valid objects</title>
   <link href="https://sidburn.github.io/blog/2017/02/27/mutability-vs-immutability-validation"/>
   <updated>2017-02-27T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2017/02/27/mutability-vs-immutability-validation</id>
   <content type="html">&lt;p&gt;I already wrote &lt;a href=&quot;/blog/2016/03/14/immutability-and-pure-functions&quot;&gt;an article that explains immutability&lt;/a&gt;,
but one thing I hand-waved was the benefits of immutability and why you should
program with immutable values.&lt;/p&gt;
&lt;p&gt;In this article I talk about those benefits by trying to maintaining valid
objects at all time and show how we can achieve it with mutability and
immutability.&lt;/p&gt;
&lt;p&gt;One question might be why I'm not just showing the immutable part. I could do
this, but the problem I see is that it isn't so obvious how hard the mutable
part really is.&lt;/p&gt;
&lt;p&gt;Because of this, first I show all the things you have to keep in mind if you work
with mutability. Then we see how immutability helps us.&lt;/p&gt;
&lt;h2&gt;About this article&lt;/h2&gt;
&lt;p&gt;Throughout this article I will use C# and F#. I use C# for the mutable examples
and F# for the immutable example. There are multiple reasons for this decision:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
Mutability is best handled by classes and C# is built around that concepts
and everything by default is mutable.
&lt;/li&gt;
&lt;li&gt;
Immutability is best handled by immutable data-types and functions that
operate on them. In F# everything is immutable by default.
&lt;/li&gt;
&lt;li&gt;
If you are new to F#, probably this article can help a little bit if
you see how C# code translates to F#.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout this article I use some words, and you should know my definition
of those words to avoid confusion:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: State, mutable objects or mutability is just used interchangeable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Object&lt;/strong&gt;: The word &lt;em&gt;object&lt;/em&gt; is not limited to OOP. In general it just means
&lt;strong&gt;a thing&lt;/strong&gt;. Also F# data-types like records, unions or tuples are just objects.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Function&lt;/strong&gt;: Anything that you somehow execute is a function. This includes
class constructors, methods, static methods, F# functions and so on.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Constructors&lt;/strong&gt;: A &lt;em&gt;constructor&lt;/em&gt; is any &lt;em&gt;function&lt;/em&gt; that creates a new
&lt;em&gt;object&lt;/em&gt; if you don't already have one.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With immutability a constructor might seems a little blurry because every function
returns a new object. The important detail is &lt;strong&gt;if you don't already have one&lt;/strong&gt;.
As an example &lt;code&gt;List.map&lt;/code&gt;, &lt;code&gt;List.filter&lt;/code&gt; or &lt;code&gt;List.fold&lt;/code&gt; are not considered as
constructors. All those functions already expect a List that they operator on.
If you don't already have a list, you cannot use those functions.&lt;/p&gt;
&lt;p&gt;In F# there are multiple ways to create a list, like the special List syntax
&lt;code&gt;[1;2;3]&lt;/code&gt; or the cons operator &lt;code&gt;1 :: 2&lt;/code&gt; or functions like &lt;code&gt;List.unfold&lt;/code&gt;. All
of those things create a list without that you need one beforehand and
thus are considered &lt;em&gt;constructors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This article is not a C# vs. F# or OO vs. FP comparison. You also can create
immutable object in C# and get the same benefits as in the F# examples. Or
you can create mutable classes in F# and get the same disadvantages as in
the C# examples.&lt;/p&gt;
&lt;h2&gt;Mutability: The MinMax example&lt;/h2&gt;
&lt;p&gt;We start with a really small and simple example. A &lt;code&gt;MinMax&lt;/code&gt; class that only has
the purpose to keep a &lt;em&gt;current&lt;/em&gt; value between a defined &lt;em&gt;minimum&lt;/em&gt; and &lt;em&gt;maximum&lt;/em&gt;.
A C# class could look like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;36: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;37: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;38: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;39: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; MinMax {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Minimum { get; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; set; }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Maximum { get; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; set; }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Current { get; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; set; }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; MinMax(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; minimum, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; maximum, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; current) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; minimum;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; maximum;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; current;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckMinMax();
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
    }

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; CheckMinMax() {
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum ) {
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;s&quot;&gt;&quot;Minimum greater than Maximum&quot;&lt;/span&gt;);
        }
    }

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; CheckCurrent() {
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum ) {
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum;
        }
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum ) {
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum;
        }
    }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; amount) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; amount;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
    }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Subtract(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; amount) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; amount;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We start by only providing methods to change the &lt;em&gt;current&lt;/em&gt; value. When we
look closer we also could define our &lt;code&gt;MinMax&lt;/code&gt; class as two distinct rules.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The minimum value must be smaller or equal to maximum. &lt;code&gt;CheckMinMax()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The current value must be between minimum and maximum. &lt;code&gt;CheckCurrent()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Often people argue that we don't need to re-check all rules, only those that
are somehow affected. As an example the &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt; functions
only call &lt;code&gt;CheckCurrent()&lt;/code&gt;. Obviously, we don't need to call &lt;code&gt;CheckMinMax()&lt;/code&gt;
if we don't change those values.&lt;/p&gt;
&lt;p&gt;While this is true, for more complex objects it can be hard to determine
what is affected and what's not. Imagine we add a &lt;code&gt;SetMaximum&lt;/code&gt; function to
mutate the maximum. Would it be enough to just call &lt;code&gt;CheckMinMax()&lt;/code&gt;
because only maximum changed?&lt;/p&gt;
&lt;p&gt;Well no, otherwise this code would create an invalid state:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; v &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; MinMax(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;80&lt;/span&gt;);
v.SetMaximum(&lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;);
&lt;span class=&quot;c&quot;&gt;// Minimum=0; Maximum=50; Current=80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In a very easy example like this it might be obvious that you must re-check
both rules and call &lt;code&gt;CheckMinMax()&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;CheckCurrent()&lt;/code&gt;. In a more complex
class determining what needs to be called can be a lot harder.&lt;/p&gt;
&lt;p&gt;As our goal is to always maintain valid objects, why not make up some rules like
a coding-standard that when we strictly follow it, we can be sure objects always
are valid?&lt;/p&gt;
&lt;p&gt;We just define our first rule as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First Rule: Always re-validate every rule to ensure the correctness of an object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a conclusion of the first rule we could create a single function like &lt;code&gt;IsValid()&lt;/code&gt;
instead of multiple functions like &lt;code&gt;CheckMinMax()&lt;/code&gt; and &lt;code&gt;CheckCurrent()&lt;/code&gt;. But
in this example, lets just call both. Following our rule, now imagine we
implement &lt;code&gt;SetMaximum()&lt;/code&gt; in this way:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; SetMaximum(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; max) {
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; max;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckMinMax();
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; Is this implementation correct, or not? What is the state of &lt;code&gt;v&lt;/code&gt; at the end of
this code example?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; v &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; MinMax(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;80&lt;/span&gt;);

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; {
    v.SetMaximum(&lt;span class=&quot;n&quot;&gt;-100&lt;/span&gt;);
}
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; {}

v.Add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;SetMaximum&lt;/code&gt; is not correct and the state of &lt;code&gt;v&lt;/code&gt; will be:
&lt;code&gt;Minimum=0; Maximum=-100; Current=-100&lt;/code&gt;. Mutating a field before we know
a change is valid is a problem. Our next rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Second Rule: You always must validate before mutating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The interesting part is. Before we implemented &lt;code&gt;SetMaximum()&lt;/code&gt; this was not
a problem! &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt; both check after we mutate the &lt;code&gt;Current&lt;/code&gt;
value. So what is the difference? Why does it work with &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt;
but not with &lt;code&gt;SetMaximum&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;One reason is that we only called &lt;code&gt;CheckMinMax&lt;/code&gt; from the constructor. The
exception in &lt;code&gt;CheckMinMax&lt;/code&gt; aborts the whole creation of an object. But when
we already have an object and call it from a method that isn't enough.&lt;/p&gt;
&lt;p&gt;We can create another rule to describe that this is okay.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Third Rule: The second rule don't need to be followed in a constructor. In
a constructor you always are allowed to mutate and validate afterwards.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But this still doesn't explain why first mutating and the checking is no
problem in &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt;. With our current rules so far we are not
allowed to write &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt; in the way it is currently written.&lt;/p&gt;
&lt;p&gt;The reason why we can validate afterwards is because our &lt;code&gt;CheckCurrent()&lt;/code&gt; not
just validates and throws an error in the case there is something invalid.
It actually &lt;strong&gt;fixes&lt;/strong&gt; the problem.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Current&lt;/code&gt; gets bigger than &lt;code&gt;Maximum&lt;/code&gt;, and thus invalidates the object,
it fixes the problem by setting &lt;code&gt;Current&lt;/code&gt; to the &lt;code&gt;Maximum&lt;/code&gt; value. So whenever
we can &lt;strong&gt;fix&lt;/strong&gt; an invalid object and there is a way to turn it back into
a valid object, we actually are allowed to mutate and check afterwards.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fourth Rule: If there is a way to &lt;em&gt;fix&lt;/em&gt; an invalid object, you
are allowed to mutate and validate even outside of an constructor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We also could apply this kind of &lt;strong&gt;fixing&lt;/strong&gt; to &lt;code&gt;Minimum&lt;/code&gt; and &lt;code&gt;Maximum&lt;/code&gt;.
For example I could add the following logic to the &lt;code&gt;SetMinimum&lt;/code&gt; and
&lt;code&gt;SetMaximum&lt;/code&gt; methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If Minimum is bigger than Maximum, then set Maximum to the same value.&lt;/li&gt;
&lt;li&gt;If Maximum is smaller than Minimum, then set Minimum to the same value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every method (or say at least &quot;a lot&quot;) could somehow fix an object.
If a string is restricted to 80 characters you could reset a string to
the empty string, or maybe cut everything off after 80 characters. The
problem with logic like these are they are very hard to remember.&lt;/p&gt;
&lt;p&gt;There isn't a right or wrong approach. But depending which
approach you pick you have other rules you must follow. If you pick the approach
to throw/return errors then you should validate before mutating. If you fix
invalid objects you are allowed to mutate and call your &lt;strong&gt;fix&lt;/strong&gt; function afterwards.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
It might be true that we cannot label one as &lt;strong&gt;right&lt;/strong&gt; or &lt;strong&gt;wrong&lt;/strong&gt;,
nevertheless I suggest we should avoid a solution that fixes something automatically
most of the time as they are hard to remember. Returning an error, no matter how
you do it exactly (null / Options / Results / Exceptions), is most of the time
more flexible and easier to comprehend.
&lt;/div&gt;
&lt;p&gt;If we now decide for one way and follow the rules, is it then impossible
that an object will never be in an invalid state? The answer is no. But
we need another example to demonstrate this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MinMax&lt;/code&gt; class uses three mutable fields. While the fields itself are mutable
this is not true for the &lt;code&gt;int&lt;/code&gt; itself. An &lt;code&gt;int&lt;/code&gt; is an immutable type. So we also
must consider an example where the objects themselves are mutable.&lt;/p&gt;
&lt;p&gt;For the next example let's consider a &lt;code&gt;Product&lt;/code&gt; class with two fields &lt;code&gt;Name&lt;/code&gt;
and &lt;code&gt;Price&lt;/code&gt;. To make it easy, we just assume every &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Price&lt;/code&gt; is valid.
Instead we focus on a &lt;code&gt;ProductsPriceOver&lt;/code&gt; class. The purpose of this class
is to maintain a list of &lt;code&gt;Product&lt;/code&gt;s with only one rule. Every &lt;code&gt;Product&lt;/code&gt; must
be more expensive then a defined minimum.&lt;/p&gt;
&lt;p&gt;The final usage of those two classes could look like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;9.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;49.99&lt;/span&gt;);

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; ppo  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; ProductsPriceOver(&lt;span class=&quot;n&quot;&gt;10.00&lt;/span&gt;);
ppo.add(a);
ppo.add(b);
ppo.add(c);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;First we create an &lt;code&gt;ProductsPriceOver&lt;/code&gt; object that only accepts Products more expensive than &lt;code&gt;10.00&lt;/code&gt;.
When we implement &lt;code&gt;ProductsPriceOver&lt;/code&gt; it means the &lt;code&gt;add&lt;/code&gt; method must check the &lt;code&gt;Price&lt;/code&gt;
of every &lt;code&gt;Product&lt;/code&gt;. When the above code gets executed we assume only product &quot;B&quot;
and &quot;C&quot; are inside &lt;code&gt;ProductsPriceOver&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; If we assume &lt;code&gt;add&lt;/code&gt; is the only method &lt;code&gt;ProductsPriceOver&lt;/code&gt; will ever
implement. Will &lt;code&gt;ProductsPriceOver&lt;/code&gt; always be valid?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; No. We can invalidate &lt;code&gt;ProductsPriceOver&lt;/code&gt; by just changing the Price
of any Product directly.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;b.Price &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The problem is that we reference Product B directly in &lt;code&gt;ProductsPriceOver&lt;/code&gt; and we
also never get a notification if one of the products changes.&lt;/p&gt;
&lt;p&gt;There are two ways how we can fix that. We could choose only one so I consider
both as the fifth rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fifth Rule A: Mutable objects must have some kind of notification mechanism
once they changed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an example. We could add a &lt;code&gt;Changed&lt;/code&gt; event to every mutable object that gets
fired as soon an object changes.&lt;/p&gt;
&lt;p&gt;This way the &lt;code&gt;ppo.add(x)&lt;/code&gt; function can add an event handler to every product.
If a product changes it price, it re-checks if the new price is high enough
to still be part of the &lt;code&gt;ppo&lt;/code&gt; object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fifth Rule B: Mutable objects must have a &lt;code&gt;Copy&lt;/code&gt; function that can create
deep copies of an object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This technique is often named &lt;em&gt;defensive copies&lt;/em&gt;. When &lt;code&gt;ppo.add(x)&lt;/code&gt; is
called it doesn't save a reference to the same object. It creates a copy
of the whole object and only keeps the copy in its internal list.&lt;/p&gt;
&lt;p&gt;When we do this, even after we execute &lt;code&gt;b.Price = 5.00&lt;/code&gt; the product in &lt;code&gt;ppo&lt;/code&gt;
will still be &lt;code&gt;19.99&lt;/code&gt; instead of &lt;code&gt;5&lt;/code&gt;. This way every &lt;code&gt;ProductsPriceOver&lt;/code&gt; object
stay valid, but we need a way to update the price in &lt;code&gt;ProductsPriceOver&lt;/code&gt;.
We look at this problem more precisely later in the immutability part.&lt;/p&gt;
&lt;p&gt;In some way &lt;em&gt;defensive copies&lt;/em&gt; and &lt;em&gt;immutability&lt;/em&gt; are the same. Because
sharing a mutable object can cause problems, defensive copying creates
copies of objects and try to avoid sharing. With immutable objects
sharing is no problem, but we create copies of objects when we want to
change something.&lt;/p&gt;
&lt;p&gt;The difference is at what time we create copies. Defensive copies
creates copies before-hand, immutability creates copies only in the exact
moment something is changing.&lt;/p&gt;
&lt;p&gt;But after all, we are still not safe from invalid objects! Rule Five only
covers things we could describe as &lt;em&gt;Input&lt;/em&gt;. It only covers those cases
when our current object receives another object from outside of our
current object.&lt;/p&gt;
&lt;p&gt;Another problem that can occur is when we return mutable objects from
methods. Or in some sense when we return them as &lt;em&gt;Output&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Up so far The &lt;code&gt;ProductsPriceOver&lt;/code&gt; class only provides an &lt;code&gt;add&lt;/code&gt; method
and is pretty useless at this time. We assume that the &lt;code&gt;ProductsPriceOver&lt;/code&gt;
object has an internal mutable list to keep track of all its Products.
This list is usually created when we create an &lt;code&gt;ProductsPriceOver&lt;/code&gt; object
and is not passed from the outside.&lt;/p&gt;
&lt;p&gt;But when we return those internal mutable object, then our object can be
easily invalidated. Let's assume our &lt;code&gt;ppo&lt;/code&gt; has a &lt;code&gt;Products&lt;/code&gt; field that
directly returns the products as a &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt;. We could then write
something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;9.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;49.99&lt;/span&gt;);

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; ppo  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; ProductsPriceOver(&lt;span class=&quot;n&quot;&gt;10.00&lt;/span&gt;);
ppo.add(a);
ppo.add(b);
ppo.add(c);

&lt;span class=&quot;c&quot;&gt;// At this time ppo contains only &quot;B&quot; and &quot;C&quot;&lt;/span&gt;

List&amp;lt;Product&amp;gt; products &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ppo.Products
products.Add(a)

&lt;span class=&quot;c&quot;&gt;// ppo now contains &quot;A&quot;, &quot;B&quot; and &quot;C&quot;!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;By directly accessing the internal mutable array we bypass the &lt;code&gt;ppo.add()&lt;/code&gt; method
including its enforcement of the rules. We can solve this problem in the exact
same way we did with Rule Five.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sixth Rule A: Every mutable object we return must have a Changed event
that gets fired when an object was mutated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the internal mutable list has an event that gets fired whenever the list
somehow mutates. Then our &lt;code&gt;ProductsPriceOver&lt;/code&gt; class could add an event-handler
that re-checks if all elements inside the list are valid.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sixth Rule B: Never return mutable objects directly. Return defensive
copies instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If &lt;code&gt;ppo.Products&lt;/code&gt; just returns a copy then the caller can manipulate
the returning list in any possible way, but it doesn't affect &lt;code&gt;ppo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But for the output case, there exists a third way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sixth Rule C: Don't allow access to internal mutable objects at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This rule is probably the most used one in practice. And in my opinion it
is the worst rule of all. This rule is so bad that in my opinion most problems
of OO programming are connected to this idea. This rule alone deserves a
whole article on its own to describe its evilness. Yes, I'm serious and this
is not a joke!&lt;/p&gt;
&lt;p&gt;Currently I left it to he reader to figure out how many implications this has,
otherwise this article will get too long. You can start with the question:
&lt;em&gt;When you cannot access the &lt;code&gt;Products&lt;/code&gt; list of an &lt;code&gt;ProductsPriceOver&lt;/code&gt; object.
How do you implement new functionality?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we have Rule Five and Six, lets talk about these. Actually you cannot
freely decide if you either use events or defensive copies. Events are
&lt;em&gt;reactive&lt;/em&gt;. They get fired &lt;em&gt;after&lt;/em&gt; a mutation happened. So you only can use
events if there is a way to fix an object after it became invalid.&lt;/p&gt;
&lt;p&gt;If there is no way to fix an invalid object, you must use defensive copies!
This is not really a rule you must follow, more a reminder which
previously rule you must choose. But because of its important I still
consider it as a new rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seventh Rule: Events can only be used if there is always a way to fix
an invalid object. If there is no way to fix an invalid object, use
defensive copies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Straight away, here is my last rule without much explanation as
it should be self-explanatory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eighth Rule: If your mutable objects are accessed by multiple threads
(mutable shared state). You also must add synchronization primitives
to avoid race conditions that can bring an object into an invalid
state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And here is a bonus rule for the eighth rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bonus Rule: Just because every method of an object has synchronization
primitives doesn't mean it is thread-safe. Because of this, you probably
want to ignore Rule Eight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also this is worth its own article I will write about in the near future.&lt;/p&gt;
&lt;p&gt;Let's get an overview of all rules we have to follow so we can be sure state
will always be valid.&lt;/p&gt;
&lt;h2&gt;All Rules to ensure a valid State&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;First Rule:&lt;/strong&gt; Always re-validate every rule to ensure the correctness of an object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Second Rule:&lt;/strong&gt; You always must validate before mutating.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Third Rule:&lt;/strong&gt; The second rule don't need to be followed in a constructor. In
a constructor you always are allowed to mutate and validate afterwards.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fourth Rule:&lt;/strong&gt; If there is a way to &lt;em&gt;fix&lt;/em&gt; an invalid object, you
are allowed to mutate and validate even outside of an constructor.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fifth Rule A:&lt;/strong&gt; Mutable objects must have some kind of notification mechanism
once they changed.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fifth Rule B:&lt;/strong&gt; Mutable objects must have a &lt;code&gt;Copy&lt;/code&gt; function that can create
deep copies of an object.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sixth Rule A:&lt;/strong&gt; Every mutable object we return must have a Changed event
that gets fired when an object was mutated.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sixth Rule B:&lt;/strong&gt; Never return mutable objects directly. Return defensive
copies instead.
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sixth Rule C:&lt;/strong&gt; Don't allow access to internal mutable objects at all.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Seventh Rule:&lt;/strong&gt; Events can only be used if there is always a way to fix
an invalid object. If there is no way to fix an invalid object, use
defensive copies.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Eighth Rule:&lt;/strong&gt; If your mutable objects are accessed by multiple threads
(mutable shared state). You also must add synchronization primitives
to avoid race conditions that can bring an object into an invalid
state.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonus Rule:&lt;/strong&gt; Just because every method of an object has synchronization
primitives doesn't mean it is thread-safe. Because of this, you probably
want to ignore Rule Eighth.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In fact, even now I'm not sure if I really covered everything! Besides
the amount of rules you should follow to ensure an object is always valid,
the problem is that nearly every rule either has an exception or special
requirements when you should/can use them.&lt;/p&gt;
&lt;p&gt;This overall makes mutability pretty hard. Now that we covered the mutability
part lets see how immutability helps us.&lt;/p&gt;
&lt;h2&gt;Designing with Immutability&lt;/h2&gt;
&lt;p&gt;Our MinMax class can be easily represented by a record in F#. Records in F#
are immutable by default and can group data together like classes do.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 100)&quot; onmouseover=&quot;showTip(event, 'fs24', 100)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs25', 101)&quot; onmouseover=&quot;showTip(event, 'fs25', 101)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 102)&quot; onmouseover=&quot;showTip(event, 'fs4', 102)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs26', 103)&quot; onmouseover=&quot;showTip(event, 'fs26', 103)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 104)&quot; onmouseover=&quot;showTip(event, 'fs4', 104)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs27', 105)&quot; onmouseover=&quot;showTip(event, 'fs27', 105)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 106)&quot; onmouseover=&quot;showTip(event, 'fs4', 106)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The problem is that up to this point we have no validation and can create a lot
of invalid objects like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 107)&quot; onmouseover=&quot;showTip(event, 'fs28', 107)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;}
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We solve that problem by creating a module and make the record constructor private.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 108)&quot; onmouseover=&quot;showTip(event, 'fs24', 108)&quot; class=&quot;i&quot;&gt;MinMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 109)&quot; onmouseover=&quot;showTip(event, 'fs4', 109)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 110)&quot; onmouseover=&quot;showTip(event, 'fs4', 110)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 111)&quot; onmouseover=&quot;showTip(event, 'fs4', 111)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we cannot create a &lt;code&gt;MinMax&lt;/code&gt; object outside of the &lt;code&gt;MinMax&lt;/code&gt; module. So we need at
least one constructor. Because we want to eliminate the ability to create invalid
&lt;code&gt;MinMax&lt;/code&gt; objects we also add any validation we want to this constructor. Our
final constructor &lt;code&gt;create&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 112)&quot; onmouseover=&quot;showTip(event, 'fs29', 112)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 113)&quot; onmouseover=&quot;showTip(event, 'fs12', 113)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 114)&quot; onmouseover=&quot;showTip(event, 'fs13', 114)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 115)&quot; onmouseover=&quot;showTip(event, 'fs14', 115)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 116)&quot; onmouseover=&quot;showTip(event, 'fs30', 116)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 117)&quot; onmouseover=&quot;showTip(event, 'fs12', 117)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 118)&quot; onmouseover=&quot;showTip(event, 'fs13', 118)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 119)&quot; onmouseover=&quot;showTip(event, 'fs14', 119)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 120)&quot; onmouseover=&quot;showTip(event, 'fs12', 120)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 121)&quot; onmouseover=&quot;showTip(event, 'fs13', 121)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 122)&quot; onmouseover=&quot;showTip(event, 'fs14', 122)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;}

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs12', 123)&quot; onmouseover=&quot;showTip(event, 'fs12', 123)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 124)&quot; onmouseover=&quot;showTip(event, 'fs13', 124)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 125)&quot; onmouseover=&quot;showTip(event, 'fs16', 125)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Minimum greater than Maximum&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 126)&quot; onmouseover=&quot;showTip(event, 'fs14', 126)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 127)&quot; onmouseover=&quot;showTip(event, 'fs13', 127)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 128)&quot; onmouseover=&quot;showTip(event, 'fs30', 128)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 129)&quot; onmouseover=&quot;showTip(event, 'fs12', 129)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 130)&quot; onmouseover=&quot;showTip(event, 'fs13', 130)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 131)&quot; onmouseover=&quot;showTip(event, 'fs13', 131)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 132)&quot; onmouseover=&quot;showTip(event, 'fs14', 132)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 133)&quot; onmouseover=&quot;showTip(event, 'fs12', 133)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 134)&quot; onmouseover=&quot;showTip(event, 'fs30', 134)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 135)&quot; onmouseover=&quot;showTip(event, 'fs12', 135)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 136)&quot; onmouseover=&quot;showTip(event, 'fs13', 136)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 137)&quot; onmouseover=&quot;showTip(event, 'fs12', 137)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 138)&quot; onmouseover=&quot;showTip(event, 'fs30', 138)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 139)&quot; onmouseover=&quot;showTip(event, 'fs12', 139)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 140)&quot; onmouseover=&quot;showTip(event, 'fs13', 140)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 141)&quot; onmouseover=&quot;showTip(event, 'fs14', 141)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I also create a small &lt;code&gt;show&lt;/code&gt; function that can display the content of a &lt;code&gt;MinMax&lt;/code&gt; object.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 142)&quot; onmouseover=&quot;showTip(event, 'fs31', 142)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 143)&quot; onmouseover=&quot;showTip(event, 'fs32', 143)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 144)&quot; onmouseover=&quot;showTip(event, 'fs18', 144)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; range &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 145)&quot; onmouseover=&quot;showTip(event, 'fs32', 145)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 146)&quot; onmouseover=&quot;showTip(event, 'fs27', 146)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 147)&quot; onmouseover=&quot;showTip(event, 'fs32', 147)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 148)&quot; onmouseover=&quot;showTip(event, 'fs25', 148)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 149)&quot; onmouseover=&quot;showTip(event, 'fs32', 149)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 150)&quot; onmouseover=&quot;showTip(event, 'fs26', 150)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Outside of the &lt;code&gt;MinMax&lt;/code&gt; module the only way to create a new &lt;code&gt;MinMax&lt;/code&gt; object is
by using the &lt;code&gt;MinMax.create&lt;/code&gt; constructor. As an example the previously invalid
state cannot be created anymore.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 151)&quot; onmouseover=&quot;showTip(event, 'fs33', 151)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 152)&quot; onmouseover=&quot;showTip(event, 'fs34', 152)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs33', 153)&quot; onmouseover=&quot;showTip(event, 'fs33', 153)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 154)&quot; onmouseover=&quot;showTip(event, 'fs35', 154)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 100 range 0/100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs33', 155)&quot; onmouseover=&quot;showTip(event, 'fs33', 155)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 156)&quot; onmouseover=&quot;showTip(event, 'fs35', 156)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;// Exception: Minimum greater than Maximum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Inside the module it is a little bit different. Every function still has access
to the record constructor, so there is a possibility of creating an invalid object.
This leads to the &lt;strong&gt;only&lt;/strong&gt; rule you will ever need with immutability!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Golden Rule: Create a constructor function with the name &lt;code&gt;create&lt;/code&gt; that contains
all rules and validation logic. Only use this function to create new
objects from now on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;subtract&lt;/code&gt; functions:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 157)&quot; onmouseover=&quot;showTip(event, 'fs36', 157)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 158)&quot; onmouseover=&quot;showTip(event, 'fs20', 158)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 159)&quot; onmouseover=&quot;showTip(event, 'fs32', 159)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 160)&quot; onmouseover=&quot;showTip(event, 'fs29', 160)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 161)&quot; onmouseover=&quot;showTip(event, 'fs32', 161)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 162)&quot; onmouseover=&quot;showTip(event, 'fs25', 162)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 163)&quot; onmouseover=&quot;showTip(event, 'fs32', 163)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 164)&quot; onmouseover=&quot;showTip(event, 'fs26', 164)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 165)&quot; onmouseover=&quot;showTip(event, 'fs32', 165)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 166)&quot; onmouseover=&quot;showTip(event, 'fs27', 166)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 167)&quot; onmouseover=&quot;showTip(event, 'fs20', 167)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 168)&quot; onmouseover=&quot;showTip(event, 'fs37', 168)&quot; class=&quot;f&quot;&gt;subtract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 169)&quot; onmouseover=&quot;showTip(event, 'fs20', 169)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 170)&quot; onmouseover=&quot;showTip(event, 'fs32', 170)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 171)&quot; onmouseover=&quot;showTip(event, 'fs29', 171)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 172)&quot; onmouseover=&quot;showTip(event, 'fs32', 172)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 173)&quot; onmouseover=&quot;showTip(event, 'fs25', 173)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 174)&quot; onmouseover=&quot;showTip(event, 'fs32', 174)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 175)&quot; onmouseover=&quot;showTip(event, 'fs26', 175)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 176)&quot; onmouseover=&quot;showTip(event, 'fs32', 176)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 177)&quot; onmouseover=&quot;showTip(event, 'fs27', 177)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 178)&quot; onmouseover=&quot;showTip(event, 'fs20', 178)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Consider that these functions don't contain any validation logic and
still work as intended. With mutability we had rules if we
need to validate or mutate first. Because we cannot mutate in the first
place we must create a new object and we do that by using the &lt;code&gt;create&lt;/code&gt;
function that contains all validation logic. We also can say, we are
falling into the pit of success.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 179)&quot; onmouseover=&quot;showTip(event, 'fs33', 179)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 180)&quot; onmouseover=&quot;showTip(event, 'fs35', 180)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 181)&quot; onmouseover=&quot;showTip(event, 'fs33', 181)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 182)&quot; onmouseover=&quot;showTip(event, 'fs38', 182)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 183)&quot; onmouseover=&quot;showTip(event, 'fs33', 183)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 184)&quot; onmouseover=&quot;showTip(event, 'fs34', 184)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100 range 0/100&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs33', 185)&quot; onmouseover=&quot;showTip(event, 'fs33', 185)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 186)&quot; onmouseover=&quot;showTip(event, 'fs35', 186)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 187)&quot; onmouseover=&quot;showTip(event, 'fs33', 187)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 188)&quot; onmouseover=&quot;showTip(event, 'fs39', 188)&quot; class=&quot;f&quot;&gt;subtract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 189)&quot; onmouseover=&quot;showTip(event, 'fs33', 189)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 190)&quot; onmouseover=&quot;showTip(event, 'fs34', 190)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 0 range 0/100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because functions return a new &lt;code&gt;MinMax&lt;/code&gt; object we often end up with a fluid-interface.
The only thing you have to consider is that the &lt;code&gt;MinMax&lt;/code&gt; object should be
the last argument of a function.&lt;/p&gt;
&lt;p&gt;Next look at &lt;code&gt;setMinimum&lt;/code&gt; and &lt;code&gt;setMaximum&lt;/code&gt;. In our mutation version it throws
an exception, but it could leave an object in an invalid state if we first
mutated an object. Needless to say that we never get this problem with
immutability.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 191)&quot; onmouseover=&quot;showTip(event, 'fs40', 191)&quot; class=&quot;f&quot;&gt;setMaximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 192)&quot; onmouseover=&quot;showTip(event, 'fs13', 192)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 193)&quot; onmouseover=&quot;showTip(event, 'fs32', 193)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 194)&quot; onmouseover=&quot;showTip(event, 'fs29', 194)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 195)&quot; onmouseover=&quot;showTip(event, 'fs32', 195)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 196)&quot; onmouseover=&quot;showTip(event, 'fs25', 196)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 197)&quot; onmouseover=&quot;showTip(event, 'fs13', 197)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 198)&quot; onmouseover=&quot;showTip(event, 'fs32', 198)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 199)&quot; onmouseover=&quot;showTip(event, 'fs27', 199)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 200)&quot; onmouseover=&quot;showTip(event, 'fs41', 200)&quot; class=&quot;f&quot;&gt;setMinimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 201)&quot; onmouseover=&quot;showTip(event, 'fs12', 201)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 202)&quot; onmouseover=&quot;showTip(event, 'fs32', 202)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 203)&quot; onmouseover=&quot;showTip(event, 'fs29', 203)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 204)&quot; onmouseover=&quot;showTip(event, 'fs12', 204)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 205)&quot; onmouseover=&quot;showTip(event, 'fs32', 205)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 206)&quot; onmouseover=&quot;showTip(event, 'fs26', 206)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 207)&quot; onmouseover=&quot;showTip(event, 'fs32', 207)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 208)&quot; onmouseover=&quot;showTip(event, 'fs27', 208)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, everything always stays valid:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 209)&quot; onmouseover=&quot;showTip(event, 'fs42', 209)&quot; class=&quot;i&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 210)&quot; onmouseover=&quot;showTip(event, 'fs33', 210)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 211)&quot; onmouseover=&quot;showTip(event, 'fs35', 211)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;80&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 212)&quot; onmouseover=&quot;showTip(event, 'fs43', 212)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 213)&quot; onmouseover=&quot;showTip(event, 'fs33', 213)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs44', 214)&quot; onmouseover=&quot;showTip(event, 'fs44', 214)&quot; class=&quot;f&quot;&gt;setMaximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 215)&quot; onmouseover=&quot;showTip(event, 'fs42', 215)&quot; class=&quot;i&quot;&gt;v&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs45', 216)&quot; onmouseover=&quot;showTip(event, 'fs45', 216)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs33', 217)&quot; onmouseover=&quot;showTip(event, 'fs33', 217)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 218)&quot; onmouseover=&quot;showTip(event, 'fs34', 218)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 219)&quot; onmouseover=&quot;showTip(event, 'fs43', 219)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; ()

&lt;span onmouseout=&quot;hideTip(event, 'fs33', 220)&quot; onmouseover=&quot;showTip(event, 'fs33', 220)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 221)&quot; onmouseover=&quot;showTip(event, 'fs34', 221)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 222)&quot; onmouseover=&quot;showTip(event, 'fs42', 222)&quot; class=&quot;i&quot;&gt;v&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 80 range 0/100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This should be obvious as &lt;code&gt;MinMax.setMaximum&lt;/code&gt; returns a new object and don't
mutate an object. &lt;code&gt;v&lt;/code&gt; never can become invalid.&lt;/p&gt;
&lt;p&gt;You can choose if you want to &lt;em&gt;fix&lt;/em&gt; or throw an error exactly like we did
with the mutable version. But there are no special rules you must consider
how something can become invalid. Nevertheless it still might be a good idea
to avoid &lt;em&gt;fixing&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
I only use exceptions to throw errors. In functional language this is usually
not considered good. Instead of throwing an exception I also could return an
&lt;strong&gt;Option&lt;/strong&gt; or a &lt;strong&gt;Result-type&lt;/strong&gt;. Functional error
handling is yet another topic on its own. But for this topic, none of those
matter as long the validation stays inside the constructor.
&lt;/div&gt;
&lt;p&gt;Up to this point I already covered the whole &lt;code&gt;MinMax&lt;/code&gt; example, and covered
everything up to the Fifth Rule in our mutation based code. Here is the full
code for our &lt;code&gt;MinMax&lt;/code&gt; module.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MinMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 6)&quot; onmouseover=&quot;showTip(event, 'fs4', 6)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs6', 7)&quot; onmouseover=&quot;showTip(event, 'fs6', 7)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 8)&quot; onmouseover=&quot;showTip(event, 'fs4', 8)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    }
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;f&quot;&gt;minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 10)&quot; onmouseover=&quot;showTip(event, 'fs8', 10)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 11)&quot; onmouseover=&quot;showTip(event, 'fs8', 11)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 12)&quot; onmouseover=&quot;showTip(event, 'fs3', 12)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 13)&quot; onmouseover=&quot;showTip(event, 'fs9', 13)&quot; class=&quot;f&quot;&gt;maximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 14)&quot; onmouseover=&quot;showTip(event, 'fs8', 14)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 15)&quot; onmouseover=&quot;showTip(event, 'fs8', 15)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 16)&quot; onmouseover=&quot;showTip(event, 'fs5', 16)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 17)&quot; onmouseover=&quot;showTip(event, 'fs10', 17)&quot; class=&quot;f&quot;&gt;current&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 19)&quot; onmouseover=&quot;showTip(event, 'fs8', 19)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 20)&quot; onmouseover=&quot;showTip(event, 'fs6', 20)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 21)&quot; onmouseover=&quot;showTip(event, 'fs11', 21)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 22)&quot; onmouseover=&quot;showTip(event, 'fs12', 22)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 23)&quot; onmouseover=&quot;showTip(event, 'fs13', 23)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 24)&quot; onmouseover=&quot;showTip(event, 'fs14', 24)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 25)&quot; onmouseover=&quot;showTip(event, 'fs15', 25)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 26)&quot; onmouseover=&quot;showTip(event, 'fs12', 26)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 27)&quot; onmouseover=&quot;showTip(event, 'fs13', 27)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 28)&quot; onmouseover=&quot;showTip(event, 'fs14', 28)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 29)&quot; onmouseover=&quot;showTip(event, 'fs12', 29)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 30)&quot; onmouseover=&quot;showTip(event, 'fs13', 30)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;}

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs12', 32)&quot; onmouseover=&quot;showTip(event, 'fs12', 32)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 33)&quot; onmouseover=&quot;showTip(event, 'fs13', 33)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 34)&quot; onmouseover=&quot;showTip(event, 'fs16', 34)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Minimum greater than Maximum&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 35)&quot; onmouseover=&quot;showTip(event, 'fs14', 35)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 36)&quot; onmouseover=&quot;showTip(event, 'fs13', 36)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 37)&quot; onmouseover=&quot;showTip(event, 'fs15', 37)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 38)&quot; onmouseover=&quot;showTip(event, 'fs12', 38)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 39)&quot; onmouseover=&quot;showTip(event, 'fs13', 39)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 40)&quot; onmouseover=&quot;showTip(event, 'fs13', 40)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 42)&quot; onmouseover=&quot;showTip(event, 'fs12', 42)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 44)&quot; onmouseover=&quot;showTip(event, 'fs12', 44)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 45)&quot; onmouseover=&quot;showTip(event, 'fs13', 45)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 46)&quot; onmouseover=&quot;showTip(event, 'fs12', 46)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 47)&quot; onmouseover=&quot;showTip(event, 'fs15', 47)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 48)&quot; onmouseover=&quot;showTip(event, 'fs12', 48)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 49)&quot; onmouseover=&quot;showTip(event, 'fs13', 49)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 50)&quot; onmouseover=&quot;showTip(event, 'fs14', 50)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 51)&quot; onmouseover=&quot;showTip(event, 'fs17', 51)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 52)&quot; onmouseover=&quot;showTip(event, 'fs8', 52)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 53)&quot; onmouseover=&quot;showTip(event, 'fs18', 53)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; range &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 54)&quot; onmouseover=&quot;showTip(event, 'fs8', 54)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 55)&quot; onmouseover=&quot;showTip(event, 'fs6', 55)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 56)&quot; onmouseover=&quot;showTip(event, 'fs8', 56)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 57)&quot; onmouseover=&quot;showTip(event, 'fs3', 57)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 58)&quot; onmouseover=&quot;showTip(event, 'fs8', 58)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 59)&quot; onmouseover=&quot;showTip(event, 'fs5', 59)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 60)&quot; onmouseover=&quot;showTip(event, 'fs19', 60)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 61)&quot; onmouseover=&quot;showTip(event, 'fs20', 61)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 62)&quot; onmouseover=&quot;showTip(event, 'fs8', 62)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 63)&quot; onmouseover=&quot;showTip(event, 'fs11', 63)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 64)&quot; onmouseover=&quot;showTip(event, 'fs8', 64)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 65)&quot; onmouseover=&quot;showTip(event, 'fs3', 65)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 66)&quot; onmouseover=&quot;showTip(event, 'fs8', 66)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 67)&quot; onmouseover=&quot;showTip(event, 'fs5', 67)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 68)&quot; onmouseover=&quot;showTip(event, 'fs8', 68)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 69)&quot; onmouseover=&quot;showTip(event, 'fs6', 69)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 70)&quot; onmouseover=&quot;showTip(event, 'fs20', 70)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 71)&quot; onmouseover=&quot;showTip(event, 'fs21', 71)&quot; class=&quot;f&quot;&gt;subtract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 72)&quot; onmouseover=&quot;showTip(event, 'fs20', 72)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 73)&quot; onmouseover=&quot;showTip(event, 'fs8', 73)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 74)&quot; onmouseover=&quot;showTip(event, 'fs11', 74)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 75)&quot; onmouseover=&quot;showTip(event, 'fs8', 75)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 76)&quot; onmouseover=&quot;showTip(event, 'fs3', 76)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 77)&quot; onmouseover=&quot;showTip(event, 'fs8', 77)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 78)&quot; onmouseover=&quot;showTip(event, 'fs5', 78)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 79)&quot; onmouseover=&quot;showTip(event, 'fs8', 79)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 80)&quot; onmouseover=&quot;showTip(event, 'fs6', 80)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 81)&quot; onmouseover=&quot;showTip(event, 'fs20', 81)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 82)&quot; onmouseover=&quot;showTip(event, 'fs22', 82)&quot; class=&quot;f&quot;&gt;setMaximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 83)&quot; onmouseover=&quot;showTip(event, 'fs13', 83)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 84)&quot; onmouseover=&quot;showTip(event, 'fs8', 84)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 85)&quot; onmouseover=&quot;showTip(event, 'fs11', 85)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 86)&quot; onmouseover=&quot;showTip(event, 'fs8', 86)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 87)&quot; onmouseover=&quot;showTip(event, 'fs3', 87)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 88)&quot; onmouseover=&quot;showTip(event, 'fs13', 88)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 89)&quot; onmouseover=&quot;showTip(event, 'fs8', 89)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 90)&quot; onmouseover=&quot;showTip(event, 'fs6', 90)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 91)&quot; onmouseover=&quot;showTip(event, 'fs23', 91)&quot; class=&quot;f&quot;&gt;setMinimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 92)&quot; onmouseover=&quot;showTip(event, 'fs12', 92)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 93)&quot; onmouseover=&quot;showTip(event, 'fs8', 93)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 94)&quot; onmouseover=&quot;showTip(event, 'fs11', 94)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 95)&quot; onmouseover=&quot;showTip(event, 'fs12', 95)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 96)&quot; onmouseover=&quot;showTip(event, 'fs8', 96)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 97)&quot; onmouseover=&quot;showTip(event, 'fs5', 97)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 98)&quot; onmouseover=&quot;showTip(event, 'fs8', 98)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 99)&quot; onmouseover=&quot;showTip(event, 'fs6', 99)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the mutation based code I introduced the &lt;code&gt;ProductsPriceOver&lt;/code&gt; example
and we discussed what happens if mutable objects are either passed
or returned from an object.&lt;/p&gt;
&lt;p&gt;We had two solution for this problem. We either fired events as soon
something was changed or we created defensive copies. Using events
doesn't make any sense with immutable objects. As they cannot change those
events will never be fired.&lt;/p&gt;
&lt;p&gt;And as discussed previously the idea of creating defensive copies is very
similar to immutability. In fact it created another problem that if we mutated
a product it didn't affected the same product in a &lt;code&gt;ProductsPriceOver&lt;/code&gt; object.
So lets address this problem.&lt;/p&gt;
&lt;p&gt;First, we create an immutable &lt;code&gt;Product&lt;/code&gt;. It contains no validation and I also
could just used the Record definition (3 lines of code). But I anyway decided
to create another module with functions so you could get an idea how to convert
a similar mutable &lt;code&gt;Product&lt;/code&gt; class to an immutable &lt;code&gt;Product&lt;/code&gt; module.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 223)&quot; onmouseover=&quot;showTip(event, 'fs46', 223)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs47', 224)&quot; onmouseover=&quot;showTip(event, 'fs47', 224)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs48', 225)&quot; onmouseover=&quot;showTip(event, 'fs48', 225)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 226)&quot; onmouseover=&quot;showTip(event, 'fs49', 226)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 227)&quot; onmouseover=&quot;showTip(event, 'fs50', 227)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
    }
    &lt;span class=&quot;c&quot;&gt;// Constructor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 228)&quot; onmouseover=&quot;showTip(event, 'fs51', 228)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 229)&quot; onmouseover=&quot;showTip(event, 'fs52', 229)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 230)&quot; onmouseover=&quot;showTip(event, 'fs53', 230)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        {&lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 231)&quot; onmouseover=&quot;showTip(event, 'fs52', 231)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs53', 232)&quot; onmouseover=&quot;showTip(event, 'fs53', 232)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;}

    &lt;span class=&quot;c&quot;&gt;// Getters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 233)&quot; onmouseover=&quot;showTip(event, 'fs54', 233)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 234)&quot; onmouseover=&quot;showTip(event, 'fs8', 234)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 235)&quot; onmouseover=&quot;showTip(event, 'fs8', 235)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 236)&quot; onmouseover=&quot;showTip(event, 'fs47', 236)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 237)&quot; onmouseover=&quot;showTip(event, 'fs55', 237)&quot; class=&quot;f&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 238)&quot; onmouseover=&quot;showTip(event, 'fs8', 238)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 239)&quot; onmouseover=&quot;showTip(event, 'fs8', 239)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 240)&quot; onmouseover=&quot;showTip(event, 'fs49', 240)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Setter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 241)&quot; onmouseover=&quot;showTip(event, 'fs56', 241)&quot; class=&quot;f&quot;&gt;setName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 242)&quot; onmouseover=&quot;showTip(event, 'fs52', 242)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 243)&quot; onmouseover=&quot;showTip(event, 'fs8', 243)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 244)&quot; onmouseover=&quot;showTip(event, 'fs51', 244)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 245)&quot; onmouseover=&quot;showTip(event, 'fs52', 245)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 246)&quot; onmouseover=&quot;showTip(event, 'fs8', 246)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 247)&quot; onmouseover=&quot;showTip(event, 'fs49', 247)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 248)&quot; onmouseover=&quot;showTip(event, 'fs57', 248)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 249)&quot; onmouseover=&quot;showTip(event, 'fs53', 249)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 250)&quot; onmouseover=&quot;showTip(event, 'fs8', 250)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 251)&quot; onmouseover=&quot;showTip(event, 'fs51', 251)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 252)&quot; onmouseover=&quot;showTip(event, 'fs8', 252)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 253)&quot; onmouseover=&quot;showTip(event, 'fs47', 253)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 254)&quot; onmouseover=&quot;showTip(event, 'fs53', 254)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// other functions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 255)&quot; onmouseover=&quot;showTip(event, 'fs58', 255)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 256)&quot; onmouseover=&quot;showTip(event, 'fs59', 256)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 257)&quot; onmouseover=&quot;showTip(event, 'fs18', 257)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; -- &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%.2f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 258)&quot; onmouseover=&quot;showTip(event, 'fs59', 258)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 259)&quot; onmouseover=&quot;showTip(event, 'fs47', 259)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 260)&quot; onmouseover=&quot;showTip(event, 'fs59', 260)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 261)&quot; onmouseover=&quot;showTip(event, 'fs49', 261)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Second, we create our &lt;code&gt;ProductsPriceOver&lt;/code&gt; type. This time I just show
the whole code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 262)&quot; onmouseover=&quot;showTip(event, 'fs60', 262)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 263)&quot; onmouseover=&quot;showTip(event, 'fs49', 263)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs50', 264)&quot; onmouseover=&quot;showTip(event, 'fs50', 264)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs61', 265)&quot; onmouseover=&quot;showTip(event, 'fs61', 265)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 266)&quot; onmouseover=&quot;showTip(event, 'fs62', 266)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 267)&quot; onmouseover=&quot;showTip(event, 'fs46', 267)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 268)&quot; onmouseover=&quot;showTip(event, 'fs63', 268)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
    }
    &lt;span class=&quot;c&quot;&gt;// Constructor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 269)&quot; onmouseover=&quot;showTip(event, 'fs64', 269)&quot; class=&quot;f&quot;&gt;priceOver&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 270)&quot; onmouseover=&quot;showTip(event, 'fs65', 270)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 271)&quot; onmouseover=&quot;showTip(event, 'fs66', 271)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 272)&quot; onmouseover=&quot;showTip(event, 'fs62', 272)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 273)&quot; onmouseover=&quot;showTip(event, 'fs67', 273)&quot; class=&quot;f&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 274)&quot; onmouseover=&quot;showTip(event, 'fs66', 274)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 275)&quot; onmouseover=&quot;showTip(event, 'fs65', 275)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 276)&quot; onmouseover=&quot;showTip(event, 'fs68', 276)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 277)&quot; onmouseover=&quot;showTip(event, 'fs53', 277)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 278)&quot; onmouseover=&quot;showTip(event, 'fs69', 278)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 279)&quot; onmouseover=&quot;showTip(event, 'fs69', 279)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 280)&quot; onmouseover=&quot;showTip(event, 'fs70', 280)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs71', 281)&quot; onmouseover=&quot;showTip(event, 'fs71', 281)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 282)&quot; onmouseover=&quot;showTip(event, 'fs64', 282)&quot; class=&quot;f&quot;&gt;priceOver&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 283)&quot; onmouseover=&quot;showTip(event, 'fs53', 283)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs69', 284)&quot; onmouseover=&quot;showTip(event, 'fs69', 284)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt;
        {&lt;span class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs53', 285)&quot; onmouseover=&quot;showTip(event, 'fs53', 285)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs69', 286)&quot; onmouseover=&quot;showTip(event, 'fs69', 286)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt;}

    &lt;span class=&quot;c&quot;&gt;// Getter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 287)&quot; onmouseover=&quot;showTip(event, 'fs72', 287)&quot; class=&quot;f&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 288)&quot; onmouseover=&quot;showTip(event, 'fs73', 288)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 289)&quot; onmouseover=&quot;showTip(event, 'fs73', 289)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 290)&quot; onmouseover=&quot;showTip(event, 'fs49', 290)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 291)&quot; onmouseover=&quot;showTip(event, 'fs74', 291)&quot; class=&quot;f&quot;&gt;products&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 292)&quot; onmouseover=&quot;showTip(event, 'fs73', 292)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 293)&quot; onmouseover=&quot;showTip(event, 'fs73', 293)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 294)&quot; onmouseover=&quot;showTip(event, 'fs61', 294)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Setter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 295)&quot; onmouseover=&quot;showTip(event, 'fs75', 295)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 296)&quot; onmouseover=&quot;showTip(event, 'fs53', 296)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 297)&quot; onmouseover=&quot;showTip(event, 'fs73', 297)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 298)&quot; onmouseover=&quot;showTip(event, 'fs68', 298)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 299)&quot; onmouseover=&quot;showTip(event, 'fs53', 299)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 300)&quot; onmouseover=&quot;showTip(event, 'fs73', 300)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 301)&quot; onmouseover=&quot;showTip(event, 'fs61', 301)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 302)&quot; onmouseover=&quot;showTip(event, 'fs76', 302)&quot; class=&quot;f&quot;&gt;setProducts&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 303)&quot; onmouseover=&quot;showTip(event, 'fs69', 303)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 304)&quot; onmouseover=&quot;showTip(event, 'fs73', 304)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 305)&quot; onmouseover=&quot;showTip(event, 'fs68', 305)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 306)&quot; onmouseover=&quot;showTip(event, 'fs73', 306)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 307)&quot; onmouseover=&quot;showTip(event, 'fs49', 307)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 308)&quot; onmouseover=&quot;showTip(event, 'fs69', 308)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Other Functions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 309)&quot; onmouseover=&quot;showTip(event, 'fs77', 309)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 310)&quot; onmouseover=&quot;showTip(event, 'fs73', 310)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs18', 311)&quot; onmouseover=&quot;showTip(event, 'fs18', 311)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs70', 312)&quot; onmouseover=&quot;showTip(event, 'fs70', 312)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 313)&quot; onmouseover=&quot;showTip(event, 'fs78', 313)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 314)&quot; onmouseover=&quot;showTip(event, 'fs62', 314)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs79', 315)&quot; onmouseover=&quot;showTip(event, 'fs79', 315)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 316)&quot; onmouseover=&quot;showTip(event, 'fs73', 316)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 317)&quot; onmouseover=&quot;showTip(event, 'fs61', 317)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;)

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 318)&quot; onmouseover=&quot;showTip(event, 'fs80', 318)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 319)&quot; onmouseover=&quot;showTip(event, 'fs66', 319)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 320)&quot; onmouseover=&quot;showTip(event, 'fs73', 320)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs68', 321)&quot; onmouseover=&quot;showTip(event, 'fs68', 321)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 322)&quot; onmouseover=&quot;showTip(event, 'fs73', 322)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 323)&quot; onmouseover=&quot;showTip(event, 'fs49', 323)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 324)&quot; onmouseover=&quot;showTip(event, 'fs66', 324)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 325)&quot; onmouseover=&quot;showTip(event, 'fs73', 325)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 326)&quot; onmouseover=&quot;showTip(event, 'fs61', 326)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;)

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 327)&quot; onmouseover=&quot;showTip(event, 'fs81', 327)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 328)&quot; onmouseover=&quot;showTip(event, 'fs66', 328)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 329)&quot; onmouseover=&quot;showTip(event, 'fs73', 329)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 330)&quot; onmouseover=&quot;showTip(event, 'fs82', 330)&quot; class=&quot;f&quot;&gt;mapper&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 331)&quot; onmouseover=&quot;showTip(event, 'fs83', 331)&quot; class=&quot;i&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 332)&quot; onmouseover=&quot;showTip(event, 'fs62', 332)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs84', 333)&quot; onmouseover=&quot;showTip(event, 'fs84', 333)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 334)&quot; onmouseover=&quot;showTip(event, 'fs83', 334)&quot; class=&quot;i&quot;&gt;old&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 335)&quot; onmouseover=&quot;showTip(event, 'fs62', 335)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs84', 336)&quot; onmouseover=&quot;showTip(event, 'fs84', 336)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 337)&quot; onmouseover=&quot;showTip(event, 'fs66', 337)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;)
            &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 338)&quot; onmouseover=&quot;showTip(event, 'fs66', 338)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 339)&quot; onmouseover=&quot;showTip(event, 'fs83', 339)&quot; class=&quot;i&quot;&gt;old&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 340)&quot; onmouseover=&quot;showTip(event, 'fs85', 340)&quot; class=&quot;i&quot;&gt;updatedList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 341)&quot; onmouseover=&quot;showTip(event, 'fs70', 341)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 342)&quot; onmouseover=&quot;showTip(event, 'fs78', 342)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 343)&quot; onmouseover=&quot;showTip(event, 'fs82', 343)&quot; class=&quot;f&quot;&gt;mapper&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 344)&quot; onmouseover=&quot;showTip(event, 'fs73', 344)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 345)&quot; onmouseover=&quot;showTip(event, 'fs61', 345)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs68', 346)&quot; onmouseover=&quot;showTip(event, 'fs68', 346)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 347)&quot; onmouseover=&quot;showTip(event, 'fs73', 347)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 348)&quot; onmouseover=&quot;showTip(event, 'fs49', 348)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 349)&quot; onmouseover=&quot;showTip(event, 'fs85', 349)&quot; class=&quot;i&quot;&gt;updatedList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Here is a short summary of the stuff you already should now.&lt;/p&gt;
&lt;p&gt;Instead of a class we create a module. We put all private mutable fields
inside an immutable record. We make this record private. A constructor
function that we name &lt;code&gt;create&lt;/code&gt; has the purpose of creating a new object and
contains all validation. In this case it filters the list and ensures that only
products over a specified price will be saved in our object. The Getter and
Setter part are identical to what you know from OO. Because the record is private
we need getters so we can access the &lt;code&gt;Price&lt;/code&gt; and &lt;code&gt;Products&lt;/code&gt; outside of the module.
The setter just sets the value of &lt;code&gt;Price&lt;/code&gt; or &lt;code&gt;Products&lt;/code&gt; to a new value. But it does
it by creating new objects instead of mutating. The &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt;
functions are normal functions like &lt;code&gt;MinMax.show&lt;/code&gt;, &lt;code&gt;MinMax.add&lt;/code&gt; or
&lt;code&gt;MinMax.subtract&lt;/code&gt; with more logic.&lt;/p&gt;
&lt;p&gt;For a moment lets forget about the &lt;code&gt;update&lt;/code&gt; function. Lets see what we can
do with our &lt;code&gt;ProductsPriceOver&lt;/code&gt; module so far:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;36: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// returns a list of product names from a ProductsPriceOver object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 350)&quot; onmouseover=&quot;showTip(event, 'fs86', 350)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 351)&quot; onmouseover=&quot;showTip(event, 'fs87', 351)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs70', 352)&quot; onmouseover=&quot;showTip(event, 'fs70', 352)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 353)&quot; onmouseover=&quot;showTip(event, 'fs78', 353)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 354)&quot; onmouseover=&quot;showTip(event, 'fs62', 354)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs84', 355)&quot; onmouseover=&quot;showTip(event, 'fs84', 355)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs88', 356)&quot; onmouseover=&quot;showTip(event, 'fs88', 356)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs89', 357)&quot; onmouseover=&quot;showTip(event, 'fs89', 357)&quot; class=&quot;f&quot;&gt;products&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 358)&quot; onmouseover=&quot;showTip(event, 'fs87', 358)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// Our Products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 359)&quot; onmouseover=&quot;showTip(event, 'fs90', 359)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 360)&quot; onmouseover=&quot;showTip(event, 'fs62', 360)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 361)&quot; onmouseover=&quot;showTip(event, 'fs91', 361)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;9.99m&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 362)&quot; onmouseover=&quot;showTip(event, 'fs92', 362)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 363)&quot; onmouseover=&quot;showTip(event, 'fs62', 363)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 364)&quot; onmouseover=&quot;showTip(event, 'fs91', 364)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;19.99m&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 365)&quot; onmouseover=&quot;showTip(event, 'fs93', 365)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 366)&quot; onmouseover=&quot;showTip(event, 'fs62', 366)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 367)&quot; onmouseover=&quot;showTip(event, 'fs91', 367)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;49.99m&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Initializing and adding our products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 368)&quot; onmouseover=&quot;showTip(event, 'fs94', 368)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs88', 369)&quot; onmouseover=&quot;showTip(event, 'fs88', 369)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs95', 370)&quot; onmouseover=&quot;showTip(event, 'fs95', 370)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.00m&lt;/span&gt; []
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 371)&quot; onmouseover=&quot;showTip(event, 'fs88', 371)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs96', 372)&quot; onmouseover=&quot;showTip(event, 'fs96', 372)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 373)&quot; onmouseover=&quot;showTip(event, 'fs90', 373)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 374)&quot; onmouseover=&quot;showTip(event, 'fs88', 374)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs96', 375)&quot; onmouseover=&quot;showTip(event, 'fs96', 375)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 376)&quot; onmouseover=&quot;showTip(event, 'fs92', 376)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 377)&quot; onmouseover=&quot;showTip(event, 'fs88', 377)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs96', 378)&quot; onmouseover=&quot;showTip(event, 'fs96', 378)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 379)&quot; onmouseover=&quot;showTip(event, 'fs93', 379)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 380)&quot; onmouseover=&quot;showTip(event, 'fs45', 380)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 381)&quot; onmouseover=&quot;showTip(event, 'fs86', 381)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 382)&quot; onmouseover=&quot;showTip(event, 'fs94', 382)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;C&amp;quot;; &amp;quot;B&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: only contains B and C as price of A is below 10.00&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Replace the whole products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 383)&quot; onmouseover=&quot;showTip(event, 'fs97', 383)&quot; class=&quot;i&quot;&gt;ppo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 384)&quot; onmouseover=&quot;showTip(event, 'fs88', 384)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs98', 385)&quot; onmouseover=&quot;showTip(event, 'fs98', 385)&quot; class=&quot;f&quot;&gt;setProducts&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs90', 386)&quot; onmouseover=&quot;showTip(event, 'fs90', 386)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs93', 387)&quot; onmouseover=&quot;showTip(event, 'fs93', 387)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;] &lt;span onmouseout=&quot;hideTip(event, 'fs94', 388)&quot; onmouseover=&quot;showTip(event, 'fs94', 388)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 389)&quot; onmouseover=&quot;showTip(event, 'fs45', 389)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 390)&quot; onmouseover=&quot;showTip(event, 'fs86', 390)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 391)&quot; onmouseover=&quot;showTip(event, 'fs97', 391)&quot; class=&quot;i&quot;&gt;ppo2&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: only contains C as price of A is below 10.00&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Increase minimum price&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 392)&quot; onmouseover=&quot;showTip(event, 'fs99', 392)&quot; class=&quot;i&quot;&gt;ppo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 393)&quot; onmouseover=&quot;showTip(event, 'fs88', 393)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs100', 394)&quot; onmouseover=&quot;showTip(event, 'fs100', 394)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20.00m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 395)&quot; onmouseover=&quot;showTip(event, 'fs94', 395)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 396)&quot; onmouseover=&quot;showTip(event, 'fs45', 396)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 397)&quot; onmouseover=&quot;showTip(event, 'fs86', 397)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 398)&quot; onmouseover=&quot;showTip(event, 'fs99', 398)&quot; class=&quot;i&quot;&gt;ppo3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: Contained B and C before. B was removed after&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//          increasing the needed price a product must have.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Decrease Price and then reset all products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 399)&quot; onmouseover=&quot;showTip(event, 'fs101', 399)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs94', 400)&quot; onmouseover=&quot;showTip(event, 'fs94', 400)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 401)&quot; onmouseover=&quot;showTip(event, 'fs88', 401)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs100', 402)&quot; onmouseover=&quot;showTip(event, 'fs100', 402)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.00m&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 403)&quot; onmouseover=&quot;showTip(event, 'fs88', 403)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs98', 404)&quot; onmouseover=&quot;showTip(event, 'fs98', 404)&quot; class=&quot;f&quot;&gt;setProducts&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs90', 405)&quot; onmouseover=&quot;showTip(event, 'fs90', 405)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs92', 406)&quot; onmouseover=&quot;showTip(event, 'fs92', 406)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs93', 407)&quot; onmouseover=&quot;showTip(event, 'fs93', 407)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;]
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 408)&quot; onmouseover=&quot;showTip(event, 'fs45', 408)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 409)&quot; onmouseover=&quot;showTip(event, 'fs86', 409)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 410)&quot; onmouseover=&quot;showTip(event, 'fs101', 410)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;A&amp;quot;; &amp;quot;B&amp;quot;; &amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: Should be obvious.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Again, we can see how we got a fluid-syntax or in general an data-flow API
very easily. Amazing is that none of our functions from &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;setProducts&lt;/code&gt;
or &lt;code&gt;setPrice&lt;/code&gt; contains any validation logic and we still always get valid objects.&lt;/p&gt;
&lt;p&gt;The final part is the problem we already saw with &lt;em&gt;defensive copies&lt;/em&gt;. If we
change the price of any product, it doesn't effect any &lt;code&gt;ProductsPriceOver&lt;/code&gt;
object.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Set Price of A to &amp;quot;1.00&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 411)&quot; onmouseover=&quot;showTip(event, 'fs102', 411)&quot; class=&quot;i&quot;&gt;newA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 412)&quot; onmouseover=&quot;showTip(event, 'fs62', 412)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 413)&quot; onmouseover=&quot;showTip(event, 'fs103', 413)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.00m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 414)&quot; onmouseover=&quot;showTip(event, 'fs90', 414)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// A in ppo4 is still 9.99&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 415)&quot; onmouseover=&quot;showTip(event, 'fs45', 415)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs88', 416)&quot; onmouseover=&quot;showTip(event, 'fs88', 416)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs104', 417)&quot; onmouseover=&quot;showTip(event, 'fs104', 417)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 418)&quot; onmouseover=&quot;showTip(event, 'fs101', 418)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// [&amp;quot;A -- 9.99&amp;quot;; &amp;quot;B -- 19.99&amp;quot;; &amp;quot;C -- 49.99&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This should be obvious and is the reason why we need an &lt;code&gt;update&lt;/code&gt; function.
When we update the price of a product, we need to create a new &lt;code&gt;ProductsPriceOver&lt;/code&gt;
object and we pass it the Product that changed. We could pass &lt;code&gt;newA&lt;/code&gt;
that we created and pass it to the &lt;code&gt;update&lt;/code&gt; function. But actually, there
is no reason to create &lt;code&gt;newA&lt;/code&gt; separately. We also could write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 419)&quot; onmouseover=&quot;showTip(event, 'fs105', 419)&quot; class=&quot;i&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 420)&quot; onmouseover=&quot;showTip(event, 'fs88', 420)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs106', 421)&quot; onmouseover=&quot;showTip(event, 'fs106', 421)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 422)&quot; onmouseover=&quot;showTip(event, 'fs62', 422)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 423)&quot; onmouseover=&quot;showTip(event, 'fs103', 423)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;8.0m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 424)&quot; onmouseover=&quot;showTip(event, 'fs90', 424)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs101', 425)&quot; onmouseover=&quot;showTip(event, 'fs101', 425)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs88', 426)&quot; onmouseover=&quot;showTip(event, 'fs88', 426)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs104', 427)&quot; onmouseover=&quot;showTip(event, 'fs104', 427)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 428)&quot; onmouseover=&quot;showTip(event, 'fs105', 428)&quot; class=&quot;i&quot;&gt;p1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// [&amp;quot;A -- 8.00&amp;quot;; &amp;quot;B -- 19.99&amp;quot;; &amp;quot;C -- 49.99&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 429)&quot; onmouseover=&quot;showTip(event, 'fs107', 429)&quot; class=&quot;i&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 430)&quot; onmouseover=&quot;showTip(event, 'fs88', 430)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs106', 431)&quot; onmouseover=&quot;showTip(event, 'fs106', 431)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 432)&quot; onmouseover=&quot;showTip(event, 'fs62', 432)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 433)&quot; onmouseover=&quot;showTip(event, 'fs103', 433)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 434)&quot; onmouseover=&quot;showTip(event, 'fs90', 434)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs101', 435)&quot; onmouseover=&quot;showTip(event, 'fs101', 435)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs88', 436)&quot; onmouseover=&quot;showTip(event, 'fs88', 436)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs104', 437)&quot; onmouseover=&quot;showTip(event, 'fs104', 437)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 438)&quot; onmouseover=&quot;showTip(event, 'fs107', 438)&quot; class=&quot;i&quot;&gt;p2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// [&amp;quot;B -- 19.99&amp;quot;; &amp;quot;C -- 49.99&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of creating a new object, and then pass it to update, we just
inline the whole function call. &lt;a href=&quot;/blog/2016/09/25/function-application-and-composition&quot;&gt;In general immutability changes the way how
we write code either into a more sequential-style or a nested-style&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you follow this idea further there are probably even more changes you want
to do, but all of those are outside the scope of this article. The important
aspect is if our objects stay valid.&lt;/p&gt;
&lt;p&gt;We must create an &lt;code&gt;update&lt;/code&gt; function that is not needed in an mutable version.
But even that can be considered as good. We didn't need to create an &lt;code&gt;update&lt;/code&gt;
function with a mutable version because mutable Products already had this
feature. In fact the problem is more that you can forget this feature, and this
is the reason why an &lt;code&gt;ProductsPriceOver&lt;/code&gt; in the mutable version can become
invalid, because you can forget a feature that msomehow must be handled.&lt;/p&gt;
&lt;p&gt;The rules to create either events or defensive copies forces you to think about
this cases so you hopefully don't forget them. With immutability you cannot forget
anything that later on can invalidate anything. Your code only has those
features you also implemented!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Working with immutability sure is different. I guess some people will also claim
that updating with immutability is harder. With mutability you just need to
change the Product and that's it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;a.Price &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The problem is that those things often miss the bigger picture. As just mutating
the price can cause problems in other code like we have seen previously. If we
start adding &lt;code&gt;copy&lt;/code&gt; functions for defensive copying or need to add event handling
then this is not really simpler compared to immutability.&lt;/p&gt;
&lt;p&gt;It is sure possible that you can create mutable objects that are always valid,
but doing so is a lot harder. Even now I'm still not 100% sure if I covered
ll possibilities how mutation can somehow lead to an invalid object.&lt;/p&gt;
&lt;p&gt;There are more reasons for immutability, advantages and techniques we didn't
looked at. But there are also reasons against immutability. But in this article we
only looked at mutability vs. immutability in the context of maintaining
valid objects.&lt;/p&gt;
&lt;p&gt;In my opinion, most of the time, this is the most important aspect we usually
care for. As a general thumb of rule I would claim that by default everything
should be immutable. Until of course there are other reasons why this
shouldn't be the case. What this other reasons could be are topics for other
articles.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;type T =&lt;br /&gt;&amp;#160;&amp;#160;private {Minimum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Maximum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Current: int;}&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;T.Minimum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;T.Maximum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;T.Current: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val minimum : mm:T -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.minimum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val mm : T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val maximum : mm:T -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.maximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val current : mm:T -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.current&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val create : min:int -&amp;gt; max:int -&amp;gt; cur:int -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val min : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val max : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val cur : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val create : (int -&amp;gt; int -&amp;gt; int -&amp;gt; T)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val failwith : message:string -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.failwith&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val show : mm:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val sprintf : format:Printf.StringFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val add : x:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val subtract : x:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.subtract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val setMaximum : max:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.setMaximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val setMinimum : min:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.setMinimum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;type MinMax =&lt;br /&gt;&amp;#160;&amp;#160;{Minimum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Maximum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Current: int;}&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.MinMax&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;MinMax.Minimum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;MinMax.Maximum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;MinMax.Current: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val a : MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val create : min:int -&amp;gt; max:int -&amp;gt; cur:int -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val create : (int -&amp;gt; int -&amp;gt; int -&amp;gt; MinMax)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val show : mm:MinMax -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val mm : MinMax&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;module MinMax&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val show : mm:MinMax.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val create : min:int -&amp;gt; max:int -&amp;gt; cur:int -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val add : x:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val subtract : x:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.subtract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val add : x:int -&amp;gt; mm:MinMax.T -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val subtract : x:int -&amp;gt; mm:MinMax.T -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.subtract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val setMaximum : max:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.setMaximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val setMinimum : min:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.setMinimum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val v : MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.v&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val x : MinMax.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val setMaximum : max:int -&amp;gt; mm:MinMax.T -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.setMaximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;type T =&lt;br /&gt;&amp;#160;&amp;#160;private {Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Price: decimal;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;T.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;T.Price: decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;Multiple items&lt;br /&gt;val decimal : value:&amp;#39;T -&amp;gt; decimal (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal = System.Decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal&amp;lt;&amp;#39;Measure&amp;gt; = decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val create : name:string -&amp;gt; price:decimal -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val name : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val price : decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val name : mm:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.name&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val price : mm:T -&amp;gt; decimal&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.price&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val setName : name:string -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.setName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val setPrice : price:decimal -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val toString : p:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val p : T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;type T =&lt;br /&gt;&amp;#160;&amp;#160;private {Price: decimal;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Products: T list;}&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;T.Products: Product.T list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;module Product&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val priceOver : x:decimal -&amp;gt; product:Product.T -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.priceOver&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val x : decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val product : Product.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val price : mm:Product.T -&amp;gt; decimal&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.price&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val create : price:decimal -&amp;gt; products:Product.T list -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val products : Product.T list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val price : ppo:T -&amp;gt; decimal&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.price&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val ppo : T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val products : ppo:T -&amp;gt; Product.T list&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.products&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val setPrice : price:decimal -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val setProducts : products:Product.T list -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setProducts&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val toString : ppo:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;val toString : p:Product.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val add : product:Product.T -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val update : product:Product.T -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.update&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val mapper : (Product.T -&amp;gt; Product.T)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val old : Product.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val name : mm:Product.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.name&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val updatedList : Product.T list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;val getProductNames : ppo:ProductsPriceOver.T -&amp;gt; string list&lt;br /&gt;&lt;br /&gt;Full name: Main.getProductNames&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val ppo : ProductsPriceOver.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;module ProductsPriceOver&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;val products : ppo:ProductsPriceOver.T -&amp;gt; Product.T list&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.products&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;val a : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;val create : name:string -&amp;gt; price:decimal -&amp;gt; Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;val b : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;val c : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.c&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs94&quot;&gt;val ppo : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs95&quot;&gt;val create : price:decimal -&amp;gt; products:Product.T list -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs96&quot;&gt;val add : product:Product.T -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs97&quot;&gt;val ppo2 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs98&quot;&gt;val setProducts : products:Product.T list -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setProducts&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs99&quot;&gt;val ppo3 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs100&quot;&gt;val setPrice : price:decimal -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs101&quot;&gt;val ppo4 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs102&quot;&gt;val newA : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.newA&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs103&quot;&gt;val setPrice : price:decimal -&amp;gt; mm:Product.T -&amp;gt; Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs104&quot;&gt;val toString : ppo:ProductsPriceOver.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs105&quot;&gt;val p1 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.p1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs106&quot;&gt;val update : product:Product.T -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.update&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs107&quot;&gt;val p2 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.p2&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Function Application and Composition</title>
   <link href="https://sidburn.github.io/blog/2016/09/25/function-application-and-composition"/>
   <updated>2016-09-25T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/09/25/function-application-and-composition</id>
   <content type="html">&lt;p&gt;Function application is probably one of those terms in functional programming that sounds more
scarier as the topic really is. The idea behind functional application just means that we execute
a function to get the result. Let's take the example of calculating the square root of
&lt;code&gt;2.0&lt;/code&gt;. We can write the following in F# to do that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The interesting part is how we read this example. We read it from right-to-left.
&lt;code&gt;2.0&lt;/code&gt; is the input to &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt; returns the value &lt;code&gt;1.41&lt;/code&gt; this is then stored in &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/sqrt.svg&quot; alt=&quot;sqrt example that shows how we read a function from right-to-left&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Usually we just say that we &lt;em&gt;execute&lt;/em&gt; or &lt;em&gt;run&lt;/em&gt; the &lt;code&gt;sqrt&lt;/code&gt; function. But in functional
programming the correct term is that we apply the value &lt;code&gt;2.0&lt;/code&gt; to the function &lt;code&gt;sqrt&lt;/code&gt;. Probably
you will ask how I can write a whole article about this topic, but there are some topics
associated with it.&lt;/p&gt;
&lt;h2&gt;Partial Application&lt;/h2&gt;
&lt;p&gt;Partial application is one of those topics. If we pass all arguments to a function we name it
&lt;em&gt;function application&lt;/em&gt;. But if we only pass some arguments to a function we name it
&lt;em&gt;partial application&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In some programming languages it is an error if we don't pass all arguments to a function, but
in some functional languages, including F#, this is an explicit feature. The result of
partial application is a new function that accepts/waits for the remaining arguments. For
example: If we have a function &lt;code&gt;add&lt;/code&gt; that expects two integers:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 7)&quot; onmouseover=&quot;showTip(event, 'fs5', 7)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we only pass one argument to that function:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 10)&quot; onmouseover=&quot;showTip(event, 'fs4', 10)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Then partial application returns a new functions that expects the remaining argument. In the
above case we could say that we baked in &lt;code&gt;1&lt;/code&gt; as &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;add1&lt;/code&gt; expects the remaining
argument &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 11)&quot; onmouseover=&quot;showTip(event, 'fs7', 11)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 12)&quot; onmouseover=&quot;showTip(event, 'fs7', 12)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Immutability&lt;/h2&gt;
&lt;p&gt;Another big topic in functional programming is immutability. Immutability is a fairly easy
concept. It just means data cannot be changed after creation. If you are new to functional
programming or in general to this concept, this sound a little bit strange. How
can we do anything useful if we cannot change anything?&lt;/p&gt;
&lt;p&gt;The answer is simple. Instead of changing any kind of data, we just generate new data.
Probably you wonder how this concept is associated with function application. While immutability
has no direct effect on function application, it changes the way how we think about
functions. With immutability in-place every functions must return a new value.&lt;/p&gt;
&lt;p&gt;Let's look at some example code to understand why this kind of idea is important. Besides
&lt;code&gt;sqrt&lt;/code&gt; we first create two new functions:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 13)&quot; onmouseover=&quot;showTip(event, 'fs8', 13)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 14)&quot; onmouseover=&quot;showTip(event, 'fs9', 14)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 15)&quot; onmouseover=&quot;showTip(event, 'fs10', 15)&quot; class=&quot;f&quot;&gt;pown&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 16)&quot; onmouseover=&quot;showTip(event, 'fs9', 16)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 17)&quot; onmouseover=&quot;showTip(event, 'fs11', 17)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 18)&quot; onmouseover=&quot;showTip(event, 'fs9', 18)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now create a new function that first calculates the square root of a number, add 10 to the
result of it, and finally squares the result. That function is pretty artificial so we just
name it &lt;code&gt;blub&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 20)&quot; onmouseover=&quot;showTip(event, 'fs12', 20)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 21)&quot; onmouseover=&quot;showTip(event, 'fs9', 21)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 23)&quot; onmouseover=&quot;showTip(event, 'fs3', 23)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 24)&quot; onmouseover=&quot;showTip(event, 'fs9', 24)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 25)&quot; onmouseover=&quot;showTip(event, 'fs14', 25)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 26)&quot; onmouseover=&quot;showTip(event, 'fs11', 26)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 27)&quot; onmouseover=&quot;showTip(event, 'fs13', 27)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 28)&quot; onmouseover=&quot;showTip(event, 'fs15', 28)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 29)&quot; onmouseover=&quot;showTip(event, 'fs8', 29)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 30)&quot; onmouseover=&quot;showTip(event, 'fs14', 30)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 31)&quot; onmouseover=&quot;showTip(event, 'fs15', 31)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs12', 32)&quot; onmouseover=&quot;showTip(event, 'fs12', 32)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 130.28&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The above code I wrote probably resembles the way how you write functions in a non-functional
language that also don't use immutability. But in this case every function returns a new value
and this style is a little bit verbose. But first lets look how we read this code:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub.svg&quot; alt=&quot;visualization how we read the blub function&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;I don't know you, but I think reading it is pretty horrible. The amount of &lt;em&gt;jumping around&lt;/em&gt;
is quite high. If you don't think it is horrible then it just shows how much you are used
to this kind of writing. But lets examine the example a little bit further.&lt;/p&gt;
&lt;p&gt;If you look at the visualization we can see some kind of pattern. We actually can
see two properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every value is only used once.&lt;/li&gt;
&lt;li&gt;The input of the next function is the output of the previous function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first property allows us to just embed or &lt;strong&gt;nest&lt;/strong&gt; the function calls. There is no
reason why we store the result of a function explicitly in a variable if we anyway just use
the result once. We just can nest the code:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 33)&quot; onmouseover=&quot;showTip(event, 'fs12', 33)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 34)&quot; onmouseover=&quot;showTip(event, 'fs9', 34)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 35)&quot; onmouseover=&quot;showTip(event, 'fs14', 35)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 36)&quot; onmouseover=&quot;showTip(event, 'fs11', 36)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 37)&quot; onmouseover=&quot;showTip(event, 'fs3', 37)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 38)&quot; onmouseover=&quot;showTip(event, 'fs9', 38)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 39)&quot; onmouseover=&quot;showTip(event, 'fs15', 39)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 40)&quot; onmouseover=&quot;showTip(event, 'fs8', 40)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 42)&quot; onmouseover=&quot;showTip(event, 'fs15', 42)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can repeat this step again. Also &lt;code&gt;b&lt;/code&gt; is only used once, so we nest &lt;code&gt;b&lt;/code&gt; again.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 43)&quot; onmouseover=&quot;showTip(event, 'fs12', 43)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 44)&quot; onmouseover=&quot;showTip(event, 'fs9', 44)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 45)&quot; onmouseover=&quot;showTip(event, 'fs15', 45)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 46)&quot; onmouseover=&quot;showTip(event, 'fs8', 46)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 47)&quot; onmouseover=&quot;showTip(event, 'fs11', 47)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 48)&quot; onmouseover=&quot;showTip(event, 'fs3', 48)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 49)&quot; onmouseover=&quot;showTip(event, 'fs9', 49)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 50)&quot; onmouseover=&quot;showTip(event, 'fs15', 50)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we also don't need &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 255)&quot; onmouseover=&quot;showTip(event, 'fs12', 255)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 256)&quot; onmouseover=&quot;showTip(event, 'fs9', 256)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 257)&quot; onmouseover=&quot;showTip(event, 'fs8', 257)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 258)&quot; onmouseover=&quot;showTip(event, 'fs11', 258)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 259)&quot; onmouseover=&quot;showTip(event, 'fs3', 259)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 260)&quot; onmouseover=&quot;showTip(event, 'fs9', 260)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The final result is quite a lot shorter, but how do we read this code?&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub-nested.svg&quot; alt=&quot;visualization how we read the nested blub function&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The final result resembles a normal function call. We just can read it straight from
right to left. Every function call returns a new result that is directly used as the
input of another function. With nesting we have once again a simple chain of execution.
No &lt;em&gt;jumping around&lt;/em&gt; anymore to understand the code.&lt;/p&gt;
&lt;h2&gt;Piping with |&amp;gt;&lt;/h2&gt;
&lt;p&gt;Up so far I only discussed the first property that a variable was only used once. But we
also had another property that the output of one function is the input of the
next function. We also could say, we have a chain of execution. The last visualization
already showed that chain as you could start on the right side and read the code to the left
until you are done.&lt;/p&gt;
&lt;p&gt;But we also can reverse that chain so we can read it from left-to-right. We achieve that
style with the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator. The &lt;code&gt;|&amp;gt;&lt;/code&gt; operator allows us to write the input of a function
on the left side and the function to execute on the right side.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/pipe.svg&quot; alt=&quot;Example of a single function with piping&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;With this idea we can reverse the input step by step like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub-pipe.svg&quot; alt=&quot;blub function with piping&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The advantage is that &lt;code&gt;|&amp;gt;&lt;/code&gt; is left-associative and has low precedence. In overall that means
when we see code like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we can remove the parenthesis from the left-side of &lt;code&gt;|&amp;gt;&lt;/code&gt; so we just end up with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This means the last version:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 57)&quot; onmouseover=&quot;showTip(event, 'fs12', 57)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 58)&quot; onmouseover=&quot;showTip(event, 'fs9', 58)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ((&lt;span onmouseout=&quot;hideTip(event, 'fs9', 59)&quot; onmouseover=&quot;showTip(event, 'fs9', 59)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 60)&quot; onmouseover=&quot;showTip(event, 'fs3', 60)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 61)&quot; onmouseover=&quot;showTip(event, 'fs11', 61)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 62)&quot; onmouseover=&quot;showTip(event, 'fs8', 62)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;also can be written without any parenthesis:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 63)&quot; onmouseover=&quot;showTip(event, 'fs12', 63)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 64)&quot; onmouseover=&quot;showTip(event, 'fs9', 64)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 65)&quot; onmouseover=&quot;showTip(event, 'fs9', 65)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 66)&quot; onmouseover=&quot;showTip(event, 'fs3', 66)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 67)&quot; onmouseover=&quot;showTip(event, 'fs11', 67)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 68)&quot; onmouseover=&quot;showTip(event, 'fs8', 68)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This kind of style is often preferred in the F# community and can be read from left-to-right.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub-pipe-read.svg&quot; alt=&quot;Shows that blub can be read from left-to-right&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;You often see this style in List manipulations:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;3.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;7.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;11.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;13.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 69)&quot; onmouseover=&quot;showTip(event, 'fs16', 69)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 70)&quot; onmouseover=&quot;showTip(event, 'fs17', 70)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 71)&quot; onmouseover=&quot;showTip(event, 'fs3', 71)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 72)&quot; onmouseover=&quot;showTip(event, 'fs16', 72)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 73)&quot; onmouseover=&quot;showTip(event, 'fs17', 73)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 74)&quot; onmouseover=&quot;showTip(event, 'fs11', 74)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 75)&quot; onmouseover=&quot;showTip(event, 'fs16', 75)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 76)&quot; onmouseover=&quot;showTip(event, 'fs17', 76)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 77)&quot; onmouseover=&quot;showTip(event, 'fs8', 77)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// [121.0; 137.64; 149.72; 159.91; 177.33; 185.11]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We start with the data, and every new command is put on a new line. This way we easily
can create longer chains that are still readable and extensible.&lt;/p&gt;
&lt;h2&gt;Never use &amp;lt;|&lt;/h2&gt;
&lt;p&gt;We can summarize &lt;code&gt;|&amp;gt;&lt;/code&gt; as an operator that swaps the function and the input of a function. Usually
the input is on the right and the function on the left, and we say we read it from right-to-left.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;|&amp;gt;&lt;/code&gt; we swap the function and the input. The input is now on the left, and we read the code
from left to right. That's why I name it just left-piping.&lt;/p&gt;
&lt;p&gt;F# also provides another operator &lt;code&gt;&amp;lt;|&lt;/code&gt;. Before we look into what it really does, the question
is: What do you &lt;strong&gt;expect&lt;/strong&gt; it should do?&lt;/p&gt;
&lt;p&gt;Lets think about it. &lt;code&gt;|&amp;gt;&lt;/code&gt; allows us to have the input on the left side of the function. We can
think of it that we pipe the input from left into the function on the right. So when we see &lt;code&gt;&amp;lt;|&lt;/code&gt;
we just expect the opposite. We could say, the input on the right is piped to the function on
the left side. This opens up a new question: What is the difference between &lt;code&gt;&amp;lt;|&lt;/code&gt; and
normal function application?&lt;/p&gt;
&lt;p&gt;So let us explore &lt;code&gt;&amp;lt;|&lt;/code&gt; step-by-step, and to understand why you never ever should use this
operator. We start with a simple case:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 78)&quot; onmouseover=&quot;showTip(event, 'fs3', 78)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can insert &lt;code&gt;&amp;lt;|&lt;/code&gt; in this term. But &lt;code&gt;&amp;lt;|&lt;/code&gt; does not change the order of anything, we still
write the input on the right side. So we end up with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 79)&quot; onmouseover=&quot;showTip(event, 'fs3', 79)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Seems pretty useless at this point. But if you remember, one advantage of &lt;code&gt;|&amp;gt;&lt;/code&gt; was
that we also could eliminate some parenthesis. So lets create a small example where the
input is a more complex term that needs to be calculated:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 80)&quot; onmouseover=&quot;showTip(event, 'fs3', 80)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At this point it is also helpful to understand what happens if we don't write the parenthesis.
The code above means. First calculate &lt;code&gt;(1.0 + 1.0)&lt;/code&gt; and use the result &lt;code&gt;2.0&lt;/code&gt; as the input
to &lt;code&gt;sqrt&lt;/code&gt;. When we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 81)&quot; onmouseover=&quot;showTip(event, 'fs3', 81)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;it basically means:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs3', 82)&quot; onmouseover=&quot;showTip(event, 'fs3', 82)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;that means, first calculate &lt;code&gt;sqrt 1&lt;/code&gt; and then add &lt;code&gt;1&lt;/code&gt; to the result. If we use &lt;code&gt;&amp;lt;|&lt;/code&gt;,
we can get rid of the parenthesis and still maintain the same behaviour.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 83)&quot; onmouseover=&quot;showTip(event, 'fs3', 83)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Believe me or not, but I don't see any improvement so far. I have seen a lot of people arguing
that the last version is better as the version with parenthesis. I don't think so. Reading
parenthesis and the idea that everything inside of parenthesis is calculated first is something
that we already learn in elementary school:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/math.svg&quot; alt=&quot;A Math example with parenthesis&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Now instead of a clearly visible grouping with characters that human mankind already use
for centuries, now you just use two different characters instead. It could be that you have
another opinion on this, this is okay, but let's continue to see more problems of &lt;code&gt;&amp;lt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem of &lt;code&gt;&amp;lt;|&lt;/code&gt; is, we just think of it as right-piping. We &lt;strong&gt;expect&lt;/strong&gt; that &lt;code&gt;&amp;lt;|&lt;/code&gt; is
the reverse of &lt;code&gt;|&amp;gt;&lt;/code&gt;. With a single function and a single argument, it also seems to work
this way. But this breaks as soon we try to extend the code. For example, when we now want
to add 10 to the result with our &lt;code&gt;add10&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;With nesting we just write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 84)&quot; onmouseover=&quot;showTip(event, 'fs3', 84)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;with left-piping we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 85)&quot; onmouseover=&quot;showTip(event, 'fs3', 85)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;with right-piping you probably assume to write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// This code does not work&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 86)&quot; onmouseover=&quot;showTip(event, 'fs3', 86)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably that is what you &lt;strong&gt;expect&lt;/strong&gt;. But this &lt;strong&gt;isn't&lt;/strong&gt; how &lt;code&gt;&amp;lt;|&lt;/code&gt; works! In fact, the above code
will just give you a compile-time error. Because of this, piping with &lt;code&gt;&amp;lt;|&lt;/code&gt; is just an exceptional
bad idea. If you see code like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 87)&quot; onmouseover=&quot;showTip(event, 'fs3', 87)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;you would probably assume that &lt;code&gt;&amp;lt;|&lt;/code&gt; just reverse the pipe:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// This code does not work&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 88)&quot; onmouseover=&quot;showTip(event, 'fs3', 88)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;but this isn't at all how it works. So how does &lt;code&gt;&amp;lt;|&lt;/code&gt; work instead? Probably at this point it
makes sense to add explicit parenthesis to understand how it works. And if you think
&lt;code&gt;&amp;lt;|&lt;/code&gt; is better because of the elimination of parenthesis. Isn't it funny that I need to
add parenthesis so you are able to understand how &lt;code&gt;&amp;lt;|&lt;/code&gt; actually works?&lt;/p&gt;
&lt;p&gt;We actually &lt;strong&gt;expect&lt;/strong&gt; that &lt;code&gt;&amp;lt;|&lt;/code&gt; works in this way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 89)&quot; onmouseover=&quot;showTip(event, 'fs3', 89)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The above code is valid and will compile. But it is no improvement over:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 90)&quot; onmouseover=&quot;showTip(event, 'fs3', 90)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we remove the explicit parenthesis in the first example. The code is interpreted like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ((&lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 91)&quot; onmouseover=&quot;showTip(event, 'fs3', 91)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And this is a truly exceptional bad idea. The problem of &lt;code&gt;&amp;lt;|&lt;/code&gt; is that it is still
left-associative. That means, the thing on the left side is executed first. In the above case it
means. First &lt;code&gt;square&lt;/code&gt; is executed and we pass it &lt;code&gt;add10&lt;/code&gt; a function as the first argument
to &lt;code&gt;square&lt;/code&gt;. This is a compile-time error because &lt;code&gt;square&lt;/code&gt; expects a float, not a function.&lt;/p&gt;
&lt;p&gt;But if we still continue to interpret this code, and ignore this error, we then expect that
&lt;code&gt;square &amp;lt;| add10&lt;/code&gt; returns a new function as a result. We then execute that function by passing
&lt;code&gt;sqrt&lt;/code&gt; as an argument. Well, &lt;code&gt;square&lt;/code&gt; does not return a function, so this also cannot work.&lt;/p&gt;
&lt;p&gt;And if we still ignore this error, we once again assume that this will return another new function
as a result that we then finally pass &lt;code&gt;x&lt;/code&gt; as a value.&lt;/p&gt;
&lt;p&gt;Already confused? And that's why &lt;code&gt;&amp;lt;|&lt;/code&gt; is just an exceptional bad idea, and you never ever
should use &lt;code&gt;&amp;lt;|&lt;/code&gt;. &lt;code&gt;&amp;lt;|&lt;/code&gt; is just broken, it isn't at all how someone thinks it works or should work.&lt;/p&gt;
&lt;p&gt;At least let me give you a quick example that shows how &lt;code&gt;&amp;lt;|&lt;/code&gt; works and in which situation
it would &lt;em&gt;theoretically&lt;/em&gt; make sense. First you need a function that expects at least two arguments:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 92)&quot; onmouseover=&quot;showTip(event, 'fs18', 92)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 93)&quot; onmouseover=&quot;showTip(event, 'fs5', 93)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 94)&quot; onmouseover=&quot;showTip(event, 'fs6', 94)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 95)&quot; onmouseover=&quot;showTip(event, 'fs19', 95)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 96)&quot; onmouseover=&quot;showTip(event, 'fs5', 96)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 97)&quot; onmouseover=&quot;showTip(event, 'fs6', 97)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 98)&quot; onmouseover=&quot;showTip(event, 'fs19', 98)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now imagine all arguments are some more complex terms that you compute, usually you have to
put parenthesis around every term to group them:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 99)&quot; onmouseover=&quot;showTip(event, 'fs18', 99)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is just a function call with three arguments. But every arguments is calculated before
&lt;code&gt;add&lt;/code&gt; is called. In such a case, you could use &lt;code&gt;&amp;lt;|&lt;/code&gt; instead of parenthesis:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 100)&quot; onmouseover=&quot;showTip(event, 'fs18', 100)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The whole example is read like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/right-piping.svg&quot; alt=&quot;How you read right-piping&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Overall &lt;code&gt;&amp;lt;|&lt;/code&gt; is just another delimiter that you could use instead of parenthesis. But
this kind of behaviour is not really how you would expect it to work. As left-piping with
&lt;code&gt;|&amp;gt;&lt;/code&gt; is used a lot, you would think &lt;code&gt;&amp;lt;|&lt;/code&gt; just does the reverse. So in general right-piping
only adds more confusion and it is better to not use it at all.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
If it is unclear why `&lt;|` works in this way. Lets add the parenthesis back in the last example.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;((&lt;span class=&quot;i&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The first thing that is executed is &lt;code&gt;(add &amp;lt;| 1 + 1)&lt;/code&gt;. This means first &lt;code&gt;1 + 1&lt;/code&gt; is calculated and
the result &lt;code&gt;2&lt;/code&gt; is passed to the &lt;code&gt;add&lt;/code&gt; function as the first argument. But the parenthesis around
this term end this term. So what do we really do? We basically &lt;em&gt;partial apply&lt;/em&gt; &lt;code&gt;add&lt;/code&gt; with a single
argument. This then returns a new anonymous function that expects the remaining arguments
&lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; of &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;2 + 2&lt;/code&gt; is calculated and this is once again &lt;em&gt;partial applied&lt;/em&gt; to that anonymous function. This
then returns another new anonymous function that expects the last argument &lt;code&gt;z&lt;/code&gt;. And to this function
we finally apply &lt;code&gt;3 + 3&lt;/code&gt; to it what then executes everything.
&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Nesting again&lt;/h2&gt;
&lt;p&gt;Writing code in a piping style with left-piping is probably the most common and most used
way you see in F#. Its not that this is in general a bad idea, but it can be bad if people
try to solve everything this way. It is important to understand when it is a good idea
and when not.&lt;/p&gt;
&lt;p&gt;Piping is only a good idea if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The last argument of a function is a more complex computation&lt;/li&gt;
&lt;li&gt;A function only has a single argument that is the result of another function&lt;/li&gt;
&lt;li&gt;You need to chain multiple of those functions in one explicit order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To understand those restriction better, let's talk about the List module. Why can we usually
chain most of the List functions? For example we can create something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 101)&quot; onmouseover=&quot;showTip(event, 'fs16', 101)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 102)&quot; onmouseover=&quot;showTip(event, 'fs20', 102)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 103)&quot; onmouseover=&quot;showTip(event, 'fs5', 103)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 104)&quot; onmouseover=&quot;showTip(event, 'fs5', 104)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// [2; 4; 6; 8; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 105)&quot; onmouseover=&quot;showTip(event, 'fs16', 105)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 106)&quot; onmouseover=&quot;showTip(event, 'fs17', 106)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 107)&quot; onmouseover=&quot;showTip(event, 'fs5', 107)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 108)&quot; onmouseover=&quot;showTip(event, 'fs5', 108)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)          &lt;span class=&quot;c&quot;&gt;// [4; 8; 12, 16; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 109)&quot; onmouseover=&quot;showTip(event, 'fs16', 109)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs21', 110)&quot; onmouseover=&quot;showTip(event, 'fs21', 110)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 111)&quot; onmouseover=&quot;showTip(event, 'fs22', 111)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 112)&quot; onmouseover=&quot;showTip(event, 'fs5', 112)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 113)&quot; onmouseover=&quot;showTip(event, 'fs22', 113)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 114)&quot; onmouseover=&quot;showTip(event, 'fs5', 114)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The first reason is the order of the arguments. All of those functions expects the list as the
last argument:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 115)&quot; onmouseover=&quot;showTip(event, 'fs16', 115)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 116)&quot; onmouseover=&quot;showTip(event, 'fs20', 116)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 117)&quot; onmouseover=&quot;showTip(event, 'fs23', 117)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 118)&quot; onmouseover=&quot;showTip(event, 'fs16', 118)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 119)&quot; onmouseover=&quot;showTip(event, 'fs17', 119)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;mapper&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 120)&quot; onmouseover=&quot;showTip(event, 'fs23', 120)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 121)&quot; onmouseover=&quot;showTip(event, 'fs16', 121)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs21', 122)&quot; onmouseover=&quot;showTip(event, 'fs21', 122)&quot; class=&quot;i&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 123)&quot; onmouseover=&quot;showTip(event, 'fs23', 123)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But even if we switch the order of the arguments we always can use piping, but it probably isn't
more readable anymore. If we for example assume the &lt;code&gt;List.map&lt;/code&gt; functions first expects a list
and then the &lt;em&gt;mapper&lt;/em&gt; function, we would write something like this with piping:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 124)&quot; onmouseover=&quot;showTip(event, 'fs16', 124)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 125)&quot; onmouseover=&quot;showTip(event, 'fs17', 125)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 126)&quot; onmouseover=&quot;showTip(event, 'fs23', 126)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's consider we had the same swapping in List.filter&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 127)&quot; onmouseover=&quot;showTip(event, 'fs16', 127)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 128)&quot; onmouseover=&quot;showTip(event, 'fs20', 128)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As &lt;code&gt;List.map&lt;/code&gt; used the result of &lt;code&gt;List.filter&lt;/code&gt; in our first example we would end with something
like this if &lt;em&gt;map&lt;/em&gt; and &lt;em&gt;filter&lt;/em&gt; had swapped arguments:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 129)&quot; onmouseover=&quot;showTip(event, 'fs16', 129)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 130)&quot; onmouseover=&quot;showTip(event, 'fs17', 130)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; ((&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 131)&quot; onmouseover=&quot;showTip(event, 'fs16', 131)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 132)&quot; onmouseover=&quot;showTip(event, 'fs20', 132)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But this kind of code is not readable or understandable at all. So a good choice for the
last argument is usually some kind of immutable data-type. But that is not everything. In
&lt;code&gt;List.fold&lt;/code&gt; we have two immutable data-types. The &lt;code&gt;state&lt;/code&gt; and the &lt;code&gt;list&lt;/code&gt;. So why is &lt;code&gt;list&lt;/code&gt;
the better choice? Because a list is very likely the result of a more complex computation.
The &lt;code&gt;state&lt;/code&gt; is almost always just a plain direct value like &lt;code&gt;0&lt;/code&gt; or an empty list and so on.
Very unlikely will you have a complex computation that computes the &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a thumb of rule we can say: It is a good idea if the output type of a function and the type of the
last argument is the same. Most of the functions from the List module are build that way. Most of those
functions return a new list, and most of them also expect a list as the last argument. It is in some
sense only natural that if you have dozens of functions that operate, transforms or create list that
you want to compose these functions together.&lt;/p&gt;
&lt;p&gt;Picking the correct last argument of a function is important, but that is not everything. The
problem is, sometimes you don't have one clear value to put as the last argument, sometimes more
than the last value gets computed, and so on. Whether or not piping is a good case also depends
on the argument itself. Let's pick another function to explore this behaviour: &lt;code&gt;List.append&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The purpose of &lt;code&gt;List.append&lt;/code&gt; is to append two lists together into one list. Whether or not piping is a
good choice now depends on the arguments itself. If only one argument is computed, it still works
fine with piping.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 133)&quot; onmouseover=&quot;showTip(event, 'fs16', 133)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 134)&quot; onmouseover=&quot;showTip(event, 'fs20', 134)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 135)&quot; onmouseover=&quot;showTip(event, 'fs5', 135)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 136)&quot; onmouseover=&quot;showTip(event, 'fs5', 136)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// [2; 4; 6; 8; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 137)&quot; onmouseover=&quot;showTip(event, 'fs16', 137)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 138)&quot; onmouseover=&quot;showTip(event, 'fs17', 138)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 139)&quot; onmouseover=&quot;showTip(event, 'fs5', 139)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 140)&quot; onmouseover=&quot;showTip(event, 'fs5', 140)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)          &lt;span class=&quot;c&quot;&gt;// [4; 8; 12, 16; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 141)&quot; onmouseover=&quot;showTip(event, 'fs16', 141)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 142)&quot; onmouseover=&quot;showTip(event, 'fs24', 142)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;]               &lt;span class=&quot;c&quot;&gt;// [100; 50; 4; 8; 12; ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But if both lists are the result of a computation, then nesting is a much better choice.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 143)&quot; onmouseover=&quot;showTip(event, 'fs25', 143)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 144)&quot; onmouseover=&quot;showTip(event, 'fs9', 144)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 145)&quot; onmouseover=&quot;showTip(event, 'fs9', 145)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 146)&quot; onmouseover=&quot;showTip(event, 'fs26', 146)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 147)&quot; onmouseover=&quot;showTip(event, 'fs9', 147)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 148)&quot; onmouseover=&quot;showTip(event, 'fs9', 148)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Using Nesting&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 149)&quot; onmouseover=&quot;showTip(event, 'fs16', 149)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 150)&quot; onmouseover=&quot;showTip(event, 'fs24', 150)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt;
  (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 151)&quot; onmouseover=&quot;showTip(event, 'fs16', 151)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 152)&quot; onmouseover=&quot;showTip(event, 'fs17', 152)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 153)&quot; onmouseover=&quot;showTip(event, 'fs8', 153)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 154)&quot; onmouseover=&quot;showTip(event, 'fs16', 154)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 155)&quot; onmouseover=&quot;showTip(event, 'fs17', 155)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 156)&quot; onmouseover=&quot;showTip(event, 'fs25', 156)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]))
  (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 157)&quot; onmouseover=&quot;showTip(event, 'fs16', 157)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 158)&quot; onmouseover=&quot;showTip(event, 'fs17', 158)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 159)&quot; onmouseover=&quot;showTip(event, 'fs8', 159)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 160)&quot; onmouseover=&quot;showTip(event, 'fs16', 160)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 161)&quot; onmouseover=&quot;showTip(event, 'fs17', 161)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 162)&quot; onmouseover=&quot;showTip(event, 'fs26', 162)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]))

&lt;span class=&quot;c&quot;&gt;// The same as above with partial piping...&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 163)&quot; onmouseover=&quot;showTip(event, 'fs16', 163)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 164)&quot; onmouseover=&quot;showTip(event, 'fs17', 164)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 165)&quot; onmouseover=&quot;showTip(event, 'fs26', 165)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 166)&quot; onmouseover=&quot;showTip(event, 'fs16', 166)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 167)&quot; onmouseover=&quot;showTip(event, 'fs17', 167)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 168)&quot; onmouseover=&quot;showTip(event, 'fs8', 168)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 169)&quot; onmouseover=&quot;showTip(event, 'fs16', 169)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 170)&quot; onmouseover=&quot;showTip(event, 'fs24', 170)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 171)&quot; onmouseover=&quot;showTip(event, 'fs16', 171)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 172)&quot; onmouseover=&quot;showTip(event, 'fs17', 172)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 173)&quot; onmouseover=&quot;showTip(event, 'fs8', 173)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 174)&quot; onmouseover=&quot;showTip(event, 'fs16', 174)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 175)&quot; onmouseover=&quot;showTip(event, 'fs17', 175)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 176)&quot; onmouseover=&quot;showTip(event, 'fs25', 176)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]))

&lt;span class=&quot;c&quot;&gt;// ...with even more piping&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 177)&quot; onmouseover=&quot;showTip(event, 'fs16', 177)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 178)&quot; onmouseover=&quot;showTip(event, 'fs17', 178)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 179)&quot; onmouseover=&quot;showTip(event, 'fs26', 179)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 180)&quot; onmouseover=&quot;showTip(event, 'fs16', 180)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 181)&quot; onmouseover=&quot;showTip(event, 'fs17', 181)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 182)&quot; onmouseover=&quot;showTip(event, 'fs8', 182)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 183)&quot; onmouseover=&quot;showTip(event, 'fs16', 183)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 184)&quot; onmouseover=&quot;showTip(event, 'fs24', 184)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; ([&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 185)&quot; onmouseover=&quot;showTip(event, 'fs16', 185)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 186)&quot; onmouseover=&quot;showTip(event, 'fs17', 186)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 187)&quot; onmouseover=&quot;showTip(event, 'fs25', 187)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 188)&quot; onmouseover=&quot;showTip(event, 'fs16', 188)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 189)&quot; onmouseover=&quot;showTip(event, 'fs17', 189)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 190)&quot; onmouseover=&quot;showTip(event, 'fs8', 190)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// ...full piping including the evil &amp;lt;|&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 191)&quot; onmouseover=&quot;showTip(event, 'fs16', 191)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 192)&quot; onmouseover=&quot;showTip(event, 'fs17', 192)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 193)&quot; onmouseover=&quot;showTip(event, 'fs25', 193)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// &amp;lt;-- add1 instead of sub1!!!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 194)&quot; onmouseover=&quot;showTip(event, 'fs16', 194)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 195)&quot; onmouseover=&quot;showTip(event, 'fs17', 195)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 196)&quot; onmouseover=&quot;showTip(event, 'fs8', 196)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 197)&quot; onmouseover=&quot;showTip(event, 'fs16', 197)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 198)&quot; onmouseover=&quot;showTip(event, 'fs24', 198)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; ([&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 199)&quot; onmouseover=&quot;showTip(event, 'fs16', 199)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 200)&quot; onmouseover=&quot;showTip(event, 'fs17', 200)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 201)&quot; onmouseover=&quot;showTip(event, 'fs26', 201)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 202)&quot; onmouseover=&quot;showTip(event, 'fs16', 202)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 203)&quot; onmouseover=&quot;showTip(event, 'fs17', 203)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 204)&quot; onmouseover=&quot;showTip(event, 'fs8', 204)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Also notice that in the last version, the parenthesis at the right of &lt;code&gt;&amp;lt;|&lt;/code&gt; are still important
and the whole order of &lt;code&gt;List.map add1&lt;/code&gt; and &lt;code&gt;List.map sub1&lt;/code&gt; changed!&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Do you understand why &lt;code&gt;add1&lt;/code&gt; and &lt;code&gt;sub1&lt;/code&gt; needs to be swapped in the last example?
Consider the following function:
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now look at those three definitions and their results:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the first and second example &lt;code&gt;5&lt;/code&gt; is the first argument to &lt;code&gt;sub&lt;/code&gt;. It is also the
first argument in the second example because function application has a higher precedence
as &lt;code&gt;|&amp;gt;&lt;/code&gt;. In the last example there is no direct function application anymore and &lt;code&gt;3 |&amp;gt; sub&lt;/code&gt;
is executed first and &lt;code&gt;3&lt;/code&gt; becomes the first argument of &lt;code&gt;sub&lt;/code&gt;. With explicit parenthesis, the code
is interpreted like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)    &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Before we go further lets formalize why this kind of code is so hard to write with piping.
We have this problem because we don't have a single chain of computations anymore. We have two paths
of computation that are different. When we call &lt;code&gt;List.append&lt;/code&gt; it is just a way to combine
those two computations. In other words, our computation resembles a tree.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/tree.svg&quot; alt=&quot;Shows the computation as a tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Piping is not a good tool for those kind of trees. Piping is only a good option for
computations that works in a linear/sequential way. Nesting on the other hand don't have
this problem. If some argument is a more complex computation we always can surround the term
with parenthesis and embed the term where we need it. Look once again at the math example
to understand this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/math.svg&quot; alt=&quot;A Math example&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;If you don't see the tree in it. First consider that operators like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; are just
binary operators that expects two arguments. So a term like &lt;code&gt;5 + 5&lt;/code&gt; also could be represented
as a tree. &lt;code&gt;+&lt;/code&gt; is the node with two arguments.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/add5-tree.svg&quot; alt=&quot;Shows how 5 + 5 can be read as a tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;You can apply this idea to the whole math formula &lt;code&gt;(5 + 5) * (3 + (6 * 2))&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/math-tree.svg&quot; alt=&quot;Visualize the math formula as a tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The only problem we have is to properly write those nesting so it is still readable. It isn't
useful if a line expand further and further. We need to properly format the code so we can
better understand it. And there is an easy way to format code with nesting. If things starts
to get too long we just can put every argument on a new line and indent it. We already have
seen this in the nested &lt;code&gt;List.append&lt;/code&gt; example.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/append.svg&quot; alt=&quot;List.append example&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In fact these kind of formatting works with any kind of tree like structure no matter how
complicated it seems. Here you can see a visualization of a tree and how you represent
it with indentation.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/tree2.svg&quot; alt=&quot;More complex example of a tree structure&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In fact, if you ever have written HTML or XML you should be comfortable with this. Both document
formats are tree structures. You have a starting and an end-tag. Inside of a tag you can nest
other tags to create hierachical structures. The rules you already use to properly indent
and format HTML also can be used to format and indent nested code with parenthesis.&lt;/p&gt;
&lt;p&gt;Up so far we have seen two kinds of code. One kind is sequential. With sequential code we can
use piping for a better representation. But if we have tree like structures just normal
nesting is quite better. The question we should ask is: Should we try to represent
anything as a sequence?&lt;/p&gt;
&lt;p&gt;The answer is actually, no. Not everything can be written in a linear way. I would even argue
that representing things as trees is easier. Trying to fit everything into a piping style just
can limit the view in how to solve problems in general. This is best described with
an example.&lt;/p&gt;
&lt;h2&gt;Binary Converter&lt;/h2&gt;
&lt;p&gt;In our example we want to write a function that can convert any number into a binary string
representation. Before we start coding we actually need to know an algorithm that
solves our problem.&lt;/p&gt;
&lt;p&gt;The algorithm I describe does not only work for converting numbers to binary, we also can
convert numbers to other bases like octal, hexadecimal and so on. For demonstrating the
algorithm I first show how we convert a number into decimal because it is a lot easier to follow.&lt;/p&gt;
&lt;p&gt;In general the algorithm works by removing one digit from a number, convert it into a string
and repeat that process for the remaining number. That description also already tell us that we
have a recursive algorithm.&lt;/p&gt;
&lt;p&gt;The first step is to remove one digit from a number. We achieve this by using the modulo operation.
When we calculate &lt;code&gt;x % 10&lt;/code&gt; we always get the right most digit of a number. This is just
a single digit between zero and nine. This allows us to create a function that just can convert
any digit to its string representation.&lt;/p&gt;
&lt;p&gt;For example when we start with the number &lt;code&gt;225&lt;/code&gt; we calculate &lt;code&gt;225 % 10&lt;/code&gt; and get &lt;code&gt;5&lt;/code&gt; out of it.
This &lt;code&gt;5&lt;/code&gt; then can be passed to a function that knows how to transform the numbers zero to nine
to a string.&lt;/p&gt;
&lt;p&gt;But we are not finished after this step. We only transformed the &lt;code&gt;5&lt;/code&gt; from &lt;code&gt;225&lt;/code&gt; into a string.
But we still need to transform the remaining digits &lt;code&gt;22&lt;/code&gt;. So we actually need a way to &lt;em&gt;remove&lt;/em&gt;
&lt;code&gt;5&lt;/code&gt; from &lt;code&gt;225&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We achieve that by dividing by the base. First we subtract &lt;code&gt;5&lt;/code&gt; from &lt;code&gt;225&lt;/code&gt;. So we get &lt;code&gt;220&lt;/code&gt;.
Then we divide by ten to get &lt;code&gt;22&lt;/code&gt;. In general dividing or multiplying a number by its base means
we can shift the value. Multiplying by the base means we add zeros at the right of a number. Dividing
by the base means we remove zeros.&lt;/p&gt;
&lt;p&gt;So the step to transform 225 into a string are:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 0 0 1rem 30px&quot;&gt;
&lt;img src=&quot;/images/2016/application/algorithm-decimal.svg&quot; alt=&quot;Shows the steps to transform 255 into a decimal string&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;As you can see. Every modulo operation returns the right most digit of a number. By subtracting that
digit and dividing by 10. We get a new number. We just repeat that process until we end up at zero.&lt;/p&gt;
&lt;p&gt;As said at the beginning. This algorithm works for any base. If we want to convert a number into a
binary representation we just do modulo 2 and divide by 2.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 0 0 1rem 30px&quot;&gt;
&lt;img src=&quot;/images/2016/application/algorithm-binary.svg&quot; alt=&quot;Shows the steps to transform 255 into a binary string&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;If we concatenate the modulo operation we get &quot;1110 0001&quot; as the result. So, how do we transform
this algorithm into code? We could write the whole computations directly. But it is usually
easier to decompose the problem into smaller parts, or functions in our case. So lets split the
various steps into functions with meaningful names.&lt;/p&gt;
&lt;p&gt;First we need a way to extract the right most digit from a number. So we just create a function
&lt;code&gt;extract&lt;/code&gt; that does this step.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 205)&quot; onmouseover=&quot;showTip(event, 'fs27', 205)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 206)&quot; onmouseover=&quot;showTip(event, 'fs5', 206)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 207)&quot; onmouseover=&quot;showTip(event, 'fs5', 207)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once we have such a function, we actually need a way to transform the digits
returned by &lt;code&gt;extract&lt;/code&gt; to a string.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 208)&quot; onmouseover=&quot;showTip(event, 'fs28', 208)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 209)&quot; onmouseover=&quot;showTip(event, 'fs5', 209)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 210)&quot; onmouseover=&quot;showTip(event, 'fs5', 210)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    | &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    | _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 211)&quot; onmouseover=&quot;showTip(event, 'fs29', 211)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This should not happen&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Another function we need is the idea of right-shift a number. With a decimal number we turn the
number &lt;code&gt;225&lt;/code&gt; to &lt;code&gt;22&lt;/code&gt;, with binary we turn &lt;code&gt;225&lt;/code&gt; into &lt;code&gt;112&lt;/code&gt; ((225 - 1) / 2)&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 212)&quot; onmouseover=&quot;showTip(event, 'fs30', 212)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 213)&quot; onmouseover=&quot;showTip(event, 'fs5', 213)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 214)&quot; onmouseover=&quot;showTip(event, 'fs5', 214)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs27', 215)&quot; onmouseover=&quot;showTip(event, 'fs27', 215)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 216)&quot; onmouseover=&quot;showTip(event, 'fs5', 216)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Are we done? Well, let's try to create a binary convert at this point. We could come up with
code like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;rightEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;extract&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;rest&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we calculate two values. First we extract the right most digit and convert it into a string.
If we have &lt;code&gt;225&lt;/code&gt; as input this would be the first step in our calculation and the string &lt;code&gt;&quot;1&quot;&lt;/code&gt;
is stored in &lt;code&gt;rightEnd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we call &lt;code&gt;rightShift x&lt;/code&gt; the result is &lt;code&gt;112&lt;/code&gt;. But what do we do with that? Well, this is the
reason why it is a recursive function. We need to repeat the calculation until we end up
with zero. That's why we pass the result to &lt;code&gt;toBinary&lt;/code&gt; immediately.&lt;/p&gt;
&lt;p&gt;If you are not used to recursion it can probably be hard to understand what this will return.
In recursion you just make the assumption the the recursive call just somehow works. So what is
the result of &lt;code&gt;toBinary (rightShift 112)&lt;/code&gt;? It is the string representation of the number &lt;code&gt;112&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what do we have exactly? We have the first right most bit. It is stored inside &lt;code&gt;rightEnd&lt;/code&gt;,
and in &lt;code&gt;rest&lt;/code&gt; the rest of the transformation is saved. In our example this means:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;rightEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;rest&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1110000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &quot;missing&quot; part we currently have is, that we need to combine those two strings into a single
string. So we need another function that can concatenate two strings:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 217)&quot; onmouseover=&quot;showTip(event, 'fs31', 217)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 218)&quot; onmouseover=&quot;showTip(event, 'fs32', 218)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 219)&quot; onmouseover=&quot;showTip(event, 'fs33', 219)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 220)&quot; onmouseover=&quot;showTip(event, 'fs34', 220)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 221)&quot; onmouseover=&quot;showTip(event, 'fs35', 221)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [|&lt;span onmouseout=&quot;hideTip(event, 'fs32', 222)&quot; onmouseover=&quot;showTip(event, 'fs32', 222)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 223)&quot; onmouseover=&quot;showTip(event, 'fs33', 223)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;|]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we have two computations that we merge together, we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;concat&lt;/span&gt;
        (&lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
        (&lt;span class=&quot;i&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;extract&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we are still not done. We need a way to abort the recursion. Currently the function
would loop forever (Theoretically, practically it blows up with a stack overflow exception).&lt;/p&gt;
&lt;p&gt;So we need to check if &lt;code&gt;rightShift x&lt;/code&gt; reached zero. If it reached zero we just use an empty
string for the string concatenation, otherwise we use the result of the recursive call
for the string concatenation.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;concat&lt;/span&gt;
        (&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
        (&lt;span class=&quot;i&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;extract&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;All functions we created are only useful for the &lt;code&gt;toBinary&lt;/code&gt; function, we also can embed
all functions inside &lt;code&gt;toBinary&lt;/code&gt; in this case. So our final solution looks like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 224)&quot; onmouseover=&quot;showTip(event, 'fs36', 224)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 225)&quot; onmouseover=&quot;showTip(event, 'fs5', 225)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Helper functions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 226)&quot; onmouseover=&quot;showTip(event, 'fs37', 226)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 227)&quot; onmouseover=&quot;showTip(event, 'fs5', 227)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 228)&quot; onmouseover=&quot;showTip(event, 'fs5', 228)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 229)&quot; onmouseover=&quot;showTip(event, 'fs38', 229)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 230)&quot; onmouseover=&quot;showTip(event, 'fs5', 230)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 231)&quot; onmouseover=&quot;showTip(event, 'fs5', 231)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs37', 232)&quot; onmouseover=&quot;showTip(event, 'fs37', 232)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 233)&quot; onmouseover=&quot;showTip(event, 'fs5', 233)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 234)&quot; onmouseover=&quot;showTip(event, 'fs39', 234)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
        | &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; | &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
        | _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 235)&quot; onmouseover=&quot;showTip(event, 'fs29', 235)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This should not happen&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 236)&quot; onmouseover=&quot;showTip(event, 'fs40', 236)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 237)&quot; onmouseover=&quot;showTip(event, 'fs32', 237)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 238)&quot; onmouseover=&quot;showTip(event, 'fs33', 238)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 239)&quot; onmouseover=&quot;showTip(event, 'fs34', 239)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 240)&quot; onmouseover=&quot;showTip(event, 'fs35', 240)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [|&lt;span onmouseout=&quot;hideTip(event, 'fs32', 241)&quot; onmouseover=&quot;showTip(event, 'fs32', 241)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 242)&quot; onmouseover=&quot;showTip(event, 'fs33', 242)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;|]

    &lt;span class=&quot;c&quot;&gt;// Main algorithm&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs40', 243)&quot; onmouseover=&quot;showTip(event, 'fs40', 243)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt;
        (&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 244)&quot; onmouseover=&quot;showTip(event, 'fs38', 244)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 245)&quot; onmouseover=&quot;showTip(event, 'fs5', 245)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 246)&quot; onmouseover=&quot;showTip(event, 'fs36', 246)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 247)&quot; onmouseover=&quot;showTip(event, 'fs38', 247)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 248)&quot; onmouseover=&quot;showTip(event, 'fs5', 248)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
        (&lt;span onmouseout=&quot;hideTip(event, 'fs39', 249)&quot; onmouseover=&quot;showTip(event, 'fs39', 249)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs37', 250)&quot; onmouseover=&quot;showTip(event, 'fs37', 250)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 251)&quot; onmouseover=&quot;showTip(event, 'fs5', 251)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))

&lt;span onmouseout=&quot;hideTip(event, 'fs36', 252)&quot; onmouseover=&quot;showTip(event, 'fs36', 252)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// &amp;quot;0&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs36', 253)&quot; onmouseover=&quot;showTip(event, 'fs36', 253)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;178&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;10110010&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs36', 254)&quot; onmouseover=&quot;showTip(event, 'fs36', 254)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;225&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;11100001&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As a summary, what did we learn so far? I hoped to show, that working with a nesting style
of functions is actually more easier to work with, and also a lot more natural in some cases. In
the case of a binary converter we really have two computations or a tree of computations. Not trying
to think with piping in mind actually makes a lot of stuff easier.&lt;/p&gt;
&lt;p&gt;When we face a problem we just decompose a problem into solvable small functions. Once we decomposed
a problem we need to compose the small parts back together. The problem is, sometimes that problem
can be naturally represented as a sequence of operations, but most of the time it can't. In our
case we also don't have a single sequence of computation. On every recursive step we really
have two computations.&lt;/p&gt;
&lt;p&gt;One computation determines the next character for our result. And another computation calculates
the next number we need to recurs on. We end up with two computations, two strings that
in the end need to put together into a single result. This algorithm is best visualized by a tree.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/tree-tobinary.svg&quot; alt=&quot;Shows the toBinary function as a Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;And the classical way to represent trees with code is by nesting and indentions. Piping is
not a good approach to represent tree structures. If you want to try to solve everything by
some kind of piping even before you determined if the problem is even solvable in a sequential
manner, you will only run into problems and will have a hard time to solve these kind of problems.&lt;/p&gt;
&lt;h2&gt;Composition&lt;/h2&gt;
&lt;p&gt;What we have seen so far is function application. Function application means to apply a value to
a function, or in other words. Execute a function to get the result of a function. Function
composition on the other hand is completely different. It means, combine two or more functions
together to create a new function. Even if it seems like two different tasks in theory, in practice
the difference isn't too big.&lt;/p&gt;
&lt;p&gt;Let's go back to our &lt;code&gt;blub&lt;/code&gt; function. We started with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 255)&quot; onmouseover=&quot;showTip(event, 'fs12', 255)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 256)&quot; onmouseover=&quot;showTip(event, 'fs9', 256)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 257)&quot; onmouseover=&quot;showTip(event, 'fs8', 257)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 258)&quot; onmouseover=&quot;showTip(event, 'fs11', 258)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 259)&quot; onmouseover=&quot;showTip(event, 'fs3', 259)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 260)&quot; onmouseover=&quot;showTip(event, 'fs9', 260)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This code is written with nesting. But as you can see, the real goal was not to execute
the chain of functions we have. The goal was to create a new function. In such a case, we also
can use function composition instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 261)&quot; onmouseover=&quot;showTip(event, 'fs41', 261)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 262)&quot; onmouseover=&quot;showTip(event, 'fs8', 262)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 263)&quot; onmouseover=&quot;showTip(event, 'fs11', 263)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 264)&quot; onmouseover=&quot;showTip(event, 'fs3', 264)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In this example you can see that the most natural way to write nesting as function composition
is to use &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;. With nesting we read the code from right to left. On the right is the input of
a function, on its left the output. The &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator preserves this structure. The input of
&lt;code&gt;square&lt;/code&gt; is the result of &lt;code&gt;add10&lt;/code&gt;. The input of &lt;code&gt;add10&lt;/code&gt; is the result of &lt;code&gt;sqrt&lt;/code&gt;. And the input
of &lt;code&gt;sqrt&lt;/code&gt; becomes the input of the &lt;code&gt;blub&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The advantage of function composition is that we can omit parenthesis and variables even further.
We also don't need explicit function arguments. If we use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; we just can
reverse the whole chain this time.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 265)&quot; onmouseover=&quot;showTip(event, 'fs41', 265)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 266)&quot; onmouseover=&quot;showTip(event, 'fs3', 266)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 267)&quot; onmouseover=&quot;showTip(event, 'fs11', 267)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 268)&quot; onmouseover=&quot;showTip(event, 'fs8', 268)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is also an even further example why &lt;code&gt;&amp;lt;|&lt;/code&gt; is bad. It is only natural to think that &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; are somewhat the same only in reverse order, and sure they are. But this is not the case
for the combination &lt;code&gt;&amp;lt;|&lt;/code&gt; and &lt;code&gt;|&amp;gt;&lt;/code&gt;. The piping operators are really two completely distinct operators
that work differently.&lt;/p&gt;
&lt;p&gt;While function composition is a little bit shorter compared to piping, the difference isn't that much.
Because of some problems in F# with the type-inference it also can be that this approach sometimes
creates a &lt;strong&gt;Value restriction&lt;/strong&gt; error. If you encounter such an error, the best fix to those kind
of error is just to create a function with explicit arguments instead of function composition.
As the difference is anyway not too big, you also always can use nesting or piping instead of
function composition.&lt;/p&gt;
&lt;p&gt;One place where function composition is a better choice is if you want to pass a function
as an argument to another function. Let's look at our &lt;code&gt;blub&lt;/code&gt; function again. We first can
create the &lt;code&gt;blub&lt;/code&gt; function and then use it in &lt;code&gt;List.map&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 269)&quot; onmouseover=&quot;showTip(event, 'fs41', 269)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 270)&quot; onmouseover=&quot;showTip(event, 'fs8', 270)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 271)&quot; onmouseover=&quot;showTip(event, 'fs11', 271)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 272)&quot; onmouseover=&quot;showTip(event, 'fs3', 272)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 273)&quot; onmouseover=&quot;showTip(event, 'fs16', 273)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 274)&quot; onmouseover=&quot;showTip(event, 'fs17', 274)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 275)&quot; onmouseover=&quot;showTip(event, 'fs41', 275)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But if you need &lt;code&gt;blub&lt;/code&gt; only in a single place, it is a little bit annoying to explicitly create and
name a function. It is just better to inline the whole function. Without function composition we need
to write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 276)&quot; onmouseover=&quot;showTip(event, 'fs16', 276)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 277)&quot; onmouseover=&quot;showTip(event, 'fs17', 277)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 278)&quot; onmouseover=&quot;showTip(event, 'fs9', 278)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 279)&quot; onmouseover=&quot;showTip(event, 'fs8', 279)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 280)&quot; onmouseover=&quot;showTip(event, 'fs11', 280)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 281)&quot; onmouseover=&quot;showTip(event, 'fs3', 281)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 282)&quot; onmouseover=&quot;showTip(event, 'fs9', 282)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))) [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;With function composition on the other hand we can shorten this example to:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 283)&quot; onmouseover=&quot;showTip(event, 'fs16', 283)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 284)&quot; onmouseover=&quot;showTip(event, 'fs17', 284)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 285)&quot; onmouseover=&quot;showTip(event, 'fs8', 285)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 286)&quot; onmouseover=&quot;showTip(event, 'fs11', 286)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 287)&quot; onmouseover=&quot;showTip(event, 'fs3', 287)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;p&gt;At the end I just want to gather some best practices. Those are best practices from me and
like always, every person usually disagree with another 10%.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Never use &lt;code&gt;&amp;lt;|&lt;/code&gt;. People think of it as the reverse of &lt;code&gt;|&amp;gt;&lt;/code&gt; but it isn't.&lt;/li&gt;
&lt;li&gt;If you disagree with 1. then at least never mix &lt;code&gt;|&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;|&lt;/code&gt; in a single statement.&lt;/li&gt;
&lt;li&gt;
Never mix &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; in a single-statement. &lt;code&gt;f &amp;gt;&amp;gt; g &amp;gt;&amp;gt; h &amp;gt;&amp;gt; i&lt;/code&gt; or &lt;code&gt;f &amp;lt;&amp;lt; g &amp;lt;&amp;lt; h &amp;lt;&amp;lt; i&lt;/code&gt; is
easy to understand. &lt;code&gt;f &amp;lt;&amp;lt; g &amp;gt;&amp;gt; h &amp;lt;&amp;lt; i&lt;/code&gt; isn't.
&lt;/li&gt;
&lt;li&gt;
Don't favour piping over nesting. Piping is only good for strict sequential code. Favour piping
over nesting means you limit the way you think.
&lt;/li&gt;
&lt;li&gt;
If you create new functions. Don't think of piping too much. It is good if you can pipe
functions, but it is not bad if you cannot do that. Not every function works good with piping.
&lt;/li&gt;
&lt;li&gt;
Try to &lt;strong&gt;solve your problem first&lt;/strong&gt;. Because nesting is good for any kind of tree structure and
thus more powerful. Try to use nesting by default.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;After&lt;/strong&gt; you solved a problem and realized that the code can be represented by a sequence with
piping. Refactor the code with piping.
&lt;/li&gt;
&lt;li&gt;If possible, use function composition if you pass functions as arguments instead of lambda functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Overall we covered function application and composition. We saw function application with nesting
or piping with operators like &lt;code&gt;|&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;|&lt;/code&gt;. We also can use function composition with &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; or
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; in certain situation.&lt;/p&gt;
&lt;p&gt;I hope in this article you learned how all of those operators work, and more important, when you should
use which kind of style. Nesting, piping and function composition are three ways to either execute
or compose functions. But not any of those are good in any situation.&lt;/p&gt;
&lt;p&gt;Especially piping is overused in F# in my opinion. Not every problem can be expressed naturally
in a sequential way of piping. So don't view any problem as a nail that you solve with a hammer.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val x : float&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val sqrt : value:&amp;#39;T -&amp;gt; &amp;#39;U (requires member Sqrt)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.sqrt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val add1 : (int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.add1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val square : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.square&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val x : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val pown : x:&amp;#39;T -&amp;gt; n:int -&amp;gt; &amp;#39;T (requires member get_One and member ( * ) and member ( / ))&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.pown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val add10 : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.add10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val blub : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.blub&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val a : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val b : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val c : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; z:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val z : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val append : list1:&amp;#39;T list -&amp;gt; list2:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.append&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val add1 : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.add1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val sub1 : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.sub1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val extract : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.extract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val toString : x:int -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val failwith : message:string -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.failwith&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val rightShift : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.rightShift&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val concat : x:string -&amp;gt; y:string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val x : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val y : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;module String&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val concat : sep:string -&amp;gt; strings:seq&amp;lt;string&amp;gt; -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val toBinary : x:int -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.toBinary&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val extract : (int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val rightShift : (int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val toString : (int -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val concat : (string -&amp;gt; string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val blub : (float -&amp;gt; float)&lt;br /&gt;&lt;br /&gt;Full name: Main.blub&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Catamorphisms</title>
   <link href="https://sidburn.github.io/blog/2016/05/28/catamorphisms"/>
   <updated>2016-05-28T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/05/28/catamorphisms</id>
   <content type="html">&lt;p&gt;Up to this point I created various articles about &lt;code&gt;fold&lt;/code&gt;, in my &lt;a href=&quot;/Series&quot;&gt;Series&lt;/a&gt; I
also created a category named &lt;strong&gt;Fold (Catamorphisms)&lt;/strong&gt; but up till now I didn't explained
how this articles related to each other, or what &lt;em&gt;Catamorphisms&lt;/em&gt; mean. In this article
I want to talk about the remaining parts.&lt;/p&gt;
&lt;h2&gt;Table of Content&lt;/h2&gt;
&lt;ul class=&quot;toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#TheLists&quot;&gt;The List&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cata&quot;&gt;Introducing Cata&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tail-recursion&quot;&gt;Tail Recursion with FoldBack&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#binary-trees&quot;&gt;Binary Trees&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-cata&quot;&gt;Cata for Tree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fold-vs-foldback&quot;&gt;Fold vs. FoldBack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-foldback&quot;&gt;FoldBack for Tree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-foldback-examples&quot;&gt;FoldBack examples&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-fold&quot;&gt;Fold for Tree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#benchmarking&quot;&gt;Some Benchmarking&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#markdown&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;TheLists&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The List&lt;/h2&gt;
&lt;p&gt;Catamorphisms is a generalization that emerged from the list data-structure. The list
data-structure, how it is found in functional programming, is usually build as a single
linked list. Or to be more precise, it is build as a recursive data type expressed
as a Discriminated Union. That is the reason why
&lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic Data-Types&lt;/a&gt; is the very first
entry.&lt;/p&gt;
&lt;p&gt;Catamorphisms is the idea that we also implement &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; functions for
other discriminated unions besides list. Because of this it is important to first
understand how to define data-types, especially recursive discriminated unions.&lt;/p&gt;
&lt;p&gt;To get a better understanding of the concept, this time we implement our own
list type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I also create additionally constructor functions for each case:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 10)&quot; onmouseover=&quot;showTip(event, 'fs8', 10)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 11)&quot; onmouseover=&quot;showTip(event, 'fs9', 11)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 12)&quot; onmouseover=&quot;showTip(event, 'fs10', 12)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 14)&quot; onmouseover=&quot;showTip(event, 'fs9', 14)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 15)&quot; onmouseover=&quot;showTip(event, 'fs10', 15)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;info&quot;&gt;
When you wonder about the name &lt;code&gt;Cons&lt;/code&gt; this dates back to Lisp. For example
in &lt;a href=&quot;http://www.racket-lang.org/&quot;&gt;Racket&lt;/a&gt; (a Lisp dialect) you can
build a list in such way.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;racket&quot;&gt;(define xs (cons 1 (cons 2 (cons 3 empty))))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;with the helper functions we defined in F# it almost looks the same.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 16)&quot; onmouseover=&quot;showTip(event, 'fs11', 16)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;As soon we have any kind of discriminated union, working with such a type follows
a straight pattern. Usually we create a function that matches on our type, and
we must provide code for every case we have. In our list case that means
we must match on the &lt;code&gt;Empty&lt;/code&gt; case and on the &lt;code&gt;Cons(h,t)&lt;/code&gt; case and do something
with every case.&lt;/p&gt;
&lt;p&gt;But the &lt;code&gt;Cons&lt;/code&gt; case is special, because it is recursive. So how do we work
with it? We just write a recursive function that recurs! Once you notice
this pattern, writing any kind of function for a recursive discriminated union
becomes easy. First, let's define some example data that we will use from now on:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 17)&quot; onmouseover=&quot;showTip(event, 'fs12', 17)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 19)&quot; onmouseover=&quot;showTip(event, 'fs8', 19)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 20)&quot; onmouseover=&quot;showTip(event, 'fs8', 20)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 21)&quot; onmouseover=&quot;showTip(event, 'fs7', 21)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)))
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 23)&quot; onmouseover=&quot;showTip(event, 'fs8', 23)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 24)&quot; onmouseover=&quot;showTip(event, 'fs8', 24)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 25)&quot; onmouseover=&quot;showTip(event, 'fs8', 25)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 26)&quot; onmouseover=&quot;showTip(event, 'fs8', 26)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 27)&quot; onmouseover=&quot;showTip(event, 'fs8', 27)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 28)&quot; onmouseover=&quot;showTip(event, 'fs7', 28)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)))))
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 29)&quot; onmouseover=&quot;showTip(event, 'fs14', 29)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 30)&quot; onmouseover=&quot;showTip(event, 'fs8', 30)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 31)&quot; onmouseover=&quot;showTip(event, 'fs8', 31)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 32)&quot; onmouseover=&quot;showTip(event, 'fs8', 32)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 33)&quot; onmouseover=&quot;showTip(event, 'fs7', 33)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And our first example function &lt;code&gt;listLength'&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 34)&quot; onmouseover=&quot;showTip(event, 'fs15', 34)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 35)&quot; onmouseover=&quot;showTip(event, 'fs16', 35)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 36)&quot; onmouseover=&quot;showTip(event, 'fs16', 36)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 37)&quot; onmouseover=&quot;showTip(event, 'fs5', 37)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 38)&quot; onmouseover=&quot;showTip(event, 'fs6', 38)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 39)&quot; onmouseover=&quot;showTip(event, 'fs9', 39)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 40)&quot; onmouseover=&quot;showTip(event, 'fs10', 40)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 41)&quot; onmouseover=&quot;showTip(event, 'fs15', 41)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 42)&quot; onmouseover=&quot;showTip(event, 'fs10', 42)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 44)&quot; onmouseover=&quot;showTip(event, 'fs12', 44)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs15', 45)&quot; onmouseover=&quot;showTip(event, 'fs15', 45)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 46)&quot; onmouseover=&quot;showTip(event, 'fs13', 46)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs15', 47)&quot; onmouseover=&quot;showTip(event, 'fs15', 47)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 48)&quot; onmouseover=&quot;showTip(event, 'fs14', 48)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;listLength'&lt;/code&gt; returns the amount of elements in our list. We just need to handle
both cases to achieve that. If we have an &lt;code&gt;Empty&lt;/code&gt; case, the length is obvious,
then we have zero elements. If we have &lt;code&gt;Cons&lt;/code&gt; then we have one element plus
the amount of elements of the remaining list. So we call &lt;code&gt;listLength' t&lt;/code&gt; to
get it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 49)&quot; onmouseover=&quot;showTip(event, 'fs17', 49)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 50)&quot; onmouseover=&quot;showTip(event, 'fs5', 50)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 51)&quot; onmouseover=&quot;showTip(event, 'fs6', 51)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs18', 52)&quot; onmouseover=&quot;showTip(event, 'fs18', 52)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs19', 53)&quot; onmouseover=&quot;showTip(event, 'fs19', 53)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 55)&quot; onmouseover=&quot;showTip(event, 'fs17', 55)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 56)&quot; onmouseover=&quot;showTip(event, 'fs19', 56)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs17', 57)&quot; onmouseover=&quot;showTip(event, 'fs17', 57)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 58)&quot; onmouseover=&quot;showTip(event, 'fs12', 58)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs17', 59)&quot; onmouseover=&quot;showTip(event, 'fs17', 59)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 60)&quot; onmouseover=&quot;showTip(event, 'fs13', 60)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;info&quot;&gt;
The keyword &lt;code&gt;function&lt;/code&gt; is a shortcut. Instead of defining the last argument
and Pattern Match on it. We can directly use &lt;code&gt;function&lt;/code&gt; that does the same.
This way we can omit the argument, and the &lt;code&gt;match&lt;/code&gt; line.
&lt;/div
&lt;p&gt;&lt;code&gt;listSum'&lt;/code&gt; is just a simple &lt;em&gt;sum&lt;/em&gt; function that adds a list of &lt;code&gt;int&lt;/code&gt; together.
Probably at this time you start to see that &lt;code&gt;listLength'&lt;/code&gt; and &lt;code&gt;listSum'&lt;/code&gt; are
very similar. But let's create some more examples.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 61)&quot; onmouseover=&quot;showTip(event, 'fs20', 61)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 62)&quot; onmouseover=&quot;showTip(event, 'fs21', 62)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 63)&quot; onmouseover=&quot;showTip(event, 'fs5', 63)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 64)&quot; onmouseover=&quot;showTip(event, 'fs7', 64)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 65)&quot; onmouseover=&quot;showTip(event, 'fs6', 65)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 66)&quot; onmouseover=&quot;showTip(event, 'fs9', 66)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 67)&quot; onmouseover=&quot;showTip(event, 'fs10', 67)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 68)&quot; onmouseover=&quot;showTip(event, 'fs8', 68)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 69)&quot; onmouseover=&quot;showTip(event, 'fs21', 69)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 70)&quot; onmouseover=&quot;showTip(event, 'fs9', 70)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 71)&quot; onmouseover=&quot;showTip(event, 'fs20', 71)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 72)&quot; onmouseover=&quot;showTip(event, 'fs21', 72)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 73)&quot; onmouseover=&quot;showTip(event, 'fs10', 73)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;))

&lt;span onmouseout=&quot;hideTip(event, 'fs20', 74)&quot; onmouseover=&quot;showTip(event, 'fs20', 74)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 75)&quot; onmouseover=&quot;showTip(event, 'fs22', 75)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 76)&quot; onmouseover=&quot;showTip(event, 'fs22', 76)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 77)&quot; onmouseover=&quot;showTip(event, 'fs22', 77)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs12', 78)&quot; onmouseover=&quot;showTip(event, 'fs12', 78)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Empty)))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs20', 79)&quot; onmouseover=&quot;showTip(event, 'fs20', 79)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 80)&quot; onmouseover=&quot;showTip(event, 'fs22', 80)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 81)&quot; onmouseover=&quot;showTip(event, 'fs22', 81)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 82)&quot; onmouseover=&quot;showTip(event, 'fs22', 82)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs13', 83)&quot; onmouseover=&quot;showTip(event, 'fs13', 83)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Cons (16,Cons (25,Empty)))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs20', 84)&quot; onmouseover=&quot;showTip(event, 'fs20', 84)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 85)&quot; onmouseover=&quot;showTip(event, 'fs23', 85)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 86)&quot; onmouseover=&quot;showTip(event, 'fs24', 86)&quot; class=&quot;f&quot;&gt;length&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 87)&quot; onmouseover=&quot;showTip(event, 'fs14', 87)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// Cons (5,Cons (1,Cons (6,Empty)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If you are not used to recursion then this looks a little bit more complicated, but it
is still the same. We expect that &lt;code&gt;map&lt;/code&gt; runs a function on every element. So what do
we do we do with an empty list? We just return empty. Otherwise we have a single
element &lt;code&gt;h&lt;/code&gt; and another list &lt;code&gt;t&lt;/code&gt;. In that case we just call &lt;code&gt;(f h)&lt;/code&gt; to transform
our &lt;code&gt;h&lt;/code&gt; element, and how do we transform the remaining list &lt;code&gt;t&lt;/code&gt;? With &lt;code&gt;listMap'&lt;/code&gt;,
we only need to &lt;code&gt;cons&lt;/code&gt; the result of both function calls.&lt;/p&gt;
&lt;p&gt;In the next function we want to append an element to a list. Just think for a
moment for yourself how you achieve that. The answer: In the &lt;code&gt;Cons&lt;/code&gt; case we do nothing, as
this is not the end of the list. Instead we transform an &lt;code&gt;Empty&lt;/code&gt; with our element
appended.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 88)&quot; onmouseover=&quot;showTip(event, 'fs25', 88)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 89)&quot; onmouseover=&quot;showTip(event, 'fs26', 89)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 90)&quot; onmouseover=&quot;showTip(event, 'fs5', 90)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 91)&quot; onmouseover=&quot;showTip(event, 'fs8', 91)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 92)&quot; onmouseover=&quot;showTip(event, 'fs26', 92)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 93)&quot; onmouseover=&quot;showTip(event, 'fs7', 93)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 94)&quot; onmouseover=&quot;showTip(event, 'fs6', 94)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 95)&quot; onmouseover=&quot;showTip(event, 'fs9', 95)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 96)&quot; onmouseover=&quot;showTip(event, 'fs10', 96)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 97)&quot; onmouseover=&quot;showTip(event, 'fs8', 97)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 98)&quot; onmouseover=&quot;showTip(event, 'fs9', 98)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 99)&quot; onmouseover=&quot;showTip(event, 'fs25', 99)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 100)&quot; onmouseover=&quot;showTip(event, 'fs26', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 101)&quot; onmouseover=&quot;showTip(event, 'fs10', 101)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;))

&lt;span onmouseout=&quot;hideTip(event, 'fs25', 102)&quot; onmouseover=&quot;showTip(event, 'fs25', 102)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 103)&quot; onmouseover=&quot;showTip(event, 'fs12', 103)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (2,Cons (3,Cons (4,Empty))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs25', 104)&quot; onmouseover=&quot;showTip(event, 'fs25', 104)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Kazom!&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 105)&quot; onmouseover=&quot;showTip(event, 'fs14', 105)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (&amp;quot;Hello&amp;quot;,Cons (&amp;quot; &amp;quot;,Cons (&amp;quot;World!&amp;quot;,Cons (&amp;quot;Kazom!&amp;quot;,Empty))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, at this point we have enough examples. When we look at our examples, how do we work
with a discriminated union in general? All examples have one recurring pattern that we
do all over again.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We must pattern match on every case of the discriminated union.&lt;/li&gt;
&lt;li&gt;In a non-recursive case we just do whatever needs to be done.&lt;/li&gt;
&lt;li&gt;
In a recursive case like &lt;code&gt;Cons&lt;/code&gt; we have two data-fields. &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;. We just work
with &lt;code&gt;h&lt;/code&gt; however we need, exactly like a non-recursive case. For the recursive datum
&lt;code&gt;t&lt;/code&gt; we just call our function again and recurs.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a general pattern how we can work with any discriminated union and provide any
kind of transformation for it. But there can be two problems with this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
The function feels repetitive, or more important, always rewriting the whole recursion logic
feels not like Don't-Repeat-Yourself.
&lt;/li&gt;
&lt;li&gt;None of the functions we have, are tail-recursive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's address those problems separately.&lt;/p&gt;
&lt;a name=&quot;cata&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Introducing Cata&lt;/h2&gt;
&lt;p&gt;We already identified our Pattern, so what we usually do is to create a &lt;code&gt;cata&lt;/code&gt; function
that abstract those repetition. To describe the repetition in one sentence: &lt;em&gt;A &lt;code&gt;cata&lt;/code&gt;
function abstracts the recursion over a data-structure.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We handle the recursion inside of &lt;code&gt;cata&lt;/code&gt;. &lt;code&gt;cata&lt;/code&gt; then expects a function to handle
every case. New functions can then be created out of &lt;code&gt;cata&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Abstraction is probably the most important thing in programming. Abstraction is the idea
to see recurring patterns. That means in order to do abstraction we need at least
two things that are very similar (lets name them A and B). We then create a new function
(we name it C) that contains all the similar things between A and B. To handle the differences
we expect the differences to be passed as arguments to C (Often in the form of functions).
After we have C, we rewrite A and B by using C.
&lt;/div&gt;
&lt;p&gt;Our first version of &lt;code&gt;cata&lt;/code&gt; could look like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 106)&quot; onmouseover=&quot;showTip(event, 'fs27', 106)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 107)&quot; onmouseover=&quot;showTip(event, 'fs28', 107)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 108)&quot; onmouseover=&quot;showTip(event, 'fs29', 108)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 109)&quot; onmouseover=&quot;showTip(event, 'fs5', 109)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 110)&quot; onmouseover=&quot;showTip(event, 'fs28', 110)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 111)&quot; onmouseover=&quot;showTip(event, 'fs6', 111)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs30', 112)&quot; onmouseover=&quot;showTip(event, 'fs30', 112)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 113)&quot; onmouseover=&quot;showTip(event, 'fs31', 113)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 114)&quot; onmouseover=&quot;showTip(event, 'fs29', 114)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 115)&quot; onmouseover=&quot;showTip(event, 'fs30', 115)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs27', 116)&quot; onmouseover=&quot;showTip(event, 'fs27', 116)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 117)&quot; onmouseover=&quot;showTip(event, 'fs28', 117)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 118)&quot; onmouseover=&quot;showTip(event, 'fs29', 118)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 119)&quot; onmouseover=&quot;showTip(event, 'fs31', 119)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Before we look closer in how it works, let's see how we can create a new length function
defined with &lt;code&gt;cata&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 120)&quot; onmouseover=&quot;showTip(event, 'fs32', 120)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 121)&quot; onmouseover=&quot;showTip(event, 'fs16', 121)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 122)&quot; onmouseover=&quot;showTip(event, 'fs27', 122)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 123)&quot; onmouseover=&quot;showTip(event, 'fs9', 123)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 124)&quot; onmouseover=&quot;showTip(event, 'fs33', 124)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 125)&quot; onmouseover=&quot;showTip(event, 'fs33', 125)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 126)&quot; onmouseover=&quot;showTip(event, 'fs16', 126)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs32', 127)&quot; onmouseover=&quot;showTip(event, 'fs32', 127)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 128)&quot; onmouseover=&quot;showTip(event, 'fs12', 128)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs32', 129)&quot; onmouseover=&quot;showTip(event, 'fs32', 129)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 130)&quot; onmouseover=&quot;showTip(event, 'fs13', 130)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs32', 131)&quot; onmouseover=&quot;showTip(event, 'fs32', 131)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 132)&quot; onmouseover=&quot;showTip(event, 'fs14', 132)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;listCata'&lt;/code&gt; just expects two functions. The first functions handles the &lt;code&gt;Empty&lt;/code&gt; case,
and the second functions handles the &lt;code&gt;Cons&lt;/code&gt; case. But which arguments do we pass those function
exactly?&lt;/p&gt;
&lt;p&gt;We pass the data that is attached to every case to the provided function. As the &lt;code&gt;Empty&lt;/code&gt; case
don't contain any data, we just call &lt;code&gt;fEmpty ()&lt;/code&gt; and pass it the &lt;strong&gt;unit&lt;/strong&gt; value.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Cons&lt;/code&gt; case contains two datums. It contains the &lt;em&gt;head&lt;/em&gt; and the &lt;em&gt;tail&lt;/em&gt; element. But we
do not pass the &lt;em&gt;tail&lt;/em&gt; element directly. Just think about it for a minute. The purpose of
the &lt;code&gt;cata&lt;/code&gt; function is to abstract the recursion, so the function passed to &lt;code&gt;cata&lt;/code&gt;
don't need to handle the recursion. If we would pass &lt;code&gt;t&lt;/code&gt; directly to &lt;code&gt;fCons&lt;/code&gt; then
&lt;code&gt;fCons&lt;/code&gt; again would need to handle the recursion. Instead of passing &lt;code&gt;t&lt;/code&gt;, we pass the
result of the recursive call.&lt;/p&gt;
&lt;p&gt;If this transformation looks strange. Actually we have written this kind of code multiple
times already. Let's look again at the first &lt;code&gt;listLength'&lt;/code&gt; and lets think how we could
transform &lt;code&gt;listLength'&lt;/code&gt; to the more abstract &lt;code&gt;listCata'&lt;/code&gt;. When we look at the &lt;code&gt;Cons&lt;/code&gt; line
It looked like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At first we can treat &lt;code&gt;+&lt;/code&gt; just as a function. Instead of writing it infix between two arguments
we also can write it prefix before its arguments. Then it looks like a normal function call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;|&lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But in our &lt;code&gt;listCata'&lt;/code&gt; function we don't want to calculate &lt;code&gt;(+)&lt;/code&gt;, a hard-coded function, we
want to execute the function the user provided, so we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;|&lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Additionally, we don't want to pass &lt;code&gt;1&lt;/code&gt;. &lt;code&gt;1&lt;/code&gt; was the replacement for &lt;code&gt;h&lt;/code&gt; for the length function.
In the abstracted version we just pass &lt;code&gt;h&lt;/code&gt; to &lt;code&gt;fCons&lt;/code&gt; and &lt;code&gt;fCons&lt;/code&gt; decide what to do
with &lt;code&gt;h&lt;/code&gt;. And the last thing, our function is named &lt;code&gt;listCata'&lt;/code&gt; so we need to recurs on
&lt;code&gt;listCata'&lt;/code&gt; not &lt;code&gt;listLength'&lt;/code&gt;. So we end with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;|&lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listCata&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fEmpty&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now let's improve &lt;code&gt;listCata'&lt;/code&gt; step by step. In the list example this isn't so obvious,
but as we see later when we have other discriminated unions with much more cases and a lot
more recursive cases, then calling a &lt;code&gt;cata&lt;/code&gt; function can become annoying. We can fix that by
creating a partial applied function before we &lt;code&gt;match&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 133)&quot; onmouseover=&quot;showTip(event, 'fs34', 133)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 134)&quot; onmouseover=&quot;showTip(event, 'fs28', 134)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 135)&quot; onmouseover=&quot;showTip(event, 'fs29', 135)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 136)&quot; onmouseover=&quot;showTip(event, 'fs35', 136)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 137)&quot; onmouseover=&quot;showTip(event, 'fs36', 137)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 138)&quot; onmouseover=&quot;showTip(event, 'fs34', 138)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 139)&quot; onmouseover=&quot;showTip(event, 'fs28', 139)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 140)&quot; onmouseover=&quot;showTip(event, 'fs29', 140)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 141)&quot; onmouseover=&quot;showTip(event, 'fs35', 141)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 142)&quot; onmouseover=&quot;showTip(event, 'fs5', 142)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 143)&quot; onmouseover=&quot;showTip(event, 'fs28', 143)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 144)&quot; onmouseover=&quot;showTip(event, 'fs6', 144)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs30', 145)&quot; onmouseover=&quot;showTip(event, 'fs30', 145)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 146)&quot; onmouseover=&quot;showTip(event, 'fs31', 146)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 147)&quot; onmouseover=&quot;showTip(event, 'fs29', 147)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 148)&quot; onmouseover=&quot;showTip(event, 'fs30', 148)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs36', 149)&quot; onmouseover=&quot;showTip(event, 'fs36', 149)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 150)&quot; onmouseover=&quot;showTip(event, 'fs31', 150)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the case of a list this isn't a big improvement, we also cannot use the &lt;code&gt;function&lt;/code&gt; keyword anymore.
But usually it is a good idea and it makes the code a little bit cleaner, especially when we create
a &lt;code&gt;cata&lt;/code&gt; function for more complicated discriminated unions.&lt;/p&gt;
&lt;p&gt;A second improvement. Actually functions that take &lt;code&gt;unit&lt;/code&gt; as a value are bad! A pure function that
expects &lt;code&gt;unit&lt;/code&gt; always only can return the exact same value when it is called. F# is not a
pure-functional language, so theoretically &lt;code&gt;fEmpty&lt;/code&gt; could do some kind of side-effects and always
return something different. But, I don't encourage such things. A &lt;code&gt;cata&lt;/code&gt; function is really
the idea to transform a data-structure, there shouldn't be side-effects in it. So instead
of a function, we just expect a direct value that should be used for the &lt;code&gt;Empty&lt;/code&gt; case. On top,
I name the return type &lt;code&gt;'State&lt;/code&gt;. This is just a &lt;em&gt;generic-type&lt;/em&gt;, but by having a more descriptive
name as &lt;code&gt;'a&lt;/code&gt;, &lt;code&gt;'b&lt;/code&gt; and so on, it can help in understanding the function signatures. Now our
third &lt;code&gt;listCata'''&lt;/code&gt; version looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 151)&quot; onmouseover=&quot;showTip(event, 'fs37', 151)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 152)&quot; onmouseover=&quot;showTip(event, 'fs38', 152)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 153)&quot; onmouseover=&quot;showTip(event, 'fs39', 153)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 154)&quot; onmouseover=&quot;showTip(event, 'fs16', 154)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 155)&quot; onmouseover=&quot;showTip(event, 'fs40', 155)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 156)&quot; onmouseover=&quot;showTip(event, 'fs37', 156)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 157)&quot; onmouseover=&quot;showTip(event, 'fs38', 157)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 158)&quot; onmouseover=&quot;showTip(event, 'fs39', 158)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 159)&quot; onmouseover=&quot;showTip(event, 'fs16', 159)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 160)&quot; onmouseover=&quot;showTip(event, 'fs5', 160)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 161)&quot; onmouseover=&quot;showTip(event, 'fs38', 161)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 162)&quot; onmouseover=&quot;showTip(event, 'fs6', 162)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 163)&quot; onmouseover=&quot;showTip(event, 'fs9', 163)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 164)&quot; onmouseover=&quot;showTip(event, 'fs10', 164)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 165)&quot; onmouseover=&quot;showTip(event, 'fs39', 165)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 166)&quot; onmouseover=&quot;showTip(event, 'fs9', 166)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs40', 167)&quot; onmouseover=&quot;showTip(event, 'fs40', 167)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 168)&quot; onmouseover=&quot;showTip(event, 'fs10', 168)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we look at the type-signature of our function the type-signature should look familiar!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 169)&quot; onmouseover=&quot;showTip(event, 'fs41', 169)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 170)&quot; onmouseover=&quot;showTip(event, 'fs42', 170)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It is nearly the same as &lt;code&gt;foldBack&lt;/code&gt;! The only difference is that the arguments are in another
order. Let's compare it with the signature of &lt;code&gt;List.foldBack&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 171)&quot; onmouseover=&quot;showTip(event, 'fs41', 171)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 172)&quot; onmouseover=&quot;showTip(event, 'fs41', 172)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It just expects the &lt;code&gt;fCons&lt;/code&gt; function first, here named &lt;code&gt;folder&lt;/code&gt;, then the list to operator
on, and finally the value for the empty case, here just named &lt;code&gt;state&lt;/code&gt;. So let's also
do this kind of re-order, and finally we end up with our final &lt;code&gt;listCata&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 173)&quot; onmouseover=&quot;showTip(event, 'fs43', 173)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 174)&quot; onmouseover=&quot;showTip(event, 'fs39', 174)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 175)&quot; onmouseover=&quot;showTip(event, 'fs16', 175)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 176)&quot; onmouseover=&quot;showTip(event, 'fs44', 176)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 177)&quot; onmouseover=&quot;showTip(event, 'fs16', 177)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 178)&quot; onmouseover=&quot;showTip(event, 'fs5', 178)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 179)&quot; onmouseover=&quot;showTip(event, 'fs44', 179)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 180)&quot; onmouseover=&quot;showTip(event, 'fs6', 180)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 181)&quot; onmouseover=&quot;showTip(event, 'fs9', 181)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 182)&quot; onmouseover=&quot;showTip(event, 'fs10', 182)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 183)&quot; onmouseover=&quot;showTip(event, 'fs39', 183)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 184)&quot; onmouseover=&quot;showTip(event, 'fs9', 184)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs43', 185)&quot; onmouseover=&quot;showTip(event, 'fs43', 185)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 186)&quot; onmouseover=&quot;showTip(event, 'fs39', 186)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 187)&quot; onmouseover=&quot;showTip(event, 'fs10', 187)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 188)&quot; onmouseover=&quot;showTip(event, 'fs44', 188)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Usually, i wouldn't do such a re-order for a &lt;code&gt;cata&lt;/code&gt; function. We also lost the ability
to use partial application with the &lt;code&gt;recurs&lt;/code&gt; function. But because our list type is anyway
so small, the re-order doesn't hurt much. Here, it is more an example to show more clearly
the relation that &lt;code&gt;cata&lt;/code&gt; always has the same behaviour as &lt;code&gt;foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
It is important to understand that it behaves like &lt;code&gt;foldBack&lt;/code&gt; not like
&lt;code&gt;fold&lt;/code&gt;! I will later go more deeply into this topic and show how &lt;code&gt;fold&lt;/code&gt;
and &lt;code&gt;foldBack&lt;/code&gt; differ, and why that difference is important.
&lt;/div&gt;
&lt;p&gt;Our goal why we created a &lt;code&gt;cata&lt;/code&gt; function was that we have an abstraction, instead of writing
functions that do the recursion all over by themselves, we now can use &lt;code&gt;listCata&lt;/code&gt; that abstract
this kind of thing for us. Now, we also should use &lt;code&gt;listCata&lt;/code&gt; and rewrite all our functions
we created so far by using our abstraction. Here are the final list functions re-written with
&lt;code&gt;listCata&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 189)&quot; onmouseover=&quot;showTip(event, 'fs45', 189)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 190)&quot; onmouseover=&quot;showTip(event, 'fs16', 190)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 191)&quot; onmouseover=&quot;showTip(event, 'fs43', 191)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 192)&quot; onmouseover=&quot;showTip(event, 'fs26', 192)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 193)&quot; onmouseover=&quot;showTip(event, 'fs46', 193)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 194)&quot; onmouseover=&quot;showTip(event, 'fs46', 194)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 195)&quot; onmouseover=&quot;showTip(event, 'fs16', 195)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 196)&quot; onmouseover=&quot;showTip(event, 'fs47', 196)&quot; class=&quot;f&quot;&gt;listSum&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs48', 197)&quot; onmouseover=&quot;showTip(event, 'fs48', 197)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 198)&quot; onmouseover=&quot;showTip(event, 'fs43', 198)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 199)&quot; onmouseover=&quot;showTip(event, 'fs22', 199)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 200)&quot; onmouseover=&quot;showTip(event, 'fs46', 200)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 201)&quot; onmouseover=&quot;showTip(event, 'fs22', 201)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 202)&quot; onmouseover=&quot;showTip(event, 'fs46', 202)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs48', 203)&quot; onmouseover=&quot;showTip(event, 'fs48', 203)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 204)&quot; onmouseover=&quot;showTip(event, 'fs49', 204)&quot; class=&quot;f&quot;&gt;listMap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 205)&quot; onmouseover=&quot;showTip(event, 'fs21', 205)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs16', 206)&quot; onmouseover=&quot;showTip(event, 'fs16', 206)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 207)&quot; onmouseover=&quot;showTip(event, 'fs43', 207)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 208)&quot; onmouseover=&quot;showTip(event, 'fs26', 208)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 209)&quot; onmouseover=&quot;showTip(event, 'fs50', 209)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 210)&quot; onmouseover=&quot;showTip(event, 'fs8', 210)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 211)&quot; onmouseover=&quot;showTip(event, 'fs21', 211)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 212)&quot; onmouseover=&quot;showTip(event, 'fs26', 212)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs50', 213)&quot; onmouseover=&quot;showTip(event, 'fs50', 213)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 214)&quot; onmouseover=&quot;showTip(event, 'fs16', 214)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 215)&quot; onmouseover=&quot;showTip(event, 'fs7', 215)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 216)&quot; onmouseover=&quot;showTip(event, 'fs51', 216)&quot; class=&quot;f&quot;&gt;listSnoc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 217)&quot; onmouseover=&quot;showTip(event, 'fs26', 217)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 218)&quot; onmouseover=&quot;showTip(event, 'fs16', 218)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 219)&quot; onmouseover=&quot;showTip(event, 'fs43', 219)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 220)&quot; onmouseover=&quot;showTip(event, 'fs26', 220)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 221)&quot; onmouseover=&quot;showTip(event, 'fs52', 221)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 222)&quot; onmouseover=&quot;showTip(event, 'fs8', 222)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 223)&quot; onmouseover=&quot;showTip(event, 'fs26', 223)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 224)&quot; onmouseover=&quot;showTip(event, 'fs52', 224)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 225)&quot; onmouseover=&quot;showTip(event, 'fs16', 225)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 226)&quot; onmouseover=&quot;showTip(event, 'fs8', 226)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 227)&quot; onmouseover=&quot;showTip(event, 'fs26', 227)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 228)&quot; onmouseover=&quot;showTip(event, 'fs7', 228)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And some examples to see that they work like expected:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 229)&quot; onmouseover=&quot;showTip(event, 'fs45', 229)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 230)&quot; onmouseover=&quot;showTip(event, 'fs12', 230)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 231)&quot; onmouseover=&quot;showTip(event, 'fs45', 231)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 232)&quot; onmouseover=&quot;showTip(event, 'fs13', 232)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 233)&quot; onmouseover=&quot;showTip(event, 'fs45', 233)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 234)&quot; onmouseover=&quot;showTip(event, 'fs14', 234)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs47', 235)&quot; onmouseover=&quot;showTip(event, 'fs47', 235)&quot; class=&quot;f&quot;&gt;listSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 236)&quot; onmouseover=&quot;showTip(event, 'fs12', 236)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs47', 237)&quot; onmouseover=&quot;showTip(event, 'fs47', 237)&quot; class=&quot;f&quot;&gt;listSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 238)&quot; onmouseover=&quot;showTip(event, 'fs13', 238)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 239)&quot; onmouseover=&quot;showTip(event, 'fs49', 239)&quot; class=&quot;f&quot;&gt;listMap&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 240)&quot; onmouseover=&quot;showTip(event, 'fs22', 240)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 241)&quot; onmouseover=&quot;showTip(event, 'fs22', 241)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 242)&quot; onmouseover=&quot;showTip(event, 'fs22', 242)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs12', 243)&quot; onmouseover=&quot;showTip(event, 'fs12', 243)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Empty)))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 244)&quot; onmouseover=&quot;showTip(event, 'fs49', 244)&quot; class=&quot;f&quot;&gt;listMap&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 245)&quot; onmouseover=&quot;showTip(event, 'fs22', 245)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 246)&quot; onmouseover=&quot;showTip(event, 'fs22', 246)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 247)&quot; onmouseover=&quot;showTip(event, 'fs22', 247)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs13', 248)&quot; onmouseover=&quot;showTip(event, 'fs13', 248)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Cons (16,Cons (25,Empty)))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs51', 249)&quot; onmouseover=&quot;showTip(event, 'fs51', 249)&quot; class=&quot;f&quot;&gt;listSnoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 250)&quot; onmouseover=&quot;showTip(event, 'fs12', 250)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (2,Cons (3,Cons (4,Empty))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs51', 251)&quot; onmouseover=&quot;showTip(event, 'fs51', 251)&quot; class=&quot;f&quot;&gt;listSnoc&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Kazoom&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 252)&quot; onmouseover=&quot;showTip(event, 'fs14', 252)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (&amp;quot;Hello&amp;quot;,Cons (&amp;quot; &amp;quot;,Cons (&amp;quot;World!&amp;quot;,Cons (&amp;quot;Kazoom&amp;quot;,Empty))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's summarize what we have done so far:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We usually start with a recursively defined discriminated union.&lt;/li&gt;
&lt;li&gt;When we work with such a type, we need to write recursive functions.&lt;/li&gt;
&lt;li&gt;
Instead of writing functions with recursion directly, we create a &lt;code&gt;cata&lt;/code&gt; function
that abstracts the recursion for us.
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cata&lt;/code&gt; function expects a function for every case.&lt;/li&gt;
&lt;li&gt;Cases without data can be simple values instead of functions.&lt;/li&gt;
&lt;li&gt;We just pass all data associated with that case to the correct function.&lt;/li&gt;
&lt;li&gt;
We don't pass a datum that is recursive to the functions. Those datum must be
first passed to &lt;code&gt;cata&lt;/code&gt; itself.
&lt;/li&gt;
&lt;li&gt;The behaviour of &lt;code&gt;cata&lt;/code&gt; is the same as &lt;code&gt;foldBack&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cata&lt;/code&gt; is not tail-recursive.&lt;/li&gt;
&lt;/ol&gt;
&lt;a name=&quot;tail-recursion&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tail Recursion with FoldBack&lt;/h2&gt;
&lt;p&gt;At this point we should ask ourselves if we really need tail-recursion. The answer is
not always &lt;strong&gt;yes&lt;/strong&gt;. We really should think of the use-cases we have, and what kind
of data-structure we defined. And in the most cases, the answer is &lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is important to understand that we only run into problems with recursion when we
have a data-structure with a linear depth. In our list example, this is the case.
What does it mean exactly? It means that it is pretty normal to have very deep
recursion, usually a case where every additional element increases the depth by one.&lt;/p&gt;
&lt;p&gt;For a single linked list this is the case. A list with 10,000 elements will also
create a stack depth of 10,000. So it is important to create tail-recursive
functions. But does that mean all the work on &lt;code&gt;cata&lt;/code&gt; was wasted?&lt;/p&gt;
&lt;p&gt;Absolutely not. We just take &lt;code&gt;cata&lt;/code&gt; as the starting point and we just try to make
&lt;code&gt;cata&lt;/code&gt; tail-recursive. The tail recursive version then is what we call &lt;code&gt;foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And this leads to the next articles in my series. Converting functions into
tail-recursive functions is a task on its own that needs proper explanation.&lt;/p&gt;
&lt;p&gt;One technique that is most often used is the idea of an accumulator. Instead of
doing a calculation once a function finished, we do the calculations immediately and
pass the result to the next function call. I explain this conept in more detail
in: &lt;a href=&quot;/blog/2016/04/05/mutable-loops-to-immutability&quot;&gt;From mutable loops to immutability&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another idea is to use a continuation function, I already provide two articles explaining
the ideas behind this technique. In &lt;a href=&quot;/blog/2016/04/16/fold-continuations&quot;&gt;Continuations and foldBack&lt;/a&gt;
I explain in deep how a tail-recursive &lt;code&gt;foldBack&lt;/code&gt; works. And in my article
&lt;a href=&quot;/blog/2016/05/07/cps-fold&quot;&gt;CPS fold -- fold with early exit&lt;/a&gt; I explain
the idea of a continuation function a second time with &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But it doesn't mean both ideas are interchangeable. When we directly want to create
a tail-recursive &lt;code&gt;foldBack&lt;/code&gt; function then we need to use the continuation-function
approach. We cannot create a tail-recursive &lt;code&gt;foldBack&lt;/code&gt; with an accumulator approach.&lt;/p&gt;
&lt;p&gt;As I already have three articles on those topics I don't go into much further
detail, so I just provide a quick explanation. We just start with the &lt;code&gt;cata&lt;/code&gt; function.
In &lt;code&gt;cata&lt;/code&gt; we see something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listCata&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;state&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, the second argument to &lt;code&gt;fCons&lt;/code&gt; is a recursive call. Let's shortly rethink what it does.
It calls the function and it will return some kind of data, this data is then passed to
the &lt;code&gt;fCons&lt;/code&gt; function as the second argument. With the continuation approach we just assume
we already have that data. So we just replace every recursive call with some variable
we don't have yet.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Sure, that wouldn't compile now, because we didn't define &lt;code&gt;racc&lt;/code&gt; anywhere, so we wrap it
inside a function, that functions then becomes &lt;code&gt;racc&lt;/code&gt; somewhere in the future.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But that isn't anything, we still need to somehow traverse our list, and call that function.
In short, we change our previously defined &lt;code&gt;cata&lt;/code&gt; all in all to something like that.
Let's see the &lt;code&gt;cata&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; directly to each other.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 173)&quot; onmouseover=&quot;showTip(event, 'fs43', 173)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 174)&quot; onmouseover=&quot;showTip(event, 'fs39', 174)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 175)&quot; onmouseover=&quot;showTip(event, 'fs16', 175)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 176)&quot; onmouseover=&quot;showTip(event, 'fs44', 176)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 177)&quot; onmouseover=&quot;showTip(event, 'fs16', 177)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 178)&quot; onmouseover=&quot;showTip(event, 'fs5', 178)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 179)&quot; onmouseover=&quot;showTip(event, 'fs44', 179)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 180)&quot; onmouseover=&quot;showTip(event, 'fs6', 180)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 181)&quot; onmouseover=&quot;showTip(event, 'fs9', 181)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 182)&quot; onmouseover=&quot;showTip(event, 'fs10', 182)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 183)&quot; onmouseover=&quot;showTip(event, 'fs39', 183)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 184)&quot; onmouseover=&quot;showTip(event, 'fs9', 184)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs43', 185)&quot; onmouseover=&quot;showTip(event, 'fs43', 185)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 186)&quot; onmouseover=&quot;showTip(event, 'fs39', 186)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 187)&quot; onmouseover=&quot;showTip(event, 'fs10', 187)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 188)&quot; onmouseover=&quot;showTip(event, 'fs44', 188)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 253)&quot; onmouseover=&quot;showTip(event, 'fs53', 253)&quot; class=&quot;f&quot;&gt;listFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 254)&quot; onmouseover=&quot;showTip(event, 'fs39', 254)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 255)&quot; onmouseover=&quot;showTip(event, 'fs16', 255)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 256)&quot; onmouseover=&quot;showTip(event, 'fs44', 256)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 257)&quot; onmouseover=&quot;showTip(event, 'fs54', 257)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 258)&quot; onmouseover=&quot;showTip(event, 'fs16', 258)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 259)&quot; onmouseover=&quot;showTip(event, 'fs55', 259)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 260)&quot; onmouseover=&quot;showTip(event, 'fs16', 260)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 261)&quot; onmouseover=&quot;showTip(event, 'fs5', 261)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 262)&quot; onmouseover=&quot;showTip(event, 'fs55', 262)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 263)&quot; onmouseover=&quot;showTip(event, 'fs44', 263)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 264)&quot; onmouseover=&quot;showTip(event, 'fs6', 264)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 265)&quot; onmouseover=&quot;showTip(event, 'fs9', 265)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 266)&quot; onmouseover=&quot;showTip(event, 'fs10', 266)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 267)&quot; onmouseover=&quot;showTip(event, 'fs54', 267)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 268)&quot; onmouseover=&quot;showTip(event, 'fs10', 268)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 269)&quot; onmouseover=&quot;showTip(event, 'fs56', 269)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 270)&quot; onmouseover=&quot;showTip(event, 'fs55', 270)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs39', 271)&quot; onmouseover=&quot;showTip(event, 'fs39', 271)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 272)&quot; onmouseover=&quot;showTip(event, 'fs9', 272)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 273)&quot; onmouseover=&quot;showTip(event, 'fs56', 273)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt;))
    &lt;span onmouseout=&quot;hideTip(event, 'fs54', 274)&quot; onmouseover=&quot;showTip(event, 'fs54', 274)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 275)&quot; onmouseover=&quot;showTip(event, 'fs16', 275)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 276)&quot; onmouseover=&quot;showTip(event, 'fs57', 276)&quot; class=&quot;f&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The implementation of our list functions also didn't change at all. Instead of
&lt;code&gt;listCata&lt;/code&gt; they just use &lt;code&gt;listFoldBack&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 277)&quot; onmouseover=&quot;showTip(event, 'fs41', 277)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 278)&quot; onmouseover=&quot;showTip(event, 'fs41', 278)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listSum&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs41', 279)&quot; onmouseover=&quot;showTip(event, 'fs41', 279)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 280)&quot; onmouseover=&quot;showTip(event, 'fs41', 280)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listMap&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs41', 281)&quot; onmouseover=&quot;showTip(event, 'fs41', 281)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 282)&quot; onmouseover=&quot;showTip(event, 'fs41', 282)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listSnoc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 283)&quot; onmouseover=&quot;showTip(event, 'fs41', 283)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 284)&quot; onmouseover=&quot;showTip(event, 'fs41', 284)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;binary-trees&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Binary Trees&lt;/h2&gt;
&lt;p&gt;Up so far we explored the concept of the &lt;code&gt;cata&lt;/code&gt; function only with the list and when we make that
function tail-recursive we call it &lt;code&gt;foldBack&lt;/code&gt;. But as said before, Catamorphisms are a generalization.
That means, the concept of writing a &lt;code&gt;cata&lt;/code&gt; function and creating tail-recursive version out of it
should also be done for other discriminated unions, not just for a list.&lt;/p&gt;
&lt;p&gt;For the next example we will look at a binary tree. A binary tree is quite interesting
because it is very similar to a list. But let's see that in more detail:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 285)&quot; onmouseover=&quot;showTip(event, 'fs58', 285)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 286)&quot; onmouseover=&quot;showTip(event, 'fs59', 286)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 287)&quot; onmouseover=&quot;showTip(event, 'fs60', 287)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 288)&quot; onmouseover=&quot;showTip(event, 'fs58', 288)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 289)&quot; onmouseover=&quot;showTip(event, 'fs58', 289)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once again I also introduce some helper functions to create the cases.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 290)&quot; onmouseover=&quot;showTip(event, 'fs61', 290)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 291)&quot; onmouseover=&quot;showTip(event, 'fs26', 291)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 292)&quot; onmouseover=&quot;showTip(event, 'fs62', 292)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 293)&quot; onmouseover=&quot;showTip(event, 'fs63', 293)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 294)&quot; onmouseover=&quot;showTip(event, 'fs60', 294)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 295)&quot; onmouseover=&quot;showTip(event, 'fs26', 295)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 296)&quot; onmouseover=&quot;showTip(event, 'fs62', 296)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 297)&quot; onmouseover=&quot;showTip(event, 'fs63', 297)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 298)&quot; onmouseover=&quot;showTip(event, 'fs64', 298)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 299)&quot; onmouseover=&quot;showTip(event, 'fs26', 299)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 300)&quot; onmouseover=&quot;showTip(event, 'fs61', 300)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 301)&quot; onmouseover=&quot;showTip(event, 'fs26', 301)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 302)&quot; onmouseover=&quot;showTip(event, 'fs59', 302)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 303)&quot; onmouseover=&quot;showTip(event, 'fs59', 303)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And a simple tree that contains the numbers 1 to 7 ordered.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 304)&quot; onmouseover=&quot;showTip(event, 'fs65', 304)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    (&lt;span onmouseout=&quot;hideTip(event, 'fs61', 305)&quot; onmouseover=&quot;showTip(event, 'fs61', 305)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;
        (&lt;span onmouseout=&quot;hideTip(event, 'fs61', 306)&quot; onmouseover=&quot;showTip(event, 'fs61', 306)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 307)&quot; onmouseover=&quot;showTip(event, 'fs64', 307)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 308)&quot; onmouseover=&quot;showTip(event, 'fs64', 308)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;))
        (&lt;span onmouseout=&quot;hideTip(event, 'fs61', 309)&quot; onmouseover=&quot;showTip(event, 'fs61', 309)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 310)&quot; onmouseover=&quot;showTip(event, 'fs64', 310)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 311)&quot; onmouseover=&quot;showTip(event, 'fs64', 311)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, why is a Tree similar to a list? Because the definition is nearly the same. If you look closer
you see that a tree has two cases exactly like a list has. &lt;code&gt;Leaf&lt;/code&gt; marks the end exactly like
&lt;code&gt;Empty&lt;/code&gt; did for the list. Instead of &lt;code&gt;Cons&lt;/code&gt; with two datums, we have &lt;code&gt;Node&lt;/code&gt; with three datums.&lt;/p&gt;
&lt;p&gt;The only difference between a list and a binary tree is that every element in a list only has one
child, while a binary tree has two child's. Those child's are often named &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.
That's also the reason why I named the variables &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; in the functions.&lt;/p&gt;
&lt;a name=&quot;tree-cata&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Cata for Tree&lt;/h2&gt;
&lt;p&gt;So, let's start by creating a &lt;code&gt;cata&lt;/code&gt; function for our tree.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 312)&quot; onmouseover=&quot;showTip(event, 'fs66', 312)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 313)&quot; onmouseover=&quot;showTip(event, 'fs67', 313)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 314)&quot; onmouseover=&quot;showTip(event, 'fs68', 314)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 315)&quot; onmouseover=&quot;showTip(event, 'fs69', 315)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 316)&quot; onmouseover=&quot;showTip(event, 'fs69', 316)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 317)&quot; onmouseover=&quot;showTip(event, 'fs59', 317)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 318)&quot; onmouseover=&quot;showTip(event, 'fs67', 318)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 319)&quot; onmouseover=&quot;showTip(event, 'fs60', 319)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 320)&quot; onmouseover=&quot;showTip(event, 'fs70', 320)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 321)&quot; onmouseover=&quot;showTip(event, 'fs71', 321)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 322)&quot; onmouseover=&quot;showTip(event, 'fs72', 322)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 323)&quot; onmouseover=&quot;showTip(event, 'fs68', 323)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 324)&quot; onmouseover=&quot;showTip(event, 'fs70', 324)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 325)&quot; onmouseover=&quot;showTip(event, 'fs66', 325)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 326)&quot; onmouseover=&quot;showTip(event, 'fs67', 326)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 327)&quot; onmouseover=&quot;showTip(event, 'fs68', 327)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 328)&quot; onmouseover=&quot;showTip(event, 'fs71', 328)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 329)&quot; onmouseover=&quot;showTip(event, 'fs66', 329)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 330)&quot; onmouseover=&quot;showTip(event, 'fs67', 330)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 331)&quot; onmouseover=&quot;showTip(event, 'fs68', 331)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 332)&quot; onmouseover=&quot;showTip(event, 'fs72', 332)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We started by just turning every case into a function. This time we name them &lt;code&gt;fLeaf&lt;/code&gt;
and &lt;code&gt;fNode&lt;/code&gt;, after the cases. The pattern is the same. The &lt;code&gt;Leaf&lt;/code&gt; case has no data, so
we just call &lt;code&gt;fLeaf&lt;/code&gt; with the unit value &lt;code&gt;()&lt;/code&gt;. We should remember that we can eliminate
the function in a next version.&lt;/p&gt;
&lt;p&gt;The difference in the &lt;code&gt;Node&lt;/code&gt; case to the previous &lt;code&gt;Cons&lt;/code&gt; case in the list is, that we have
three datums. So &lt;code&gt;fNode&lt;/code&gt; will also receive three arguments. But the second and third
argument is a tree again. So before we pass those, we need to recursively call &lt;code&gt;treeCata'&lt;/code&gt;
on those trees again.&lt;/p&gt;
&lt;p&gt;The two recursive calls looks quite long, so we first create a partial applied &lt;code&gt;recurs&lt;/code&gt;
function. Now we have:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 333)&quot; onmouseover=&quot;showTip(event, 'fs73', 333)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 334)&quot; onmouseover=&quot;showTip(event, 'fs67', 334)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 335)&quot; onmouseover=&quot;showTip(event, 'fs68', 335)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 336)&quot; onmouseover=&quot;showTip(event, 'fs69', 336)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 337)&quot; onmouseover=&quot;showTip(event, 'fs74', 337)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 338)&quot; onmouseover=&quot;showTip(event, 'fs73', 338)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 339)&quot; onmouseover=&quot;showTip(event, 'fs67', 339)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 340)&quot; onmouseover=&quot;showTip(event, 'fs68', 340)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 341)&quot; onmouseover=&quot;showTip(event, 'fs69', 341)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 342)&quot; onmouseover=&quot;showTip(event, 'fs59', 342)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 343)&quot; onmouseover=&quot;showTip(event, 'fs67', 343)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 344)&quot; onmouseover=&quot;showTip(event, 'fs60', 344)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 345)&quot; onmouseover=&quot;showTip(event, 'fs70', 345)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 346)&quot; onmouseover=&quot;showTip(event, 'fs71', 346)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 347)&quot; onmouseover=&quot;showTip(event, 'fs72', 347)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 348)&quot; onmouseover=&quot;showTip(event, 'fs68', 348)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 349)&quot; onmouseover=&quot;showTip(event, 'fs70', 349)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 350)&quot; onmouseover=&quot;showTip(event, 'fs74', 350)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 351)&quot; onmouseover=&quot;showTip(event, 'fs71', 351)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 352)&quot; onmouseover=&quot;showTip(event, 'fs74', 352)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 353)&quot; onmouseover=&quot;showTip(event, 'fs72', 353)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Next, we eliminate the function for the leaf case.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 354)&quot; onmouseover=&quot;showTip(event, 'fs75', 354)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 355)&quot; onmouseover=&quot;showTip(event, 'fs76', 355)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 356)&quot; onmouseover=&quot;showTip(event, 'fs68', 356)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 357)&quot; onmouseover=&quot;showTip(event, 'fs69', 357)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 358)&quot; onmouseover=&quot;showTip(event, 'fs74', 358)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 359)&quot; onmouseover=&quot;showTip(event, 'fs75', 359)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 360)&quot; onmouseover=&quot;showTip(event, 'fs76', 360)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 361)&quot; onmouseover=&quot;showTip(event, 'fs68', 361)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 362)&quot; onmouseover=&quot;showTip(event, 'fs69', 362)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 363)&quot; onmouseover=&quot;showTip(event, 'fs59', 363)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 364)&quot; onmouseover=&quot;showTip(event, 'fs76', 364)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 365)&quot; onmouseover=&quot;showTip(event, 'fs60', 365)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 366)&quot; onmouseover=&quot;showTip(event, 'fs70', 366)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 367)&quot; onmouseover=&quot;showTip(event, 'fs71', 367)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 368)&quot; onmouseover=&quot;showTip(event, 'fs72', 368)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 369)&quot; onmouseover=&quot;showTip(event, 'fs68', 369)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 370)&quot; onmouseover=&quot;showTip(event, 'fs70', 370)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 371)&quot; onmouseover=&quot;showTip(event, 'fs74', 371)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 372)&quot; onmouseover=&quot;showTip(event, 'fs71', 372)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 373)&quot; onmouseover=&quot;showTip(event, 'fs74', 373)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 374)&quot; onmouseover=&quot;showTip(event, 'fs72', 374)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As a tree also only has two cases, and one of them is not a function, we already see that
we already have a signature like &lt;code&gt;foldBack&lt;/code&gt;. So let's re-order the function arguments.
Previously I said we loose the ability for the partial applied &lt;code&gt;recurs&lt;/code&gt; function. But
we still can write a &lt;code&gt;recurs&lt;/code&gt; function. We only need to know which argument changes.&lt;/p&gt;
&lt;p&gt;In the code above you see that we call &lt;code&gt;(recurs l)&lt;/code&gt; and &lt;code&gt;(recurs r)&lt;/code&gt;. So we only want
to pass the next tree it should work on. So we create a &lt;code&gt;recurs&lt;/code&gt; function that only
expects the remaining tree. All in one, we now end with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 375)&quot; onmouseover=&quot;showTip(event, 'fs77', 375)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 376)&quot; onmouseover=&quot;showTip(event, 'fs78', 376)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 377)&quot; onmouseover=&quot;showTip(event, 'fs79', 377)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 378)&quot; onmouseover=&quot;showTip(event, 'fs80', 378)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 379)&quot; onmouseover=&quot;showTip(event, 'fs81', 379)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 380)&quot; onmouseover=&quot;showTip(event, 'fs82', 380)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 381)&quot; onmouseover=&quot;showTip(event, 'fs77', 381)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 382)&quot; onmouseover=&quot;showTip(event, 'fs78', 382)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 383)&quot; onmouseover=&quot;showTip(event, 'fs82', 383)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 384)&quot; onmouseover=&quot;showTip(event, 'fs80', 384)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 385)&quot; onmouseover=&quot;showTip(event, 'fs79', 385)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 386)&quot; onmouseover=&quot;showTip(event, 'fs59', 386)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 387)&quot; onmouseover=&quot;showTip(event, 'fs80', 387)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 388)&quot; onmouseover=&quot;showTip(event, 'fs60', 388)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 389)&quot; onmouseover=&quot;showTip(event, 'fs26', 389)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 390)&quot; onmouseover=&quot;showTip(event, 'fs62', 390)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 391)&quot; onmouseover=&quot;showTip(event, 'fs63', 391)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 392)&quot; onmouseover=&quot;showTip(event, 'fs78', 392)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 393)&quot; onmouseover=&quot;showTip(event, 'fs26', 393)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 394)&quot; onmouseover=&quot;showTip(event, 'fs81', 394)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 395)&quot; onmouseover=&quot;showTip(event, 'fs62', 395)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 396)&quot; onmouseover=&quot;showTip(event, 'fs81', 396)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 397)&quot; onmouseover=&quot;showTip(event, 'fs63', 397)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's create a &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; and a &lt;code&gt;map&lt;/code&gt; function with our &lt;code&gt;cata&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 398)&quot; onmouseover=&quot;showTip(event, 'fs83', 398)&quot; class=&quot;f&quot;&gt;treeLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 399)&quot; onmouseover=&quot;showTip(event, 'fs79', 399)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 400)&quot; onmouseover=&quot;showTip(event, 'fs77', 400)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 401)&quot; onmouseover=&quot;showTip(event, 'fs26', 401)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 402)&quot; onmouseover=&quot;showTip(event, 'fs84', 402)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 403)&quot; onmouseover=&quot;showTip(event, 'fs85', 403)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 404)&quot; onmouseover=&quot;showTip(event, 'fs84', 404)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 405)&quot; onmouseover=&quot;showTip(event, 'fs85', 405)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs79', 406)&quot; onmouseover=&quot;showTip(event, 'fs79', 406)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 407)&quot; onmouseover=&quot;showTip(event, 'fs86', 407)&quot; class=&quot;f&quot;&gt;treeSum&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs87', 408)&quot; onmouseover=&quot;showTip(event, 'fs87', 408)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 409)&quot; onmouseover=&quot;showTip(event, 'fs77', 409)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 410)&quot; onmouseover=&quot;showTip(event, 'fs22', 410)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 411)&quot; onmouseover=&quot;showTip(event, 'fs84', 411)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 412)&quot; onmouseover=&quot;showTip(event, 'fs85', 412)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 413)&quot; onmouseover=&quot;showTip(event, 'fs22', 413)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 414)&quot; onmouseover=&quot;showTip(event, 'fs84', 414)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 415)&quot; onmouseover=&quot;showTip(event, 'fs85', 415)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs87', 416)&quot; onmouseover=&quot;showTip(event, 'fs87', 416)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 417)&quot; onmouseover=&quot;showTip(event, 'fs88', 417)&quot; class=&quot;f&quot;&gt;treeMap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 418)&quot; onmouseover=&quot;showTip(event, 'fs21', 418)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs79', 419)&quot; onmouseover=&quot;showTip(event, 'fs79', 419)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 420)&quot; onmouseover=&quot;showTip(event, 'fs77', 420)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 421)&quot; onmouseover=&quot;showTip(event, 'fs26', 421)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 422)&quot; onmouseover=&quot;showTip(event, 'fs71', 422)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 423)&quot; onmouseover=&quot;showTip(event, 'fs72', 423)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 424)&quot; onmouseover=&quot;showTip(event, 'fs61', 424)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 425)&quot; onmouseover=&quot;showTip(event, 'fs21', 425)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 426)&quot; onmouseover=&quot;showTip(event, 'fs26', 426)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 427)&quot; onmouseover=&quot;showTip(event, 'fs71', 427)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 428)&quot; onmouseover=&quot;showTip(event, 'fs72', 428)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs79', 429)&quot; onmouseover=&quot;showTip(event, 'fs79', 429)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 430)&quot; onmouseover=&quot;showTip(event, 'fs59', 430)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// tree was:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// (node 4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 2 (endNode 1) (endNode 3))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 6 (endNode 5) (endNode 7)))&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs83', 431)&quot; onmouseover=&quot;showTip(event, 'fs83', 431)&quot; class=&quot;f&quot;&gt;treeLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 432)&quot; onmouseover=&quot;showTip(event, 'fs65', 432)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 7&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs86', 433)&quot; onmouseover=&quot;showTip(event, 'fs86', 433)&quot; class=&quot;f&quot;&gt;treeSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 434)&quot; onmouseover=&quot;showTip(event, 'fs65', 434)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 28&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs88', 435)&quot; onmouseover=&quot;showTip(event, 'fs88', 435)&quot; class=&quot;f&quot;&gt;treeMap&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 436)&quot; onmouseover=&quot;showTip(event, 'fs22', 436)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 437)&quot; onmouseover=&quot;showTip(event, 'fs22', 437)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 438)&quot; onmouseover=&quot;showTip(event, 'fs22', 438)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 439)&quot; onmouseover=&quot;showTip(event, 'fs65', 439)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// (node 16&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 4  (endNode 1)  (endNode 9))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 36 (endNode 25) (endNode 49)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;fold-vs-foldback&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Fold vs. FoldBack&lt;/h2&gt;
&lt;p&gt;Before we talk about how to turn &lt;code&gt;cata&lt;/code&gt; into a tail-recursive function we should talk
about the difference between &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt;. I explained that if we turn &lt;code&gt;cata&lt;/code&gt;
into a tail-recursive function we get back &lt;code&gt;foldBack&lt;/code&gt;. If I mention &lt;code&gt;cata&lt;/code&gt; or &lt;code&gt;foldBack&lt;/code&gt;
i use the terms interchangeable. The fact that one is tail-recursive and the other not,
is not important right now, it is more important how they behave.&lt;/p&gt;
&lt;p&gt;But it opens up an important question. When we forget for a moment the mechanical
implementation to create the &lt;code&gt;cata&lt;/code&gt; function. How do we know how to implement &lt;code&gt;fold&lt;/code&gt; and
&lt;code&gt;foldBack&lt;/code&gt; and how do we know how they should behave? Or what is anyway the exact
behaviour of &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If the question is unclear, let's look again at a list and lets see how &lt;code&gt;fold&lt;/code&gt;
and &lt;code&gt;foldBack&lt;/code&gt; behaves.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016/catamorphisms/list.svg&quot; alt=&quot;Single-Linked list&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can visualize a single-linked list like boxes, and every box points to the next element
in the list. Until the last element points to the end &lt;code&gt;Empty&lt;/code&gt;. In the visualization above
represented as &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The functions &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; are also often named &lt;code&gt;foldLeft&lt;/code&gt; and &lt;code&gt;foldRight&lt;/code&gt; in
other languages. They are named like this, because they describe how a list will be
traversed. &lt;code&gt;fold&lt;/code&gt; (or &lt;code&gt;foldLeft&lt;/code&gt;) traverses a list from left-to-right, while &lt;code&gt;foldBack&lt;/code&gt;
(or &lt;code&gt;foldRight&lt;/code&gt;) traverses the list from right-to-left.&lt;/p&gt;
&lt;p&gt;So when we use &lt;code&gt;fold&lt;/code&gt; the function we provide &lt;code&gt;fold&lt;/code&gt; first sees &lt;code&gt;1&lt;/code&gt;, then &lt;code&gt;2&lt;/code&gt;, then &lt;code&gt;3&lt;/code&gt;
and so on. While when using &lt;code&gt;foldBack&lt;/code&gt; we first encounter &lt;code&gt;5&lt;/code&gt;, then &lt;code&gt;4&lt;/code&gt;, then &lt;code&gt;3&lt;/code&gt; and so
on. This is easy to understand.&lt;/p&gt;
&lt;p&gt;But how do they anyway translate to something like a binary tree? Our &lt;code&gt;tree&lt;/code&gt; that we used
so far looks like this:&lt;/p&gt;
&lt;div style=&quot;width:50%;margin: 0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/tree.svg&quot; alt=&quot;Binary Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;When we think of &lt;code&gt;fold&lt;/code&gt; as left-to-right and &lt;code&gt;foldBack&lt;/code&gt; as right-to-left, how do we translate
that to a tree? The problem we have, there doesn't exists only one way to traverse a tree.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_traversal&quot;&gt;There are many way to traverse a tree&lt;/a&gt;, and even then the question
is which traversal we identify as &lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Up so far I made it easy, as I just said that &lt;code&gt;cata&lt;/code&gt; is &lt;code&gt;foldBack&lt;/code&gt; without further describing
the idea behind it why that is so. So let's re-look at &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; for the list
and let's see if we can describe the operation slightly different.&lt;/p&gt;
&lt;p&gt;Previously we already noticed that a list and a binary tree are very similar. We can think of
a list that contains one-element and a one recursive argument, or one-child. A binary
tree on the other hand is one-element and two-child's. When we visualize a tree we usually
show the deeper (recursive) layers underneath an element. In the above visualization we
have &lt;code&gt;4&lt;/code&gt; and underneath it &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt;. But we also can think of a list in such a way.&lt;/p&gt;
&lt;div style=&quot;width:25%;margin:0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/list_as_tree.svg&quot; alt=&quot;List as Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We have &lt;code&gt;1&lt;/code&gt; and we have the recursive child &lt;code&gt;2&lt;/code&gt;. Instead of thinking of traversing a list
from left-to-right or right-to-left, we look at the &lt;strong&gt;folder-function&lt;/strong&gt;, and we describe
what the &lt;strong&gt;folder-function&lt;/strong&gt; sees. So when we sum all elements in a list like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 440)&quot; onmouseover=&quot;showTip(event, 'fs4', 440)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs89', 441)&quot; onmouseover=&quot;showTip(event, 'fs89', 441)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 442)&quot; onmouseover=&quot;showTip(event, 'fs46', 442)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 443)&quot; onmouseover=&quot;showTip(event, 'fs22', 443)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 444)&quot; onmouseover=&quot;showTip(event, 'fs46', 444)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 445)&quot; onmouseover=&quot;showTip(event, 'fs22', 445)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What does the &lt;strong&gt;folder-function&lt;/strong&gt; &lt;code&gt;(fun acc x -&amp;gt; acc + x)&lt;/code&gt; sees exactly? Let's say &lt;code&gt;fold&lt;/code&gt;
is at the element &lt;code&gt;1&lt;/code&gt;, which values do we have?&lt;/p&gt;
&lt;p&gt;We have &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. Or more precisely, we get the accumulator so-far, and one-element
of our data-structure. What do we see when &lt;code&gt;fold&lt;/code&gt; is at element &lt;code&gt;2&lt;/code&gt;? We get &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;.
Once again we get the accumulator so far, and the current element.&lt;/p&gt;
&lt;p&gt;Generally speaking, with &lt;code&gt;fold&lt;/code&gt; we get the current element and an accumulator that
is the combination of all the things we already have seen. When &lt;code&gt;fold&lt;/code&gt; hits &lt;code&gt;3&lt;/code&gt;,
then we get &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;. The first &lt;code&gt;3&lt;/code&gt; the &lt;em&gt;accumulator&lt;/em&gt; was computed by the already seen
elements &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; (1 + 2).&lt;/p&gt;
&lt;p&gt;We also can think of &lt;code&gt;fold&lt;/code&gt; as looping. Because in looping we usually start with some
mutable initial value, and when we loop over a data-structure we combine the current element
with some outer element.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 446)&quot; onmouseover=&quot;showTip(event, 'fs90', 446)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 447)&quot; onmouseover=&quot;showTip(event, 'fs22', 447)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs90', 448)&quot; onmouseover=&quot;showTip(event, 'fs90', 448)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 449)&quot; onmouseover=&quot;showTip(event, 'fs90', 449)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 450)&quot; onmouseover=&quot;showTip(event, 'fs22', 450)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we look at &lt;code&gt;foldBack&lt;/code&gt; it behaves differently. When we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 451)&quot; onmouseover=&quot;showTip(event, 'fs4', 451)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 452)&quot; onmouseover=&quot;showTip(event, 'fs91', 452)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 453)&quot; onmouseover=&quot;showTip(event, 'fs22', 453)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 454)&quot; onmouseover=&quot;showTip(event, 'fs46', 454)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 455)&quot; onmouseover=&quot;showTip(event, 'fs22', 455)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 456)&quot; onmouseover=&quot;showTip(event, 'fs46', 456)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We get the same result, because the order of &lt;code&gt;+&lt;/code&gt; operation doesn't matter. But the behaviour
is different. When our &lt;strong&gt;folder-function&lt;/strong&gt; hits the element &lt;code&gt;1&lt;/code&gt;, which data, do we get?&lt;/p&gt;
&lt;p&gt;We get &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;9&lt;/code&gt;. &lt;code&gt;1&lt;/code&gt; is the current element. But what is &lt;code&gt;9&lt;/code&gt;? &lt;code&gt;9&lt;/code&gt; is the result of the combination
of the child we have at this point. In &lt;code&gt;foldBack&lt;/code&gt; we don't get an accumulation of the things
we already have seen, we get the combination of the things we didn't have seen so far!&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;foldBack&lt;/code&gt; we get the current element, and the combination of all its child elements. When
we hit &lt;code&gt;2&lt;/code&gt; for example, then we just see &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;7&lt;/code&gt;. Because the child of &lt;code&gt;2&lt;/code&gt; is &lt;code&gt;3 + 4&lt;/code&gt;. But
we didn't see &lt;code&gt;1&lt;/code&gt;, because &lt;code&gt;1&lt;/code&gt; is on top of &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All in one we can say that &lt;code&gt;foldBack&lt;/code&gt; is a &lt;em&gt;structure-preserving&lt;/em&gt; function. We not get
the current element and an accumulation so far, we get the current element including one
value for each child. And with a tree this distinction becomes more clear. When we look again
at our tree.&lt;/p&gt;
&lt;div style=&quot;width:50%;margin: 0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/tree.svg&quot; alt=&quot;Binary Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Which arguments does the &lt;em&gt;folder-functions&lt;/em&gt; sees when we are at the top element &lt;code&gt;4&lt;/code&gt;? We see
&lt;code&gt;4&lt;/code&gt; the current element, &lt;code&gt;6&lt;/code&gt; for the left child (1 + 2 + 3) and &lt;code&gt;18&lt;/code&gt; (5 + 6 + 7) for the
&lt;em&gt;right-child&lt;/em&gt;. In &lt;code&gt;foldBack&lt;/code&gt; we always get the exact same amount of arguments a case has.&lt;/p&gt;
&lt;p&gt;The definition of &lt;code&gt;Node&lt;/code&gt; was &lt;code&gt;Node of 'a * Tree&amp;lt;'a&amp;gt; * Tree&amp;lt;'a&amp;gt;&lt;/code&gt; so we also get three
arguments in the folder function. But instead of two trees, we already get the result
of them. That means, while &lt;code&gt;fold&lt;/code&gt; is like iteration/looping, &lt;code&gt;foldBack&lt;/code&gt; is like recursion.&lt;/p&gt;
&lt;p&gt;Consider how we would write a recursive &lt;code&gt;sum&lt;/code&gt; function without &lt;code&gt;cata&lt;/code&gt;, the &lt;code&gt;Node&lt;/code&gt; case
would look something like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As &lt;code&gt;(sum l)&lt;/code&gt; is a function call it just starts calculating a value, but when it returns
it contains the sum of the left child. So once &lt;code&gt;(sum l)&lt;/code&gt; and &lt;code&gt;(sum r)&lt;/code&gt; completes we have
a line like &lt;code&gt;x + y + z&lt;/code&gt;. We just add three values together. &lt;code&gt;foldBack&lt;/code&gt; is exactly that
behaviour. &lt;code&gt;foldBack&lt;/code&gt; always works like recursion. That is why &lt;code&gt;cata&lt;/code&gt; is always
like &lt;code&gt;foldBack&lt;/code&gt;. &lt;code&gt;foldBack&lt;/code&gt; only ensures that we have tail-recursion.&lt;/p&gt;
&lt;p&gt;So how does &lt;code&gt;fold&lt;/code&gt; for a tree look like? In fact the &lt;em&gt;folder-function&lt;/em&gt; only sees &lt;strong&gt;two&lt;/strong&gt;
arguments not &lt;strong&gt;three&lt;/strong&gt;. Why is that so? Because &lt;code&gt;fold&lt;/code&gt; only sees the things it already
have seen.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Node&lt;/code&gt; case only contains a single non-recursive datum. That means the &lt;code&gt;fold&lt;/code&gt; function only
sees an accumulator so far and all the current non-recursive elements. For our specified binary
tree that are only two arguments.&lt;/p&gt;
&lt;p&gt;But how does &lt;code&gt;fold&lt;/code&gt; traverse a tree? The answer is, it doesn't matter. The purpose
of &lt;code&gt;fold&lt;/code&gt; is not to provide a specific order. The purpose of &lt;code&gt;fold&lt;/code&gt; is just to visit
every element. &lt;code&gt;fold&lt;/code&gt; is ideal for things that behave like &lt;a href=&quot;/blog/2016/05/24/monoids&quot;&gt;Monoids&lt;/a&gt;. &lt;code&gt;fold&lt;/code&gt;
is in general a good choice if the operation you have doesn't depend on the structure
itself only on the elements itself.&lt;/p&gt;
&lt;p&gt;You also can compare &lt;code&gt;fold&lt;/code&gt; with &lt;code&gt;foreach&lt;/code&gt; in C#. With &lt;code&gt;foreach&lt;/code&gt; in C#, you just iterate
through a data-structure. You also can iterate through a dictionary, and you get the
&lt;em&gt;key&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt; of every element, but you don't get any information of the structure
of the Dictionary itself. When you loop over a dictionary with foreach you just expect
to somehow get all the values, but you don't expect a particular order.&lt;/p&gt;
&lt;p&gt;But if you need the additional information of the structure and somehow work with the
full tree, then you must use &lt;code&gt;foldBack&lt;/code&gt;. Because of that, &lt;code&gt;foldBack&lt;/code&gt; is more powerful than
&lt;code&gt;fold&lt;/code&gt; as you always can use &lt;code&gt;foldBack&lt;/code&gt; instead of &lt;code&gt;fold&lt;/code&gt;. But the reverse is not true.&lt;/p&gt;
&lt;a name=&quot;tree-foldback&quot;&gt;&lt;/a&gt;
&lt;h2&gt;FoldBack for Tree&lt;/h2&gt;
&lt;p&gt;I will implement &lt;code&gt;foldBack&lt;/code&gt; with the Continuation approach, but I don't go into
much detail how the implementation works exactly, you can read more of those
details here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2016/04/16/fold-continuations&quot;&gt;Continuations and foldBack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2016/05/07/cps-fold&quot;&gt;CPS Fold -- fold with early exit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we look again at &lt;code&gt;cata&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 375)&quot; onmouseover=&quot;showTip(event, 'fs77', 375)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 376)&quot; onmouseover=&quot;showTip(event, 'fs78', 376)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 377)&quot; onmouseover=&quot;showTip(event, 'fs79', 377)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 378)&quot; onmouseover=&quot;showTip(event, 'fs80', 378)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 379)&quot; onmouseover=&quot;showTip(event, 'fs81', 379)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 380)&quot; onmouseover=&quot;showTip(event, 'fs82', 380)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 381)&quot; onmouseover=&quot;showTip(event, 'fs77', 381)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 382)&quot; onmouseover=&quot;showTip(event, 'fs78', 382)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 383)&quot; onmouseover=&quot;showTip(event, 'fs82', 383)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 384)&quot; onmouseover=&quot;showTip(event, 'fs80', 384)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 385)&quot; onmouseover=&quot;showTip(event, 'fs79', 385)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 386)&quot; onmouseover=&quot;showTip(event, 'fs59', 386)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 387)&quot; onmouseover=&quot;showTip(event, 'fs80', 387)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 388)&quot; onmouseover=&quot;showTip(event, 'fs60', 388)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 389)&quot; onmouseover=&quot;showTip(event, 'fs26', 389)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 390)&quot; onmouseover=&quot;showTip(event, 'fs62', 390)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 391)&quot; onmouseover=&quot;showTip(event, 'fs63', 391)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 392)&quot; onmouseover=&quot;showTip(event, 'fs78', 392)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 393)&quot; onmouseover=&quot;showTip(event, 'fs26', 393)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 394)&quot; onmouseover=&quot;showTip(event, 'fs81', 394)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 395)&quot; onmouseover=&quot;showTip(event, 'fs62', 395)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 396)&quot; onmouseover=&quot;showTip(event, 'fs81', 396)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 397)&quot; onmouseover=&quot;showTip(event, 'fs63', 397)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of a recursive &lt;code&gt;treeCata&lt;/code&gt; we will create an inner &lt;code&gt;loop&lt;/code&gt; function that
is used for recursion.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;treeCata&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we now have an inner recursive loop we also need to explicitly
start the recursion with &lt;code&gt;loop tree&lt;/code&gt;. In the next step we expand the
&lt;code&gt;Node&lt;/code&gt; case and remove the nested &lt;code&gt;loop&lt;/code&gt; calls and put each on its own line.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;treeCata&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Finally, we add &lt;code&gt;cont&lt;/code&gt; (the continuation) to the &lt;code&gt;loop&lt;/code&gt; function and
rename the function to &lt;code&gt;treeFoldBack&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 457)&quot; onmouseover=&quot;showTip(event, 'fs92', 457)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 458)&quot; onmouseover=&quot;showTip(event, 'fs78', 458)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 459)&quot; onmouseover=&quot;showTip(event, 'fs79', 459)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 460)&quot; onmouseover=&quot;showTip(event, 'fs80', 460)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 461)&quot; onmouseover=&quot;showTip(event, 'fs93', 461)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 462)&quot; onmouseover=&quot;showTip(event, 'fs82', 462)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 463)&quot; onmouseover=&quot;showTip(event, 'fs55', 463)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 464)&quot; onmouseover=&quot;showTip(event, 'fs82', 464)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 465)&quot; onmouseover=&quot;showTip(event, 'fs59', 465)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 466)&quot; onmouseover=&quot;showTip(event, 'fs55', 466)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 467)&quot; onmouseover=&quot;showTip(event, 'fs80', 467)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 468)&quot; onmouseover=&quot;showTip(event, 'fs60', 468)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 469)&quot; onmouseover=&quot;showTip(event, 'fs26', 469)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 470)&quot; onmouseover=&quot;showTip(event, 'fs62', 470)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 471)&quot; onmouseover=&quot;showTip(event, 'fs63', 471)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs93', 472)&quot; onmouseover=&quot;showTip(event, 'fs93', 472)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 473)&quot; onmouseover=&quot;showTip(event, 'fs62', 473)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 474)&quot; onmouseover=&quot;showTip(event, 'fs94', 474)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs93', 475)&quot; onmouseover=&quot;showTip(event, 'fs93', 475)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 476)&quot; onmouseover=&quot;showTip(event, 'fs63', 476)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 477)&quot; onmouseover=&quot;showTip(event, 'fs56', 477)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs55', 478)&quot; onmouseover=&quot;showTip(event, 'fs55', 478)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs78', 479)&quot; onmouseover=&quot;showTip(event, 'fs78', 479)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 480)&quot; onmouseover=&quot;showTip(event, 'fs26', 480)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 481)&quot; onmouseover=&quot;showTip(event, 'fs94', 481)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 482)&quot; onmouseover=&quot;showTip(event, 'fs56', 482)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt;)
                ))
    &lt;span onmouseout=&quot;hideTip(event, 'fs93', 483)&quot; onmouseover=&quot;showTip(event, 'fs93', 483)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 484)&quot; onmouseover=&quot;showTip(event, 'fs79', 484)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 485)&quot; onmouseover=&quot;showTip(event, 'fs57', 485)&quot; class=&quot;f&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Before, we had code like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;it was recursive and it meant: Recurse on &lt;code&gt;loop l&lt;/code&gt;. Somewhere in the future
(after many more recursive calls) it will return a result that we save in &lt;code&gt;lacc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we executed:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It was recursive again and after many more recursive calls we got the result
and saved it in &lt;code&gt;racc&lt;/code&gt;. But all of this is not tail-recursive. The new
&lt;code&gt;treeFoldBack&lt;/code&gt; function really only has one function call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The idea of continuations is like this: Please execute &lt;code&gt;loop l callback&lt;/code&gt;. When
you finished calculating the result, please call the &lt;code&gt;callback&lt;/code&gt; function
and pass it the result. &lt;em&gt;Callback&lt;/em&gt; or &lt;em&gt;Continuation&lt;/em&gt; really means the same.&lt;/p&gt;
&lt;p&gt;But in this case we call &lt;code&gt;loop&lt;/code&gt; that is in tail position. So we end up with a
tail-recursive function.&lt;/p&gt;
&lt;a name=&quot;tree-foldback-examples&quot;&gt;&lt;/a&gt;
&lt;h2&gt;FoldBack examples&lt;/h2&gt;
&lt;p&gt;Instead let's focus on things we can do with &lt;code&gt;foldBack&lt;/code&gt; but not with &lt;code&gt;fold&lt;/code&gt;. As &lt;code&gt;foldBack&lt;/code&gt;
preserves the structure, we can actually very easily convert a Tree into a string representation.&lt;/p&gt;
&lt;p&gt;We just convert a &lt;code&gt;Leaf&lt;/code&gt; node into the String &lt;code&gt;&quot;Leaf&quot;&lt;/code&gt;, and a &lt;code&gt;Node&lt;/code&gt; will be converted with
&lt;code&gt;Node(%d, %s, %s)&lt;/code&gt; into a string. Because we get the string results instead of the recursive
values, this kind of task is pretty easy.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs77', 486)&quot; onmouseover=&quot;showTip(event, 'fs77', 486)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt;     (&lt;span onmouseout=&quot;hideTip(event, 'fs95', 487)&quot; onmouseover=&quot;showTip(event, 'fs95', 487)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Node(&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;quot;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 488)&quot; onmouseover=&quot;showTip(event, 'fs65', 488)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Leaf&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs92', 489)&quot; onmouseover=&quot;showTip(event, 'fs92', 489)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs95', 490)&quot; onmouseover=&quot;showTip(event, 'fs95', 490)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Node(&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;quot;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 491)&quot; onmouseover=&quot;showTip(event, 'fs65', 491)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Leaf&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;treeCata&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; both return the same string:
&lt;code&gt;&quot;Node(4, Node(2, Node(1, Leaf, Leaf), Node(3, Leaf, Leaf)), Node(6, Node(5, Leaf, Leaf), Node(7, Leaf, Leaf)))&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I used the &lt;code&gt;tree&lt;/code&gt; variable so far as a binary search tree. That means it is ordered. The left child's are
smaller, the right child's are bigger then the current element. We also can create an ordered list from
our tree. A Leaf node must be converted into an empty list. Otherwise we just need to concat the left,
current and the right node.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 492)&quot; onmouseover=&quot;showTip(event, 'fs96', 492)&quot; class=&quot;i&quot;&gt;ordered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 493)&quot; onmouseover=&quot;showTip(event, 'fs92', 493)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 494)&quot; onmouseover=&quot;showTip(event, 'fs22', 494)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 495)&quot; onmouseover=&quot;showTip(event, 'fs97', 495)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 496)&quot; onmouseover=&quot;showTip(event, 'fs98', 496)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 497)&quot; onmouseover=&quot;showTip(event, 'fs97', 497)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 498)&quot; onmouseover=&quot;showTip(event, 'fs22', 498)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 499)&quot; onmouseover=&quot;showTip(event, 'fs98', 499)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 500)&quot; onmouseover=&quot;showTip(event, 'fs65', 500)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6;7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;or any other order we like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 501)&quot; onmouseover=&quot;showTip(event, 'fs99', 501)&quot; class=&quot;i&quot;&gt;reversed&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 502)&quot; onmouseover=&quot;showTip(event, 'fs92', 502)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 503)&quot; onmouseover=&quot;showTip(event, 'fs22', 503)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 504)&quot; onmouseover=&quot;showTip(event, 'fs97', 504)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 505)&quot; onmouseover=&quot;showTip(event, 'fs98', 505)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 506)&quot; onmouseover=&quot;showTip(event, 'fs98', 506)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 507)&quot; onmouseover=&quot;showTip(event, 'fs22', 507)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 508)&quot; onmouseover=&quot;showTip(event, 'fs97', 508)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 509)&quot; onmouseover=&quot;showTip(event, 'fs65', 509)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [7;6;5;4;3;2;1]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 510)&quot; onmouseover=&quot;showTip(event, 'fs100', 510)&quot; class=&quot;i&quot;&gt;preOrder&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 511)&quot; onmouseover=&quot;showTip(event, 'fs92', 511)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 512)&quot; onmouseover=&quot;showTip(event, 'fs22', 512)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 513)&quot; onmouseover=&quot;showTip(event, 'fs97', 513)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 514)&quot; onmouseover=&quot;showTip(event, 'fs98', 514)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 515)&quot; onmouseover=&quot;showTip(event, 'fs22', 515)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 516)&quot; onmouseover=&quot;showTip(event, 'fs97', 516)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 517)&quot; onmouseover=&quot;showTip(event, 'fs98', 517)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 518)&quot; onmouseover=&quot;showTip(event, 'fs65', 518)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [4;2;1;3;6;5;7]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 519)&quot; onmouseover=&quot;showTip(event, 'fs101', 519)&quot; class=&quot;i&quot;&gt;postOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 520)&quot; onmouseover=&quot;showTip(event, 'fs92', 520)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 521)&quot; onmouseover=&quot;showTip(event, 'fs22', 521)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 522)&quot; onmouseover=&quot;showTip(event, 'fs97', 522)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 523)&quot; onmouseover=&quot;showTip(event, 'fs98', 523)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 524)&quot; onmouseover=&quot;showTip(event, 'fs97', 524)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 525)&quot; onmouseover=&quot;showTip(event, 'fs98', 525)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 526)&quot; onmouseover=&quot;showTip(event, 'fs22', 526)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;]) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 527)&quot; onmouseover=&quot;showTip(event, 'fs65', 527)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [1;3;2;5;7;6;4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's turn the Tree into Lisp code. In Lisp a tree is just represented as a list with
tree elements. The first element is the current node, the second and third element represent
the left and right node, and are just lists themselves. The Leaf node is represented as the
empty list.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(quote &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 528)&quot; onmouseover=&quot;showTip(event, 'fs92', 528)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs95', 529)&quot; onmouseover=&quot;showTip(event, 'fs95', 529)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;quot;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 530)&quot; onmouseover=&quot;showTip(event, 'fs65', 530)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;empty&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// &amp;quot;(quote (4 (2 (1 empty empty) (3 empty empty)) (6 (5 empty empty) (7 empty empty))))&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's test it in Racket.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;racket&quot;&gt;(define tree (quote (4 (2 (1 empty empty) (3 empty empty)) (6 (5 empty empty) (7 empty empty)))))
(define (left tree)  (car (cdr tree)))
(define (right tree) (car (cdr (cdr tree))))
(define (datum tree) (car tree))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;and in the REPL:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;&amp;gt; (datum (left (left tree)))
1
&amp;gt; (datum (left (right tree)))
5
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Nice, this is correct. For the last example let's look again at our example tree:&lt;/p&gt;
&lt;div style=&quot;width:50%;margin: 0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/tree.svg&quot; alt=&quot;Binary Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Let's say we want to create a path to a specific element. For example when we search for &lt;code&gt;5&lt;/code&gt;, we want
the steps to find &lt;code&gt;5&lt;/code&gt;. When we start at &lt;code&gt;4&lt;/code&gt; we first must go right, and then Left. So we want &quot;Right Left&quot;
as a result. When we search for &lt;code&gt;1&lt;/code&gt; we get &quot;Left Left&quot; and so on.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 531)&quot; onmouseover=&quot;showTip(event, 'fs102', 531)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs103', 532)&quot; onmouseover=&quot;showTip(event, 'fs103', 532)&quot; class=&quot;i&quot;&gt;search&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 533)&quot; onmouseover=&quot;showTip(event, 'fs104', 533)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 534)&quot; onmouseover=&quot;showTip(event, 'fs105', 534)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, [])
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs106', 535)&quot; onmouseover=&quot;showTip(event, 'fs106', 535)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 536)&quot; onmouseover=&quot;showTip(event, 'fs107', 536)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs108', 537)&quot; onmouseover=&quot;showTip(event, 'fs108', 537)&quot; class=&quot;i&quot;&gt;lb&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs109', 538)&quot; onmouseover=&quot;showTip(event, 'fs109', 538)&quot; class=&quot;i&quot;&gt;lp&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs110', 539)&quot; onmouseover=&quot;showTip(event, 'fs110', 539)&quot; class=&quot;i&quot;&gt;rb&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs111', 540)&quot; onmouseover=&quot;showTip(event, 'fs111', 540)&quot; class=&quot;i&quot;&gt;rp&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 541)&quot; onmouseover=&quot;showTip(event, 'fs107', 541)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs103', 542)&quot; onmouseover=&quot;showTip(event, 'fs103', 542)&quot; class=&quot;i&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, [])
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs108', 543)&quot; onmouseover=&quot;showTip(event, 'fs108', 543)&quot; class=&quot;i&quot;&gt;lb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Left&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs109', 544)&quot; onmouseover=&quot;showTip(event, 'fs109', 544)&quot; class=&quot;i&quot;&gt;lp&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 545)&quot; onmouseover=&quot;showTip(event, 'fs110', 545)&quot; class=&quot;i&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Right&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs111', 546)&quot; onmouseover=&quot;showTip(event, 'fs111', 546)&quot; class=&quot;i&quot;&gt;rp&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, [])
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 547)&quot; onmouseover=&quot;showTip(event, 'fs112', 547)&quot; class=&quot;i&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 548)&quot; onmouseover=&quot;showTip(event, 'fs92', 548)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs106', 549)&quot; onmouseover=&quot;showTip(event, 'fs106', 549)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 550)&quot; onmouseover=&quot;showTip(event, 'fs104', 550)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 551)&quot; onmouseover=&quot;showTip(event, 'fs105', 551)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 552)&quot; onmouseover=&quot;showTip(event, 'fs112', 552)&quot; class=&quot;i&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, []) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;First element&amp;quot;&lt;/span&gt;
    | (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs113', 553)&quot; onmouseover=&quot;showTip(event, 'fs113', 553)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;)  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 554)&quot; onmouseover=&quot;showTip(event, 'fs23', 554)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs114', 555)&quot; onmouseover=&quot;showTip(event, 'fs114', 555)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs113', 556)&quot; onmouseover=&quot;showTip(event, 'fs113', 556)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;
    | (&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, _) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Not in Tree&amp;quot;&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs102', 557)&quot; onmouseover=&quot;showTip(event, 'fs102', 557)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 558)&quot; onmouseover=&quot;showTip(event, 'fs65', 558)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Left Left&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 559)&quot; onmouseover=&quot;showTip(event, 'fs102', 559)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 560)&quot; onmouseover=&quot;showTip(event, 'fs65', 560)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Left&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 561)&quot; onmouseover=&quot;showTip(event, 'fs102', 561)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 562)&quot; onmouseover=&quot;showTip(event, 'fs65', 562)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Left Right&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 563)&quot; onmouseover=&quot;showTip(event, 'fs102', 563)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 564)&quot; onmouseover=&quot;showTip(event, 'fs65', 564)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;First Element&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 565)&quot; onmouseover=&quot;showTip(event, 'fs102', 565)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 566)&quot; onmouseover=&quot;showTip(event, 'fs65', 566)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Right Left&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 567)&quot; onmouseover=&quot;showTip(event, 'fs102', 567)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 568)&quot; onmouseover=&quot;showTip(event, 'fs65', 568)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Not in Tree&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the solution I just transform every node into a tuple that contains two informations. A boolean that
contains the information if the child contains the searched element. And when it is &lt;code&gt;true&lt;/code&gt; the
node above prepend either &lt;code&gt;&quot;Left&quot;&lt;/code&gt; or &lt;code&gt;&quot;Right&quot;&lt;/code&gt; to the list. As an example, when we search for
&lt;code&gt;5&lt;/code&gt; we get the following transformations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016/catamorphisms/tree_path_5.svg&quot; alt=&quot;Tree with path to 5&quot; /&gt;&lt;/p&gt;
&lt;a name=&quot;tree-fold&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Fold for Tree&lt;/h2&gt;
&lt;p&gt;At last we want to look at &lt;code&gt;fold&lt;/code&gt;. As we learned so far, we don't need to implement a particular
tree traversal order. For &lt;code&gt;fold&lt;/code&gt; it is only important that we visit every node and we treat an
accumulator through the calculation. For implementing &lt;code&gt;fold&lt;/code&gt; we should just pick the easiest
or fastest way we can come up with.&lt;/p&gt;
&lt;p&gt;Up so far, including the other blog posts, I showed two ways how to achieve tail-recursion. Either
way through an accumulator or through a continuation function. But both ideas don't work
with our tree. The problem is that we don't just have a simple calculation that we can forward
as an accumulator, we always must traverse two child's for every node.&lt;/p&gt;
&lt;p&gt;The solution to fix that is that we manage the stack ourselves. This is the typical solution
how languages without proper tail-call-optimization handles recursion. But in the F#
case we don't need to switch completely to looping. We just make the stack part as an additional
value on the recursive inner loop function. We also could say, we use two accumulators. One
for the value we computed so far, and another that keeps track of task we still need to do later.&lt;/p&gt;
&lt;p&gt;So here is the idea. At first we identify what we actually need to do in the &lt;code&gt;Node&lt;/code&gt; case.
And they are three things we need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process the current element&lt;/li&gt;
&lt;li&gt;Recurs on the left child&lt;/li&gt;
&lt;li&gt;Recurs on the right child&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We should pick a order of the operation so that only one task remains open. And this task is pushed
onto a stack that can be later processed. One way to achieve that is.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We process the current element&lt;/li&gt;
&lt;li&gt;We put the right child onto the stack&lt;/li&gt;
&lt;li&gt;We loop on the left child&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's give it a first try:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs115', 569)&quot; onmouseover=&quot;showTip(event, 'fs115', 569)&quot; class=&quot;f&quot;&gt;treeFold&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 570)&quot; onmouseover=&quot;showTip(event, 'fs116', 570)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 571)&quot; onmouseover=&quot;showTip(event, 'fs117', 571)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 572)&quot; onmouseover=&quot;showTip(event, 'fs69', 572)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 573)&quot; onmouseover=&quot;showTip(event, 'fs118', 573)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 574)&quot; onmouseover=&quot;showTip(event, 'fs117', 574)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 575)&quot; onmouseover=&quot;showTip(event, 'fs119', 575)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 576)&quot; onmouseover=&quot;showTip(event, 'fs69', 576)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 577)&quot; onmouseover=&quot;showTip(event, 'fs69', 577)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 578)&quot; onmouseover=&quot;showTip(event, 'fs59', 578)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 579)&quot; onmouseover=&quot;showTip(event, 'fs117', 579)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 580)&quot; onmouseover=&quot;showTip(event, 'fs60', 580)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 581)&quot; onmouseover=&quot;showTip(event, 'fs70', 581)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 582)&quot; onmouseover=&quot;showTip(event, 'fs71', 582)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 583)&quot; onmouseover=&quot;showTip(event, 'fs72', 583)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 584)&quot; onmouseover=&quot;showTip(event, 'fs118', 584)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs116', 585)&quot; onmouseover=&quot;showTip(event, 'fs116', 585)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 586)&quot; onmouseover=&quot;showTip(event, 'fs117', 586)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 587)&quot; onmouseover=&quot;showTip(event, 'fs70', 587)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs72', 588)&quot; onmouseover=&quot;showTip(event, 'fs72', 588)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 589)&quot; onmouseover=&quot;showTip(event, 'fs119', 589)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 590)&quot; onmouseover=&quot;showTip(event, 'fs71', 590)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs118', 591)&quot; onmouseover=&quot;showTip(event, 'fs118', 591)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 592)&quot; onmouseover=&quot;showTip(event, 'fs117', 592)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; [] &lt;span onmouseout=&quot;hideTip(event, 'fs69', 593)&quot; onmouseover=&quot;showTip(event, 'fs69', 593)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's test it:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs115', 594)&quot; onmouseover=&quot;showTip(event, 'fs115', 594)&quot; class=&quot;f&quot;&gt;treeFold&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 595)&quot; onmouseover=&quot;showTip(event, 'fs120', 595)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 596)&quot; onmouseover=&quot;showTip(event, 'fs22', 596)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs121', 597)&quot; onmouseover=&quot;showTip(event, 'fs121', 597)&quot; class=&quot;f&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 598)&quot; onmouseover=&quot;showTip(event, 'fs22', 598)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) () &lt;span onmouseout=&quot;hideTip(event, 'fs65', 599)&quot; onmouseover=&quot;showTip(event, 'fs65', 599)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 4 2 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, that's not quite right, but I wrote it in this way so we can discuss what happens. This makes it
easier to understand the full solution. At first, if you find the short &lt;code&gt;Node&lt;/code&gt; case hard to understand,
you can expand it. The line:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;stack&lt;/span&gt;) &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;is the same as:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newAcc&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;stack&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newAcc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newStack&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But all in one, here are the things that are happening:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We enter the tree.&lt;/li&gt;
&lt;li&gt;We process element &lt;code&gt;4&lt;/code&gt;, by printing it &lt;code&gt;(folder acc x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The right child of &lt;code&gt;4&lt;/code&gt; is added to the stack &lt;code&gt;r :: stack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We loop on the left-child&lt;/li&gt;
&lt;li&gt;We process element &lt;code&gt;2&lt;/code&gt;, by printing it&lt;/li&gt;
&lt;li&gt;The right child of &lt;code&gt;2&lt;/code&gt; is added to the stack&lt;/li&gt;
&lt;li&gt;We loop on the left-child&lt;/li&gt;
&lt;li&gt;We process element &lt;code&gt;1&lt;/code&gt;, by printing it&lt;/li&gt;
&lt;li&gt;The right child of &lt;code&gt;1&lt;/code&gt; is added to the stack (a Leaf)&lt;/li&gt;
&lt;li&gt;We loop on the left-child&lt;/li&gt;
&lt;li&gt;We hit a Leaf, and we return &lt;code&gt;acc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what are we missing? Sure, we forgot to process the &lt;em&gt;right-child's&lt;/em&gt;. We put them all
onto the stack, but we never look at them. So what we need to do is to extend the &lt;code&gt;Leaf&lt;/code&gt; case.
Instead of immediately returning &lt;code&gt;acc&lt;/code&gt;, we first need to check if there are pending
trees in the &lt;code&gt;stack&lt;/code&gt;. If yes, we need to loop on those. Only if the &lt;code&gt;stack&lt;/code&gt; is empty
we can return &lt;code&gt;acc&lt;/code&gt;. So our final &lt;code&gt;treeFold&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 600)&quot; onmouseover=&quot;showTip(event, 'fs122', 600)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 601)&quot; onmouseover=&quot;showTip(event, 'fs116', 601)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 602)&quot; onmouseover=&quot;showTip(event, 'fs117', 602)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 603)&quot; onmouseover=&quot;showTip(event, 'fs69', 603)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 604)&quot; onmouseover=&quot;showTip(event, 'fs118', 604)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 605)&quot; onmouseover=&quot;showTip(event, 'fs117', 605)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 606)&quot; onmouseover=&quot;showTip(event, 'fs119', 606)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 607)&quot; onmouseover=&quot;showTip(event, 'fs69', 607)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 608)&quot; onmouseover=&quot;showTip(event, 'fs69', 608)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 609)&quot; onmouseover=&quot;showTip(event, 'fs59', 609)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 610)&quot; onmouseover=&quot;showTip(event, 'fs119', 610)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | []          &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 611)&quot; onmouseover=&quot;showTip(event, 'fs117', 611)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs69', 612)&quot; onmouseover=&quot;showTip(event, 'fs69', 612)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs119', 613)&quot; onmouseover=&quot;showTip(event, 'fs119', 613)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 614)&quot; onmouseover=&quot;showTip(event, 'fs118', 614)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 615)&quot; onmouseover=&quot;showTip(event, 'fs117', 615)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 616)&quot; onmouseover=&quot;showTip(event, 'fs119', 616)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 617)&quot; onmouseover=&quot;showTip(event, 'fs69', 617)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 618)&quot; onmouseover=&quot;showTip(event, 'fs60', 618)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 619)&quot; onmouseover=&quot;showTip(event, 'fs70', 619)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 620)&quot; onmouseover=&quot;showTip(event, 'fs71', 620)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 621)&quot; onmouseover=&quot;showTip(event, 'fs72', 621)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 622)&quot; onmouseover=&quot;showTip(event, 'fs118', 622)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs116', 623)&quot; onmouseover=&quot;showTip(event, 'fs116', 623)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 624)&quot; onmouseover=&quot;showTip(event, 'fs117', 624)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 625)&quot; onmouseover=&quot;showTip(event, 'fs70', 625)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs72', 626)&quot; onmouseover=&quot;showTip(event, 'fs72', 626)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 627)&quot; onmouseover=&quot;showTip(event, 'fs119', 627)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 628)&quot; onmouseover=&quot;showTip(event, 'fs71', 628)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs118', 629)&quot; onmouseover=&quot;showTip(event, 'fs118', 629)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 630)&quot; onmouseover=&quot;showTip(event, 'fs117', 630)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; [] &lt;span onmouseout=&quot;hideTip(event, 'fs69', 631)&quot; onmouseover=&quot;showTip(event, 'fs69', 631)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we get all numbers printed.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs122', 632)&quot; onmouseover=&quot;showTip(event, 'fs122', 632)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 633)&quot; onmouseover=&quot;showTip(event, 'fs120', 633)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 634)&quot; onmouseover=&quot;showTip(event, 'fs22', 634)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs121', 635)&quot; onmouseover=&quot;showTip(event, 'fs121', 635)&quot; class=&quot;f&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 636)&quot; onmouseover=&quot;showTip(event, 'fs22', 636)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) () &lt;span onmouseout=&quot;hideTip(event, 'fs65', 637)&quot; onmouseover=&quot;showTip(event, 'fs65', 637)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 4 2 1 3 6 5 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And if you noticed, this kind of tree-traversal is a pre-order tree traversal. But it is only pre-order
traversal by accident. I just thought of an easy way to traverse so we need to put as few things as possible
onto the &lt;code&gt;stack&lt;/code&gt; variable. Someone should not expect a specific tree traversal order for &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;a name=&quot;benchmarking&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Some Benchmarking&lt;/h2&gt;
&lt;p&gt;I think some simple benchmarks are quite good. At first, we always talk about tail-recursion and
I provided ways to achieve it, but never looked at performance. And there are two things to say here.&lt;/p&gt;
&lt;p&gt;First, tail-recursion is not about performance. Yes, sometimes it also improves performance, but the
main point of tail-recursion is that we don't end up with stack overflows. We first care for
correctness, only then comes speed. If you think otherwise, then answer me the following question:
What exactly do we get out of a function that is theoretically fast, but practically we cannot
execute it because it crashes with a stack overflow? So the main point of tail-recursion is
Correctness, that it is &lt;em&gt;sometimes&lt;/em&gt; faster is more an additional benefit.&lt;/p&gt;
&lt;p&gt;Second, tail-recursion with a continuation approach how i used it with &lt;code&gt;foldBack&lt;/code&gt; is usually
&lt;strong&gt;slower&lt;/strong&gt; than pure recursion!&lt;/p&gt;
&lt;p&gt;All of those are important. At first, you shouldn't implement tail-recursion just because someone
told you it is better or faster. It not only can be slower, it also can be harder to understand
and to maintain. So you really should ask yourself if you really need tail-recursion. And
for a binary tree this question is already legit. If you create a binary tree that always balance
itself, then you will less likely run into any kind of problems with a non tail-recursive &lt;code&gt;cata&lt;/code&gt;
function.&lt;/p&gt;
&lt;p&gt;With a stack depth of 1 you can handle two values (empty and one value), with a stack depth
of 2 you can handle 4 values. 3 is already 8 values. So the amount of values doubles by just
increasing the depth by one. With a stack depth of 32, what is just peanuts, you already
can handle 4.294.967.296 values. Before you run into problems with the stack depth you run
into completely other problems! Even if you just save 32-bit integers just the integers alone
already need 16 GiB of memory, and that does not include the &lt;code&gt;Node(x,l,r)&lt;/code&gt; objects that also
consumes memory. So you should ask yourself if you really need a &lt;code&gt;fold&lt;/code&gt; or &lt;code&gt;foldback&lt;/code&gt; function
that are harder to develop and probably even can be slower!&lt;/p&gt;
&lt;p&gt;But let's see some benchmarks. First I create some helper functions for the creation of some trees.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 638)&quot; onmouseover=&quot;showTip(event, 'fs123', 638)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs124', 639)&quot; onmouseover=&quot;showTip(event, 'fs124', 639)&quot; class=&quot;f&quot;&gt;builder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 640)&quot; onmouseover=&quot;showTip(event, 'fs125', 640)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 641)&quot; onmouseover=&quot;showTip(event, 'fs126', 641)&quot; class=&quot;i&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 642)&quot; onmouseover=&quot;showTip(event, 'fs127', 642)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs128', 643)&quot; onmouseover=&quot;showTip(event, 'fs128', 643)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 644)&quot; onmouseover=&quot;showTip(event, 'fs129', 644)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs128', 645)&quot; onmouseover=&quot;showTip(event, 'fs128', 645)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 646)&quot; onmouseover=&quot;showTip(event, 'fs126', 646)&quot; class=&quot;i&quot;&gt;depth&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 647)&quot; onmouseover=&quot;showTip(event, 'fs127', 647)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs128', 648)&quot; onmouseover=&quot;showTip(event, 'fs128', 648)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs124', 649)&quot; onmouseover=&quot;showTip(event, 'fs124', 649)&quot; class=&quot;f&quot;&gt;builder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 650)&quot; onmouseover=&quot;showTip(event, 'fs129', 650)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 651)&quot; onmouseover=&quot;showTip(event, 'fs129', 651)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs127', 652)&quot; onmouseover=&quot;showTip(event, 'fs127', 652)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 653)&quot; onmouseover=&quot;showTip(event, 'fs125', 653)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 654)&quot; onmouseover=&quot;showTip(event, 'fs130', 654)&quot; class=&quot;f&quot;&gt;createLeftTree&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 655)&quot; onmouseover=&quot;showTip(event, 'fs123', 655)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 656)&quot; onmouseover=&quot;showTip(event, 'fs87', 656)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 657)&quot; onmouseover=&quot;showTip(event, 'fs61', 657)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 658)&quot; onmouseover=&quot;showTip(event, 'fs87', 658)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 659)&quot; onmouseover=&quot;showTip(event, 'fs59', 659)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 660)&quot; onmouseover=&quot;showTip(event, 'fs64', 660)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs131', 661)&quot; onmouseover=&quot;showTip(event, 'fs131', 661)&quot; class=&quot;f&quot;&gt;createRightTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 662)&quot; onmouseover=&quot;showTip(event, 'fs123', 662)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 663)&quot; onmouseover=&quot;showTip(event, 'fs87', 663)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 664)&quot; onmouseover=&quot;showTip(event, 'fs61', 664)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 665)&quot; onmouseover=&quot;showTip(event, 'fs59', 665)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 666)&quot; onmouseover=&quot;showTip(event, 'fs87', 666)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 667)&quot; onmouseover=&quot;showTip(event, 'fs64', 667)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs132', 668)&quot; onmouseover=&quot;showTip(event, 'fs132', 668)&quot; class=&quot;f&quot;&gt;createBalanced&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 669)&quot; onmouseover=&quot;showTip(event, 'fs123', 669)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 670)&quot; onmouseover=&quot;showTip(event, 'fs87', 670)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 671)&quot; onmouseover=&quot;showTip(event, 'fs61', 671)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 672)&quot; onmouseover=&quot;showTip(event, 'fs87', 672)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 673)&quot; onmouseover=&quot;showTip(event, 'fs87', 673)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 674)&quot; onmouseover=&quot;showTip(event, 'fs64', 674)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So let's create some small trees with 10K nodes.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 675)&quot; onmouseover=&quot;showTip(event, 'fs133', 675)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 676)&quot; onmouseover=&quot;showTip(event, 'fs130', 676)&quot; class=&quot;f&quot;&gt;createLeftTree&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 677)&quot; onmouseover=&quot;showTip(event, 'fs134', 677)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs131', 678)&quot; onmouseover=&quot;showTip(event, 'fs131', 678)&quot; class=&quot;f&quot;&gt;createRightTree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Those trees are not balanced, but they can still be handled by &lt;code&gt;cata&lt;/code&gt; on my machine. But just benchmarking
one call is still too fast, so I create a &lt;code&gt;bench&lt;/code&gt; function that calls some code a specific amount of time.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs135', 679)&quot; onmouseover=&quot;showTip(event, 'fs135', 679)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 680)&quot; onmouseover=&quot;showTip(event, 'fs136', 680)&quot; class=&quot;i&quot;&gt;times&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs137', 681)&quot; onmouseover=&quot;showTip(event, 'fs137', 681)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs138', 682)&quot; onmouseover=&quot;showTip(event, 'fs138', 682)&quot; class=&quot;i&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs139', 683)&quot; onmouseover=&quot;showTip(event, 'fs139', 683)&quot; class=&quot;t&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 684)&quot; onmouseover=&quot;showTip(event, 'fs140', 684)&quot; class=&quot;f&quot;&gt;StartNew&lt;/span&gt;()
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs141', 685)&quot; onmouseover=&quot;showTip(event, 'fs141', 685)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 686)&quot; onmouseover=&quot;showTip(event, 'fs136', 686)&quot; class=&quot;i&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs137', 687)&quot; onmouseover=&quot;showTip(event, 'fs137', 687)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; () &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs142', 688)&quot; onmouseover=&quot;showTip(event, 'fs142', 688)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs138', 689)&quot; onmouseover=&quot;showTip(event, 'fs138', 689)&quot; class=&quot;i&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs143', 690)&quot; onmouseover=&quot;showTip(event, 'fs143', 690)&quot; class=&quot;f&quot;&gt;Stop&lt;/span&gt;()
    &lt;span onmouseout=&quot;hideTip(event, 'fs144', 691)&quot; onmouseover=&quot;showTip(event, 'fs144', 691)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Timing: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%O&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs138', 692)&quot; onmouseover=&quot;showTip(event, 'fs138', 692)&quot; class=&quot;i&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs145', 693)&quot; onmouseover=&quot;showTip(event, 'fs145', 693)&quot; class=&quot;i&quot;&gt;Elapsed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, when we sum up every 10.000 nodes with &lt;code&gt;treeCata&lt;/code&gt; and do that 10.000 times, which timings do we
get for &lt;code&gt;treeCata&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt;? I run every &lt;code&gt;bench&lt;/code&gt; line twice.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs135', 694)&quot; onmouseover=&quot;showTip(event, 'fs135', 694)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 695)&quot; onmouseover=&quot;showTip(event, 'fs77', 695)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 696)&quot; onmouseover=&quot;showTip(event, 'fs22', 696)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 697)&quot; onmouseover=&quot;showTip(event, 'fs84', 697)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 698)&quot; onmouseover=&quot;showTip(event, 'fs85', 698)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 699)&quot; onmouseover=&quot;showTip(event, 'fs22', 699)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 700)&quot; onmouseover=&quot;showTip(event, 'fs84', 700)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 701)&quot; onmouseover=&quot;showTip(event, 'fs85', 701)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs133', 702)&quot; onmouseover=&quot;showTip(event, 'fs133', 702)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.290, CPU: 00:00:04.296, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.292, CPU: 00:00:04.265, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 703)&quot; onmouseover=&quot;showTip(event, 'fs135', 703)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 704)&quot; onmouseover=&quot;showTip(event, 'fs77', 704)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 705)&quot; onmouseover=&quot;showTip(event, 'fs22', 705)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 706)&quot; onmouseover=&quot;showTip(event, 'fs84', 706)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 707)&quot; onmouseover=&quot;showTip(event, 'fs85', 707)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 708)&quot; onmouseover=&quot;showTip(event, 'fs22', 708)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 709)&quot; onmouseover=&quot;showTip(event, 'fs84', 709)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 710)&quot; onmouseover=&quot;showTip(event, 'fs85', 710)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs134', 711)&quot; onmouseover=&quot;showTip(event, 'fs134', 711)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.145, CPU: 00:00:04.140, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.144, CPU: 00:00:04.140, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 712)&quot; onmouseover=&quot;showTip(event, 'fs135', 712)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 713)&quot; onmouseover=&quot;showTip(event, 'fs92', 713)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 714)&quot; onmouseover=&quot;showTip(event, 'fs22', 714)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 715)&quot; onmouseover=&quot;showTip(event, 'fs84', 715)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 716)&quot; onmouseover=&quot;showTip(event, 'fs85', 716)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 717)&quot; onmouseover=&quot;showTip(event, 'fs22', 717)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 718)&quot; onmouseover=&quot;showTip(event, 'fs84', 718)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 719)&quot; onmouseover=&quot;showTip(event, 'fs85', 719)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs133', 720)&quot; onmouseover=&quot;showTip(event, 'fs133', 720)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:07.518, CPU: 00:00:07.546, GC gen0: 1617, gen1: 1616, gen2: 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:07.448, CPU: 00:00:07.437, GC gen0: 1621, gen1: 1621, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 721)&quot; onmouseover=&quot;showTip(event, 'fs135', 721)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 722)&quot; onmouseover=&quot;showTip(event, 'fs92', 722)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 723)&quot; onmouseover=&quot;showTip(event, 'fs22', 723)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 724)&quot; onmouseover=&quot;showTip(event, 'fs84', 724)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 725)&quot; onmouseover=&quot;showTip(event, 'fs85', 725)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 726)&quot; onmouseover=&quot;showTip(event, 'fs22', 726)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 727)&quot; onmouseover=&quot;showTip(event, 'fs84', 727)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 728)&quot; onmouseover=&quot;showTip(event, 'fs85', 728)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs134', 729)&quot; onmouseover=&quot;showTip(event, 'fs134', 729)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:08.076, CPU: 00:00:08.078, GC gen0: 1628, gen1: 1628, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:08.146, CPU: 00:00:08.140, GC gen0: 1625, gen1: 1625, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So overall, the &lt;code&gt;foldBack&lt;/code&gt; result are disastrous. At first, creating a lot of continuation
functions creates a lot of garbage, all those closure functions needs to be managed on
the heap. As a result the garbage collector runs quite often. 1600 gen0 and 1600 gen1 clean-ups!
Overall &lt;code&gt;foldBack&lt;/code&gt; is tail-recursive, but takes the double of time to finish compared
to the &lt;code&gt;cata&lt;/code&gt; functions. On top, the &lt;code&gt;cata&lt;/code&gt; functions trigger not a single garbage collection
clean-up, that is probably also the reason why they are faster.&lt;/p&gt;
&lt;p&gt;But we also should consider &lt;code&gt;treeFold&lt;/code&gt;. Actually just summing up the nodes is also a task
that can be done by &lt;code&gt;treeFold&lt;/code&gt;, so how fast is &lt;code&gt;treeFold&lt;/code&gt;?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs135', 730)&quot; onmouseover=&quot;showTip(event, 'fs135', 730)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 731)&quot; onmouseover=&quot;showTip(event, 'fs122', 731)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 732)&quot; onmouseover=&quot;showTip(event, 'fs133', 732)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.882, CPU: 00:00:02.890, GC gen0: 508, gen1: 508, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.864, CPU: 00:00:02.859, GC gen0: 508, gen1: 508, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 733)&quot; onmouseover=&quot;showTip(event, 'fs135', 733)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 734)&quot; onmouseover=&quot;showTip(event, 'fs122', 734)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 735)&quot; onmouseover=&quot;showTip(event, 'fs134', 735)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.830, CPU: 00:00:02.812, GC gen0: 508, gen1: 508, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.824, CPU: 00:00:02.828, GC gen0: 509, gen1: 509, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Those results are quite interesting. They are faster as &lt;code&gt;treeCata&lt;/code&gt; and &lt;code&gt;treeFoldback&lt;/code&gt;. I
expected that it is faster as &lt;code&gt;foldBack&lt;/code&gt;, because just handling a stack of trees should
be way more efficient as handling a lot of closure functions. But even the fact that
they still trigger quite a lot of garbage clean-ups, it is still nearly twice as fast
as the &lt;code&gt;cata&lt;/code&gt; function! By the way, we can even get the amount of GCs down. Actually
there is no point in using an immutable stack. We also can use an mutable stack
in &lt;code&gt;fold&lt;/code&gt;. This makes the implementation a little bit harder again.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs146', 736)&quot; onmouseover=&quot;showTip(event, 'fs146', 736)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 737)&quot; onmouseover=&quot;showTip(event, 'fs116', 737)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 738)&quot; onmouseover=&quot;showTip(event, 'fs117', 738)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 739)&quot; onmouseover=&quot;showTip(event, 'fs69', 739)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs147', 740)&quot; onmouseover=&quot;showTip(event, 'fs147', 740)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 741)&quot; onmouseover=&quot;showTip(event, 'fs2', 741)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs148', 742)&quot; onmouseover=&quot;showTip(event, 'fs148', 742)&quot; class=&quot;i&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs149', 743)&quot; onmouseover=&quot;showTip(event, 'fs149', 743)&quot; class=&quot;i&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs150', 744)&quot; onmouseover=&quot;showTip(event, 'fs150', 744)&quot; class=&quot;t&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;_&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;()
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs151', 745)&quot; onmouseover=&quot;showTip(event, 'fs151', 745)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 746)&quot; onmouseover=&quot;showTip(event, 'fs117', 746)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 747)&quot; onmouseover=&quot;showTip(event, 'fs69', 747)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 748)&quot; onmouseover=&quot;showTip(event, 'fs69', 748)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 749)&quot; onmouseover=&quot;showTip(event, 'fs59', 749)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs147', 750)&quot; onmouseover=&quot;showTip(event, 'fs147', 750)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs152', 751)&quot; onmouseover=&quot;showTip(event, 'fs152', 751)&quot; class=&quot;i&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs151', 752)&quot; onmouseover=&quot;showTip(event, 'fs151', 752)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 753)&quot; onmouseover=&quot;showTip(event, 'fs117', 753)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs147', 754)&quot; onmouseover=&quot;showTip(event, 'fs147', 754)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs153', 755)&quot; onmouseover=&quot;showTip(event, 'fs153', 755)&quot; class=&quot;f&quot;&gt;Pop&lt;/span&gt;())
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 756)&quot; onmouseover=&quot;showTip(event, 'fs117', 756)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 757)&quot; onmouseover=&quot;showTip(event, 'fs60', 757)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 758)&quot; onmouseover=&quot;showTip(event, 'fs70', 758)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 759)&quot; onmouseover=&quot;showTip(event, 'fs71', 759)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 760)&quot; onmouseover=&quot;showTip(event, 'fs72', 760)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs147', 761)&quot; onmouseover=&quot;showTip(event, 'fs147', 761)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs154', 762)&quot; onmouseover=&quot;showTip(event, 'fs154', 762)&quot; class=&quot;f&quot;&gt;Push&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 763)&quot; onmouseover=&quot;showTip(event, 'fs72', 763)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs151', 764)&quot; onmouseover=&quot;showTip(event, 'fs151', 764)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs116', 765)&quot; onmouseover=&quot;showTip(event, 'fs116', 765)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 766)&quot; onmouseover=&quot;showTip(event, 'fs117', 766)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 767)&quot; onmouseover=&quot;showTip(event, 'fs70', 767)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 768)&quot; onmouseover=&quot;showTip(event, 'fs71', 768)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs151', 769)&quot; onmouseover=&quot;showTip(event, 'fs151', 769)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 770)&quot; onmouseover=&quot;showTip(event, 'fs117', 770)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 771)&quot; onmouseover=&quot;showTip(event, 'fs69', 771)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's see how it compares to &lt;code&gt;treeFold&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs135', 772)&quot; onmouseover=&quot;showTip(event, 'fs135', 772)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs146', 773)&quot; onmouseover=&quot;showTip(event, 'fs146', 773)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 774)&quot; onmouseover=&quot;showTip(event, 'fs133', 774)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.018, CPU: 00:00:04.015, GC gen0: 416, gen1: 416, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.029, CPU: 00:00:04.015, GC gen0: 416, gen1: 416, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 775)&quot; onmouseover=&quot;showTip(event, 'fs135', 775)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs146', 776)&quot; onmouseover=&quot;showTip(event, 'fs146', 776)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 777)&quot; onmouseover=&quot;showTip(event, 'fs134', 777)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.000, CPU: 00:00:03.984, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:03.994, CPU: 00:00:03.953, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Also, this is not what I expected, it becomes slower to the speed of the &lt;code&gt;cata&lt;/code&gt; function. And
in the &lt;code&gt;smallL&lt;/code&gt; case it still triggers a lot of GC clean-ups. On a tree only with right nodes
we don't have any clean-ups because we don't save anything in the stack. It is still quite interesting
to see that the timing with and without GC clean-ups are the same. So it seems the GC clean-ups are
so fast that they overall don't matter at all for the overall timing. At least on my machine.&lt;/p&gt;
&lt;p&gt;So, how are the timings for really big but balanced trees? A balanced tree with a depth
of 25 contains 33.554.431 entries. How are the timings here?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 778)&quot; onmouseover=&quot;showTip(event, 'fs155', 778)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs132', 779)&quot; onmouseover=&quot;showTip(event, 'fs132', 779)&quot; class=&quot;f&quot;&gt;createBalanced&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 780)&quot; onmouseover=&quot;showTip(event, 'fs156', 780)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 781)&quot; onmouseover=&quot;showTip(event, 'fs22', 781)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 782)&quot; onmouseover=&quot;showTip(event, 'fs84', 782)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 783)&quot; onmouseover=&quot;showTip(event, 'fs85', 783)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 784)&quot; onmouseover=&quot;showTip(event, 'fs22', 784)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 785)&quot; onmouseover=&quot;showTip(event, 'fs84', 785)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 786)&quot; onmouseover=&quot;showTip(event, 'fs85', 786)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs77', 787)&quot; onmouseover=&quot;showTip(event, 'fs77', 787)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 788)&quot; onmouseover=&quot;showTip(event, 'fs156', 788)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 789)&quot; onmouseover=&quot;showTip(event, 'fs155', 789)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.242, CPU: 00:00:01.234, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.239, CPU: 00:00:01.218, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs92', 790)&quot; onmouseover=&quot;showTip(event, 'fs92', 790)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 791)&quot; onmouseover=&quot;showTip(event, 'fs156', 791)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 792)&quot; onmouseover=&quot;showTip(event, 'fs155', 792)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.501, CPU: 00:00:02.500, GC gen0: 556, gen1: 555, gen2: 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.451, CPU: 00:00:02.453, GC gen0: 555, gen1: 555, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs122', 793)&quot; onmouseover=&quot;showTip(event, 'fs122', 793)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 794)&quot; onmouseover=&quot;showTip(event, 'fs155', 794)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.000, CPU: 00:00:00.968, GC gen0: 171, gen1: 171, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.000, CPU: 00:00:01.000, GC gen0: 171, gen1: 171, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs146', 795)&quot; onmouseover=&quot;showTip(event, 'fs146', 795)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 796)&quot; onmouseover=&quot;showTip(event, 'fs155', 796)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.418, CPU: 00:00:01.421, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.412, CPU: 00:00:01.406, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;All in one, the &lt;code&gt;cata&lt;/code&gt; function overall is usually the easiest to implement, in its performance it is
also quite good, at least better as a naive implementation with continuation functions. Because
most memory get handled by the stack, it also don't causes garbage collection.&lt;/p&gt;
&lt;p&gt;An implementation with a mutable stack also can be efficient in terms of garbage collection, but at least
on my machine it is still slower compared to the pure recursive version.&lt;/p&gt;
&lt;p&gt;As an overall result you shouldn't abandon the &lt;code&gt;cata&lt;/code&gt; function, just because you fear that
non tail-recursive functions are automatically slower. Usually they are very easy to implement
and the speed is quite good. Instead you should consider if you expect problems with the stack depth.
When you create balanced trees this is quite uncommon that you run into problems with the stack depth.&lt;/p&gt;
&lt;p&gt;But with a type like a list that has linear recursion, where every element increases the stack depth
by one, you should consider more time in writing tail-recursive functions.&lt;/p&gt;
&lt;a name=&quot;markdown&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Markdown&lt;/h2&gt;
&lt;p&gt;Up so far I only talked about lists and binary trees, but both types basically contain everything
you need to know. Any other type is basically just repetition of what was said so far. As a last
example I want to show the small Markdown example that I created in the
&lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic-Data Types&lt;/a&gt; article. It is not a full description of the Markdown definition,
but is good enough as an example.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs157', 797)&quot; onmouseover=&quot;showTip(event, 'fs157', 797)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs158', 798)&quot; onmouseover=&quot;showTip(event, 'fs158', 798)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs159', 799)&quot; onmouseover=&quot;showTip(event, 'fs159', 799)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs160', 800)&quot; onmouseover=&quot;showTip(event, 'fs160', 800)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs161', 801)&quot; onmouseover=&quot;showTip(event, 'fs161', 801)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs160', 802)&quot; onmouseover=&quot;showTip(event, 'fs160', 802)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs162', 803)&quot; onmouseover=&quot;showTip(event, 'fs162', 803)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs160', 804)&quot; onmouseover=&quot;showTip(event, 'fs160', 804)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs163', 805)&quot; onmouseover=&quot;showTip(event, 'fs163', 805)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs157', 806)&quot; onmouseover=&quot;showTip(event, 'fs157', 806)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 807)&quot; onmouseover=&quot;showTip(event, 'fs41', 807)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our Markdown definition contains 4 non-recursive cases and one recursive case. We just did what we did
so far. We create a &lt;code&gt;cata&lt;/code&gt; function that expects a function for every case. As &lt;code&gt;NewLine&lt;/code&gt; contains no
data, we can just expect a plain value.&lt;/p&gt;
&lt;p&gt;The recursive element is quite different from what we have seen so far. Instead of a single recursive
element we have a list of recursive elements. But that shouldn't be much of a difference. We just
call the &lt;code&gt;recurs&lt;/code&gt; function for every element in the list with &lt;code&gt;List.map&lt;/code&gt;. Overall we end up
with the following &lt;code&gt;cata&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs164', 808)&quot; onmouseover=&quot;showTip(event, 'fs164', 808)&quot; class=&quot;f&quot;&gt;markCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 809)&quot; onmouseover=&quot;showTip(event, 'fs165', 809)&quot; class=&quot;i&quot;&gt;newline&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs166', 810)&quot; onmouseover=&quot;showTip(event, 'fs166', 810)&quot; class=&quot;f&quot;&gt;literal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 811)&quot; onmouseover=&quot;showTip(event, 'fs167', 811)&quot; class=&quot;f&quot;&gt;bold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 812)&quot; onmouseover=&quot;showTip(event, 'fs168', 812)&quot; class=&quot;f&quot;&gt;code&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 813)&quot; onmouseover=&quot;showTip(event, 'fs169', 813)&quot; class=&quot;f&quot;&gt;block&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 814)&quot; onmouseover=&quot;showTip(event, 'fs170', 814)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs171', 815)&quot; onmouseover=&quot;showTip(event, 'fs171', 815)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs164', 816)&quot; onmouseover=&quot;showTip(event, 'fs164', 816)&quot; class=&quot;f&quot;&gt;markCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 817)&quot; onmouseover=&quot;showTip(event, 'fs165', 817)&quot; class=&quot;i&quot;&gt;newline&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs166', 818)&quot; onmouseover=&quot;showTip(event, 'fs166', 818)&quot; class=&quot;f&quot;&gt;literal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 819)&quot; onmouseover=&quot;showTip(event, 'fs167', 819)&quot; class=&quot;f&quot;&gt;bold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 820)&quot; onmouseover=&quot;showTip(event, 'fs168', 820)&quot; class=&quot;f&quot;&gt;code&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 821)&quot; onmouseover=&quot;showTip(event, 'fs169', 821)&quot; class=&quot;f&quot;&gt;block&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 822)&quot; onmouseover=&quot;showTip(event, 'fs170', 822)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs158', 823)&quot; onmouseover=&quot;showTip(event, 'fs158', 823)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 824)&quot; onmouseover=&quot;showTip(event, 'fs165', 824)&quot; class=&quot;i&quot;&gt;newline&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs159', 825)&quot; onmouseover=&quot;showTip(event, 'fs159', 825)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs172', 826)&quot; onmouseover=&quot;showTip(event, 'fs172', 826)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs166', 827)&quot; onmouseover=&quot;showTip(event, 'fs166', 827)&quot; class=&quot;f&quot;&gt;literal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 828)&quot; onmouseover=&quot;showTip(event, 'fs172', 828)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs161', 829)&quot; onmouseover=&quot;showTip(event, 'fs161', 829)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span onmouseout=&quot;hideTip(event, 'fs172', 830)&quot; onmouseover=&quot;showTip(event, 'fs172', 830)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 831)&quot; onmouseover=&quot;showTip(event, 'fs167', 831)&quot; class=&quot;f&quot;&gt;bold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 832)&quot; onmouseover=&quot;showTip(event, 'fs172', 832)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs162', 833)&quot; onmouseover=&quot;showTip(event, 'fs162', 833)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 834)&quot; onmouseover=&quot;showTip(event, 'fs172', 834)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 835)&quot; onmouseover=&quot;showTip(event, 'fs168', 835)&quot; class=&quot;f&quot;&gt;code&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 836)&quot; onmouseover=&quot;showTip(event, 'fs172', 836)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs163', 837)&quot; onmouseover=&quot;showTip(event, 'fs163', 837)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs173', 838)&quot; onmouseover=&quot;showTip(event, 'fs173', 838)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 839)&quot; onmouseover=&quot;showTip(event, 'fs169', 839)&quot; class=&quot;f&quot;&gt;block&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 840)&quot; onmouseover=&quot;showTip(event, 'fs4', 840)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs174', 841)&quot; onmouseover=&quot;showTip(event, 'fs174', 841)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs171', 842)&quot; onmouseover=&quot;showTip(event, 'fs171', 842)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 843)&quot; onmouseover=&quot;showTip(event, 'fs173', 843)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Do we need a &lt;code&gt;fold&lt;/code&gt; or &lt;code&gt;foldBack&lt;/code&gt;? Well, I don't know you, but I don't think we ever see a markdown
document that has some ten thousand of nested blocks so recursion becomes a problem. Probably even
a nesting more than 5 is already rare. So overall I think writing &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; is probably
just a waste of time. So let's once again write a function that turns a markdown document into
HTML.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs175', 844)&quot; onmouseover=&quot;showTip(event, 'fs175', 844)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs176', 845)&quot; onmouseover=&quot;showTip(event, 'fs176', 845)&quot; class=&quot;f&quot;&gt;escape&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 846)&quot; onmouseover=&quot;showTip(event, 'fs2', 846)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs177', 847)&quot; onmouseover=&quot;showTip(event, 'fs177', 847)&quot; class=&quot;i&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs178', 848)&quot; onmouseover=&quot;showTip(event, 'fs178', 848)&quot; class=&quot;t&quot;&gt;HttpUtility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs179', 849)&quot; onmouseover=&quot;showTip(event, 'fs179', 849)&quot; class=&quot;f&quot;&gt;HtmlEncode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 850)&quot; onmouseover=&quot;showTip(event, 'fs180', 850)&quot; class=&quot;f&quot;&gt;wrap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 851)&quot; onmouseover=&quot;showTip(event, 'fs181', 851)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 852)&quot; onmouseover=&quot;showTip(event, 'fs172', 852)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs95', 853)&quot; onmouseover=&quot;showTip(event, 'fs95', 853)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 854)&quot; onmouseover=&quot;showTip(event, 'fs181', 854)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 855)&quot; onmouseover=&quot;showTip(event, 'fs172', 855)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 856)&quot; onmouseover=&quot;showTip(event, 'fs181', 856)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs182', 857)&quot; onmouseover=&quot;showTip(event, 'fs182', 857)&quot; class=&quot;f&quot;&gt;wrapEscape&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 858)&quot; onmouseover=&quot;showTip(event, 'fs181', 858)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 859)&quot; onmouseover=&quot;showTip(event, 'fs180', 859)&quot; class=&quot;f&quot;&gt;wrap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 860)&quot; onmouseover=&quot;showTip(event, 'fs181', 860)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs176', 861)&quot; onmouseover=&quot;showTip(event, 'fs176', 861)&quot; class=&quot;f&quot;&gt;escape&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs164', 862)&quot; onmouseover=&quot;showTip(event, 'fs164', 862)&quot; class=&quot;f&quot;&gt;markCata&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs176', 863)&quot; onmouseover=&quot;showTip(event, 'fs176', 863)&quot; class=&quot;f&quot;&gt;escape&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs182', 864)&quot; onmouseover=&quot;showTip(event, 'fs182', 864)&quot; class=&quot;f&quot;&gt;wrapEscape&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs182', 865)&quot; onmouseover=&quot;showTip(event, 'fs182', 865)&quot; class=&quot;f&quot;&gt;wrapEscape&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs180', 866)&quot; onmouseover=&quot;showTip(event, 'fs180', 866)&quot; class=&quot;f&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 867)&quot; onmouseover=&quot;showTip(event, 'fs23', 867)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs114', 868)&quot; onmouseover=&quot;showTip(event, 'fs114', 868)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably there isn't much to say here. The &lt;code&gt;escape&lt;/code&gt; function correctly escapes HTML characters.
As I always need to wrap string into tags I just created a &lt;code&gt;wrap&lt;/code&gt; function that I can pass a
&lt;em&gt;tag&lt;/em&gt; and a &lt;em&gt;string&lt;/em&gt; that does that. But I need a version that escapes the string, and one that
doesn't. The last one is important for a recursive case. Because we don't want to escape the HTML
tags itself. The arguments of the &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;wrapEscape&lt;/code&gt; function are chosen in a way so I can
use currying, so I don't need to create a lot of lambda expressions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs183', 869)&quot; onmouseover=&quot;showTip(event, 'fs183', 869)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs163', 870)&quot; onmouseover=&quot;showTip(event, 'fs163', 870)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
        &lt;span onmouseout=&quot;hideTip(event, 'fs159', 871)&quot; onmouseover=&quot;showTip(event, 'fs159', 871)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs161', 872)&quot; onmouseover=&quot;showTip(event, 'fs161', 872)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs158', 873)&quot; onmouseover=&quot;showTip(event, 'fs158', 873)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs159', 874)&quot; onmouseover=&quot;showTip(event, 'fs159', 874)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;InlineCode of&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs162', 875)&quot; onmouseover=&quot;showTip(event, 'fs162', 875)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;let sum x y = x + y&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs158', 876)&quot; onmouseover=&quot;showTip(event, 'fs158', 876)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs163', 877)&quot; onmouseover=&quot;showTip(event, 'fs163', 877)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
            &lt;span onmouseout=&quot;hideTip(event, 'fs159', 878)&quot; onmouseover=&quot;showTip(event, 'fs159', 878)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This is the end with some &amp;lt;html&amp;gt;that should be escaped&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;
        ]
    ]

&lt;span onmouseout=&quot;hideTip(event, 'fs175', 879)&quot; onmouseover=&quot;showTip(event, 'fs175', 879)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs183', 880)&quot; onmouseover=&quot;showTip(event, 'fs183', 880)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// &amp;quot;&amp;lt;p&amp;gt;Hello&amp;lt;strong&amp;gt;World!&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;InlineCode of&amp;lt;code&amp;gt;let sum x y = x + y&amp;lt;/code&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//  &amp;lt;p&amp;gt;This is the end with some &amp;amp;lt;html&amp;amp;gt;that should be escaped&amp;amp;lt;/html&amp;amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have seen how to create a &lt;code&gt;cata&lt;/code&gt; function, and we learned that &lt;code&gt;foldBack&lt;/code&gt; is just &lt;code&gt;cata&lt;/code&gt;
written tail-recursive. For the &lt;code&gt;fold&lt;/code&gt; implementation of the tree, i choosed another way to
create a tail-recursive function that manages the stack directly.&lt;/p&gt;
&lt;p&gt;In benchmarking we also saw that the last way is also quite better in terms of speed and
garbage collection compared to a continuation approach. With a mutable stack we can even further
eliminate garbage collection cleanup.&lt;/p&gt;
&lt;p&gt;But overall we have seen that &lt;code&gt;cata&lt;/code&gt; is very fast and it doesn't mean that tail-recursion
is automatically better or faster.&lt;/p&gt;
&lt;a name=&quot;further&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/series/recursive-types-and-folds.html&quot;&gt;Recursive types and folds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lorgonblog.wordpress.com/2008/04/05/catamorphisms-part-one/&quot;&gt;Catamorphisms, part one&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;comments&quot;&gt;&lt;/a&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;namespace System.Diagnostics&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;a&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Empty&lt;br /&gt;&amp;#160;&amp;#160;| Cons of head: &amp;#39;a * tail: List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;union case List.Empty: List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;union case List.Cons: head: &amp;#39;a * tail: List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val empty : List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.empty&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val cons : h:&amp;#39;a -&amp;gt; t:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.cons&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val h : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val t : List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val xs : obj&lt;br /&gt;&lt;br /&gt;Full name: catamorphisms.xs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val l1 : List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.l1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val l2 : List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.l2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val l3 : List&amp;lt;string&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.l3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val listLength&amp;#39; : list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listLength&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;Multiple items&lt;br /&gt;val list : List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val listSum&amp;#39; : _arg1:List&amp;lt;int&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listSum&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val h : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val t : List&amp;lt;int&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val listMap&amp;#39; : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; _arg1:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listMap&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;module String&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val length : str:string -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.length&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val listSnoc&amp;#39; : x:&amp;#39;a -&amp;gt; _arg1:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listSnoc&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val listCata&amp;#39; : fEmpty:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fCons:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; _arg1:List&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val fEmpty : (unit -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val fCons : (&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val h : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val t : List&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val listLength&amp;#39;&amp;#39; : list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listLength&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val t : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val listCata&amp;#39;&amp;#39; : fEmpty:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fCons:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; list:List&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;Multiple items&lt;br /&gt;val list : List&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val recurs : (List&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val listCata&amp;#39;&amp;#39;&amp;#39; : empty:&amp;#39;State -&amp;gt; fCons:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&amp;#39;&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val empty : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val fCons : (&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val recurs : (List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val listCata : fCons:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val state : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val listLength : list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listLength&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val listSum : list:List&amp;lt;int&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listSum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;Multiple items&lt;br /&gt;val list : List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val listMap : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listMap&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val acc : List&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val listSnoc : x:&amp;#39;a -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listSnoc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val acc : List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val listFoldBack : fCons:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.listFoldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val loop : (List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; (&amp;#39;State -&amp;gt; &amp;#39;b) -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val cont : (&amp;#39;State -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val racc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val id : x:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.id&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;type Tree&amp;lt;&amp;#39;a&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Leaf&lt;br /&gt;&amp;#160;&amp;#160;| Node of &amp;#39;a * Tree&amp;lt;&amp;#39;a&amp;gt; * Tree&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Tree&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;union case Tree.Leaf: Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;union case Tree.Node: &amp;#39;a * Tree&amp;lt;&amp;#39;a&amp;gt; * Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val node : x:&amp;#39;a -&amp;gt; l:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; r:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Tree&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.node&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val l : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val r : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val endNode : x:&amp;#39;a -&amp;gt; Tree&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.endNode&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val tree : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.tree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val treeCata&amp;#39; : fLeaf:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fNode:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val fLeaf : (unit -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val fNode : (&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val tree : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val x : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val l : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val r : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val treeCata&amp;#39;&amp;#39; : fLeaf:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fNode:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val recurs : (Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val treeCata&amp;#39;&amp;#39;&amp;#39; : leaf:&amp;#39;a -&amp;gt; fNode:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&amp;#39;&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val leaf : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val treeCata : folder:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; acc:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;val tree : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val acc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val recurs : (Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val t : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val treeLength : tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.treeLength&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val l : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val r : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;val treeSum : tree:Tree&amp;lt;int&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.treeSum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val tree : Tree&amp;lt;int&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;val treeMap : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.treeMap&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;val mutable acc : int&lt;br /&gt;&lt;br /&gt;Full name: Main.acc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;val foldBack : folder:(&amp;#39;T -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;T list -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;val treeFoldBack : folder:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; acc:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFoldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;val loop : (Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; (&amp;#39;State -&amp;gt; &amp;#39;b) -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs94&quot;&gt;val lacc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs95&quot;&gt;val sprintf : format:Printf.StringFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs96&quot;&gt;val ordered : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.ordered&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs97&quot;&gt;val l : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs98&quot;&gt;val r : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs99&quot;&gt;val reversed : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.reversed&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs100&quot;&gt;val preOrder : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.preOrder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs101&quot;&gt;val postOrder : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.postOrder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs102&quot;&gt;val path : search:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; string (requires equality)&lt;br /&gt;&lt;br /&gt;Full name: Main.path&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs103&quot;&gt;val search : &amp;#39;a (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs104&quot;&gt;val tree : Tree&amp;lt;&amp;#39;a&amp;gt; (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs105&quot;&gt;val leaf : bool * &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs106&quot;&gt;val node : (&amp;#39;a -&amp;gt; bool * string list -&amp;gt; bool * string list -&amp;gt; bool * string list) (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs107&quot;&gt;val x : &amp;#39;a (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs108&quot;&gt;val lb : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs109&quot;&gt;val lp : string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs110&quot;&gt;val rb : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs111&quot;&gt;val rp : string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs112&quot;&gt;val path : bool * string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs113&quot;&gt;val p : string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs114&quot;&gt;val concat : sep:string -&amp;gt; strings:seq&amp;lt;string&amp;gt; -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs115&quot;&gt;val treeFold&amp;#39; : folder:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a) -&amp;gt; acc:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFold&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs116&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs117&quot;&gt;val acc : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs118&quot;&gt;val loop : (&amp;#39;a -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt; list -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs119&quot;&gt;val stack : Tree&amp;lt;&amp;#39;b&amp;gt; list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs120&quot;&gt;val acc : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs121&quot;&gt;val printf : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printf&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs122&quot;&gt;val treeFold : folder:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a) -&amp;gt; acc:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs123&quot;&gt;val createTree : builder:(&amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; init:&amp;#39;a -&amp;gt; depth:int -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.createTree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs124&quot;&gt;val builder : (&amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs125&quot;&gt;val init : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs126&quot;&gt;val depth : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs127&quot;&gt;val loop : (int -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs128&quot;&gt;val count : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs129&quot;&gt;val tree : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs130&quot;&gt;val createLeftTree : (int -&amp;gt; Tree&amp;lt;int&amp;gt;)&lt;br /&gt;&lt;br /&gt;Full name: Main.createLeftTree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs131&quot;&gt;val createRightTree : (int -&amp;gt; Tree&amp;lt;int&amp;gt;)&lt;br /&gt;&lt;br /&gt;Full name: Main.createRightTree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs132&quot;&gt;val createBalanced : (int -&amp;gt; Tree&amp;lt;int&amp;gt;)&lt;br /&gt;&lt;br /&gt;Full name: Main.createBalanced&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs133&quot;&gt;val smallL : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.smallL&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs134&quot;&gt;val smallR : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.smallR&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs135&quot;&gt;val bench : times:int -&amp;gt; f:(unit -&amp;gt; &amp;#39;a) -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.bench&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs136&quot;&gt;val times : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs137&quot;&gt;val f : (unit -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs138&quot;&gt;val sw : Stopwatch&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs139&quot;&gt;Multiple items&lt;br /&gt;type Stopwatch =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Stopwatch&lt;br /&gt;&amp;#160;&amp;#160;member Elapsed : TimeSpan&lt;br /&gt;&amp;#160;&amp;#160;member ElapsedMilliseconds : int64&lt;br /&gt;&amp;#160;&amp;#160;member ElapsedTicks : int64&lt;br /&gt;&amp;#160;&amp;#160;member IsRunning : bool&lt;br /&gt;&amp;#160;&amp;#160;member Reset : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Restart : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Start : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Stop : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;static val Frequency : int64&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Diagnostics.Stopwatch&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;Stopwatch() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs140&quot;&gt;Stopwatch.StartNew() : Stopwatch&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs141&quot;&gt;val i : int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs142&quot;&gt;val ignore : value:&amp;#39;T -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.ignore&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs143&quot;&gt;Stopwatch.Stop() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs144&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs145&quot;&gt;property Stopwatch.Elapsed: System.TimeSpan&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs146&quot;&gt;val treeFoldStack : folder:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a) -&amp;gt; acc:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFoldStack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs147&quot;&gt;val stack : System.Collections.Generic.Stack&amp;lt;Tree&amp;lt;&amp;#39;b&amp;gt;&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs148&quot;&gt;namespace System.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs149&quot;&gt;namespace System.Collections.Generic&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs150&quot;&gt;Multiple items&lt;br /&gt;type Stack&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Stack&amp;lt;&amp;#39;T&amp;gt; + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Clear : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Contains : item:&amp;#39;T -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member CopyTo : array:&amp;#39;T[] * arrayIndex:int -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Count : int&lt;br /&gt;&amp;#160;&amp;#160;member GetEnumerator : unit -&amp;gt; Enumerator&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Peek : unit -&amp;gt; &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member Pop : unit -&amp;gt; &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member Push : item:&amp;#39;T -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member ToArray : unit -&amp;gt; &amp;#39;T[]&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;nested type Enumerator&lt;br /&gt;&lt;br /&gt;Full name: System.Collections.Generic.Stack&amp;lt;_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Collections.Generic.Stack() : unit&lt;br /&gt;System.Collections.Generic.Stack(capacity: int) : unit&lt;br /&gt;System.Collections.Generic.Stack(collection: System.Collections.Generic.IEnumerable&amp;lt;&amp;#39;T&amp;gt;) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs151&quot;&gt;val loop : (&amp;#39;a -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs152&quot;&gt;property System.Collections.Generic.Stack.Count: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs153&quot;&gt;System.Collections.Generic.Stack.Pop() : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs154&quot;&gt;System.Collections.Generic.Stack.Push(item: Tree&amp;lt;&amp;#39;b&amp;gt;) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs155&quot;&gt;val balanced25 : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.balanced25&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs156&quot;&gt;val sum : x:int -&amp;gt; l:int -&amp;gt; r:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs157&quot;&gt;type Markdown =&lt;br /&gt;&amp;#160;&amp;#160;| NewLine&lt;br /&gt;&amp;#160;&amp;#160;| Literal of string&lt;br /&gt;&amp;#160;&amp;#160;| Bold of string&lt;br /&gt;&amp;#160;&amp;#160;| InlineCode of string&lt;br /&gt;&amp;#160;&amp;#160;| Block of Markdown list&lt;br /&gt;&lt;br /&gt;Full name: Main.Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs158&quot;&gt;union case Markdown.NewLine: Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs159&quot;&gt;Multiple items&lt;br /&gt;union case Markdown.Literal: string -&amp;gt; Markdown&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type LiteralAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; LiteralAttribute&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.LiteralAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; LiteralAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs160&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs161&quot;&gt;union case Markdown.Bold: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs162&quot;&gt;union case Markdown.InlineCode: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs163&quot;&gt;union case Markdown.Block: Markdown list -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs164&quot;&gt;val markCata : newline:&amp;#39;r -&amp;gt; literal:(string -&amp;gt; &amp;#39;r) -&amp;gt; bold:(string -&amp;gt; &amp;#39;r) -&amp;gt; code:(string -&amp;gt; &amp;#39;r) -&amp;gt; block:(&amp;#39;r list -&amp;gt; &amp;#39;r) -&amp;gt; doc:Markdown -&amp;gt; &amp;#39;r&lt;br /&gt;&lt;br /&gt;Full name: Main.markCata&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs165&quot;&gt;val newline : &amp;#39;r&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs166&quot;&gt;val literal : (string -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs167&quot;&gt;val bold : (string -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs168&quot;&gt;val code : (string -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs169&quot;&gt;val block : (&amp;#39;r list -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs170&quot;&gt;val doc : Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs171&quot;&gt;val recurs : (Markdown -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs172&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs173&quot;&gt;val doc : Markdown list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs174&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs175&quot;&gt;val produceHtml : (Markdown -&amp;gt; string)&lt;br /&gt;&lt;br /&gt;Full name: Main.produceHtml&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs176&quot;&gt;val escape : (string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs177&quot;&gt;namespace System.Web&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs178&quot;&gt;Multiple items&lt;br /&gt;type HttpUtility =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; HttpUtility&lt;br /&gt;&amp;#160;&amp;#160;static member HtmlAttributeEncode : s:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member HtmlDecode : s:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member HtmlEncode : s:string -&amp;gt; string + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member JavaScriptStringEncode : value:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member ParseQueryString : query:string -&amp;gt; NameValueCollection + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member UrlDecode : str:string -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member UrlDecodeToBytes : str:string -&amp;gt; byte[] + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member UrlEncode : str:string -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member UrlEncodeToBytes : str:string -&amp;gt; byte[] + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Web.HttpUtility&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Web.HttpUtility() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs179&quot;&gt;System.Web.HttpUtility.HtmlEncode(value: obj) : string&lt;br /&gt;System.Web.HttpUtility.HtmlEncode(s: string) : string&lt;br /&gt;System.Web.HttpUtility.HtmlEncode(s: string, output: System.IO.TextWriter) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs180&quot;&gt;val wrap : (string -&amp;gt; string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs181&quot;&gt;val tag : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs182&quot;&gt;val wrapEscape : (string -&amp;gt; string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs183&quot;&gt;val document : Markdown&lt;br /&gt;&lt;br /&gt;Full name: Main.document&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Monoids</title>
   <link href="https://sidburn.github.io/blog/2016/05/24/monoids"/>
   <updated>2016-05-24T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/05/24/monoids</id>
   <content type="html">&lt;p&gt;A monoid is a simple concept. It is a generalization of some patterns that you
very likely already have seen. Being aware of those can help in designing some
operations, and can simplify things. Without much further ado, let us look at
three simple math equations.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;math&quot;&gt;1 + 2       = 3
(1 + 2) + 3 = 1 + (2 + 3)
1 + 0       = 0 + 1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Table of Content&lt;/h2&gt;
&lt;ul class=&quot;toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#binary&quot;&gt;Binary Operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#assoc&quot;&gt;Associativity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#identity&quot;&gt;Identity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monoids&quot;&gt;Monoids&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#example-sub&quot;&gt;Subtraction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#example-mul&quot;&gt;Multiplication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#example-div&quot;&gt;Division&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#purpose&quot;&gt;What is the purpose of all of this?&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#pur-bin&quot;&gt;Binary Operations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pur-assoc&quot;&gt;Associativity&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pur-identity&quot;&gt;Identity&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#mono&quot;&gt;Monoids Examples&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-str-concat&quot;&gt;String concatenation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-list-appending&quot;&gt;List appending&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-max-value&quot;&gt;Maximum value&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-sets&quot;&gt;Combining Sets&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#comm-monoids&quot;&gt;Commutative Monoids&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#type&quot;&gt;Creating Monoids Types&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#type-sum&quot;&gt;Sum Monoid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#type-product&quot;&gt;Product Monoid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#type-ordering&quot;&gt;Ordering Monoid&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;binary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Binary Operations&lt;/h2&gt;
&lt;p&gt;When we look at the first equation we just see the following: There exists some kind
of binary operation that takes two things of the same type, and somehow &lt;em&gt;combines&lt;/em&gt;
those two things into one result of the same type. When we look at the type-signature
of our &lt;code&gt;+&lt;/code&gt; operation we see something like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;no&quot;&gt;int -&amp;gt; int -&amp;gt; int
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;or when we generalize the idea, we expect any type. So we think of functions with
the signature&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;no&quot;&gt;'a -&amp;gt; 'a -&amp;gt; 'a
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;a name=&quot;assoc&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Associativity&lt;/h2&gt;
&lt;p&gt;The second equation tells us that our binary operation &lt;code&gt;+&lt;/code&gt; has another property. The
order in which we do the calculation don't change the end result. We can first
calculate &lt;code&gt;1 + 2&lt;/code&gt; and then add &lt;code&gt;3&lt;/code&gt; or we can first calculate &lt;code&gt;2 + 3&lt;/code&gt; and then
add &lt;code&gt;1&lt;/code&gt;. Both result in &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;a name=&quot;identity&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Identity&lt;/h2&gt;
&lt;p&gt;The last equation tells us that there exists some kind of &lt;em&gt;zero-element&lt;/em&gt; or in mathematics
named &lt;em&gt;identity&lt;/em&gt; that don't effect the result of the operation. It works as some
kind of &lt;em&gt;noop-operation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the binary operation &lt;code&gt;+&lt;/code&gt; this kind of element is &lt;code&gt;0&lt;/code&gt;. No matter which number we have,
when we add zero to it, it doesn't change the number at all.&lt;/p&gt;
&lt;a name=&quot;monoids&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Monoids&lt;/h2&gt;
&lt;p&gt;Whenever all three properties are fulfilled, we name it a monoid. The question is probably
how such kind of simple generalization is even helpful. But before we look into this, let's
look at some other example first, to get a better hang of the three rules. First all three rules again.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exists a binary operation that combines two things, and returns something of the same type.&lt;/li&gt;
&lt;li&gt;The binary operation is associative.&lt;/li&gt;
&lt;li&gt;There is some kind of &lt;em&gt;Zero/Identity/Noop-element&lt;/em&gt; for the binary operation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To understand the rules better let's look at &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;. As all of those are binary
operations all of them already fulfil the first rule, but do they also fulfil the
second and third rule?&lt;/p&gt;
&lt;a name=&quot;example-sub&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Subtraction&lt;/h3&gt;
&lt;p&gt;Subtraction is not associative. &lt;code&gt;(1 - 2) - 3&lt;/code&gt; gives us &lt;code&gt;-1 - 3&lt;/code&gt; that result in &lt;code&gt;-4&lt;/code&gt;. But
&lt;code&gt;1 - (2 - 3)&lt;/code&gt; gives us &lt;code&gt;1 - (-1)&lt;/code&gt; and this returns &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There also does not exists an identity element. We could think once again of &lt;code&gt;0&lt;/code&gt;. As &lt;code&gt;1 - 0&lt;/code&gt;
return once again &lt;code&gt;1&lt;/code&gt; unchanged. But when we do &lt;code&gt;0 - 1&lt;/code&gt; we get &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;a name=&quot;example-mul&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Multiplication&lt;/h3&gt;
&lt;p&gt;Multiplication is a monoid as both rules are fulfilled. We can do multiplication in any order
and it always yield the same result. But what is our identity element? This time it is &lt;code&gt;1&lt;/code&gt;
not &lt;code&gt;0&lt;/code&gt;. Multiplying a number with &lt;code&gt;1&lt;/code&gt; never changes the number itself.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;math&quot;&gt;(1 * 2) * 3 = 6
1 * (2 * 3) = 6
6 * 1 = 6
1 * 6 = 6
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;a name=&quot;example-div&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Division&lt;/h3&gt;
&lt;p&gt;Division is not associative:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;math&quot;&gt;(100.0 / 2.0) / 5.0 =  50.0 / 5.0 = 10.0
100.0 / (2.0 / 5.0) = 100.0 / 0.4 = 250.0
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;and we also don't have an identity element. We could once again think of &lt;code&gt;1&lt;/code&gt;. As &lt;code&gt;3.0 / 1.0&lt;/code&gt;
don't change &lt;code&gt;3.0&lt;/code&gt;, but the reverse &lt;code&gt;1.0 / 3.0&lt;/code&gt; is once again something different.&lt;/p&gt;
&lt;a name=&quot;purpose&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is the purpose of all of this?&lt;/h2&gt;
&lt;p&gt;Now that we have seen more examples we should get familiar with the concept. But why are those
rules anyway useful? Actually, all three rules gives us an ability that we can use in programming.&lt;/p&gt;
&lt;a name=&quot;pur-bin&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Binary Operations&lt;/h3&gt;
&lt;p&gt;When we have a binary operation that combines two things that returns another new thing of the same
type. It simply means we always can combine a whole list of elements with &lt;code&gt;List.reduce&lt;/code&gt;. Let's
assume we have a list of numbers and we just want to add, subtract, multiply or divide all numbers.
Then we just can write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.0&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 7)&quot; onmouseover=&quot;showTip(event, 'fs7', 7)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 8)&quot; onmouseover=&quot;showTip(event, 'fs8', 8)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs6', 9)&quot; onmouseover=&quot;showTip(event, 'fs6', 9)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 55.0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 10)&quot; onmouseover=&quot;showTip(event, 'fs7', 10)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 11)&quot; onmouseover=&quot;showTip(event, 'fs8', 11)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs6', 12)&quot; onmouseover=&quot;showTip(event, 'fs6', 12)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -53.0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 14)&quot; onmouseover=&quot;showTip(event, 'fs8', 14)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*)&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 15)&quot; onmouseover=&quot;showTip(event, 'fs6', 15)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3628800.0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 16)&quot; onmouseover=&quot;showTip(event, 'fs7', 16)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 17)&quot; onmouseover=&quot;showTip(event, 'fs8', 17)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs6', 18)&quot; onmouseover=&quot;showTip(event, 'fs6', 18)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 2.755731922e-07&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If you are unfamiliar with &lt;code&gt;List.reduce&lt;/code&gt;. You can think of it as a way to always combines the first two
elements of a list, until you only have a single element left. When we use &lt;code&gt;List.reduce&lt;/code&gt; on&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;it basically combines the first two elements. &lt;code&gt;1 + 2&lt;/code&gt; and replaces it with &lt;code&gt;3&lt;/code&gt;. So what happens is
just:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once there is only a single result, it returns it.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
This is not how it exactly works, but this is one way how you can think of it.
&lt;/div&gt;
&lt;p&gt;But think about it why it makes in general sense that we can reduce a list of something to
a single value. When we can combine two things into one thing, we always can keep
going combining two things until we end up with a single element. A &lt;code&gt;reduce&lt;/code&gt; operation
just does that repetitive combining for us.&lt;/p&gt;
&lt;a name=&quot;pur-assoc&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Associativity&lt;/h3&gt;
&lt;p&gt;Associativity can enhance the reduce operation. If the exact order doesn't play a role. It means
the combining can be done in Parallel on multiple CPUs. As a simple example let's look at a list
with four elements.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;CPU1 could start combining &lt;code&gt;1 + 2&lt;/code&gt; while CPU2 starts combining &lt;code&gt;3 + 4&lt;/code&gt;. Once both are finished
CPU1 could combine the result &lt;code&gt;3 + 7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But note that this is a naive approach, when we just combine numbers and always split every addition
on it's own CPU the whole combining process would be probably slower and not faster as before. To
be more efficient we need to better divide the input. For example combine the first 1000 elements
of a list on CPU1, and the elements 1001-2000 on CPU2 and so on. To get a fast operation it is a
little bit more complicated. But there usually already exists libraries that addresses those
problems. We could for example use &lt;a href=&quot;http://fsprojects.github.io/FSharp.Collections.ParallelSeq/&quot;&gt;FSharp.Collections.ParallelSeq&lt;/a&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Sequence of all number from 1 to 10.000.000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [| &lt;span class=&quot;n&quot;&gt;1L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000000L&lt;/span&gt; |]

&lt;span class=&quot;c&quot;&gt;// Reduce just with one CPU&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs10', 20)&quot; onmouseover=&quot;showTip(event, 'fs10', 20)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 21)&quot; onmouseover=&quot;showTip(event, 'fs11', 21)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs9', 22)&quot; onmouseover=&quot;showTip(event, 'fs9', 22)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//Real: 00:00:00.103, CPU: 00:00:00.093, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//val it : int64 = 50000005000000L&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Reduce with multiple CPUs&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 23)&quot; onmouseover=&quot;showTip(event, 'fs12', 23)&quot; class=&quot;t&quot;&gt;PSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 24)&quot; onmouseover=&quot;showTip(event, 'fs13', 24)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs9', 25)&quot; onmouseover=&quot;showTip(event, 'fs9', 25)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//Real: 00:00:00.107, CPU: 00:00:00.390, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//val it : int64 = 50000005000000L&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And as you see, even then you have no guarantee that it is faster (I use a quad-core machine).
The problem is that the combine operation itself is already fast, or probably the reduce algorithm
in &lt;code&gt;PSeq&lt;/code&gt; is not good enough. But still general speaking. Associativity opens up Parallelism, in the
case of using multiple CPUs or using multiple computers (distributed computing).&lt;/p&gt;
&lt;p&gt;But it also allows you to divide an operations into chunks so you can save intermediate result
or calculate a result incrementally. In a reporting system you could for example aggregate all
data for one day, and save the result. If you want to create a month report, you always just
need to combine the results of let's say the last 30 days. You don't need to rerun the combine
operation completely from the start.&lt;/p&gt;
&lt;a name=&quot;pur-identity&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Identity&lt;/h3&gt;
&lt;p&gt;There is one problem with &lt;code&gt;reduce&lt;/code&gt; or in general we have one problem. Our binary operations
always expect to combine two things. But what happens if we have zero or only one element? You
probably ask why we then even want to run a &lt;code&gt;reduce&lt;/code&gt; operation. But in normal circumstances
we don't want to check the amount of elements in a list. But this leads to a problem.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;reduce&lt;/code&gt; operation with a single element just returns the single element, as there is nothing
to combine. But with an empty list it just throws an exception as it don't know what
it should return.&lt;/p&gt;
&lt;p&gt;In such a case, the identity element is helpful, as we just can return the identity element.
But it is also useful in other cases. We just have some kind of starting value that we can
begin with. To solve the problem with &lt;code&gt;reduce&lt;/code&gt; we can use &lt;code&gt;fold&lt;/code&gt; instead of &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 26)&quot; onmouseover=&quot;showTip(event, 'fs7', 26)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 27)&quot; onmouseover=&quot;showTip(event, 'fs14', 27)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; []          &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 28)&quot; onmouseover=&quot;showTip(event, 'fs7', 28)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 29)&quot; onmouseover=&quot;showTip(event, 'fs14', 29)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 30)&quot; onmouseover=&quot;showTip(event, 'fs7', 30)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; []          &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 32)&quot; onmouseover=&quot;showTip(event, 'fs7', 32)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 33)&quot; onmouseover=&quot;showTip(event, 'fs14', 33)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The additional value we pass to &lt;code&gt;fold&lt;/code&gt; acts in this case as the identity element.&lt;/p&gt;
&lt;a name=&quot;mono&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Monoids examples&lt;/h2&gt;
&lt;p&gt;As we now have a rough view what an monoid is, and what it allows us to do, let's look at some
more simple monoids.&lt;/p&gt;
&lt;a name=&quot;mono-str-concat&quot;&gt;&lt;/a&gt;
&lt;h3&gt;String concatenation&lt;/h3&gt;
&lt;p&gt;String concatenation is a monoid, the identity element is just the empty string.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 34)&quot; onmouseover=&quot;showTip(event, 'fs7', 34)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 35)&quot; onmouseover=&quot;showTip(event, 'fs14', 35)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// &amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;mono-list-appending&quot;&gt;&lt;/a&gt;
&lt;h3&gt;List appending&lt;/h3&gt;
&lt;p&gt;Appending lists is a monoid. The identity element is just the empty list.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 36)&quot; onmouseover=&quot;showTip(event, 'fs7', 36)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 37)&quot; onmouseover=&quot;showTip(event, 'fs14', 37)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 38)&quot; onmouseover=&quot;showTip(event, 'fs7', 38)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 39)&quot; onmouseover=&quot;showTip(event, 'fs15', 39)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [] [[&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;]; [&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;]]   &lt;span class=&quot;c&quot;&gt;// [&amp;quot;foo&amp;quot;; &amp;quot;bar&amp;quot;; &amp;quot;baz&amp;quot;]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 40)&quot; onmouseover=&quot;showTip(event, 'fs7', 40)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 42)&quot; onmouseover=&quot;showTip(event, 'fs7', 42)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [] [[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;]; [&lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;8&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;]] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6;7;8;9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;mono-max-value&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Maximum value&lt;/h3&gt;
&lt;p&gt;We can threat the &lt;code&gt;max&lt;/code&gt; operation as a monoid. It just takes two values, and returns
the one which is greater. Notice that combining doesn't literally mean we really have
to work with both values and &lt;em&gt;combine&lt;/em&gt; them. A function that just throws away one
value is still valid.&lt;/p&gt;
&lt;p&gt;If you wonder why. The only thing we must ensure is that we can combine two things into
one result. There is no restriction on the result itself. It only matters that we
get the same result.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs16', 44)&quot; onmouseover=&quot;showTip(event, 'fs16', 44)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 45)&quot; onmouseover=&quot;showTip(event, 'fs16', 45)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs16', 46)&quot; onmouseover=&quot;showTip(event, 'fs16', 46)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 47)&quot; onmouseover=&quot;showTip(event, 'fs16', 47)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;or with reduce.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 48)&quot; onmouseover=&quot;showTip(event, 'fs7', 48)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 49)&quot; onmouseover=&quot;showTip(event, 'fs8', 49)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 50)&quot; onmouseover=&quot;showTip(event, 'fs16', 50)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;]         &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 51)&quot; onmouseover=&quot;showTip(event, 'fs7', 51)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 52)&quot; onmouseover=&quot;showTip(event, 'fs8', 52)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 53)&quot; onmouseover=&quot;showTip(event, 'fs16', 53)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// &amp;quot;zoo&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But what is the identity element? Well it depends on the type we use. Just consider what
the purpose of the identity element is. It acts as a noop-operation. When we have one value
and use it with the identity element, we always must get the input value back.&lt;/p&gt;
&lt;p&gt;When we use &lt;code&gt;max&lt;/code&gt; with &lt;code&gt;int&lt;/code&gt;, we must find an &lt;code&gt;int&lt;/code&gt; that always makes sure we get our input
value unchanged back, no matter what our input is. That means the identity element
for &lt;code&gt;max&lt;/code&gt; with the &lt;code&gt;int&lt;/code&gt; type is &lt;code&gt;Int32.MinValue&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 54)&quot; onmouseover=&quot;showTip(event, 'fs16', 54)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 55)&quot; onmouseover=&quot;showTip(event, 'fs17', 55)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 56)&quot; onmouseover=&quot;showTip(event, 'fs18', 56)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2147483648&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// -2147483648&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 57)&quot; onmouseover=&quot;showTip(event, 'fs16', 57)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 58)&quot; onmouseover=&quot;showTip(event, 'fs17', 58)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 59)&quot; onmouseover=&quot;showTip(event, 'fs18', 59)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 60)&quot; onmouseover=&quot;showTip(event, 'fs16', 60)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 61)&quot; onmouseover=&quot;showTip(event, 'fs17', 61)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 62)&quot; onmouseover=&quot;showTip(event, 'fs18', 62)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12345&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;// 12345&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 63)&quot; onmouseover=&quot;showTip(event, 'fs16', 63)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 64)&quot; onmouseover=&quot;showTip(event, 'fs17', 64)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 65)&quot; onmouseover=&quot;showTip(event, 'fs18', 65)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 66)&quot; onmouseover=&quot;showTip(event, 'fs17', 66)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs19', 67)&quot; onmouseover=&quot;showTip(event, 'fs19', 67)&quot; class=&quot;i&quot;&gt;MaxValue&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 2147483647&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The identity element for string is just the empty string&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 68)&quot; onmouseover=&quot;showTip(event, 'fs16', 68)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 69)&quot; onmouseover=&quot;showTip(event, 'fs16', 69)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Foo&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 70)&quot; onmouseover=&quot;showTip(event, 'fs16', 70)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Bar&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 71)&quot; onmouseover=&quot;showTip(event, 'fs16', 71)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Baz&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;mono-sets&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Combining Sets&lt;/h3&gt;
&lt;p&gt;Also combining two Sets is a monoid, once again with just the empty set as the identity element.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 72)&quot; onmouseover=&quot;showTip(event, 'fs20', 72)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 73)&quot; onmouseover=&quot;showTip(event, 'fs21', 73)&quot; class=&quot;f&quot;&gt;set&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 74)&quot; onmouseover=&quot;showTip(event, 'fs22', 74)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 75)&quot; onmouseover=&quot;showTip(event, 'fs21', 75)&quot; class=&quot;f&quot;&gt;set&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 76)&quot; onmouseover=&quot;showTip(event, 'fs23', 76)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 77)&quot; onmouseover=&quot;showTip(event, 'fs21', 77)&quot; class=&quot;f&quot;&gt;set&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]

(&lt;span onmouseout=&quot;hideTip(event, 'fs24', 78)&quot; onmouseover=&quot;showTip(event, 'fs24', 78)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 79)&quot; onmouseover=&quot;showTip(event, 'fs25', 79)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 80)&quot; onmouseover=&quot;showTip(event, 'fs24', 80)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 81)&quot; onmouseover=&quot;showTip(event, 'fs25', 81)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 82)&quot; onmouseover=&quot;showTip(event, 'fs20', 82)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 83)&quot; onmouseover=&quot;showTip(event, 'fs22', 83)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs23', 84)&quot; onmouseover=&quot;showTip(event, 'fs23', 84)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// set [1;2;3;4]&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs24', 85)&quot; onmouseover=&quot;showTip(event, 'fs24', 85)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 86)&quot; onmouseover=&quot;showTip(event, 'fs25', 86)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 87)&quot; onmouseover=&quot;showTip(event, 'fs20', 87)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 88)&quot; onmouseover=&quot;showTip(event, 'fs24', 88)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 89)&quot; onmouseover=&quot;showTip(event, 'fs25', 89)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 90)&quot; onmouseover=&quot;showTip(event, 'fs22', 90)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 91)&quot; onmouseover=&quot;showTip(event, 'fs23', 91)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;)) &lt;span class=&quot;c&quot;&gt;// set [1;2;3;4]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 92)&quot; onmouseover=&quot;showTip(event, 'fs7', 92)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 93)&quot; onmouseover=&quot;showTip(event, 'fs14', 93)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 94)&quot; onmouseover=&quot;showTip(event, 'fs24', 94)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 95)&quot; onmouseover=&quot;showTip(event, 'fs25', 95)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 96)&quot; onmouseover=&quot;showTip(event, 'fs24', 96)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 97)&quot; onmouseover=&quot;showTip(event, 'fs26', 97)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs20', 98)&quot; onmouseover=&quot;showTip(event, 'fs20', 98)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 99)&quot; onmouseover=&quot;showTip(event, 'fs22', 99)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 100)&quot; onmouseover=&quot;showTip(event, 'fs23', 100)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 101)&quot; onmouseover=&quot;showTip(event, 'fs7', 101)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 102)&quot; onmouseover=&quot;showTip(event, 'fs14', 102)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 103)&quot; onmouseover=&quot;showTip(event, 'fs24', 103)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 104)&quot; onmouseover=&quot;showTip(event, 'fs25', 104)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 105)&quot; onmouseover=&quot;showTip(event, 'fs24', 105)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 106)&quot; onmouseover=&quot;showTip(event, 'fs26', 106)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs23', 107)&quot; onmouseover=&quot;showTip(event, 'fs23', 107)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 108)&quot; onmouseover=&quot;showTip(event, 'fs22', 108)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 109)&quot; onmouseover=&quot;showTip(event, 'fs20', 109)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;comm-monoids&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Commutative Monoids&lt;/h2&gt;
&lt;p&gt;Up so far you probably noticed one additional variation. For some combine operations
the whole order on how we combine them don't play a role. Actually &lt;code&gt;+&lt;/code&gt; for
numbers and the &lt;code&gt;Set.union&lt;/code&gt; fall into this category. But other operation are
&lt;em&gt;just&lt;/em&gt; associative, for example List or String concatenation. When we concatenate
three strings, it doesn't matter if we do &lt;code&gt;(a + b) + c&lt;/code&gt; or &lt;code&gt;a + (b + c)&lt;/code&gt;. But
we cannot do &lt;code&gt;(a + c) + b&lt;/code&gt;. This will give us a completely different string.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;foobarbaz&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// &amp;quot;foobarbaz&amp;quot;&lt;/span&gt;
(&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;foobazbar&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But for other operations, the whole order doesn't matter&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can even shuffle an array before summing it, it will always give us the same sum.
But shuffling an array of strings, will return another string. When we have a monoid
where the whole order doesn't play a role. then we have a &lt;em&gt;Commutative Monoid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example adding numbers or multiplying them, combining sets with &lt;code&gt;Set.union&lt;/code&gt; or
getting the &lt;code&gt;max&lt;/code&gt; value are &lt;em&gt;Commutative Monoids&lt;/em&gt;.&lt;/p&gt;
&lt;a name=&quot;type&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Creating Monoids Types&lt;/h2&gt;
&lt;p&gt;Up so far we always used &lt;code&gt;List.fold&lt;/code&gt; or &lt;code&gt;List.reduce&lt;/code&gt; directly and provided the identity
element directly. But overall it can help to create a type that combines the binary
operation with the identity element in its own type.&lt;/p&gt;
&lt;p&gt;We can overload the &lt;code&gt;+&lt;/code&gt; and the &lt;code&gt;Zero&lt;/code&gt; operator to get some nice behaviour. We treat
&lt;code&gt;+&lt;/code&gt; just as our &lt;em&gt;combine&lt;/em&gt; operation. And &lt;code&gt;Zero&lt;/code&gt; is our &lt;em&gt;identity&lt;/em&gt; element.&lt;/p&gt;
&lt;a name=&quot;type-sum&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Sum Monoid&lt;/h3&gt;
&lt;p&gt;As a simple example let's create a &lt;code&gt;Sum&lt;/code&gt; type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 110)&quot; onmouseover=&quot;showTip(event, 'fs27', 110)&quot; class=&quot;t&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 111)&quot; onmouseover=&quot;showTip(event, 'fs27', 111)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 112)&quot; onmouseover=&quot;showTip(event, 'fs28', 112)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs27', 113)&quot; onmouseover=&quot;showTip(event, 'fs27', 113)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 114)&quot; onmouseover=&quot;showTip(event, 'fs29', 114)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs27', 115)&quot; onmouseover=&quot;showTip(event, 'fs27', 115)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 116)&quot; onmouseover=&quot;showTip(event, 'fs30', 116)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 117)&quot; onmouseover=&quot;showTip(event, 'fs27', 117)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs29', 118)&quot; onmouseover=&quot;showTip(event, 'fs29', 118)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 119)&quot; onmouseover=&quot;showTip(event, 'fs30', 119)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 120)&quot; onmouseover=&quot;showTip(event, 'fs31', 120)&quot; class=&quot;i&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 121)&quot; onmouseover=&quot;showTip(event, 'fs27', 121)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The advantage is that we can use &lt;code&gt;List.sum&lt;/code&gt; with such a type. &lt;code&gt;List.sum&lt;/code&gt; adds all elements
together with the &lt;code&gt;+&lt;/code&gt; operator. So it is like &lt;code&gt;reduce&lt;/code&gt;, but in the case of an empty list,
it returns the &lt;code&gt;Zero&lt;/code&gt; element.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 122)&quot; onmouseover=&quot;showTip(event, 'fs7', 122)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 123)&quot; onmouseover=&quot;showTip(event, 'fs32', 123)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs27', 124)&quot; onmouseover=&quot;showTip(event, 'fs27', 124)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 125)&quot; onmouseover=&quot;showTip(event, 'fs27', 125)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 126)&quot; onmouseover=&quot;showTip(event, 'fs27', 126)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]  &lt;span class=&quot;c&quot;&gt;// Sum 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 127)&quot; onmouseover=&quot;showTip(event, 'fs7', 127)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 128)&quot; onmouseover=&quot;showTip(event, 'fs32', 128)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs27', 129)&quot; onmouseover=&quot;showTip(event, 'fs27', 129)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 130)&quot; onmouseover=&quot;showTip(event, 'fs27', 130)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 131)&quot; onmouseover=&quot;showTip(event, 'fs27', 131)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// Sum 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Defining a Sum type for &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; doesn't seems like much value, and it isn't. But it
is only one example to understand the concept. A Product for example seems much more usable.&lt;/p&gt;
&lt;a name=&quot;type-product&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Product Monoid&lt;/h3&gt;
&lt;p&gt;The product Monoid just multiplies the numbers and we use &lt;code&gt;1&lt;/code&gt; as Zero.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 132)&quot; onmouseover=&quot;showTip(event, 'fs33', 132)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 133)&quot; onmouseover=&quot;showTip(event, 'fs33', 133)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 134)&quot; onmouseover=&quot;showTip(event, 'fs28', 134)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs33', 135)&quot; onmouseover=&quot;showTip(event, 'fs33', 135)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 136)&quot; onmouseover=&quot;showTip(event, 'fs29', 136)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs33', 137)&quot; onmouseover=&quot;showTip(event, 'fs33', 137)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 138)&quot; onmouseover=&quot;showTip(event, 'fs30', 138)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 139)&quot; onmouseover=&quot;showTip(event, 'fs33', 139)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs29', 140)&quot; onmouseover=&quot;showTip(event, 'fs29', 140)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 141)&quot; onmouseover=&quot;showTip(event, 'fs30', 141)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 142)&quot; onmouseover=&quot;showTip(event, 'fs34', 142)&quot; class=&quot;i&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 143)&quot; onmouseover=&quot;showTip(event, 'fs33', 143)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 144)&quot; onmouseover=&quot;showTip(event, 'fs7', 144)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 145)&quot; onmouseover=&quot;showTip(event, 'fs32', 145)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs33', 146)&quot; onmouseover=&quot;showTip(event, 'fs33', 146)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 147)&quot; onmouseover=&quot;showTip(event, 'fs33', 147)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 148)&quot; onmouseover=&quot;showTip(event, 'fs33', 148)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// Product 150&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 149)&quot; onmouseover=&quot;showTip(event, 'fs7', 149)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 150)&quot; onmouseover=&quot;showTip(event, 'fs32', 150)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs33', 151)&quot; onmouseover=&quot;showTip(event, 'fs33', 151)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 152)&quot; onmouseover=&quot;showTip(event, 'fs33', 152)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;]             &lt;span class=&quot;c&quot;&gt;// Product 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;type-ordering&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Ordering Monoid&lt;/h3&gt;
&lt;p&gt;Let's create a Monoid that adds two list together and sorts the list while doing it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 153)&quot; onmouseover=&quot;showTip(event, 'fs35', 153)&quot; class=&quot;t&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;comparison&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 154)&quot; onmouseover=&quot;showTip(event, 'fs35', 154)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 155)&quot; onmouseover=&quot;showTip(event, 'fs36', 155)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs35', 156)&quot; onmouseover=&quot;showTip(event, 'fs35', 156)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 157)&quot; onmouseover=&quot;showTip(event, 'fs37', 157)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 158)&quot; onmouseover=&quot;showTip(event, 'fs35', 158)&quot; class=&quot;t&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs35', 159)&quot; onmouseover=&quot;showTip(event, 'fs35', 159)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 160)&quot; onmouseover=&quot;showTip(event, 'fs38', 160)&quot; class=&quot;i&quot;&gt;ys&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 161)&quot; onmouseover=&quot;showTip(event, 'fs35', 161)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 162)&quot; onmouseover=&quot;showTip(event, 'fs7', 162)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 163)&quot; onmouseover=&quot;showTip(event, 'fs39', 163)&quot; class=&quot;f&quot;&gt;sort&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 164)&quot; onmouseover=&quot;showTip(event, 'fs7', 164)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 165)&quot; onmouseover=&quot;showTip(event, 'fs15', 165)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 166)&quot; onmouseover=&quot;showTip(event, 'fs6', 166)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;ys&lt;/span&gt;))
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 167)&quot; onmouseover=&quot;showTip(event, 'fs40', 167)&quot; class=&quot;i&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 168)&quot; onmouseover=&quot;showTip(event, 'fs35', 168)&quot; class=&quot;t&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 169)&quot; onmouseover=&quot;showTip(event, 'fs35', 169)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; []

&lt;span onmouseout=&quot;hideTip(event, 'fs35', 170)&quot; onmouseover=&quot;showTip(event, 'fs35', 170)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 171)&quot; onmouseover=&quot;showTip(event, 'fs35', 171)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 172)&quot; onmouseover=&quot;showTip(event, 'fs35', 172)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;6;6;10]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs35', 173)&quot; onmouseover=&quot;showTip(event, 'fs35', 173)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 174)&quot; onmouseover=&quot;showTip(event, 'fs35', 174)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt;]        &lt;span class=&quot;c&quot;&gt;// [&amp;quot;bar&amp;quot;; &amp;quot;foo&amp;quot;; &amp;quot;zoo&amp;quot;]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 175)&quot; onmouseover=&quot;showTip(event, 'fs7', 175)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 176)&quot; onmouseover=&quot;showTip(event, 'fs32', 176)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs35', 177)&quot; onmouseover=&quot;showTip(event, 'fs35', 177)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 178)&quot; onmouseover=&quot;showTip(event, 'fs35', 178)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;]]           &lt;span class=&quot;c&quot;&gt;// [1;2;3;4]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 179)&quot; onmouseover=&quot;showTip(event, 'fs7', 179)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 180)&quot; onmouseover=&quot;showTip(event, 'fs32', 180)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs35', 181)&quot; onmouseover=&quot;showTip(event, 'fs35', 181)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;]; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 182)&quot; onmouseover=&quot;showTip(event, 'fs35', 182)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt;]] &lt;span class=&quot;c&quot;&gt;// [&amp;quot;bar&amp;quot;; &amp;quot;foo&amp;quot;; &amp;quot;zoo&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;A Monoid is a simple way to aggregate data. When you design functions consider if there exists
binary operations to somehow combine types. If you can implement them you get the ability
to combine a list of types for free.&lt;/p&gt;
&lt;p&gt;Additionally it opens up the possibility to allow combining data in parallel or build data
incrementally.&lt;/p&gt;
&lt;a name=&quot;further&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/monoids-without-tears/&quot;&gt;Monoid without Tears&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gettingsharper.de/2015/03/03/understanding-monoids-using-f/&quot;&gt;Understanding Monoids using F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://learnyouahaskell.com/functors-applicative-functors-and-monoids#monoids&quot;&gt;[Haskell] Learn You a Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Monoids&quot;&gt;[Haskell] Monoids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;comments&quot;&gt;&lt;/a&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;Multiple items&lt;br /&gt;namespace FSharp&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;namespace Microsoft.FSharp&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;namespace FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;namespace Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;namespace FSharp.Collections.ParallelSeq&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val xs : float list&lt;br /&gt;&lt;br /&gt;Full name: Main.xs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val nums : int64 []&lt;br /&gt;&lt;br /&gt;Full name: Main.nums&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;module Seq&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;module PSeq&lt;br /&gt;&lt;br /&gt;from FSharp.Collections.ParallelSeq&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: FSharp.Collections.ParallelSeq.PSeq.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val append : list1:&amp;#39;T list -&amp;gt; list2:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.append&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;field int.MinValue = -2147483648&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;field int.MaxValue = 2147483647&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val sa : Set&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sa&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val set : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val sb : Set&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sb&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val sc : Set&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;Multiple items&lt;br /&gt;module Set&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Set&amp;lt;&amp;#39;T (requires comparison)&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;interface IComparable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface ICollection&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;new : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Add : value:&amp;#39;T -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Contains : value:&amp;#39;T -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;override Equals : obj -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member IsProperSubsetOf : otherSet:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member IsProperSupersetOf : otherSet:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Set&amp;lt;_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val union : set1:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; set2:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Set.union&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val empty&amp;lt;&amp;#39;T (requires comparison)&amp;gt; : Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Set.empty&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;Multiple items&lt;br /&gt;union case Sum.Sum: int -&amp;gt; Sum&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Sum =&lt;br /&gt;&amp;#160;&amp;#160;| Sum of int&lt;br /&gt;&amp;#160;&amp;#160;static member Zero : Sum&lt;br /&gt;&amp;#160;&amp;#160;static member ( + ) : Sum * Sum -&amp;gt; Sum&lt;br /&gt;&lt;br /&gt;Full name: Main.Sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;static member Sum.Zero : Sum&lt;br /&gt;&lt;br /&gt;Full name: Main.Sum.Zero&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val sum : list:&amp;#39;T list -&amp;gt; &amp;#39;T (requires member ( + ) and member get_Zero)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;Multiple items&lt;br /&gt;union case Product.Product: int -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Product =&lt;br /&gt;&amp;#160;&amp;#160;| Product of int&lt;br /&gt;&amp;#160;&amp;#160;static member Zero : Product&lt;br /&gt;&amp;#160;&amp;#160;static member ( + ) : Product * Product -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: Main.Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;static member Product.Zero : Product&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.Zero&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;Multiple items&lt;br /&gt;union case Order.Order: &amp;#39;a list -&amp;gt; Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Order&amp;lt;&amp;#39;a (requires comparison)&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Order of &amp;#39;a list&lt;br /&gt;&amp;#160;&amp;#160;static member Zero : Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;static member ( + ) : Order&amp;lt;&amp;#39;a&amp;gt; * Order&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Order&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val xs : &amp;#39;a list (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val ys : &amp;#39;a list (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val sort : list:&amp;#39;T list -&amp;gt; &amp;#39;T list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.sort&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;static member Order.Zero : Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Order`1.Zero&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to Functional Programming</title>
   <link href="https://sidburn.github.io/blog/2016/05/20/introduction-to-functional-programming"/>
   <updated>2016-05-20T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/05/20/introduction-to-functional-programming</id>
   <content type="html">&lt;p&gt;In this article I want to give a general introduction to some of the fundamental ideas of
functional programming. I just start with the idea of function as data, and explain
why functions are viewed as data and why it makes sense to pass functions as arguments.&lt;/p&gt;
&lt;p&gt;When we understand this concept, I start explaining lambda expression,
currying, partial application and closures. All of this ideas built on each other.&lt;/p&gt;
&lt;p&gt;But I don't stop at functional programming. Instead I will go back to OO programming
and show you, how you can translate all of these ideas into OO code. Probably
you will be surprised how similar functional and OO code is, and that most ideas
are things you already know.&lt;/p&gt;
&lt;p&gt;Overall I show why functional programming and object-oriented programming are
orthogonal. I hope that by the end of the article you learned something about
functional programming, but also widen your view on object-oriented programming.&lt;/p&gt;
&lt;h2&gt;Table of Content&lt;/h2&gt;
&lt;ul class=&quot;toc&quot;&gt;
  &lt;li&gt;Functional Programming&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-data&quot;&gt;Functions as Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-function&quot;&gt;What is a function?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-exp-functions&quot;&gt;Exploiting Functions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-retn-functions&quot;&gt;Functions as return values&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-lambda&quot;&gt;There is only lambda&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-currying&quot;&gt;Currying&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-closures&quot;&gt;Closures&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-example&quot;&gt;Example: Currying and Closures&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#oo&quot;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-class&quot;&gt;What is a Class?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-function&quot;&gt;Functions as Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-curry-partial-closure&quot;&gt;Currying, Partial Application and Closures&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-currying&quot;&gt;Currying&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;fp-data&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Functions as data&lt;/h2&gt;
&lt;p&gt;One important concept in functional programming is the ability to use functions just
as data. This means you can create functions and store them in variables.
But that also means you can pass those functions to other functions as arguments
or retrieve a function from a function.&lt;/p&gt;
&lt;p&gt;Sometimes people new to functional programming have some problems to understand
this idea and how it is useful, but in fact, when you do OO programming
you do that kind of idea basically all over the place. You do it even more
often as in a functional language.&lt;/p&gt;
&lt;p&gt;But even if you don't see the connection at the moment, you still could ask
yourself if that idea really makes sense, or what useful thinks you can
do with that idea.&lt;/p&gt;
&lt;a name=&quot;fp-function&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is a function?&lt;/h2&gt;
&lt;p&gt;Before we go deeper we have to ask ourself: What is a function anyway? Depending
on the language there are also multiple terms for the word function. Terms
like procedures, static methods or subroutines.&lt;/p&gt;
&lt;p&gt;When I talk about functions I just mean the concept that you have some kind
of thing that you can pass some arguments, and it returns a result. As a simple
example we can think of a &lt;code&gt;square&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 89)&quot; onmouseover=&quot;showTip(event, 'fs2', 89)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 90)&quot; onmouseover=&quot;showTip(event, 'fs3', 90)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 91)&quot; onmouseover=&quot;showTip(event, 'fs3', 91)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 92)&quot; onmouseover=&quot;showTip(event, 'fs3', 92)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can pass it several different values, and it will return a result.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 6)&quot; onmouseover=&quot;showTip(event, 'fs2', 6)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 7)&quot; onmouseover=&quot;showTip(event, 'fs2', 7)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 8)&quot; onmouseover=&quot;showTip(event, 'fs2', 8)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 9)&quot; onmouseover=&quot;showTip(event, 'fs2', 9)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Despite its simpleness. There are two ways how we can interpret &lt;code&gt;square&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A function is a series of commands that executes one by one returning some value.&lt;/li&gt;
&lt;li&gt;A function is a transformation of values. We pass some value in, and we get some value out.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if those definitions seems similar, the focus is different. The first definition is
often used by imperative languages. Functions are &lt;em&gt;just&lt;/em&gt; a tool to get rid of
code-duplication. You have a series of commands? Put them in a function and you later
can call it again. What do you do if you want to understand
what a function does? Just explore the commands it executes step-by-step.&lt;/p&gt;
&lt;p&gt;The second definition is how functional languages interpret functions. The focus lies on the
input and the output. A function is not just a series of commands, it transforms an
input to an output. You want to know what a function does? Examine the input and output
of a function. The best would be if the types of a function is already self-speaking enough.
Otherwise the function name itself should give us enough information what it does.&lt;/p&gt;
&lt;p&gt;But we don't really care how a function work or how it exactly achieve the output
it returns. South Park teaches this thinking already:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016/south_park_profit.png&quot; alt=&quot;Underpants and Profit&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A function is just something that takes some underpants, then do something, and
we get some profit out of it. We just have:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;Underpants&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Profit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What happens between those steps? We don't know, but we also don't care. The only
thing that matters is that we can somehow turn underpants into profit.&lt;/p&gt;
&lt;a name=&quot;fp-exp-functions&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Exploiting functions&lt;/h2&gt;
&lt;p&gt;The idea that only the input and output of a function matters is quite interesting.
We could take that idea further and for example rewrite our &lt;code&gt;square&lt;/code&gt; function
into the following way:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 10)&quot; onmouseover=&quot;showTip(event, 'fs4', 10)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 11)&quot; onmouseover=&quot;showTip(event, 'fs3', 11)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 12)&quot; onmouseover=&quot;showTip(event, 'fs5', 12)&quot; class=&quot;i&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 14)&quot; onmouseover=&quot;showTip(event, 'fs7', 14)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
            (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
            (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)
            (&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;)
            (&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;)
        ]
    &lt;span onmouseout=&quot;hideTip(event, 'fs8', 15)&quot; onmouseover=&quot;showTip(event, 'fs8', 15)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 16)&quot; onmouseover=&quot;showTip(event, 'fs6', 16)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 17)&quot; onmouseover=&quot;showTip(event, 'fs9', 17)&quot; class=&quot;f&quot;&gt;tryFind&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 18)&quot; onmouseover=&quot;showTip(event, 'fs3', 18)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 19)&quot; onmouseover=&quot;showTip(event, 'fs5', 19)&quot; class=&quot;i&quot;&gt;output&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs4', 20)&quot; onmouseover=&quot;showTip(event, 'fs4', 20)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 21)&quot; onmouseover=&quot;showTip(event, 'fs4', 21)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 22)&quot; onmouseover=&quot;showTip(event, 'fs4', 22)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 9&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 23)&quot; onmouseover=&quot;showTip(event, 'fs4', 23)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 16&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 24)&quot; onmouseover=&quot;showTip(event, 'fs4', 24)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, now you are probably saying that this is cheating and not the same. We also get
a wrong output when we pass it &lt;code&gt;5&lt;/code&gt;. We only get correct output for the numbers one
to four. But actually the previous version was also not &lt;em&gt;correct&lt;/em&gt;. When we do:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 25)&quot; onmouseover=&quot;showTip(event, 'fs2', 25)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 1410065408&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we also get a wrong result. The problem is that we have an integer overflow here.
&lt;code&gt;square&lt;/code&gt; is also not correct, it only happens that our first &lt;code&gt;square&lt;/code&gt; function returns
right result for a lot more arguments, but still not for all inputs.&lt;/p&gt;
&lt;p&gt;But the more important idea is that we could replace a function just with a data-structure.
A functions just maps some input to its output. That is exactly what the &lt;code&gt;Map&lt;/code&gt; data-structure
does.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
A &lt;code&gt;Map&lt;/code&gt; is basically a key/value store. In F# it is immutable. In other
languages a &lt;code&gt;Map&lt;/code&gt; is a Dictionary, Hash or Associative Array. In
non-functional languages they are most often mutable. Another example:
In JavaScript it is also called an object.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; squares &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;
}

squares[&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We could spent a lot of time filling out the remaining inputs in &lt;code&gt;squareM&lt;/code&gt; to get it
&lt;em&gt;more correct&lt;/em&gt;, but doing a task like this feels a little bit silly. But wait.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A function and a map data-structure are equivalent&lt;/li&gt;
&lt;li&gt;It makes sense to pass a data-structure as an argument&lt;/li&gt;
&lt;li&gt;Then it also must make sense to pass a function instead&lt;/li&gt;
&lt;li&gt;
If it feels silly to create all possible input/output combinations in
a map data-structure to emulate a function, then passing a function
makes more sense as passing a data-structure.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you look at it then it indeed makes more sense. We actually can think
of a function just as a lazy-data-structure. Instead of generating all
possible input/output values that could exists and save them into a
data-structure. We just describe how every element can be computed, and
pass this description instead.&lt;/p&gt;
&lt;p&gt;But lets at least once imagine our language don't support passing functions
as values. How could we create something similar to the &lt;code&gt;List.map&lt;/code&gt; function?
This is the &lt;code&gt;List.map&lt;/code&gt; function:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 26)&quot; onmouseover=&quot;showTip(event, 'fs10', 26)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 27)&quot; onmouseover=&quot;showTip(event, 'fs11', 27)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 28)&quot; onmouseover=&quot;showTip(event, 'fs2', 28)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;4;9;16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Without the ability to pass functions as values we just expect a &lt;code&gt;Map&lt;/code&gt;
data-structure as the first argument instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// The map function with a `Map` data-structure&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 29)&quot; onmouseover=&quot;showTip(event, 'fs12', 29)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 30)&quot; onmouseover=&quot;showTip(event, 'fs13', 30)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 32)&quot; onmouseover=&quot;showTip(event, 'fs14', 32)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | []      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; []
    | &lt;span onmouseout=&quot;hideTip(event, 'fs15', 33)&quot; onmouseover=&quot;showTip(event, 'fs15', 33)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 34)&quot; onmouseover=&quot;showTip(event, 'fs14', 34)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 35)&quot; onmouseover=&quot;showTip(event, 'fs6', 35)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 36)&quot; onmouseover=&quot;showTip(event, 'fs16', 36)&quot; class=&quot;f&quot;&gt;find&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 37)&quot; onmouseover=&quot;showTip(event, 'fs15', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 38)&quot; onmouseover=&quot;showTip(event, 'fs13', 38)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs12', 39)&quot; onmouseover=&quot;showTip(event, 'fs12', 39)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 40)&quot; onmouseover=&quot;showTip(event, 'fs13', 40)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// We pre-compute the squares from 1 to 10000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 42)&quot; onmouseover=&quot;showTip(event, 'fs17', 42)&quot; class=&quot;i&quot;&gt;squares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs6', 43)&quot; onmouseover=&quot;showTip(event, 'fs6', 43)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 44)&quot; onmouseover=&quot;showTip(event, 'fs7', 44)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 45)&quot; onmouseover=&quot;showTip(event, 'fs3', 45)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 46)&quot; onmouseover=&quot;showTip(event, 'fs3', 46)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, (&lt;span onmouseout=&quot;hideTip(event, 'fs2', 47)&quot; onmouseover=&quot;showTip(event, 'fs2', 47)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 48)&quot; onmouseover=&quot;showTip(event, 'fs3', 48)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    ]

&lt;span class=&quot;c&quot;&gt;// Now we call map with our pre-computed values&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 49)&quot; onmouseover=&quot;showTip(event, 'fs12', 49)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 50)&quot; onmouseover=&quot;showTip(event, 'fs17', 50)&quot; class=&quot;i&quot;&gt;squares&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;16;400]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of writing all possible value combinations ourself we even could use the &lt;code&gt;square&lt;/code&gt;
function to create the needed data-structure. This even shows more clearly why a function
and a &lt;code&gt;Map&lt;/code&gt; data-structure is basically the same. Our own &lt;code&gt;map&lt;/code&gt; function with a
data-structure is basically the same as the built-in &lt;code&gt;List.map&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
The fact that our own &lt;code&gt;map&lt;/code&gt; is not tail-recursive and fails with big input lists is not important
for this article. We could spent some more time in optimizing our own &lt;code&gt;map&lt;/code&gt; and make it tail-recursive,
but the focus is not tail-recursion or performance, the focus is to understand that we can substitute
a function with a &lt;code&gt;Map&lt;/code&gt; data-structure.
&lt;/div&gt;
&lt;p&gt;It is even interesting to see how similar both &lt;code&gt;map&lt;/code&gt; functions are. When we look at both
definitions we see:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 51)&quot; onmouseover=&quot;showTip(event, 'fs10', 51)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 52)&quot; onmouseover=&quot;showTip(event, 'fs11', 52)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 53)&quot; onmouseover=&quot;showTip(event, 'fs18', 53)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;map&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 55)&quot; onmouseover=&quot;showTip(event, 'fs6', 55)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 56)&quot; onmouseover=&quot;showTip(event, 'fs18', 56)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 57)&quot; onmouseover=&quot;showTip(event, 'fs18', 57)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;List.map&lt;/code&gt; expects a function that maps &lt;code&gt;'a&lt;/code&gt; values to &lt;code&gt;'b&lt;/code&gt; values, while our own &lt;code&gt;map&lt;/code&gt; expects
a &lt;code&gt;Map&lt;/code&gt; data-structure that maps &lt;code&gt;'a&lt;/code&gt; to &lt;code&gt;'b&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;But once again, generating all possible input values before-hand feels a little bit silly.
We need to create a lot of possible values that we probably never need. It also costs more
memory as we need to save all possible combinations. That is why we pass a function instead.
We just pass the description how to compute the values instead.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;
It is quite important to understand that passing a data-structure instead of a function is only
&lt;em&gt;theoretically&lt;/em&gt; possible. &lt;em&gt;Practically&lt;/em&gt; there exists a lot of cases where
such an approach will not work. When we for example try to create a data-structure that
maps any string to the length of a string, then it is practically impossible to create
a data-structure.
&lt;/p&gt;
&lt;p&gt;We actually would need to create a data-structure that contains any possible input string and returns
the length of it. Even when we just consider the stone-age view that they are only 128 characters
(aka ASCII) and we restrict us on a maximum length of 10 characters there already exists
1.180.591.620.717.411.303.424 possible input strings we need to handle.&lt;/p&gt;
&lt;p&gt;Creating a data-structure that contains all possible input strings that maps it to the
length is theoretically possible. But already for 10 characters and just considering ASCII
we have such a large amount of possible input strings that it just exceeds the amount of memory
a single computer could have.&lt;/p&gt;
&lt;p&gt;That doesn't mean passing functions doesn't make sense. It is quite the opposite, because the needed
data to represent a function is so huge, it is even more important that we can pass a function
that only calculates those things we truly need.
&lt;/div&gt;&lt;/p&gt;
&lt;a name=&quot;fp-retn-functions&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Functions as return values&lt;/h2&gt;
&lt;p&gt;Let's consider the following function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 58)&quot; onmouseover=&quot;showTip(event, 'fs19', 58)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 59)&quot; onmouseover=&quot;showTip(event, 'fs3', 59)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs6', 60)&quot; onmouseover=&quot;showTip(event, 'fs6', 60)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 61)&quot; onmouseover=&quot;showTip(event, 'fs7', 61)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 62)&quot; onmouseover=&quot;showTip(event, 'fs20', 62)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 63)&quot; onmouseover=&quot;showTip(event, 'fs20', 63)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;, (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 64)&quot; onmouseover=&quot;showTip(event, 'fs20', 64)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 65)&quot; onmouseover=&quot;showTip(event, 'fs3', 65)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    ]

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 66)&quot; onmouseover=&quot;showTip(event, 'fs21', 66)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 67)&quot; onmouseover=&quot;showTip(event, 'fs19', 67)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs21', 68)&quot; onmouseover=&quot;showTip(event, 'fs21', 68)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs21', 69)&quot; onmouseover=&quot;showTip(event, 'fs21', 69)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 12&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs21', 70)&quot; onmouseover=&quot;showTip(event, 'fs21', 70)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We have a function that returns a new Map structure. When we call &lt;code&gt;generateAdd 10&lt;/code&gt; we get
the following Map data-structure back.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;13&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we already have seen this kind of code before. This was the way how we turned
our &lt;code&gt;square&lt;/code&gt; function into a data-structure, so we could pass it to our own &lt;code&gt;map&lt;/code&gt; function. But
this time we create a &lt;code&gt;Map&lt;/code&gt; data-structure inside a function and return it from a function.
This is the same as creating a function inside a function and returning it.&lt;/p&gt;
&lt;p&gt;When we look at &lt;code&gt;generateAdd&lt;/code&gt; then we see the following. We loop over the number from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;.
Those represents the inputs of a function we pre-calculate. With &lt;code&gt;yield&lt;/code&gt; we return the mapping
&lt;code&gt;i&lt;/code&gt; to &lt;code&gt;(i + x)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we want to turn it into a function we just need to return the code &lt;code&gt;(i + x)&lt;/code&gt; somehow.
So how do we return a function with that code? That is the purpose of &lt;em&gt;lambda&lt;/em&gt;. &lt;em&gt;lambda&lt;/em&gt;
is the idea of a function as a value. In F# we just use the &lt;code&gt;fun&lt;/code&gt; keyword to create
a function/lambda.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 71)&quot; onmouseover=&quot;showTip(event, 'fs22', 71)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 72)&quot; onmouseover=&quot;showTip(event, 'fs3', 72)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 73)&quot; onmouseover=&quot;showTip(event, 'fs20', 73)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 74)&quot; onmouseover=&quot;showTip(event, 'fs20', 74)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 75)&quot; onmouseover=&quot;showTip(event, 'fs3', 75)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 76)&quot; onmouseover=&quot;showTip(event, 'fs23', 76)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 77)&quot; onmouseover=&quot;showTip(event, 'fs22', 77)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs23', 78)&quot; onmouseover=&quot;showTip(event, 'fs23', 78)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 79)&quot; onmouseover=&quot;showTip(event, 'fs23', 79)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 12&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 80)&quot; onmouseover=&quot;showTip(event, 'fs23', 80)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 81)&quot; onmouseover=&quot;showTip(event, 'fs23', 81)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of pre-calculating &lt;code&gt;i + x&lt;/code&gt; for a dozen of numbers, now we just return the whole
computation itself. When we call &lt;code&gt;generateAdd 10&lt;/code&gt; we now get a new function back that
can turn any input &lt;code&gt;int&lt;/code&gt; into an output &lt;code&gt;int&lt;/code&gt; where we added &lt;code&gt;10&lt;/code&gt; to it.&lt;/p&gt;
&lt;p&gt;As you can see, both versions with a data-structure or the functions are quite similar.
But the last version still contains some interesting things that are worth to talk about.&lt;/p&gt;
&lt;a name=&quot;fp-lambda&quot;&gt;&lt;/a&gt;
&lt;h2&gt;There is only lambda&lt;/h2&gt;
&lt;p&gt;When we want to create an &lt;code&gt;int&lt;/code&gt;. How do we do that? Well we just write it. For example &lt;code&gt;5&lt;/code&gt; is
just &lt;code&gt;5&lt;/code&gt;. We can work with &lt;code&gt;5&lt;/code&gt; however we want. We can pass it to a function, use it in
calculations and so on.&lt;/p&gt;
&lt;p&gt;This works with any number, but when we for example want to work with &lt;code&gt;587452198&lt;/code&gt; then
always rewriting this number can become annoying and tedious. Instead of working with numbers
directly we can bind a number to a symbol and give it a name. We bind something to
a name with &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;587452198&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once we have written this kind of thing, we now can use &lt;code&gt;bigNumber&lt;/code&gt;. But what happens exactly
when we write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;bigNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;bigNumber&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A process named &lt;em&gt;Substitution&lt;/em&gt; starts. The language cannot do anything with &lt;code&gt;bigNumber&lt;/code&gt; but
&lt;code&gt;bigNumber&lt;/code&gt; was anyway just a name for something different. The language just replaces &lt;code&gt;bigNumber&lt;/code&gt;
with the number it stands for. And now we see something like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;587452198&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;587452198&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;After the &lt;em&gt;substitution&lt;/em&gt; we can calculate the result &lt;code&gt;1174904396&lt;/code&gt; and bind the result to &lt;code&gt;y&lt;/code&gt;.
Now also &lt;code&gt;y&lt;/code&gt; can be used in other calculations. This substitution process is quite
important. It is basically the foundation of a function. Previously we defined &lt;code&gt;square&lt;/code&gt;
like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In fact, the language cannot execute anything in this example, as there is nothing to
execute. &lt;code&gt;x&lt;/code&gt; has no meaning at this point. To really calculate something we must substitute &lt;code&gt;x&lt;/code&gt; with
something different. How do we substitute it? We do it when we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We then say that &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;square&lt;/code&gt; should be substituted with &lt;code&gt;10&lt;/code&gt;. Instead of &lt;code&gt;x * x&lt;/code&gt; it
substitutes &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;10&lt;/code&gt; and it calculates &lt;code&gt;10 * 10&lt;/code&gt;. What we see here are three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have a concrete value like &lt;code&gt;10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can bind a concrete value to a symbol with &lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Symbols get substituted with a concrete value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The interesting part is. Technically a function definition does not exists. The only
way to create a function is through the &lt;code&gt;fun&lt;/code&gt; keyword (also named: lambda expression). So when
we want to write a calculation with a symbol. We just write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How do we execute the lambda? We just provide a value that should be substituted for &lt;code&gt;x&lt;/code&gt;
after the lambda expression.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//  4&lt;/span&gt;
(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//  9&lt;/span&gt;
(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But this overall makes less sense. We also could have written &lt;code&gt;2 * 2&lt;/code&gt; or &lt;code&gt;4 * 4&lt;/code&gt; directly. And
overall we don't want to rewrite the function all over again and again because that is annoying.
But we already have seen what we do in such a case. We just bind it to a symbol with &lt;code&gt;let&lt;/code&gt;!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 82)&quot; onmouseover=&quot;showTip(event, 'fs2', 82)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 83)&quot; onmouseover=&quot;showTip(event, 'fs3', 83)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 84)&quot; onmouseover=&quot;showTip(event, 'fs3', 84)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 85)&quot; onmouseover=&quot;showTip(event, 'fs3', 85)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How do we work with &lt;code&gt;square&lt;/code&gt;? You already have done it before.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 86)&quot; onmouseover=&quot;showTip(event, 'fs2', 86)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;//  25&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 87)&quot; onmouseover=&quot;showTip(event, 'fs2', 87)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 88)&quot; onmouseover=&quot;showTip(event, 'fs2', 88)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 625&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Actually what really happens. &lt;code&gt;square&lt;/code&gt; is just a symbol and it is once again substituted by
&lt;code&gt;(fun x -&amp;gt; x * x)&lt;/code&gt;. When we write &lt;code&gt;5&lt;/code&gt; after it, then &lt;code&gt;x&lt;/code&gt; in our function gets substituted by &lt;code&gt;5&lt;/code&gt;.
But creating functions and binding it to a symbol happens so often that we just have a shortcut
for that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 89)&quot; onmouseover=&quot;showTip(event, 'fs2', 89)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 90)&quot; onmouseover=&quot;showTip(event, 'fs3', 90)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 91)&quot; onmouseover=&quot;showTip(event, 'fs3', 91)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 92)&quot; onmouseover=&quot;showTip(event, 'fs3', 92)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This definition is the exact same as the &lt;code&gt;square&lt;/code&gt; definition with an explicit &lt;code&gt;fun&lt;/code&gt;. That is also
the reason why calling &lt;code&gt;square&lt;/code&gt; looks exactly the same. We have two different ways to define
a function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 93)&quot; onmouseover=&quot;showTip(event, 'fs24', 93)&quot; class=&quot;f&quot;&gt;squareA&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 94)&quot; onmouseover=&quot;showTip(event, 'fs3', 94)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 95)&quot; onmouseover=&quot;showTip(event, 'fs3', 95)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 96)&quot; onmouseover=&quot;showTip(event, 'fs3', 96)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 97)&quot; onmouseover=&quot;showTip(event, 'fs25', 97)&quot; class=&quot;f&quot;&gt;squareB&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 98)&quot; onmouseover=&quot;showTip(event, 'fs3', 98)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 99)&quot; onmouseover=&quot;showTip(event, 'fs3', 99)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 100)&quot; onmouseover=&quot;showTip(event, 'fs3', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But there is no difference in calling both functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 101)&quot; onmouseover=&quot;showTip(event, 'fs24', 101)&quot; class=&quot;f&quot;&gt;squareA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 25&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs25', 102)&quot; onmouseover=&quot;showTip(event, 'fs25', 102)&quot; class=&quot;f&quot;&gt;squareB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It just shows that the second &lt;code&gt;let&lt;/code&gt; definition that already includes the function arguments
is only a shortcut to the more explicit lambda expression.&lt;/p&gt;
&lt;a name=&quot;fp-currying&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Currying&lt;/h2&gt;
&lt;p&gt;In fact the simplification don't stop here. We don't even have functions with more than one
argument. There only exists functions with one arguments. So what do you do when you for
example want to add two numbers?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 103)&quot; onmouseover=&quot;showTip(event, 'fs26', 103)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 104)&quot; onmouseover=&quot;showTip(event, 'fs3', 104)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 105)&quot; onmouseover=&quot;showTip(event, 'fs27', 105)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs3', 106)&quot; onmouseover=&quot;showTip(event, 'fs3', 106)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 107)&quot; onmouseover=&quot;showTip(event, 'fs27', 107)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs26', 108)&quot; onmouseover=&quot;showTip(event, 'fs26', 108)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs26', 109)&quot; onmouseover=&quot;showTip(event, 'fs26', 109)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But creating such kind of nested functions is quite annoying. So there is a shortcut. You just can
use &lt;code&gt;fun&lt;/code&gt; with multiple arguments and it creates the nesting for you.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 110)&quot; onmouseover=&quot;showTip(event, 'fs28', 110)&quot; class=&quot;f&quot;&gt;add&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 111)&quot; onmouseover=&quot;showTip(event, 'fs3', 111)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 112)&quot; onmouseover=&quot;showTip(event, 'fs27', 112)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs3', 113)&quot; onmouseover=&quot;showTip(event, 'fs3', 113)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 114)&quot; onmouseover=&quot;showTip(event, 'fs27', 114)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs28', 115)&quot; onmouseover=&quot;showTip(event, 'fs28', 115)&quot; class=&quot;f&quot;&gt;add&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs28', 116)&quot; onmouseover=&quot;showTip(event, 'fs28', 116)&quot; class=&quot;f&quot;&gt;add&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And there is once again a shortcut by just using &lt;code&gt;let&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 117)&quot; onmouseover=&quot;showTip(event, 'fs29', 117)&quot; class=&quot;f&quot;&gt;add&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 118)&quot; onmouseover=&quot;showTip(event, 'fs3', 118)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 119)&quot; onmouseover=&quot;showTip(event, 'fs27', 119)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 120)&quot; onmouseover=&quot;showTip(event, 'fs3', 120)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 121)&quot; onmouseover=&quot;showTip(event, 'fs27', 121)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs29', 122)&quot; onmouseover=&quot;showTip(event, 'fs29', 122)&quot; class=&quot;f&quot;&gt;add&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs29', 123)&quot; onmouseover=&quot;showTip(event, 'fs29', 123)&quot; class=&quot;f&quot;&gt;add&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In practice you will usually only use the last way of defining a function. But it is quite
important to understand that all three ways of writing a function are interchangeable
and mean the exact same.&lt;/p&gt;
&lt;p&gt;How does those information help us? We can rewrite our &lt;code&gt;add10&lt;/code&gt; function that we created
previously. Previously we wrote &lt;code&gt;add10&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 124)&quot; onmouseover=&quot;showTip(event, 'fs22', 124)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 125)&quot; onmouseover=&quot;showTip(event, 'fs3', 125)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 126)&quot; onmouseover=&quot;showTip(event, 'fs20', 126)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 127)&quot; onmouseover=&quot;showTip(event, 'fs20', 127)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 128)&quot; onmouseover=&quot;showTip(event, 'fs3', 128)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 129)&quot; onmouseover=&quot;showTip(event, 'fs23', 129)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 130)&quot; onmouseover=&quot;showTip(event, 'fs22', 130)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But this is the same as:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 131)&quot; onmouseover=&quot;showTip(event, 'fs26', 131)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 132)&quot; onmouseover=&quot;showTip(event, 'fs3', 132)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 133)&quot; onmouseover=&quot;showTip(event, 'fs27', 133)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 134)&quot; onmouseover=&quot;showTip(event, 'fs3', 134)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 135)&quot; onmouseover=&quot;showTip(event, 'fs27', 135)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 136)&quot; onmouseover=&quot;showTip(event, 'fs23', 136)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 137)&quot; onmouseover=&quot;showTip(event, 'fs26', 137)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs23', 138)&quot; onmouseover=&quot;showTip(event, 'fs23', 138)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 139)&quot; onmouseover=&quot;showTip(event, 'fs23', 139)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It is quite important to understand what happens here. We start with &lt;code&gt;add&lt;/code&gt;, but this is
a function that expects a single value &lt;code&gt;x&lt;/code&gt;. That is the reason why we just can call &lt;code&gt;add 10&lt;/code&gt; with
one argument. This then returns a lambda like &lt;code&gt;(fun y -&amp;gt; 10 + y)&lt;/code&gt;. That means
we substituted &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;10&lt;/code&gt; and then returned a new function.&lt;/p&gt;
&lt;p&gt;This new function is then bounded to the symbol &lt;code&gt;add10&lt;/code&gt;. When we finally call &lt;code&gt;add10 5&lt;/code&gt; then
we also substitute &lt;code&gt;y&lt;/code&gt; and we get &lt;code&gt;10 + 5&lt;/code&gt; and this evaluates to &lt;code&gt;15&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Only passing some arguments is what we call &lt;em&gt;Partial Application&lt;/em&gt;. But it is more important
to understand that we get &lt;em&gt;Partial Application&lt;/em&gt; for free because we have Currying and all
functions are one-argument functions that return new functions.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;
If you wonder about the apostrophes in &lt;code&gt;add'&lt;/code&gt; or &lt;code&gt;add''&lt;/code&gt;. They are
not special and just part of the function name. This is usual the way how
functional programmers say: This is another version/implementation of a function.
&lt;/p&gt;
&lt;p&gt;I also could just numbered the functions with &lt;code&gt;add2&lt;/code&gt;, &lt;code&gt;add3&lt;/code&gt; and so on.
But this creates conflict with Partial Applied functions. When i write &lt;code&gt;add3&lt;/code&gt; i
would expect that it is a partial applied function with the first argument set to &lt;code&gt;3&lt;/code&gt;.
&lt;/div&gt;&lt;/p&gt;
&lt;a name=&quot;fp-closures&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Closures&lt;/h2&gt;
&lt;p&gt;Previously I said that when you call a function then some kind of substitution happens.
When you call &lt;code&gt;add 10&lt;/code&gt; in the last example then &lt;code&gt;x&lt;/code&gt; gets substituted by &lt;code&gt;10&lt;/code&gt; and it returns
a function &lt;code&gt;10 + y&lt;/code&gt;. But this is not quite correct. What really happens is that the actual
variable &lt;code&gt;x&lt;/code&gt; is just &lt;em&gt;remembered&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It seems not like a big distinction, but the difference becomes more obvious when we use
a mutable variable.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 140)&quot; onmouseover=&quot;showTip(event, 'fs30', 140)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 141)&quot; onmouseover=&quot;showTip(event, 'fs31', 141)&quot; class=&quot;f&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 142)&quot; onmouseover=&quot;showTip(event, 'fs32', 142)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 143)&quot; onmouseover=&quot;showTip(event, 'fs33', 143)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 144)&quot; onmouseover=&quot;showTip(event, 'fs27', 144)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 145)&quot; onmouseover=&quot;showTip(event, 'fs33', 145)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 146)&quot; onmouseover=&quot;showTip(event, 'fs27', 146)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 147)&quot; onmouseover=&quot;showTip(event, 'fs23', 147)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 148)&quot; onmouseover=&quot;showTip(event, 'fs32', 148)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 149)&quot; onmouseover=&quot;showTip(event, 'fs30', 149)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs23', 150)&quot; onmouseover=&quot;showTip(event, 'fs23', 150)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs30', 151)&quot; onmouseover=&quot;showTip(event, 'fs30', 151)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 152)&quot; onmouseover=&quot;showTip(event, 'fs23', 152)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because the value of &lt;code&gt;x&lt;/code&gt; changes between both calls we now get &lt;code&gt;15&lt;/code&gt; and &lt;code&gt;10&lt;/code&gt;. The
reason why we anyway get different values is because the returned function only refers
to &lt;code&gt;x&lt;/code&gt; and does not do a real substitution of the value.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;
Usually the difference between referring and substitution only becomes a problem with
mutable variables. Something we anyway avoid in functional programming. When we think
of referential transparency (this is how functional programming is usually defined)
we could even say that this code is not functional at all.
&lt;/p&gt;
&lt;p&gt;But i don't go further into this topic. Usually we don't use mutable variables, but
as F# is not a pure-functional language and it supports mutation, i still think it
is important to mention.
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;But there is an even more fundamental idea that emerges from that example. How long do
we need to keep &lt;code&gt;x&lt;/code&gt; in memory? The answer is, as long we have some code that still refers
to it. In our case &lt;code&gt;add10&lt;/code&gt; refers to &lt;code&gt;x&lt;/code&gt;, we always must keep &lt;code&gt;x&lt;/code&gt; in memory, as long
we have access to &lt;code&gt;add10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is also the reason why the first Lisp compiler already provided automatic memory
management with garbage collection (invented 1962). More precisely I don't even know
of any functional language that don't provide automatic memory management. While it
might be theoretically possible to not provide automatic memory management. It
is probably not a good practical decision.&lt;/p&gt;
&lt;p&gt;Whenever we &lt;em&gt;remember&lt;/em&gt; a variable or refer to a variable from a lambda expression,
we call it a &lt;em&gt;Closure&lt;/em&gt;.&lt;/p&gt;
&lt;a name=&quot;fp-example&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Example: Currying and Closures&lt;/h2&gt;
&lt;p&gt;I want to give a small example that shows functions as value and return values,
currying and closures all in action. In F# we have an option type. An option type can have
two states, &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. The &lt;code&gt;Some&lt;/code&gt; state can carry an additional value with it.
Usually the option type is used for the idea of &lt;em&gt;No Value&lt;/em&gt;, but it also can be used as
the idea of a &lt;em&gt;Success&lt;/em&gt; or &lt;em&gt;Failure&lt;/em&gt;, or how I use it as &lt;em&gt;Valid&lt;/em&gt; or &lt;em&gt;Invalid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We could for example write two functions that check if a number is greater or smaller
than a limit. If the number is valid (smaller or greater) then we just return the number
unchanged, otherwise we return &lt;code&gt;None&lt;/code&gt;. But it also could be that we already get a &lt;code&gt;None&lt;/code&gt; as
input. In this case we just return &lt;code&gt;None&lt;/code&gt;. We could write &lt;code&gt;smaller&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 153)&quot; onmouseover=&quot;showTip(event, 'fs34', 153)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 154)&quot; onmouseover=&quot;showTip(event, 'fs35', 154)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 155)&quot; onmouseover=&quot;showTip(event, 'fs36', 155)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 156)&quot; onmouseover=&quot;showTip(event, 'fs36', 156)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 157)&quot; onmouseover=&quot;showTip(event, 'fs37', 157)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 158)&quot; onmouseover=&quot;showTip(event, 'fs37', 158)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 159)&quot; onmouseover=&quot;showTip(event, 'fs38', 159)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 160)&quot; onmouseover=&quot;showTip(event, 'fs39', 160)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs39', 161)&quot; onmouseover=&quot;showTip(event, 'fs39', 161)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 162)&quot; onmouseover=&quot;showTip(event, 'fs35', 162)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 163)&quot; onmouseover=&quot;showTip(event, 'fs38', 163)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 164)&quot; onmouseover=&quot;showTip(event, 'fs39', 164)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 165)&quot; onmouseover=&quot;showTip(event, 'fs37', 165)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 166)&quot; onmouseover=&quot;showTip(event, 'fs40', 166)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 167)&quot; onmouseover=&quot;showTip(event, 'fs41', 167)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 168)&quot; onmouseover=&quot;showTip(event, 'fs36', 168)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 169)&quot; onmouseover=&quot;showTip(event, 'fs36', 169)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 170)&quot; onmouseover=&quot;showTip(event, 'fs37', 170)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 171)&quot; onmouseover=&quot;showTip(event, 'fs37', 171)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 172)&quot; onmouseover=&quot;showTip(event, 'fs38', 172)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 173)&quot; onmouseover=&quot;showTip(event, 'fs39', 173)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs39', 174)&quot; onmouseover=&quot;showTip(event, 'fs39', 174)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 175)&quot; onmouseover=&quot;showTip(event, 'fs41', 175)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 176)&quot; onmouseover=&quot;showTip(event, 'fs38', 176)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 177)&quot; onmouseover=&quot;showTip(event, 'fs39', 177)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 178)&quot; onmouseover=&quot;showTip(event, 'fs37', 178)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs34', 179)&quot; onmouseover=&quot;showTip(event, 'fs34', 179)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 180)&quot; onmouseover=&quot;showTip(event, 'fs38', 180)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs34', 181)&quot; onmouseover=&quot;showTip(event, 'fs34', 181)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 182)&quot; onmouseover=&quot;showTip(event, 'fs38', 182)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs40', 183)&quot; onmouseover=&quot;showTip(event, 'fs40', 183)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 184)&quot; onmouseover=&quot;showTip(event, 'fs38', 184)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs40', 185)&quot; onmouseover=&quot;showTip(event, 'fs40', 185)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 186)&quot; onmouseover=&quot;showTip(event, 'fs38', 186)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we look closer, &lt;code&gt;smaller&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt; are nearly identical functions. The only
difference is the &lt;code&gt;if&lt;/code&gt; check itself. But what does the &lt;code&gt;if&lt;/code&gt; anyway? The &lt;code&gt;if&lt;/code&gt; itself
just turns a &lt;code&gt;number&lt;/code&gt; somehow into a boolean value.&lt;/p&gt;
&lt;p&gt;Instead of hard-coding the &lt;code&gt;if&lt;/code&gt; behaviour we also could call a function that we give the number
and returns us a boolean. This way we could get rid of the whole code-duplication. We just
abstract both functions into a new function that expects a function for the transformation
of &lt;code&gt;number -&amp;gt; Bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With such a new function we then could easily rewrite &lt;code&gt;smaller&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 187)&quot; onmouseover=&quot;showTip(event, 'fs42', 187)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 188)&quot; onmouseover=&quot;showTip(event, 'fs43', 188)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 189)&quot; onmouseover=&quot;showTip(event, 'fs44', 189)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 190)&quot; onmouseover=&quot;showTip(event, 'fs44', 190)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 191)&quot; onmouseover=&quot;showTip(event, 'fs37', 191)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 192)&quot; onmouseover=&quot;showTip(event, 'fs37', 192)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 193)&quot; onmouseover=&quot;showTip(event, 'fs38', 193)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 194)&quot; onmouseover=&quot;showTip(event, 'fs45', 194)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs43', 195)&quot; onmouseover=&quot;showTip(event, 'fs43', 195)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 196)&quot; onmouseover=&quot;showTip(event, 'fs45', 196)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 197)&quot; onmouseover=&quot;showTip(event, 'fs38', 197)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 198)&quot; onmouseover=&quot;showTip(event, 'fs45', 198)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 199)&quot; onmouseover=&quot;showTip(event, 'fs37', 199)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 200)&quot; onmouseover=&quot;showTip(event, 'fs46', 200)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 201)&quot; onmouseover=&quot;showTip(event, 'fs35', 201)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 202)&quot; onmouseover=&quot;showTip(event, 'fs15', 202)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 203)&quot; onmouseover=&quot;showTip(event, 'fs15', 203)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 204)&quot; onmouseover=&quot;showTip(event, 'fs35', 204)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 205)&quot; onmouseover=&quot;showTip(event, 'fs47', 205)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 206)&quot; onmouseover=&quot;showTip(event, 'fs41', 206)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 207)&quot; onmouseover=&quot;showTip(event, 'fs15', 207)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 208)&quot; onmouseover=&quot;showTip(event, 'fs15', 208)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 209)&quot; onmouseover=&quot;showTip(event, 'fs41', 209)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs42', 210)&quot; onmouseover=&quot;showTip(event, 'fs42', 210)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 211)&quot; onmouseover=&quot;showTip(event, 'fs46', 211)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 212)&quot; onmouseover=&quot;showTip(event, 'fs38', 212)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs42', 213)&quot; onmouseover=&quot;showTip(event, 'fs42', 213)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 214)&quot; onmouseover=&quot;showTip(event, 'fs46', 214)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 215)&quot; onmouseover=&quot;showTip(event, 'fs38', 215)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs42', 216)&quot; onmouseover=&quot;showTip(event, 'fs42', 216)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 217)&quot; onmouseover=&quot;showTip(event, 'fs47', 217)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 218)&quot; onmouseover=&quot;showTip(event, 'fs38', 218)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs42', 219)&quot; onmouseover=&quot;showTip(event, 'fs42', 219)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 220)&quot; onmouseover=&quot;showTip(event, 'fs47', 220)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 221)&quot; onmouseover=&quot;showTip(event, 'fs38', 221)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now the whole code is written with currying in mind. &lt;code&gt;is&lt;/code&gt; expects a function that turns
a number into a &lt;code&gt;bool&lt;/code&gt;. When we write &lt;code&gt;(smaller 10)&lt;/code&gt; we just get back such a function.
We get back a new function that contains &lt;code&gt;10&lt;/code&gt; as a closure. This function is then passed
as a value to the &lt;code&gt;is&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;We also could nest the calls, for example when we want to do two checks at once. The second
argument to &lt;code&gt;is&lt;/code&gt; must be an option value. But this is also what &lt;code&gt;is&lt;/code&gt; returns. So we could
use the output of another &lt;code&gt;is&lt;/code&gt; as the input for the first &lt;code&gt;is&lt;/code&gt;. What we then get is very
Lisp-like code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs42', 222)&quot; onmouseover=&quot;showTip(event, 'fs42', 222)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 223)&quot; onmouseover=&quot;showTip(event, 'fs47', 223)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
  (&lt;span onmouseout=&quot;hideTip(event, 'fs42', 224)&quot; onmouseover=&quot;showTip(event, 'fs42', 224)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 225)&quot; onmouseover=&quot;showTip(event, 'fs46', 225)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
    (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 226)&quot; onmouseover=&quot;showTip(event, 'fs38', 226)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;))) &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At least in F# most people would prefer the piping idiom. With pipe we can write
the last argument of a function in front of the function. With this idea we end up with a
more sequential way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 227)&quot; onmouseover=&quot;showTip(event, 'fs38', 227)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 228)&quot; onmouseover=&quot;showTip(event, 'fs42', 228)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 229)&quot; onmouseover=&quot;showTip(event, 'fs47', 229)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 230)&quot; onmouseover=&quot;showTip(event, 'fs42', 230)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 231)&quot; onmouseover=&quot;showTip(event, 'fs46', 231)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;(Some 3)&lt;/code&gt; is now the input to &lt;code&gt;is (greater 0)&lt;/code&gt; the return value of this is then the input value
to &lt;code&gt;is (smaller 10)&lt;/code&gt; and so on. But checking if a number is between some values is quite common.
Why not combine both things into a single function?&lt;/p&gt;
&lt;p&gt;We already have &lt;code&gt;is&lt;/code&gt; that does the handling of the option for us. But it only works
with a single predicate function. This is okay, but to be more flexible we should write
a way to combine two predicate functions into a single new predicate function.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
A predicate is a function that always returns a &lt;code&gt;bool&lt;/code&gt;. Predicates are often used for
validation or filtering. For example:
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 232)&quot; onmouseover=&quot;showTip(event, 'fs10', 232)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 233)&quot; onmouseover=&quot;showTip(event, 'fs48', 233)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [2;4;6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 234)&quot; onmouseover=&quot;showTip(event, 'fs49', 234)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 235)&quot; onmouseover=&quot;showTip(event, 'fs50', 235)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 236)&quot; onmouseover=&quot;showTip(event, 'fs51', 236)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 237)&quot; onmouseover=&quot;showTip(event, 'fs52', 237)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs50', 238)&quot; onmouseover=&quot;showTip(event, 'fs50', 238)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 239)&quot; onmouseover=&quot;showTip(event, 'fs52', 239)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 240)&quot; onmouseover=&quot;showTip(event, 'fs51', 240)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 241)&quot; onmouseover=&quot;showTip(event, 'fs52', 241)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The idea is simple, we have two functions, and both functions must return &lt;code&gt;true&lt;/code&gt; for the given
input &lt;code&gt;x&lt;/code&gt;. Only when both return &lt;code&gt;true&lt;/code&gt; our &lt;code&gt;combine&lt;/code&gt; function also returns &lt;code&gt;true&lt;/code&gt;. Now we can
easily combine two predicates into a single new predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 242)&quot; onmouseover=&quot;showTip(event, 'fs53', 242)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 243)&quot; onmouseover=&quot;showTip(event, 'fs35', 243)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 244)&quot; onmouseover=&quot;showTip(event, 'fs41', 244)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs49', 245)&quot; onmouseover=&quot;showTip(event, 'fs49', 245)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 246)&quot; onmouseover=&quot;showTip(event, 'fs46', 246)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 247)&quot; onmouseover=&quot;showTip(event, 'fs41', 247)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 248)&quot; onmouseover=&quot;showTip(event, 'fs47', 248)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 249)&quot; onmouseover=&quot;showTip(event, 'fs35', 249)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;))

(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 250)&quot; onmouseover=&quot;showTip(event, 'fs38', 250)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 251)&quot; onmouseover=&quot;showTip(event, 'fs42', 251)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 252)&quot; onmouseover=&quot;showTip(event, 'fs53', 252)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 253)&quot; onmouseover=&quot;showTip(event, 'fs38', 253)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 254)&quot; onmouseover=&quot;showTip(event, 'fs42', 254)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 255)&quot; onmouseover=&quot;showTip(event, 'fs53', 255)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 256)&quot; onmouseover=&quot;showTip(event, 'fs38', 256)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 257)&quot; onmouseover=&quot;showTip(event, 'fs42', 257)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 258)&quot; onmouseover=&quot;showTip(event, 'fs53', 258)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once again you can see how we use currying. We don't provide the second argument to &lt;code&gt;smaller&lt;/code&gt; or
&lt;code&gt;greater&lt;/code&gt;. That means both calls return predicates. And those two predicates are then provided
to &lt;code&gt;combine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But we also don't provide the third argument to &lt;code&gt;combine&lt;/code&gt;. That means once again we get another
new predicate function back. This way we can create the &lt;code&gt;between&lt;/code&gt; predicate. It doesn't look like
it, but &lt;code&gt;between&lt;/code&gt; is a function that takes three arguments. &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are the visible
arguments. But we only called &lt;code&gt;combine&lt;/code&gt; with two arguments. That means it returns a lambda,
that makes &lt;code&gt;between&lt;/code&gt; a three argument function (or a chain of three functions taking one-argument).&lt;/p&gt;
&lt;p&gt;What do we do if we want to combine three, four or more predicate functions? &lt;code&gt;combine&lt;/code&gt; currently
can turn two predicates into a single predicate. So we only need to &lt;code&gt;combine&lt;/code&gt; all our predicates until
we end up with a single predicate. This task is already written for us and named &lt;code&gt;reduce&lt;/code&gt;.
Let's create a &lt;code&gt;check&lt;/code&gt; function that we can pass a list of predicates that combines it
into a single predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 259)&quot; onmouseover=&quot;showTip(event, 'fs54', 259)&quot; class=&quot;f&quot;&gt;check&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 260)&quot; onmouseover=&quot;showTip(event, 'fs55', 260)&quot; class=&quot;i&quot;&gt;predicates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 261)&quot; onmouseover=&quot;showTip(event, 'fs10', 261)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs56', 262)&quot; onmouseover=&quot;showTip(event, 'fs56', 262)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 263)&quot; onmouseover=&quot;showTip(event, 'fs49', 263)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 264)&quot; onmouseover=&quot;showTip(event, 'fs55', 264)&quot; class=&quot;i&quot;&gt;predicates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now let's combine three predicates at once to create a new predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 265)&quot; onmouseover=&quot;showTip(event, 'fs57', 265)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 266)&quot; onmouseover=&quot;showTip(event, 'fs3', 266)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 267)&quot; onmouseover=&quot;showTip(event, 'fs3', 267)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 268)&quot; onmouseover=&quot;showTip(event, 'fs58', 268)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 269)&quot; onmouseover=&quot;showTip(event, 'fs54', 269)&quot; class=&quot;f&quot;&gt;check&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs47', 270)&quot; onmouseover=&quot;showTip(event, 'fs47', 270)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 271)&quot; onmouseover=&quot;showTip(event, 'fs46', 271)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 272)&quot; onmouseover=&quot;showTip(event, 'fs57', 272)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt;]

(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 273)&quot; onmouseover=&quot;showTip(event, 'fs38', 273)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 274)&quot; onmouseover=&quot;showTip(event, 'fs42', 274)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 275)&quot; onmouseover=&quot;showTip(event, 'fs58', 275)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 276)&quot; onmouseover=&quot;showTip(event, 'fs38', 276)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 277)&quot; onmouseover=&quot;showTip(event, 'fs42', 277)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 278)&quot; onmouseover=&quot;showTip(event, 'fs58', 278)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 279)&quot; onmouseover=&quot;showTip(event, 'fs38', 279)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 280)&quot; onmouseover=&quot;showTip(event, 'fs42', 280)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 281)&quot; onmouseover=&quot;showTip(event, 'fs58', 281)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 4&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 282)&quot; onmouseover=&quot;showTip(event, 'fs38', 282)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 283)&quot; onmouseover=&quot;showTip(event, 'fs42', 283)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 284)&quot; onmouseover=&quot;showTip(event, 'fs58', 284)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 6&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 285)&quot; onmouseover=&quot;showTip(event, 'fs38', 285)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 286)&quot; onmouseover=&quot;showTip(event, 'fs42', 286)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 287)&quot; onmouseover=&quot;showTip(event, 'fs58', 287)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This idea of writing small functions, or basically decomposing a task into small functions and
then composing them into bigger functions is the heart of functional programming. In functional
programming we directly work with functions and we even write our own combinators
to compose functions.&lt;/p&gt;
&lt;a name=&quot;oo&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Object-Oriented programming&lt;/h2&gt;
&lt;p&gt;At the start of the article i said we can achieve the same ideas in Object-Oriented programming
or that you probably already know these things. I want to show you some C# code to achieve the
same things. C# already has some functional features like lambda-expressions. But there is
really no point in showing C# code that uses functional features as an example that OO
and functional programming are orthogonal. Because of this i will only use classes.&lt;/p&gt;
&lt;a name=&quot;oo-class&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is a class?&lt;/h2&gt;
&lt;p&gt;We start with the same idea. What is actually a class anyway? A class is actually some
kind of compose-able type. It always has at least one constructor, beyond that it can contain
multiple data in the form of public and private fields, additional it can contain multiple
functions operating on those data, often named &lt;em&gt;methods&lt;/em&gt;. I make no distinction between
functions and methods.&lt;/p&gt;
&lt;p&gt;But one important aspect is that there is no technical restriction to create classes with no
data or no functions. There is also no restriction that tells you how many data fields or
functions you must implement.&lt;/p&gt;
&lt;a name=&quot;oo-function&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Function as data&lt;/h2&gt;
&lt;p&gt;I started with the idea of functions as data. I created a &lt;code&gt;square&lt;/code&gt; function and passed the function
around. We wrote our own &lt;code&gt;map&lt;/code&gt; function that showed that we could replace a function by data.
But also the opposite that we could pass a function instead of a data-structure. Re-doing that
proof makes less sense as this idea doesn't invalidate just because we now use classes. But
you probably wonder how we pass a function.&lt;/p&gt;
&lt;p&gt;In fact, when you do OO programming you pass functions all over the place in your code. You do
it even more often as in a functional language. Every object is a container for functions. So
when you pass an object you also pass functions around. In fact you not only pass a single
function, you usually pass dozens of functions including data as a single object around.&lt;/p&gt;
&lt;p&gt;And because you usually return objects that include functions, you also return functions. In fact
in OO it is even hard to find a place where you don't do that. Functional programming
is more a simplification. We only pass a single function. And on top, we have lambda expression
to easily create a single function directly where we need it. That is why it looks different
but actually passing a single function or returning it shouldn't be hard to understand. You
already do that all over the place in an OO language.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Some languages also have the ability to create whole classes/objects inline like you do
with a lambda expression. In fact F# is such a language and supports
&lt;a href=&quot;https://msdn.microsoft.com/visualfsharpdocs/conceptual/object-expressions-%5bfsharp%5d&quot;&gt;Object expressions&lt;/a&gt;
C# also supports &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb397696.aspx&quot;&gt;Anonymous Types&lt;/a&gt;,
but they are more limited. Java supports &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html&quot;&gt;Anonymous classes&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;So, how do we create a &lt;code&gt;List.map&lt;/code&gt; function in C# just with classes and how do we pass it
a function like &lt;code&gt;square&lt;/code&gt;?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; IFunction&amp;lt;A,B&amp;gt; {
    B Call(A a);
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Square &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Call(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; x;
    }
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; List {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; List&amp;lt;B&amp;gt; map&amp;lt;A,B&amp;gt;(IFunction&amp;lt;A,B&amp;gt; func, List&amp;lt;A&amp;gt; values) {
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; newList &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; List&amp;lt;B&amp;gt;();
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; values) {
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; mapping &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; func.Call(x);
            newList.Add(mapping);
        }
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; newList;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;At first, we need to create a &lt;code&gt;IFunction&lt;/code&gt; interface. This interface just tells us that we have
a single method that takes some input and produces some output. We don't even care how that method
is named. I use &lt;code&gt;Call&lt;/code&gt;, but we also could use &lt;code&gt;Run&lt;/code&gt;, &lt;code&gt;Execute&lt;/code&gt; or whatever you like.&lt;/p&gt;
&lt;p&gt;Because we want to pass the square function as a value, we now must write a whole class and wrap
our function inside a class. Now we are able to create an object and pass that function around.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;List.map&lt;/code&gt; just expects such a one-method interface (functional interface) and executes the
function for every element. We now can write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; ints    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; { &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; };
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; squared &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List.map(&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Square(), ints);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And &lt;code&gt;squared&lt;/code&gt; is a new list with all elements squared. The &lt;code&gt;IFunction&lt;/code&gt; interface is sure a thing
you only need to write once. Because we don't have currying in C#, we probably also want to
write a version with two or three arguments, but overall you only need to define those once.&lt;/p&gt;
&lt;p&gt;Writing everything this way feels a little bit dumb. Mainly because most often the time there is a
(IMHO: dumb) rule that tells you to put every class into its own file. The above code leads to
an explosion of classes/files. But instead of criticizing the code, you should probably criticize
your rules and OO on why such a simple example is already so complex.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Once again I want to highlight the importance that i ignore the functional features. You
sure could easily achieve the same with just static methods (functions). Using &lt;code&gt;Func&lt;int,int&gt;&lt;/code&gt;
in &lt;code&gt;List.map&lt;/code&gt; and using a lambda &lt;code&gt;x =&gt; x * x&lt;/code&gt; to call &lt;code&gt;List.map&lt;/code&gt;.
But those are the functional features that were added with C# 3. There is no point in showing
functional concepts with functional features in an OO language to prove that they are orthogonal.
&lt;/div&gt;
&lt;a name=&quot;oo-curry-partial-closure&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Currying, Partial Application and Closures&lt;/h2&gt;
&lt;p&gt;All three things are somehow connected to each other. In the functional code I first introduced
currying, but I primarily used it to show Partial Application (only providing some arguments
to a function, not all) and explained why this needs the concept of a closure. I will first ignore
currying and only talk about the later two. So how can we create a function like &lt;code&gt;add&lt;/code&gt; and partial apply
the first argument?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Add &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; x;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Call(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We now can use it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;.Call(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;What is Partial Application in OO really? It is just an argument to a constructor that is saved in
a private field. All other methods in your class then have access to this private field. The value
that was passed to the constructor is &lt;em&gt;remembered&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This shows what a closure is. Our &lt;code&gt;add10&lt;/code&gt; object just have some internal private fields and
all of those fields must remain in memory as long we have access to &lt;code&gt;add10&lt;/code&gt;. This shows one
fundamental idea. A closure and an object is the same.&lt;/p&gt;
&lt;p&gt;Whenever you create an object in OO programming. It is the same as calling a function that returns
a function. The returned function then has access to the input through a closure. In the functional
code I only returned a single function, but you also can return multiple functions or data-structure
like a &lt;em&gt;Tuple&lt;/em&gt; or &lt;em&gt;Record&lt;/em&gt; that contains those functions.&lt;/p&gt;
&lt;p&gt;In C# we could for example create a class like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Counter {
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; counter;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; Counter(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; init) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; init;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Current() {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Increment() {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Decrement() {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;and use it like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Counter(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
counter.Increment();
counter.Increment();
counter.Decrement();
Console.WriteLine(counter.Current()); &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In F# (without using classes in F#) we could achieve the same just with a closure&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// A Record describing three functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 288)&quot; onmouseover=&quot;showTip(event, 'fs59', 288)&quot; class=&quot;t&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs60', 289)&quot; onmouseover=&quot;showTip(event, 'fs60', 289)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs61', 290)&quot; onmouseover=&quot;showTip(event, 'fs61', 290)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 291)&quot; onmouseover=&quot;showTip(event, 'fs62', 291)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs63', 292)&quot; onmouseover=&quot;showTip(event, 'fs63', 292)&quot; class=&quot;i&quot;&gt;Increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 293)&quot; onmouseover=&quot;showTip(event, 'fs61', 293)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 294)&quot; onmouseover=&quot;showTip(event, 'fs61', 294)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs64', 295)&quot; onmouseover=&quot;showTip(event, 'fs64', 295)&quot; class=&quot;i&quot;&gt;Decrement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 296)&quot; onmouseover=&quot;showTip(event, 'fs61', 296)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 297)&quot; onmouseover=&quot;showTip(event, 'fs61', 297)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt;
}

&lt;span class=&quot;c&quot;&gt;// A function that has `counter` as a closure and returns a Counter Record&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 298)&quot; onmouseover=&quot;showTip(event, 'fs65', 298)&quot; class=&quot;f&quot;&gt;counter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 299)&quot; onmouseover=&quot;showTip(event, 'fs66', 299)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 300)&quot; onmouseover=&quot;showTip(event, 'fs67', 300)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 301)&quot; onmouseover=&quot;showTip(event, 'fs31', 301)&quot; class=&quot;f&quot;&gt;ref&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 302)&quot; onmouseover=&quot;showTip(event, 'fs66', 302)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;
    {
        &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 303)&quot; onmouseover=&quot;showTip(event, 'fs67', 303)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt;)
        &lt;span class=&quot;i&quot;&gt;Increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 304)&quot; onmouseover=&quot;showTip(event, 'fs67', 304)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 305)&quot; onmouseover=&quot;showTip(event, 'fs67', 305)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
        &lt;span class=&quot;i&quot;&gt;Decrement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 306)&quot; onmouseover=&quot;showTip(event, 'fs67', 306)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 307)&quot; onmouseover=&quot;showTip(event, 'fs67', 307)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And you use it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 308)&quot; onmouseover=&quot;showTip(event, 'fs68', 308)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 309)&quot; onmouseover=&quot;showTip(event, 'fs65', 309)&quot; class=&quot;f&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs68', 310)&quot; onmouseover=&quot;showTip(event, 'fs68', 310)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 311)&quot; onmouseover=&quot;showTip(event, 'fs63', 311)&quot; class=&quot;i&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs68', 312)&quot; onmouseover=&quot;showTip(event, 'fs68', 312)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 313)&quot; onmouseover=&quot;showTip(event, 'fs63', 313)&quot; class=&quot;i&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs68', 314)&quot; onmouseover=&quot;showTip(event, 'fs68', 314)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs64', 315)&quot; onmouseover=&quot;showTip(event, 'fs64', 315)&quot; class=&quot;i&quot;&gt;Decrement&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs69', 316)&quot; onmouseover=&quot;showTip(event, 'fs69', 316)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs68', 317)&quot; onmouseover=&quot;showTip(event, 'fs68', 317)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs60', 318)&quot; onmouseover=&quot;showTip(event, 'fs60', 318)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;()) &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;An object is just a collection of functions that still has access to some hidden fields.
Objects and closures are the same. Probably you have heard that &quot;Objects are poor man closures&quot;,
now you know why. But it is also the same reversed. &quot;Closures are poor man objects&quot;. Why? A
class is basically an &lt;em&gt;optimization&lt;/em&gt; of this use-case.&lt;/p&gt;
&lt;p&gt;A class contains the definition, fields and so on in one unit. Instead of creating a record
definition, using &lt;code&gt;counter&lt;/code&gt; as a closure and return a record, I also could just define
a class with the members (methods) and a private field. Defining a class is shorter.&lt;/p&gt;
&lt;p&gt;So a class is a poor man closures because it did not add anything more useful as what a
function with closure already gives you (functional languages, lambdas, closures and so
on already existed before OO). But on the other hand, OO optimized this use-case in such
a way that Closures are really &quot;poor man objects&quot;.&lt;/p&gt;
&lt;p&gt;As F# also supports classes, if you really want to write something like this i would suggest you
also should create a class, and not use a record with functions and a closure. A class is just
much shorter.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 319)&quot; onmouseover=&quot;showTip(event, 'fs70', 319)&quot; class=&quot;t&quot;&gt;CounterClass&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs66', 320)&quot; onmouseover=&quot;showTip(event, 'fs66', 320)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs62', 321)&quot; onmouseover=&quot;showTip(event, 'fs62', 321)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 322)&quot; onmouseover=&quot;showTip(event, 'fs71', 322)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 323)&quot; onmouseover=&quot;showTip(event, 'fs66', 323)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 324)&quot; onmouseover=&quot;showTip(event, 'fs72', 324)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs73', 325)&quot; onmouseover=&quot;showTip(event, 'fs73', 325)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 326)&quot; onmouseover=&quot;showTip(event, 'fs71', 326)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 327)&quot; onmouseover=&quot;showTip(event, 'fs72', 327)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs74', 328)&quot; onmouseover=&quot;showTip(event, 'fs74', 328)&quot; class=&quot;f&quot;&gt;Increment&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 329)&quot; onmouseover=&quot;showTip(event, 'fs71', 329)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 330)&quot; onmouseover=&quot;showTip(event, 'fs71', 330)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 331)&quot; onmouseover=&quot;showTip(event, 'fs72', 331)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs75', 332)&quot; onmouseover=&quot;showTip(event, 'fs75', 332)&quot; class=&quot;f&quot;&gt;Decrement&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 333)&quot; onmouseover=&quot;showTip(event, 'fs71', 333)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 334)&quot; onmouseover=&quot;showTip(event, 'fs71', 334)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The usage of a class in F# is actually nearly the same as the code with the record:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 335)&quot; onmouseover=&quot;showTip(event, 'fs76', 335)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 336)&quot; onmouseover=&quot;showTip(event, 'fs70', 336)&quot; class=&quot;t&quot;&gt;CounterClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs76', 337)&quot; onmouseover=&quot;showTip(event, 'fs76', 337)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs77', 338)&quot; onmouseover=&quot;showTip(event, 'fs77', 338)&quot; class=&quot;f&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs76', 339)&quot; onmouseover=&quot;showTip(event, 'fs76', 339)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs77', 340)&quot; onmouseover=&quot;showTip(event, 'fs77', 340)&quot; class=&quot;f&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs76', 341)&quot; onmouseover=&quot;showTip(event, 'fs76', 341)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 342)&quot; onmouseover=&quot;showTip(event, 'fs78', 342)&quot; class=&quot;f&quot;&gt;Decrement&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs69', 343)&quot; onmouseover=&quot;showTip(event, 'fs69', 343)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 344)&quot; onmouseover=&quot;showTip(event, 'fs76', 344)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs79', 345)&quot; onmouseover=&quot;showTip(event, 'fs79', 345)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But as a final note. Writing things like this is anyway not idiomatic functional code. Functional
code uses immutability. With immutable data you don't really need a class at all. A class gives you
the ability to hide &lt;em&gt;mutable data&lt;/em&gt; so you only have specific functions that can manipulate those.&lt;/p&gt;
&lt;a name=&quot;oo-currying&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Currying&lt;/h2&gt;
&lt;p&gt;F# does automatic currying by default, but it doesn't mean just because your language doesn't do
currying you can't have it. While most modern functional languages usually do it by default some
older languages especially those based on Lisp also don't do it by default.&lt;/p&gt;
&lt;p&gt;I give a short recap on what currying is, because it is still often miss-interpreted as
partial application.&lt;/p&gt;
&lt;p&gt;Currying is the idea that every function only has one input and one output argument. A function
with multiple input arguments must then be converted into a function that returns another
function. This transformation process is what we name currying. Once a function is in curried
form we don't have to specify all arguments at once. Not providing all arguments at once is
partial application. But you don't need currying to use partial application.&lt;/p&gt;
&lt;p&gt;Often beginners have a problem to differentiate both. We also can write a curry
function in F#. And probably that can help to demonstrate the distinction. First
we create a function that expects two arguments in tupled form.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 346)&quot; onmouseover=&quot;showTip(event, 'fs80', 346)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 347)&quot; onmouseover=&quot;showTip(event, 'fs3', 347)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs27', 348)&quot; onmouseover=&quot;showTip(event, 'fs27', 348)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 349)&quot; onmouseover=&quot;showTip(event, 'fs3', 349)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 350)&quot; onmouseover=&quot;showTip(event, 'fs27', 350)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now &lt;code&gt;add&lt;/code&gt; expects a single argument, a tuple that contains two variables. You can use it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs80', 351)&quot; onmouseover=&quot;showTip(event, 'fs80', 351)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// 13&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs80', 352)&quot; onmouseover=&quot;showTip(event, 'fs80', 352)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably at this point you will notice how similar this is to a function in a C-style language.
It is probably not an accident that we use &lt;code&gt;,&lt;/code&gt; for the creation of a tuple. The disadvantage
of a tuple is that we now must provide both values at once. We now could write a &lt;code&gt;curry&lt;/code&gt;
function to turn a function expecting a tuple into a chain of functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Extended version&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 353)&quot; onmouseover=&quot;showTip(event, 'fs81', 353)&quot; class=&quot;f&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 354)&quot; onmouseover=&quot;showTip(event, 'fs82', 354)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 355)&quot; onmouseover=&quot;showTip(event, 'fs52', 355)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 356)&quot; onmouseover=&quot;showTip(event, 'fs83', 356)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs82', 357)&quot; onmouseover=&quot;showTip(event, 'fs82', 357)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs52', 358)&quot; onmouseover=&quot;showTip(event, 'fs52', 358)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs83', 359)&quot; onmouseover=&quot;showTip(event, 'fs83', 359)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// Short version&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 360)&quot; onmouseover=&quot;showTip(event, 'fs81', 360)&quot; class=&quot;f&quot;&gt;curry&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 361)&quot; onmouseover=&quot;showTip(event, 'fs82', 361)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 362)&quot; onmouseover=&quot;showTip(event, 'fs52', 362)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 363)&quot; onmouseover=&quot;showTip(event, 'fs83', 363)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 364)&quot; onmouseover=&quot;showTip(event, 'fs82', 364)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs52', 365)&quot; onmouseover=&quot;showTip(event, 'fs52', 365)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs83', 366)&quot; onmouseover=&quot;showTip(event, 'fs83', 366)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Using &lt;code&gt;curry&lt;/code&gt; only with the first argument returns a curried version of &lt;code&gt;add&lt;/code&gt;. After we have
a curried function we can partial apply it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 367)&quot; onmouseover=&quot;showTip(event, 'fs84', 367)&quot; class=&quot;f&quot;&gt;addC&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 368)&quot; onmouseover=&quot;showTip(event, 'fs81', 368)&quot; class=&quot;f&quot;&gt;curry&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 369)&quot; onmouseover=&quot;showTip(event, 'fs80', 369)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 370)&quot; onmouseover=&quot;showTip(event, 'fs85', 370)&quot; class=&quot;f&quot;&gt;addC10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 371)&quot; onmouseover=&quot;showTip(event, 'fs84', 371)&quot; class=&quot;f&quot;&gt;addC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs85', 372)&quot; onmouseover=&quot;showTip(event, 'fs85', 372)&quot; class=&quot;f&quot;&gt;addC10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To be more formal. We started with a function signature that looked like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;and &lt;code&gt;curry&lt;/code&gt; turned it into a chain of functions&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When you are not used to reading functional signatures. The &lt;code&gt;-&amp;gt;&lt;/code&gt; stands for a function. The left
is the input and the right is the output. &lt;code&gt;-&amp;gt;&lt;/code&gt; is left-associative. So you can read it like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A function that takes &lt;code&gt;A&lt;/code&gt; and returns a new function that takes a &lt;code&gt;B&lt;/code&gt; and returns &lt;code&gt;C&lt;/code&gt;. When we
now go back to the OO world. We already defined a generic interface with one argument and output.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How could the interface for a function with two arguments, without currying, look like?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How does it look with currying?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A &lt;code&gt;curry&lt;/code&gt; function would take a &lt;code&gt;IFunction&amp;lt;A,B,C&amp;gt;&lt;/code&gt; and return a &lt;code&gt;IFunction&amp;lt;A,IFunction&amp;lt;B,C&amp;gt;&amp;gt;&lt;/code&gt;.
The problem is, without the ability to create a lambda or anonymous classes such a task is hard
up to impossible.&lt;/p&gt;
&lt;p&gt;Instead of focusing on currying, we could focus on partial application instead. We already
have seen what partial application means in OO. It just means we already provide the arguments
to the constructor when we create a class. But it is really bad that we have to do that kind
of thing explicitly and manually.&lt;/p&gt;
&lt;p&gt;Instead of creating classes that expects its value explicitly in the constructor, we should
write a generic version that can partial apply any two argument IFunction instead. We
could write it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; IFunction&amp;lt;A,B&amp;gt; {
    B Call(A a);
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; IFunction&amp;lt;A,B,C&amp;gt; {
    C Call(A a, B b);
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Partial&amp;lt;A,B,C&amp;gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;B,C&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; A a;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; IFunction&amp;lt;A,B,C&amp;gt; func;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; Partial(IFunction&amp;lt;A,B,C&amp;gt; func, A a) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; a;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.func &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; func;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; C Call(B b) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.func.Call(&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.a, b);
    }
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Func {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; IFunction&amp;lt;B,C&amp;gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt;&amp;lt;A,B,C&amp;gt;(IFunction&amp;lt;A,B,C&amp;gt; func, A a) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Partial&amp;lt;A,B,C&amp;gt;(func, a);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We don't need the static &lt;code&gt;Func&lt;/code&gt; class, but without this helper function and by directly
using &lt;code&gt;new Partial()&lt;/code&gt; we need to specify the generic values like &lt;code&gt;new Partial&amp;lt;int,int,int&amp;gt;()&lt;/code&gt;
as otherwise the C# compiler cannot infer the types. The helper functions helps us here.
With such a setup we now can write our &lt;code&gt;Add&lt;/code&gt; function like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Add &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Call(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And now we are able to partial apply the first argument. We can work with it like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Add();
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Func.&lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt;(add, &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
Console.WriteLine(add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;.Call(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;It is a little bit boiler-plate to define everything, but we only need to define it once,
now we are able to partial apply any two argument function without that we explicitly
need to create a private field or think about which or how many arguments we want
to partial apply.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
When we don't restrict ourself and use all functional features of C#, that means lambdas,
and static methods (that we then can pass as arguments) then all of the examples become easier.
We also can easily define &lt;code&gt;curry&lt;/code&gt; functions.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Lambda {
    &lt;span class=&quot;c&quot;&gt;// 2-args&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; Func&amp;lt;A,Func&amp;lt;B,C&amp;gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Curry&amp;lt;A,B,C&amp;gt;(Func&amp;lt;A,B,C&amp;gt; func) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; func(a,b);
    }
    &lt;span class=&quot;c&quot;&gt;// 3-args&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; Func&amp;lt;A,Func&amp;lt;B,Func&amp;lt;C,D&amp;gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Curry&amp;lt;A,B,C,D&amp;gt;(Func&amp;lt;A,B,C,D&amp;gt; func) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; func(a,b,c);
    }
}

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; MainClass {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
    }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Main(&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;[] args) {
        &lt;span class=&quot;c&quot;&gt;// We must specify the generic-types when we pass a static method&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// to the Curry() function as an argument&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Lambda.Curry&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt;(Add);

        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;);   &lt;span class=&quot;c&quot;&gt;// It is now a chained function&lt;/span&gt;
        Console.WriteLine(x); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);  &lt;span class=&quot;c&quot;&gt;// Easily Partial Application&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; y     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;);
        Console.WriteLine(y); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;a name=&quot;oo-exercise&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;p&gt;Previously I provided a small exercise with validation, but I leave the task to implement it
in your favourite language. Up to this point you should know enough about currying and
partial application. Most languages today also support lambda statements. Not every language
has automatic currying, but I showed how to create a curry function in F# and C#.&lt;/p&gt;
&lt;p&gt;Otherwise you still can use partial application instead of currying. The example is still
small and still heavily rely on currying or in general the ability to take functions as
arguments and return new functions from other functions. When you want a better understanding
of the concepts then there is no better way to somehow rewrite the given example.&lt;/p&gt;
&lt;p&gt;As a full overview, here is the full F# code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Takes a predicate and a value and returns a valid/invalid value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 373)&quot; onmouseover=&quot;showTip(event, 'fs86', 373)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 374)&quot; onmouseover=&quot;showTip(event, 'fs50', 374)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 375)&quot; onmouseover=&quot;showTip(event, 'fs44', 375)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 376)&quot; onmouseover=&quot;showTip(event, 'fs44', 376)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 377)&quot; onmouseover=&quot;showTip(event, 'fs37', 377)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 378)&quot; onmouseover=&quot;showTip(event, 'fs37', 378)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 379)&quot; onmouseover=&quot;showTip(event, 'fs38', 379)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 380)&quot; onmouseover=&quot;showTip(event, 'fs45', 380)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs50', 381)&quot; onmouseover=&quot;showTip(event, 'fs50', 381)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 382)&quot; onmouseover=&quot;showTip(event, 'fs45', 382)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 383)&quot; onmouseover=&quot;showTip(event, 'fs38', 383)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 384)&quot; onmouseover=&quot;showTip(event, 'fs45', 384)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 385)&quot; onmouseover=&quot;showTip(event, 'fs37', 385)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Combinator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 386)&quot; onmouseover=&quot;showTip(event, 'fs49', 386)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 387)&quot; onmouseover=&quot;showTip(event, 'fs50', 387)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 388)&quot; onmouseover=&quot;showTip(event, 'fs51', 388)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 389)&quot; onmouseover=&quot;showTip(event, 'fs52', 389)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs50', 390)&quot; onmouseover=&quot;showTip(event, 'fs50', 390)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 391)&quot; onmouseover=&quot;showTip(event, 'fs52', 391)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 392)&quot; onmouseover=&quot;showTip(event, 'fs51', 392)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 393)&quot; onmouseover=&quot;showTip(event, 'fs52', 393)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// Predicates&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 394)&quot; onmouseover=&quot;showTip(event, 'fs46', 394)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 395)&quot; onmouseover=&quot;showTip(event, 'fs35', 395)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 396)&quot; onmouseover=&quot;showTip(event, 'fs15', 396)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 397)&quot; onmouseover=&quot;showTip(event, 'fs15', 397)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 398)&quot; onmouseover=&quot;showTip(event, 'fs35', 398)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 399)&quot; onmouseover=&quot;showTip(event, 'fs47', 399)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 400)&quot; onmouseover=&quot;showTip(event, 'fs41', 400)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 401)&quot; onmouseover=&quot;showTip(event, 'fs15', 401)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 402)&quot; onmouseover=&quot;showTip(event, 'fs15', 402)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 403)&quot; onmouseover=&quot;showTip(event, 'fs41', 403)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 404)&quot; onmouseover=&quot;showTip(event, 'fs87', 404)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 405)&quot; onmouseover=&quot;showTip(event, 'fs3', 405)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 406)&quot; onmouseover=&quot;showTip(event, 'fs3', 406)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 407)&quot; onmouseover=&quot;showTip(event, 'fs53', 407)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 408)&quot; onmouseover=&quot;showTip(event, 'fs35', 408)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 409)&quot; onmouseover=&quot;showTip(event, 'fs41', 409)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs49', 410)&quot; onmouseover=&quot;showTip(event, 'fs49', 410)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 411)&quot; onmouseover=&quot;showTip(event, 'fs46', 411)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 412)&quot; onmouseover=&quot;showTip(event, 'fs41', 412)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 413)&quot; onmouseover=&quot;showTip(event, 'fs47', 413)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 414)&quot; onmouseover=&quot;showTip(event, 'fs35', 414)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Some notes on the implementation. &lt;code&gt;Some&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; is an option type. In a language without
&lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic Data-Types&lt;/a&gt; you have some problems to
build this. But you can create a class that contains a bool and a data field. The bool contains
the information if the data-field is valid or not. In the case it is invalid, the data-field
is empty/null.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;combine&lt;/code&gt; is a combinator, it expects two predicate functions as an argument and returns
a new predicate that applies both checks on a value. In a language without automatic
currying this should be a two-argument function (returning a function).&lt;/p&gt;
&lt;p&gt;You can use the functions above like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 415)&quot; onmouseover=&quot;showTip(event, 'fs38', 415)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 416)&quot; onmouseover=&quot;showTip(event, 'fs86', 416)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 417)&quot; onmouseover=&quot;showTip(event, 'fs53', 417)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 418)&quot; onmouseover=&quot;showTip(event, 'fs86', 418)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 419)&quot; onmouseover=&quot;showTip(event, 'fs87', 419)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;

(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 420)&quot; onmouseover=&quot;showTip(event, 'fs38', 420)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 421)&quot; onmouseover=&quot;showTip(event, 'fs86', 421)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 422)&quot; onmouseover=&quot;showTip(event, 'fs53', 422)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 423)&quot; onmouseover=&quot;showTip(event, 'fs86', 423)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 424)&quot; onmouseover=&quot;showTip(event, 'fs87', 424)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When you get stuck writing it in such a sequential way, first try to write it in a nested style.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs86', 425)&quot; onmouseover=&quot;showTip(event, 'fs86', 425)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 426)&quot; onmouseover=&quot;showTip(event, 'fs53', 426)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
  (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 427)&quot; onmouseover=&quot;showTip(event, 'fs86', 427)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 428)&quot; onmouseover=&quot;showTip(event, 'fs87', 428)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt;
    (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 429)&quot; onmouseover=&quot;showTip(event, 'fs38', 429)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;))) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;

(&lt;span onmouseout=&quot;hideTip(event, 'fs86', 430)&quot; onmouseover=&quot;showTip(event, 'fs86', 430)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 431)&quot; onmouseover=&quot;showTip(event, 'fs53', 431)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
  (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 432)&quot; onmouseover=&quot;showTip(event, 'fs86', 432)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 433)&quot; onmouseover=&quot;showTip(event, 'fs87', 433)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt;
    (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 434)&quot; onmouseover=&quot;showTip(event, 'fs38', 434)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;))) &lt;span class=&quot;c&quot;&gt;// Some 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When you have problems to understand the nested-style. The only difference in C-Style code is
the position of the open-parenthesis. It is placed after the function name instead before.
And often &lt;code&gt;,&lt;/code&gt; is used to separate the arguments.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(between(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;),
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(even,
    Some(&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Writing it in a sequential style is possible in every language that also supports lambdas. In C#
you want to look at &lt;em&gt;Extension Methods&lt;/em&gt;, in Java look at &lt;em&gt;Default Methods&lt;/em&gt;. In a language without
such features. The &lt;code&gt;is&lt;/code&gt; function will be part of your validation class. Your final code should
then look similar to this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Validate(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
    .&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(between(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;))
    .&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(even);
x.IsValid() &lt;span class=&quot;c&quot;&gt;// False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;But first try to write it only with functions/static methods. The predicates itself
like &lt;code&gt;smaller&lt;/code&gt;, &lt;code&gt;greater&lt;/code&gt; and so on should never be part of the validation class you create.&lt;/p&gt;
&lt;p&gt;When you create a solution in your favourite language, you can leave a message in the Disqus
chat, or sent me a notification via Twitter, I add a link to your solution here.&lt;/p&gt;
&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I started with the idea of functions as data and why it makes sense that we can pass functions
as arguments or return functions from other functions. A lambda expression is a way to
create a function on-the-fly, so we can easily pass functions as arguments or return them from
functions without explicitly defining them. Then we learned that a language like F# basically
treats all functions just as lambdas. We also have seen that multi-arguments functions didn't
exists, they are just a chain of one argument functions. This on the other hand means we can easily
partial apply any function. But not only that, it means every multi argument function is automatically
a function that can generate other functions.&lt;/p&gt;
&lt;p&gt;When we looked at C# we basically re-implemented all the ideas and we have seen how those
ideas translate to OO. You also should now know why Functional Programming is Orthogonal
to Object-Oriented programming and why closures and objects are the same.&lt;/p&gt;
&lt;p&gt;I overall hope that this introduction helped you not only in understanding functional programming
better, but also widen your view on object-oriented programming.&lt;/p&gt;
&lt;a name=&quot;reading&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lihaoyi.com/post/WhatsFunctionalProgrammingAllAbout.html&quot;&gt;What's Functional Programming All About?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536&quot;&gt;So You Want to be a Functional Programmer (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;comments&quot;&gt;&lt;/a&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val square : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.square&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val squareM : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.squareM&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val output : Map&amp;lt;int,int&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;Multiple items&lt;br /&gt;module Map&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Map&amp;lt;&amp;#39;Key,&amp;#39;Value (requires comparison)&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IComparable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;KeyValuePair&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface ICollection&amp;lt;KeyValuePair&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface IDictionary&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;new : elements:seq&amp;lt;&amp;#39;Key * &amp;#39;Value&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Add : key:&amp;#39;Key * value:&amp;#39;Value -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member ContainsKey : key:&amp;#39;Key -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;override Equals : obj -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member Remove : key:&amp;#39;Key -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map&amp;lt;_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : elements:seq&amp;lt;&amp;#39;Key * &amp;#39;Value&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val ofList : elements:(&amp;#39;Key * &amp;#39;T) list -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.ofList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val defaultArg : arg:&amp;#39;T option -&amp;gt; defaultValue:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.defaultArg&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val tryFind : key:&amp;#39;Key -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.tryFind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val map : data:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val data : Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;a list (requires comparison)&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val x : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val find : key:&amp;#39;Key -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.find&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val squares : Map&amp;lt;int,int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.squares&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val generateAdd : x:int -&amp;gt; Map&amp;lt;int,int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.generateAdd&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val i : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val add10 : Map&amp;lt;int,int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.add10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val generateAdd : x:int -&amp;gt; i:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.generateAdd&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val add10 : (int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.add10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val squareA : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.squareA&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val squareB : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.squareB&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val add&amp;#39; : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val add&amp;#39;&amp;#39; : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val x : int ref&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;Multiple items&lt;br /&gt;val ref : value:&amp;#39;T -&amp;gt; &amp;#39;T ref&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.ref&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T ref = Ref&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ref&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val add : x:int ref -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val x : int ref&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val smaller : min:&amp;#39;a -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.smaller&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val min : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val x : &amp;#39;a option (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val number : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val greater : max:&amp;#39;a -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.greater&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val max : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val is : predicate:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.is&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val predicate : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val x : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val number : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val smaller : min:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.smaller&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val greater : max:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.greater&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val combine : f:(&amp;#39;a -&amp;gt; bool) -&amp;gt; g:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.combine&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val f : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val g : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val between : min:&amp;#39;a -&amp;gt; max:&amp;#39;a -&amp;gt; (&amp;#39;a -&amp;gt; bool) (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.between&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val check : predicates:(&amp;#39;a -&amp;gt; bool) list -&amp;gt; (&amp;#39;a -&amp;gt; bool)&lt;br /&gt;&lt;br /&gt;Full name: Main.check&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val predicates : (&amp;#39;a -&amp;gt; bool) list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val isEven : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.isEven&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val evenAnd1To9 : (int -&amp;gt; bool)&lt;br /&gt;&lt;br /&gt;Full name: Main.evenAnd1To9&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;type Counter =&lt;br /&gt;&amp;#160;&amp;#160;{Current: unit -&amp;gt; int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Increment: unit -&amp;gt; unit;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Decrement: unit -&amp;gt; unit;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Counter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;Counter.Current: unit -&amp;gt; int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;type unit = Unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;Counter.Increment: unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;Counter.Decrement: unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val counter : init:int -&amp;gt; Counter&lt;br /&gt;&lt;br /&gt;Full name: Main.counter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val init : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val counter : int ref&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val count : Counter&lt;br /&gt;&lt;br /&gt;Full name: Main.count&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;Multiple items&lt;br /&gt;type CounterClass =&lt;br /&gt;&amp;#160;&amp;#160;new : init:int -&amp;gt; CounterClass&lt;br /&gt;&amp;#160;&amp;#160;member Decrement : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Increment : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Current : int&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : init:int -&amp;gt; CounterClass&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val mutable counter : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val this : CounterClass&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;member CounterClass.Current : int&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass.Current&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;member CounterClass.Increment : unit -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass.Increment&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;member CounterClass.Decrement : unit -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass.Decrement&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val count : CounterClass&lt;br /&gt;&lt;br /&gt;Full name: Main.count&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;member CounterClass.Increment : unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;member CounterClass.Decrement : unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;property CounterClass.Current: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val add : x:int * y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val curry : f:(&amp;#39;a * &amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;a -&amp;gt; y:&amp;#39;b -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: Main.curry&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val f : (&amp;#39;a * &amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val y : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val addC : (int -&amp;gt; int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.addC&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val addC10 : (int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.addC10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;val is : f:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.is&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val even : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.even&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>The Option Module</title>
   <link href="https://sidburn.github.io/blog/2016/05/11/option-module"/>
   <updated>2016-05-11T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/05/11/option-module</id>
   <content type="html">&lt;p&gt;The Option type is a well known and often used type, but at least for me, most of the
time I just used &lt;code&gt;Option.map&lt;/code&gt; and &lt;code&gt;Option.bind&lt;/code&gt; and ignored functions like &lt;code&gt;Option.exists&lt;/code&gt;,
&lt;code&gt;Option.filter&lt;/code&gt;, &lt;code&gt;Option.fold&lt;/code&gt; and so on. I spent some time with those functions to understand
when those are useful.&lt;/p&gt;
&lt;h2&gt;defaultArg&lt;/h2&gt;
&lt;p&gt;The first function i look at is actually not in the Option module. It is the &lt;code&gt;defaultArg&lt;/code&gt;
function. With &lt;code&gt;defaultArg&lt;/code&gt; we can extract an option type and provide a default value
in the case we had no value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;o2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;One think I dislike is the order of the arguments. Because the Option type is expected first
as an argument, &lt;code&gt;defaultArg&lt;/code&gt; is unsuitable for piping or composition. That's why I most often
add a &lt;code&gt;orElse&lt;/code&gt; function to the Option module myself.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 9)&quot; onmouseover=&quot;showTip(event, 'fs8', 9)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 10)&quot; onmouseover=&quot;showTip(event, 'fs9', 10)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 11)&quot; onmouseover=&quot;showTip(event, 'fs10', 11)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 12)&quot; onmouseover=&quot;showTip(event, 'fs11', 12)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 13)&quot; onmouseover=&quot;showTip(event, 'fs4', 13)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 14)&quot; onmouseover=&quot;showTip(event, 'fs11', 14)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 15)&quot; onmouseover=&quot;showTip(event, 'fs10', 15)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs5', 16)&quot; onmouseover=&quot;showTip(event, 'fs5', 16)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 17)&quot; onmouseover=&quot;showTip(event, 'fs12', 17)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 18)&quot; onmouseover=&quot;showTip(event, 'fs9', 18)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 19)&quot; onmouseover=&quot;showTip(event, 'fs7', 19)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 20)&quot; onmouseover=&quot;showTip(event, 'fs12', 20)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 21)&quot; onmouseover=&quot;showTip(event, 'fs9', 21)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;exists &amp;amp; forall&lt;/h2&gt;
&lt;p&gt;I must admit, i never looked closer at those functions. It is obvious that those functions are
&lt;em&gt;ported&lt;/em&gt; from the List/Array/Seq module. But because an option never contains more than one element,
I never looked closer to those functions. The truth is, because we know that an option only contains
either no value or a single value, the meaning of those functions just change.&lt;/p&gt;
&lt;p&gt;Let's look at some typical code with no option at all that you will sometimes have. You just
check a variable if some statement is true or false and you use that for branching.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs13', 23)&quot; onmouseover=&quot;showTip(event, 'fs13', 23)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 24)&quot; onmouseover=&quot;showTip(event, 'fs14', 24)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input smaller 10&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 25)&quot; onmouseover=&quot;showTip(event, 'fs14', 25)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Input must be smaller than 10&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input smaller 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What do you do, when x is an &lt;code&gt;option&lt;/code&gt;? Then you can use &lt;code&gt;Option.exists&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 26)&quot; onmouseover=&quot;showTip(event, 'fs15', 26)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 27)&quot; onmouseover=&quot;showTip(event, 'fs5', 27)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs15', 28)&quot; onmouseover=&quot;showTip(event, 'fs15', 28)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 29)&quot; onmouseover=&quot;showTip(event, 'fs12', 29)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 30)&quot; onmouseover=&quot;showTip(event, 'fs16', 30)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 31)&quot; onmouseover=&quot;showTip(event, 'fs17', 31)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 32)&quot; onmouseover=&quot;showTip(event, 'fs17', 32)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 33)&quot; onmouseover=&quot;showTip(event, 'fs14', 33)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input smaller 10&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 34)&quot; onmouseover=&quot;showTip(event, 'fs14', 34)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Input must be smaller than 10&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input smaller 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Generally speaking. With &lt;code&gt;Option.exists&lt;/code&gt; you can check an option for a condition. &lt;code&gt;None&lt;/code&gt;
is treated as &lt;code&gt;false&lt;/code&gt;. Naming the function &lt;code&gt;check&lt;/code&gt; or some other name than
&lt;code&gt;exists&lt;/code&gt; would probably have been a better name. With some helper functions we can enhance
the validation process.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 35)&quot; onmouseover=&quot;showTip(event, 'fs18', 35)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 36)&quot; onmouseover=&quot;showTip(event, 'fs19', 36)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 37)&quot; onmouseover=&quot;showTip(event, 'fs20', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 38)&quot; onmouseover=&quot;showTip(event, 'fs20', 38)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 39)&quot; onmouseover=&quot;showTip(event, 'fs19', 39)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 40)&quot; onmouseover=&quot;showTip(event, 'fs21', 40)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 41)&quot; onmouseover=&quot;showTip(event, 'fs22', 41)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 42)&quot; onmouseover=&quot;showTip(event, 'fs20', 42)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 43)&quot; onmouseover=&quot;showTip(event, 'fs20', 43)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 44)&quot; onmouseover=&quot;showTip(event, 'fs22', 44)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 45)&quot; onmouseover=&quot;showTip(event, 'fs15', 45)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 46)&quot; onmouseover=&quot;showTip(event, 'fs5', 46)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs15', 47)&quot; onmouseover=&quot;showTip(event, 'fs15', 47)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 48)&quot; onmouseover=&quot;showTip(event, 'fs12', 48)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 49)&quot; onmouseover=&quot;showTip(event, 'fs16', 49)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 50)&quot; onmouseover=&quot;showTip(event, 'fs21', 50)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 51)&quot; onmouseover=&quot;showTip(event, 'fs15', 51)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 52)&quot; onmouseover=&quot;showTip(event, 'fs12', 52)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 53)&quot; onmouseover=&quot;showTip(event, 'fs16', 53)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 55)&quot; onmouseover=&quot;showTip(event, 'fs14', 55)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input between 0 and 10&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 56)&quot; onmouseover=&quot;showTip(event, 'fs14', 56)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input not valid&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input between 0 and 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Option.forall&lt;/code&gt; is basically the same, only that &lt;code&gt;None&lt;/code&gt; is threaten as &lt;code&gt;true&lt;/code&gt; instead of &lt;code&gt;false&lt;/code&gt;.
But I must admit, I cannot come up with a useful example for &lt;code&gt;forall&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;filter&lt;/h2&gt;
&lt;p&gt;In my last example I added a second check. While two checks are still somehow okay in terms of
readability it can become unhandy fast. Wouldn't it be better if we could chain the operations?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; gives us exactly this ability. Instead of returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; it just returns
an option again. When the predicate we provided returns &lt;code&gt;true&lt;/code&gt; we just get back the original value
unchanged. Otherwise we get &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 57)&quot; onmouseover=&quot;showTip(event, 'fs23', 57)&quot; class=&quot;f&quot;&gt;isValid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 58)&quot; onmouseover=&quot;showTip(event, 'fs24', 58)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 59)&quot; onmouseover=&quot;showTip(event, 'fs24', 59)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 60)&quot; onmouseover=&quot;showTip(event, 'fs12', 60)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 61)&quot; onmouseover=&quot;showTip(event, 'fs16', 61)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 62)&quot; onmouseover=&quot;showTip(event, 'fs25', 62)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 63)&quot; onmouseover=&quot;showTip(event, 'fs17', 63)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 64)&quot; onmouseover=&quot;showTip(event, 'fs17', 64)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 65)&quot; onmouseover=&quot;showTip(event, 'fs15', 65)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs5', 66)&quot; onmouseover=&quot;showTip(event, 'fs5', 66)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 67)&quot; onmouseover=&quot;showTip(event, 'fs12', 67)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 68)&quot; onmouseover=&quot;showTip(event, 'fs26', 68)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 69)&quot; onmouseover=&quot;showTip(event, 'fs21', 69)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 70)&quot; onmouseover=&quot;showTip(event, 'fs12', 70)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 71)&quot; onmouseover=&quot;showTip(event, 'fs26', 71)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 72)&quot; onmouseover=&quot;showTip(event, 'fs18', 72)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 73)&quot; onmouseover=&quot;showTip(event, 'fs12', 73)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 74)&quot; onmouseover=&quot;showTip(event, 'fs26', 74)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 75)&quot; onmouseover=&quot;showTip(event, 'fs25', 75)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs15', 76)&quot; onmouseover=&quot;showTip(event, 'fs15', 76)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 77)&quot; onmouseover=&quot;showTip(event, 'fs23', 77)&quot; class=&quot;f&quot;&gt;isValid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 78)&quot; onmouseover=&quot;showTip(event, 'fs14', 78)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input between 0 and 10 and even&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 79)&quot; onmouseover=&quot;showTip(event, 'fs14', 79)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;invalid input&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input between 0 and 10 and even&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also can use &lt;code&gt;Option.filter&lt;/code&gt; to easily turn a type into an option based on a predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 80)&quot; onmouseover=&quot;showTip(event, 'fs5', 80)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 81)&quot; onmouseover=&quot;showTip(event, 'fs12', 81)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 82)&quot; onmouseover=&quot;showTip(event, 'fs26', 82)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 83)&quot; onmouseover=&quot;showTip(event, 'fs25', 83)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs5', 84)&quot; onmouseover=&quot;showTip(event, 'fs5', 84)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 85)&quot; onmouseover=&quot;showTip(event, 'fs12', 85)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 86)&quot; onmouseover=&quot;showTip(event, 'fs26', 86)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 87)&quot; onmouseover=&quot;showTip(event, 'fs25', 87)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;fold&lt;/h2&gt;
&lt;p&gt;I started with &lt;code&gt;defaultArg&lt;/code&gt; and implemented &lt;code&gt;orElse&lt;/code&gt;. But overall we could replace those with
&lt;code&gt;fold&lt;/code&gt;. Besides the option itself, &lt;code&gt;fold&lt;/code&gt; expects two additional arguments. A function and an
accumulator. &lt;code&gt;fold&lt;/code&gt; either executes the function or it returns the accumulator as the default value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 88)&quot; onmouseover=&quot;showTip(event, 'fs27', 88)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 89)&quot; onmouseover=&quot;showTip(event, 'fs28', 89)&quot; class=&quot;i&quot;&gt;def&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 90)&quot; onmouseover=&quot;showTip(event, 'fs11', 90)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 91)&quot; onmouseover=&quot;showTip(event, 'fs12', 91)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 92)&quot; onmouseover=&quot;showTip(event, 'fs29', 92)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span onmouseout=&quot;hideTip(event, 'fs10', 93)&quot; onmouseover=&quot;showTip(event, 'fs10', 93)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 94)&quot; onmouseover=&quot;showTip(event, 'fs10', 94)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs28', 95)&quot; onmouseover=&quot;showTip(event, 'fs28', 95)&quot; class=&quot;i&quot;&gt;def&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 96)&quot; onmouseover=&quot;showTip(event, 'fs11', 96)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In general the idea of &lt;code&gt;fold&lt;/code&gt; is that we can return any other type that we want. &lt;code&gt;fold&lt;/code&gt; is
a general way to convert types. If that sounds a lot like &lt;code&gt;map&lt;/code&gt;. The difference is that &lt;code&gt;map&lt;/code&gt;
still only converts the wrapped type and we still get an option back. But with &lt;code&gt;fold&lt;/code&gt; we
directly get the wrapped type back. It just means that whenever you use a &lt;code&gt;map&lt;/code&gt; and then
&lt;code&gt;orElse&lt;/code&gt;. You also could use &lt;code&gt;fold&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 97)&quot; onmouseover=&quot;showTip(event, 'fs30', 97)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 98)&quot; onmouseover=&quot;showTip(event, 'fs17', 98)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 99)&quot; onmouseover=&quot;showTip(event, 'fs17', 99)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 100)&quot; onmouseover=&quot;showTip(event, 'fs17', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs5', 101)&quot; onmouseover=&quot;showTip(event, 'fs5', 101)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 102)&quot; onmouseover=&quot;showTip(event, 'fs12', 102)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs31', 103)&quot; onmouseover=&quot;showTip(event, 'fs31', 103)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 104)&quot; onmouseover=&quot;showTip(event, 'fs30', 104)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 105)&quot; onmouseover=&quot;showTip(event, 'fs12', 105)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 106)&quot; onmouseover=&quot;showTip(event, 'fs9', 106)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs5', 107)&quot; onmouseover=&quot;showTip(event, 'fs5', 107)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 108)&quot; onmouseover=&quot;showTip(event, 'fs12', 108)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 109)&quot; onmouseover=&quot;showTip(event, 'fs29', 109)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span onmouseout=&quot;hideTip(event, 'fs17', 110)&quot; onmouseover=&quot;showTip(event, 'fs17', 110)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 111)&quot; onmouseover=&quot;showTip(event, 'fs30', 111)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 112)&quot; onmouseover=&quot;showTip(event, 'fs17', 112)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Up to this point I always ignored the accumulator argument, and just used the accumulator
as the default argument. But in general it means whenever you want to use a function
where one argument is an option you could probably use &lt;code&gt;fold&lt;/code&gt;. In general &lt;code&gt;fold&lt;/code&gt; works
nicely together with binary functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 113)&quot; onmouseover=&quot;showTip(event, 'fs32', 113)&quot; class=&quot;f&quot;&gt;swap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 114)&quot; onmouseover=&quot;showTip(event, 'fs33', 114)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 115)&quot; onmouseover=&quot;showTip(event, 'fs34', 115)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 116)&quot; onmouseover=&quot;showTip(event, 'fs35', 116)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 117)&quot; onmouseover=&quot;showTip(event, 'fs33', 117)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 118)&quot; onmouseover=&quot;showTip(event, 'fs35', 118)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 119)&quot; onmouseover=&quot;showTip(event, 'fs34', 119)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs12', 120)&quot; onmouseover=&quot;showTip(event, 'fs12', 120)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 121)&quot; onmouseover=&quot;showTip(event, 'fs29', 121)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 122)&quot; onmouseover=&quot;showTip(event, 'fs36', 122)&quot; class=&quot;f&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 123)&quot; onmouseover=&quot;showTip(event, 'fs5', 123)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 124)&quot; onmouseover=&quot;showTip(event, 'fs12', 124)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 125)&quot; onmouseover=&quot;showTip(event, 'fs29', 125)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 126)&quot; onmouseover=&quot;showTip(event, 'fs37', 126)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 127)&quot; onmouseover=&quot;showTip(event, 'fs5', 127)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 128)&quot; onmouseover=&quot;showTip(event, 'fs12', 128)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 129)&quot; onmouseover=&quot;showTip(event, 'fs29', 129)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 130)&quot; onmouseover=&quot;showTip(event, 'fs36', 130)&quot; class=&quot;f&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 131)&quot; onmouseover=&quot;showTip(event, 'fs7', 131)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 132)&quot; onmouseover=&quot;showTip(event, 'fs12', 132)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 133)&quot; onmouseover=&quot;showTip(event, 'fs29', 133)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 134)&quot; onmouseover=&quot;showTip(event, 'fs37', 134)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 135)&quot; onmouseover=&quot;showTip(event, 'fs7', 135)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 136)&quot; onmouseover=&quot;showTip(event, 'fs12', 136)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 137)&quot; onmouseover=&quot;showTip(event, 'fs29', 137)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 138)&quot; onmouseover=&quot;showTip(event, 'fs5', 138)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 139)&quot; onmouseover=&quot;showTip(event, 'fs12', 139)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 140)&quot; onmouseover=&quot;showTip(event, 'fs29', 140)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 141)&quot; onmouseover=&quot;showTip(event, 'fs7', 141)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 142)&quot; onmouseover=&quot;showTip(event, 'fs12', 142)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 143)&quot; onmouseover=&quot;showTip(event, 'fs29', 143)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 144)&quot; onmouseover=&quot;showTip(event, 'fs32', 144)&quot; class=&quot;f&quot;&gt;swap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 145)&quot; onmouseover=&quot;showTip(event, 'fs38', 145)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 146)&quot; onmouseover=&quot;showTip(event, 'fs39', 146)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;) &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 147)&quot; onmouseover=&quot;showTip(event, 'fs5', 147)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// &amp;quot;xxxxx&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 148)&quot; onmouseover=&quot;showTip(event, 'fs12', 148)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 149)&quot; onmouseover=&quot;showTip(event, 'fs29', 149)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 150)&quot; onmouseover=&quot;showTip(event, 'fs32', 150)&quot; class=&quot;f&quot;&gt;swap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 151)&quot; onmouseover=&quot;showTip(event, 'fs38', 151)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 152)&quot; onmouseover=&quot;showTip(event, 'fs39', 152)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;) &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 153)&quot; onmouseover=&quot;showTip(event, 'fs7', 153)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// &amp;quot;x&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 154)&quot; onmouseover=&quot;showTip(event, 'fs12', 154)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 155)&quot; onmouseover=&quot;showTip(event, 'fs29', 155)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 156)&quot; onmouseover=&quot;showTip(event, 'fs40', 156)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 157)&quot; onmouseover=&quot;showTip(event, 'fs41', 157)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 158)&quot; onmouseover=&quot;showTip(event, 'fs5', 158)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;])   &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 159)&quot; onmouseover=&quot;showTip(event, 'fs12', 159)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 160)&quot; onmouseover=&quot;showTip(event, 'fs29', 160)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 161)&quot; onmouseover=&quot;showTip(event, 'fs40', 161)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 162)&quot; onmouseover=&quot;showTip(event, 'fs41', 162)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 163)&quot; onmouseover=&quot;showTip(event, 'fs7', 163)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)           &lt;span class=&quot;c&quot;&gt;// [1;2;3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We either execute our function with two arguments, or if the second argument is a &lt;code&gt;None&lt;/code&gt; we return
the first argument as the default value. The arguments itself don't need to be of the same types.&lt;/p&gt;
&lt;h2&gt;Validation&lt;/h2&gt;
&lt;p&gt;With very few helper functions we could built a small validation framework that uses the option type.
Most of them are just other names instead of &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;36: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Monadic functions -- Converter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 164)&quot; onmouseover=&quot;showTip(event, 'fs42', 164)&quot; class=&quot;f&quot;&gt;toInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 165)&quot; onmouseover=&quot;showTip(event, 'fs43', 165)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 166)&quot; onmouseover=&quot;showTip(event, 'fs44', 166)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 167)&quot; onmouseover=&quot;showTip(event, 'fs45', 167)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 168)&quot; onmouseover=&quot;showTip(event, 'fs43', 168)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 169)&quot; onmouseover=&quot;showTip(event, 'fs7', 169)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs17', 170)&quot; onmouseover=&quot;showTip(event, 'fs17', 170)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 171)&quot; onmouseover=&quot;showTip(event, 'fs5', 171)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 172)&quot; onmouseover=&quot;showTip(event, 'fs17', 172)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Helper Functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 173)&quot; onmouseover=&quot;showTip(event, 'fs46', 173)&quot; class=&quot;f&quot;&gt;orReturn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 174)&quot; onmouseover=&quot;showTip(event, 'fs10', 174)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 175)&quot; onmouseover=&quot;showTip(event, 'fs12', 175)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 176)&quot; onmouseover=&quot;showTip(event, 'fs29', 176)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span onmouseout=&quot;hideTip(event, 'fs10', 177)&quot; onmouseover=&quot;showTip(event, 'fs10', 177)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 178)&quot; onmouseover=&quot;showTip(event, 'fs10', 178)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs10', 179)&quot; onmouseover=&quot;showTip(event, 'fs10', 179)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 180)&quot; onmouseover=&quot;showTip(event, 'fs47', 180)&quot; class=&quot;f&quot;&gt;whenValid&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 181)&quot; onmouseover=&quot;showTip(event, 'fs12', 181)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs31', 182)&quot; onmouseover=&quot;showTip(event, 'fs31', 182)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 183)&quot; onmouseover=&quot;showTip(event, 'fs48', 183)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 184)&quot; onmouseover=&quot;showTip(event, 'fs12', 184)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 185)&quot; onmouseover=&quot;showTip(event, 'fs26', 185)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 186)&quot; onmouseover=&quot;showTip(event, 'fs49', 186)&quot; class=&quot;f&quot;&gt;convert&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 187)&quot; onmouseover=&quot;showTip(event, 'fs12', 187)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs50', 188)&quot; onmouseover=&quot;showTip(event, 'fs50', 188)&quot; class=&quot;f&quot;&gt;bind&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 189)&quot; onmouseover=&quot;showTip(event, 'fs51', 189)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 190)&quot; onmouseover=&quot;showTip(event, 'fs52', 190)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 191)&quot; onmouseover=&quot;showTip(event, 'fs53', 191)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 192)&quot; onmouseover=&quot;showTip(event, 'fs10', 192)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 193)&quot; onmouseover=&quot;showTip(event, 'fs5', 193)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 194)&quot; onmouseover=&quot;showTip(event, 'fs10', 194)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 195)&quot; onmouseover=&quot;showTip(event, 'fs48', 195)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 196)&quot; onmouseover=&quot;showTip(event, 'fs52', 196)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 197)&quot; onmouseover=&quot;showTip(event, 'fs12', 197)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 198)&quot; onmouseover=&quot;showTip(event, 'fs16', 198)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 199)&quot; onmouseover=&quot;showTip(event, 'fs53', 199)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Validation Functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 200)&quot; onmouseover=&quot;showTip(event, 'fs18', 200)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 201)&quot; onmouseover=&quot;showTip(event, 'fs19', 201)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 202)&quot; onmouseover=&quot;showTip(event, 'fs20', 202)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 203)&quot; onmouseover=&quot;showTip(event, 'fs20', 203)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 204)&quot; onmouseover=&quot;showTip(event, 'fs19', 204)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 205)&quot; onmouseover=&quot;showTip(event, 'fs21', 205)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 206)&quot; onmouseover=&quot;showTip(event, 'fs22', 206)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 207)&quot; onmouseover=&quot;showTip(event, 'fs20', 207)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 208)&quot; onmouseover=&quot;showTip(event, 'fs20', 208)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 209)&quot; onmouseover=&quot;showTip(event, 'fs22', 209)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 210)&quot; onmouseover=&quot;showTip(event, 'fs54', 210)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 211)&quot; onmouseover=&quot;showTip(event, 'fs19', 211)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 212)&quot; onmouseover=&quot;showTip(event, 'fs22', 212)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 213)&quot; onmouseover=&quot;showTip(event, 'fs51', 213)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 214)&quot; onmouseover=&quot;showTip(event, 'fs21', 214)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 215)&quot; onmouseover=&quot;showTip(event, 'fs19', 215)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 216)&quot; onmouseover=&quot;showTip(event, 'fs18', 216)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 217)&quot; onmouseover=&quot;showTip(event, 'fs22', 217)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;))
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 218)&quot; onmouseover=&quot;showTip(event, 'fs55', 218)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 219)&quot; onmouseover=&quot;showTip(event, 'fs17', 219)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 220)&quot; onmouseover=&quot;showTip(event, 'fs17', 220)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Mapping functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 221)&quot; onmouseover=&quot;showTip(event, 'fs30', 221)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 222)&quot; onmouseover=&quot;showTip(event, 'fs17', 222)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 223)&quot; onmouseover=&quot;showTip(event, 'fs17', 223)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 224)&quot; onmouseover=&quot;showTip(event, 'fs17', 224)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 225)&quot; onmouseover=&quot;showTip(event, 'fs56', 225)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 226)&quot; onmouseover=&quot;showTip(event, 'fs57', 226)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs57', 227)&quot; onmouseover=&quot;showTip(event, 'fs57', 227)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 228)&quot; onmouseover=&quot;showTip(event, 'fs49', 228)&quot; class=&quot;f&quot;&gt;convert&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 229)&quot; onmouseover=&quot;showTip(event, 'fs42', 229)&quot; class=&quot;f&quot;&gt;toInt&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 230)&quot; onmouseover=&quot;showTip(event, 'fs48', 230)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs54', 231)&quot; onmouseover=&quot;showTip(event, 'fs54', 231)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 232)&quot; onmouseover=&quot;showTip(event, 'fs48', 232)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 233)&quot; onmouseover=&quot;showTip(event, 'fs55', 233)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 234)&quot; onmouseover=&quot;showTip(event, 'fs47', 234)&quot; class=&quot;f&quot;&gt;whenValid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 235)&quot; onmouseover=&quot;showTip(event, 'fs30', 235)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 236)&quot; onmouseover=&quot;showTip(event, 'fs46', 236)&quot; class=&quot;f&quot;&gt;orReturn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs56', 237)&quot; onmouseover=&quot;showTip(event, 'fs56', 237)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 238)&quot; onmouseover=&quot;showTip(event, 'fs5', 238)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 0   -- not valid int&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 239)&quot; onmouseover=&quot;showTip(event, 'fs56', 239)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 240)&quot; onmouseover=&quot;showTip(event, 'fs5', 240)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 241)&quot; onmouseover=&quot;showTip(event, 'fs56', 241)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 242)&quot; onmouseover=&quot;showTip(event, 'fs5', 242)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// 0   -- not even&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 243)&quot; onmouseover=&quot;showTip(event, 'fs56', 243)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 244)&quot; onmouseover=&quot;showTip(event, 'fs5', 244)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 245)&quot; onmouseover=&quot;showTip(event, 'fs56', 245)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 246)&quot; onmouseover=&quot;showTip(event, 'fs5', 246)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;102&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 0   -- greater 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val o1 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.o1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val defaultArg : arg:&amp;#39;T option -&amp;gt; defaultValue:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.defaultArg&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val o2 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.o2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val orElse : x:&amp;#39;a -&amp;gt; o:&amp;#39;a option -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.Option.orElse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val o : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;Multiple items&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Main&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val input : int&lt;br /&gt;&lt;br /&gt;Full name: Main.input&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val input : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.input&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val exists : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; option:&amp;#39;T option -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.exists&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val smaller : min:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.smaller&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val min : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val x : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val greater : max:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.greater&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val max : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val isValid : x:&amp;#39;a option -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.isValid&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val x : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val isEven : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.isEven&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;T option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val orElse : def:&amp;#39;a -&amp;gt; o:&amp;#39;a option -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.orElse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val def : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val square : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.square&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val swap : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;b -&amp;gt; y:&amp;#39;a -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: Main.swap&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val x : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val y : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val min : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.min&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;Multiple items&lt;br /&gt;type String =&lt;br /&gt;&amp;#160;&amp;#160;new : value:char -&amp;gt; string + 7 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Chars : int -&amp;gt; char&lt;br /&gt;&amp;#160;&amp;#160;member Clone : unit -&amp;gt; obj&lt;br /&gt;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Contains : value:string -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member EndsWith : value:string -&amp;gt; bool + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member GetEnumerator : unit -&amp;gt; CharEnumerator&lt;br /&gt;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.String&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;String(value: nativeptr&amp;lt;char&amp;gt;) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;sbyte&amp;gt;) : unit&lt;br /&gt;String(value: char []) : unit&lt;br /&gt;String(c: char, count: int) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;char&amp;gt;, startIndex: int, length: int) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;sbyte&amp;gt;, startIndex: int, length: int) : unit&lt;br /&gt;String(value: char [], startIndex: int, length: int) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;sbyte&amp;gt;, startIndex: int, length: int, enc: Text.Encoding) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val replicate : count:int -&amp;gt; str:string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val append : list1:&amp;#39;T list -&amp;gt; list2:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.append&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val toInt : str:string -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.toInt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;Int32.TryParse(s: string, result: byref&amp;lt;int&amp;gt;) : bool&lt;br /&gt;Int32.TryParse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider, result: byref&amp;lt;int&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val orReturn : x:&amp;#39;a -&amp;gt; (&amp;#39;a option -&amp;gt; &amp;#39;a)&lt;br /&gt;&lt;br /&gt;Full name: Main.orReturn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val whenValid : ((&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; &amp;#39;a option -&amp;gt; &amp;#39;b option)&lt;br /&gt;&lt;br /&gt;Full name: Main.whenValid&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val is : ((&amp;#39;a -&amp;gt; bool) -&amp;gt; &amp;#39;a option -&amp;gt; &amp;#39;a option)&lt;br /&gt;&lt;br /&gt;Full name: Main.is&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val convert : ((&amp;#39;a -&amp;gt; &amp;#39;b option) -&amp;gt; &amp;#39;a option -&amp;gt; &amp;#39;b option)&lt;br /&gt;&lt;br /&gt;Full name: Main.convert&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val bind : binder:(&amp;#39;T -&amp;gt; &amp;#39;U option) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.bind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val combine : f:(&amp;#39;a -&amp;gt; bool) -&amp;gt; g:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.combine&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val f : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val g : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val between : min:&amp;#39;a -&amp;gt; max:&amp;#39;a -&amp;gt; (&amp;#39;a -&amp;gt; bool) (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.between&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val even : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.even&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val transformInput : input:string option -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.transformInput&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val input : string option&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CPS fold -- fold with early exit</title>
   <link href="https://sidburn.github.io/blog/2016/05/07/cps-fold"/>
   <updated>2016-05-07T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/05/07/cps-fold</id>
   <content type="html">&lt;p&gt;The most general function to traverse a data-structures is the &lt;code&gt;fold&lt;/code&gt; function. But &lt;code&gt;fold&lt;/code&gt; has one
problem that is sometimes not optimal. It always traverses the whole data-structure and we cannot
abort the recusion early.&lt;/p&gt;
&lt;p&gt;But sometimes, that is exactly what we want to do. For example when we want to search for a specific
element in a list, when we found it, we don't want to go through the remaing list. When we want to
check if all elements in a list satisfy a specific predicate then we also can stop on the first
element that does not satisfy our predicate. And dozens of other cases where an early abort could
be helpful.&lt;/p&gt;
&lt;p&gt;We always can write our own recursive functions for those cases, but then we must ensure that we get
tail-recursion right. Wouldn't it be better if we could abstract it just like fold? In this article
I explain how to write a CPS fold that allows us to do this.&lt;/p&gt;
&lt;h2&gt;Continuation&lt;/h2&gt;
&lt;p&gt;The important concept in implementing a CPS fold is a so-called &lt;em&gt;Continuation
function&lt;/em&gt; or often just named CPS (Continuation-Passing Style). The idea of CPS is that we just
pass an additional function as an argument that the user can call to explicitly recurs. This way the
user of the CPS fold is in control of the recursion. The user then can decide if he wants to continue
traversing a data-structure or return a value instead. But before we look into how we implement
the function, let's see some use cases in how we use such a function.&lt;/p&gt;
&lt;p&gt;We name our function &lt;code&gt;foldk&lt;/code&gt;. Besides that, &lt;code&gt;foldk&lt;/code&gt; looks nearly the same as &lt;code&gt;fold&lt;/code&gt;,
the only difference is that the function we pass to &lt;code&gt;foldk&lt;/code&gt; now receives three arguments instead
of just two.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 20)&quot; onmouseover=&quot;showTip(event, 'fs10', 20)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 21)&quot; onmouseover=&quot;showTip(event, 'fs11', 21)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 22)&quot; onmouseover=&quot;showTip(event, 'fs10', 22)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 23)&quot; onmouseover=&quot;showTip(event, 'fs11', 23)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5050&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 24)&quot; onmouseover=&quot;showTip(event, 'fs2', 24)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt;     (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 25)&quot; onmouseover=&quot;showTip(event, 'fs10', 25)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 26)&quot; onmouseover=&quot;showTip(event, 'fs11', 26)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 27)&quot; onmouseover=&quot;showTip(event, 'fs12', 27)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 28)&quot; onmouseover=&quot;showTip(event, 'fs10', 28)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 29)&quot; onmouseover=&quot;showTip(event, 'fs11', 29)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we provide the same code then we already see how it differs. &lt;code&gt;fold&lt;/code&gt; always runs through all
elements of the list. It computes the accumulator and does all recursion on itself.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foldk&lt;/code&gt; on the other hand don't do any recursion on it's own. &lt;code&gt;foldk&lt;/code&gt; always just do a single
step. It just extract one element from our list and calls the folder function with the provided
&lt;code&gt;acc&lt;/code&gt; and the first element of our list.&lt;/p&gt;
&lt;p&gt;That's why we get &lt;code&gt;1&lt;/code&gt; as a result. It just calculates &lt;code&gt;acc + x&lt;/code&gt; or &lt;code&gt;0 + 1&lt;/code&gt; in the above example
and then it immediately ends. We must explicitly tell &lt;code&gt;foldk&lt;/code&gt; when it should recurs.&lt;/p&gt;
&lt;p&gt;That's the reason why we have the third argument. &lt;code&gt;k&lt;/code&gt; is the continuation function. &lt;code&gt;k&lt;/code&gt; expects
the next accumulator. When we call &lt;code&gt;k&lt;/code&gt; we start recurring again on the next element in our list.
The primary difference to &lt;code&gt;fold&lt;/code&gt; is that the user of &lt;code&gt;foldk&lt;/code&gt; has explicit control when
recurring should happen.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 30)&quot; onmouseover=&quot;showTip(event, 'fs2', 30)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 31)&quot; onmouseover=&quot;showTip(event, 'fs10', 31)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 32)&quot; onmouseover=&quot;showTip(event, 'fs11', 32)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 33)&quot; onmouseover=&quot;showTip(event, 'fs12', 33)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 34)&quot; onmouseover=&quot;showTip(event, 'fs12', 34)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs10', 35)&quot; onmouseover=&quot;showTip(event, 'fs10', 35)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 36)&quot; onmouseover=&quot;showTip(event, 'fs11', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5050&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we want to traverse all elements of our list, then we just call &lt;code&gt;k&lt;/code&gt; with the next &lt;em&gt;accumulator&lt;/em&gt;.
But if we wanted to do that, we also could just use &lt;code&gt;fold&lt;/code&gt;. So here is a more practical example
in comparison to &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 37)&quot; onmouseover=&quot;showTip(event, 'fs8', 37)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 38)&quot; onmouseover=&quot;showTip(event, 'fs9', 38)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 39)&quot; onmouseover=&quot;showTip(event, 'fs10', 39)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 40)&quot; onmouseover=&quot;showTip(event, 'fs11', 40)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs11', 41)&quot; onmouseover=&quot;showTip(event, 'fs11', 41)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 42)&quot; onmouseover=&quot;showTip(event, 'fs10', 42)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 43)&quot; onmouseover=&quot;showTip(event, 'fs11', 43)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 44)&quot; onmouseover=&quot;showTip(event, 'fs10', 44)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 45)&quot; onmouseover=&quot;showTip(event, 'fs2', 45)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 46)&quot; onmouseover=&quot;showTip(event, 'fs10', 46)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 47)&quot; onmouseover=&quot;showTip(event, 'fs11', 47)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 48)&quot; onmouseover=&quot;showTip(event, 'fs12', 48)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs11', 49)&quot; onmouseover=&quot;showTip(event, 'fs11', 49)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 50)&quot; onmouseover=&quot;showTip(event, 'fs12', 50)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs10', 51)&quot; onmouseover=&quot;showTip(event, 'fs10', 51)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 52)&quot; onmouseover=&quot;showTip(event, 'fs11', 52)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 53)&quot; onmouseover=&quot;showTip(event, 'fs10', 53)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we are getting different results. What &lt;code&gt;fold&lt;/code&gt; did was: &lt;em&gt;Pick every element that is smaller
than 11 and add them together.&lt;/em&gt; &lt;code&gt;foldk&lt;/code&gt; on the other hand runs as long all elements are smaller
than &lt;code&gt;11&lt;/code&gt; and only add those together it saw up to this point. As soon he encounter a bigger
number it will stop traversing the list. &lt;code&gt;fold&lt;/code&gt; calculated &lt;code&gt;5 + 10 + 10 + 5&lt;/code&gt; while &lt;code&gt;foldk&lt;/code&gt;
just summed up the first two elements &lt;code&gt;5 + 10&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Implementing foldk&lt;/h2&gt;
&lt;p&gt;Implementing &lt;code&gt;foldk&lt;/code&gt; is actually pretty easy, let's go over it:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 6)&quot; onmouseover=&quot;showTip(event, 'fs5', 6)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | []    &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 10)&quot; onmouseover=&quot;showTip(event, 'fs3', 10)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 11)&quot; onmouseover=&quot;showTip(event, 'fs4', 11)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 12)&quot; onmouseover=&quot;showTip(event, 'fs6', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 14)&quot; onmouseover=&quot;showTip(event, 'fs2', 14)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 15)&quot; onmouseover=&quot;showTip(event, 'fs3', 15)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 16)&quot; onmouseover=&quot;showTip(event, 'fs7', 16)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 17)&quot; onmouseover=&quot;showTip(event, 'fs5', 17)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;First we start with the general pattern to traverse a list. We test if we either have an empty list
or we extract the first element of our list. Then we think what we do in both cases.&lt;/p&gt;
&lt;p&gt;The empty case is pretty easy. When we reached the end of our list, then we cannot advance forward
anymore, that means we just return the accumulator &lt;code&gt;acc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise when we have an element we need to do something with every element. That is what our &lt;code&gt;f&lt;/code&gt;
is for. So we just call &lt;code&gt;f acc x ???&lt;/code&gt;. In a normal &lt;code&gt;fold&lt;/code&gt; we do the recursion inside &lt;code&gt;fold&lt;/code&gt;, but
in &lt;code&gt;foldk&lt;/code&gt; we want to give the user the ability to recurs, that is why our third argument
is now a continuation function &lt;code&gt;(fun lacc -&amp;gt; foldk f lacc xs)&lt;/code&gt;. The Continuation function expects
the next accumulator. As you can see, when the user decides to call &lt;code&gt;k&lt;/code&gt;, it just calls &lt;code&gt;foldk&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;Let's go over a simple example to see how it works:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 54)&quot; onmouseover=&quot;showTip(event, 'fs2', 54)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 55)&quot; onmouseover=&quot;showTip(event, 'fs10', 55)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 56)&quot; onmouseover=&quot;showTip(event, 'fs11', 56)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 57)&quot; onmouseover=&quot;showTip(event, 'fs12', 57)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 58)&quot; onmouseover=&quot;showTip(event, 'fs12', 58)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs10', 59)&quot; onmouseover=&quot;showTip(event, 'fs10', 59)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 60)&quot; onmouseover=&quot;showTip(event, 'fs11', 60)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The result of our function is &lt;code&gt;15&lt;/code&gt;. Let's see step-by-step how we got this result. When we call &lt;code&gt;foldk&lt;/code&gt;
we start with &lt;code&gt;0&lt;/code&gt; as our &lt;code&gt;acc&lt;/code&gt; and the list &lt;code&gt;[1;2;3;4;5]&lt;/code&gt; as our starting list. As a reminder this is
&lt;code&gt;foldk&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 6)&quot; onmouseover=&quot;showTip(event, 'fs5', 6)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | []    &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 10)&quot; onmouseover=&quot;showTip(event, 'fs3', 10)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 11)&quot; onmouseover=&quot;showTip(event, 'fs4', 11)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 12)&quot; onmouseover=&quot;showTip(event, 'fs6', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 14)&quot; onmouseover=&quot;showTip(event, 'fs2', 14)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 15)&quot; onmouseover=&quot;showTip(event, 'fs3', 15)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 16)&quot; onmouseover=&quot;showTip(event, 'fs7', 16)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 17)&quot; onmouseover=&quot;showTip(event, 'fs5', 17)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When i write &lt;code&gt;f acc x k&lt;/code&gt; in the code section i refer to the whole right hand side of &lt;code&gt;x::xs&lt;/code&gt; that
means &lt;code&gt;f acc x (fun lacc -&amp;gt; foldk f lacc xs)&lt;/code&gt;. I just use &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;x::xs&lt;/code&gt; to represent the
pattern matching in the &lt;code&gt;foldk&lt;/code&gt; function.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Code&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Evaluation / Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 0 [1..5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;First call, we start foldk&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No, we did not reach the end&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;1::[2;3;4;5]&lt;/code&gt; / Yes, it maches&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 0 1 (fun lacc -&amp;gt; foldk f lacc [2;3;4;5])&lt;/code&gt; / We now execute &lt;code&gt;f&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (acc + x)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (0 + 1)&lt;/code&gt; / &lt;code&gt;k&lt;/code&gt; is the lambda function passed to &lt;code&gt;f&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 1 [2;3;4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;2::[3;4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 1 2 (fun lacc -&amp;gt; foldk f lacc [3;4;5])&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (acc + x)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (1 + 2)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 3 [3;4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;3::[4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 3 3 (fun lacc -&amp;gt; foldk f lacc [4;5])&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (acc + x)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (3 + 3)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 6 [4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;4::[5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 6 4 (fun lacc -&amp;gt; foldk f lacc [5])&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (acc + x)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (6 + 4)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 10 [5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;5::[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 10 5 (fun lacc -&amp;gt; foldk f lacc [])&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (acc + x)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (10 + 5)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 15 []&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[] -&amp;gt; acc&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[] -&amp;gt; 15&lt;/code&gt; / Yes, we just return &lt;code&gt;acc&lt;/code&gt; (15)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And one-more time with an example that stops earlier:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 61)&quot; onmouseover=&quot;showTip(event, 'fs2', 61)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 62)&quot; onmouseover=&quot;showTip(event, 'fs10', 62)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 63)&quot; onmouseover=&quot;showTip(event, 'fs11', 63)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 64)&quot; onmouseover=&quot;showTip(event, 'fs12', 64)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 65)&quot; onmouseover=&quot;showTip(event, 'fs11', 65)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 66)&quot; onmouseover=&quot;showTip(event, 'fs12', 66)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs10', 67)&quot; onmouseover=&quot;showTip(event, 'fs10', 67)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 68)&quot; onmouseover=&quot;showTip(event, 'fs11', 68)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 69)&quot; onmouseover=&quot;showTip(event, 'fs10', 69)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Code&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Evaluation / Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 0 [1..5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;First call, we start foldk&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;1::[2;3;4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 0 1 (fun lacc -&amp;gt; foldk f lacc [2;3;4;5])&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x &amp;lt; 3&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;1 &amp;lt; 3&lt;/code&gt; / True, then branch&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (acc + x)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (0 + 1)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 1 [2;3;4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;2::[3;4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 1 2 (fun lacc -&amp;gt; foldk f lacc [3;4;5])&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x &amp;lt; 3&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;2 &amp;lt; 3&lt;/code&gt; / True, then branch&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (acc + x)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;k (1 + 2)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;foldk f 3 [3;4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x::xs&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;3::[4;5]&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f acc x k&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;f 3 3 (fun lacc -&amp;gt; foldk f lacc [4;5])&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;x &amp;lt; 3&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;3 &amp;lt; 3&lt;/code&gt; / False, else branch&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;else acc&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;code&gt;else 3&lt;/code&gt; The pattern match on &lt;code&gt;x::xs&lt;/code&gt; now returns 3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Implementing some other functions&lt;/h2&gt;
&lt;p&gt;Now, let's use our &lt;code&gt;foldk&lt;/code&gt; function to implement some other functions. First &lt;code&gt;tryPick&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 70)&quot; onmouseover=&quot;showTip(event, 'fs13', 70)&quot; class=&quot;f&quot;&gt;tryPick&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 71)&quot; onmouseover=&quot;showTip(event, 'fs14', 71)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 72)&quot; onmouseover=&quot;showTip(event, 'fs5', 72)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs5', 73)&quot; onmouseover=&quot;showTip(event, 'fs5', 73)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 74)&quot; onmouseover=&quot;showTip(event, 'fs2', 74)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 75)&quot; onmouseover=&quot;showTip(event, 'fs15', 75)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 76)&quot; onmouseover=&quot;showTip(event, 'fs6', 76)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 77)&quot; onmouseover=&quot;showTip(event, 'fs16', 77)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs14', 78)&quot; onmouseover=&quot;showTip(event, 'fs14', 78)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 79)&quot; onmouseover=&quot;showTip(event, 'fs6', 79)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 80)&quot; onmouseover=&quot;showTip(event, 'fs17', 80)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 81)&quot; onmouseover=&quot;showTip(event, 'fs6', 81)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 82)&quot; onmouseover=&quot;showTip(event, 'fs16', 82)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 83)&quot; onmouseover=&quot;showTip(event, 'fs15', 83)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    ) &lt;span onmouseout=&quot;hideTip(event, 'fs18', 84)&quot; onmouseover=&quot;showTip(event, 'fs18', 84)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 85)&quot; onmouseover=&quot;showTip(event, 'fs13', 85)&quot; class=&quot;f&quot;&gt;tryPick&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 86)&quot; onmouseover=&quot;showTip(event, 'fs11', 86)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 87)&quot; onmouseover=&quot;showTip(event, 'fs11', 87)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 5&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 88)&quot; onmouseover=&quot;showTip(event, 'fs13', 88)&quot; class=&quot;f&quot;&gt;tryPick&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 89)&quot; onmouseover=&quot;showTip(event, 'fs11', 89)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 90)&quot; onmouseover=&quot;showTip(event, 'fs11', 90)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)    &lt;span class=&quot;c&quot;&gt;// Some 11&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 91)&quot; onmouseover=&quot;showTip(event, 'fs13', 91)&quot; class=&quot;f&quot;&gt;tryPick&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 92)&quot; onmouseover=&quot;showTip(event, 'fs11', 92)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 93)&quot; onmouseover=&quot;showTip(event, 'fs11', 93)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We start with &lt;code&gt;None&lt;/code&gt; as our default value. Once we found a matching &lt;code&gt;x&lt;/code&gt; we just return it,
otherwise we recurs. When we reach the end without finding an element, we return &lt;code&gt;acc&lt;/code&gt;
that still contains &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 94)&quot; onmouseover=&quot;showTip(event, 'fs19', 94)&quot; class=&quot;f&quot;&gt;contains&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 95)&quot; onmouseover=&quot;showTip(event, 'fs20', 95)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 96)&quot; onmouseover=&quot;showTip(event, 'fs21', 96)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs21', 97)&quot; onmouseover=&quot;showTip(event, 'fs21', 97)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 98)&quot; onmouseover=&quot;showTip(event, 'fs2', 98)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 99)&quot; onmouseover=&quot;showTip(event, 'fs22', 99)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 100)&quot; onmouseover=&quot;showTip(event, 'fs23', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 101)&quot; onmouseover=&quot;showTip(event, 'fs24', 101)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs23', 102)&quot; onmouseover=&quot;showTip(event, 'fs23', 102)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 103)&quot; onmouseover=&quot;showTip(event, 'fs20', 103)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 104)&quot; onmouseover=&quot;showTip(event, 'fs24', 104)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 105)&quot; onmouseover=&quot;showTip(event, 'fs22', 105)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    ) &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 106)&quot; onmouseover=&quot;showTip(event, 'fs19', 106)&quot; class=&quot;f&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 107)&quot; onmouseover=&quot;showTip(event, 'fs19', 107)&quot; class=&quot;f&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Very similar to &lt;code&gt;tryPick&lt;/code&gt;. We start with &lt;code&gt;false&lt;/code&gt; and return it when we reach the end
of the list without finding our wanted element. Otherwise we immediately return &lt;code&gt;true&lt;/code&gt;.
I think the rest of the function are nearly self-specking as they are all very similar.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;36: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;37: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;38: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;39: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;40: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;41: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;42: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;43: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;44: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;45: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;46: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;47: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;48: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 108)&quot; onmouseover=&quot;showTip(event, 'fs25', 108)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 109)&quot; onmouseover=&quot;showTip(event, 'fs14', 109)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 110)&quot; onmouseover=&quot;showTip(event, 'fs5', 110)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs5', 111)&quot; onmouseover=&quot;showTip(event, 'fs5', 111)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 112)&quot; onmouseover=&quot;showTip(event, 'fs2', 112)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 113)&quot; onmouseover=&quot;showTip(event, 'fs22', 113)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 114)&quot; onmouseover=&quot;showTip(event, 'fs6', 114)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 115)&quot; onmouseover=&quot;showTip(event, 'fs24', 115)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs14', 116)&quot; onmouseover=&quot;showTip(event, 'fs14', 116)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 117)&quot; onmouseover=&quot;showTip(event, 'fs6', 117)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 118)&quot; onmouseover=&quot;showTip(event, 'fs24', 118)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 119)&quot; onmouseover=&quot;showTip(event, 'fs22', 119)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    ) &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 120)&quot; onmouseover=&quot;showTip(event, 'fs25', 120)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 121)&quot; onmouseover=&quot;showTip(event, 'fs11', 121)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 122)&quot; onmouseover=&quot;showTip(event, 'fs11', 122)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 123)&quot; onmouseover=&quot;showTip(event, 'fs25', 123)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 124)&quot; onmouseover=&quot;showTip(event, 'fs11', 124)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 125)&quot; onmouseover=&quot;showTip(event, 'fs11', 125)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)      &lt;span class=&quot;c&quot;&gt;// false&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 126)&quot; onmouseover=&quot;showTip(event, 'fs26', 126)&quot; class=&quot;f&quot;&gt;forall&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 127)&quot; onmouseover=&quot;showTip(event, 'fs14', 127)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 128)&quot; onmouseover=&quot;showTip(event, 'fs5', 128)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs5', 129)&quot; onmouseover=&quot;showTip(event, 'fs5', 129)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 130)&quot; onmouseover=&quot;showTip(event, 'fs2', 130)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 131)&quot; onmouseover=&quot;showTip(event, 'fs22', 131)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 132)&quot; onmouseover=&quot;showTip(event, 'fs6', 132)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 133)&quot; onmouseover=&quot;showTip(event, 'fs24', 133)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs14', 134)&quot; onmouseover=&quot;showTip(event, 'fs14', 134)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 135)&quot; onmouseover=&quot;showTip(event, 'fs6', 135)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 136)&quot; onmouseover=&quot;showTip(event, 'fs24', 136)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 137)&quot; onmouseover=&quot;showTip(event, 'fs22', 137)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
    ) &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;8&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 138)&quot; onmouseover=&quot;showTip(event, 'fs26', 138)&quot; class=&quot;f&quot;&gt;forall&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 139)&quot; onmouseover=&quot;showTip(event, 'fs11', 139)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 140)&quot; onmouseover=&quot;showTip(event, 'fs11', 140)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// true&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;8&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 141)&quot; onmouseover=&quot;showTip(event, 'fs26', 141)&quot; class=&quot;f&quot;&gt;forall&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 142)&quot; onmouseover=&quot;showTip(event, 'fs11', 142)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 143)&quot; onmouseover=&quot;showTip(event, 'fs11', 143)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// false&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 144)&quot; onmouseover=&quot;showTip(event, 'fs27', 144)&quot; class=&quot;f&quot;&gt;item&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 145)&quot; onmouseover=&quot;showTip(event, 'fs28', 145)&quot; class=&quot;i&quot;&gt;idx&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 146)&quot; onmouseover=&quot;showTip(event, 'fs29', 146)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs29', 147)&quot; onmouseover=&quot;showTip(event, 'fs29', 147)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 148)&quot; onmouseover=&quot;showTip(event, 'fs2', 148)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 149)&quot; onmouseover=&quot;showTip(event, 'fs10', 149)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 150)&quot; onmouseover=&quot;showTip(event, 'fs11', 150)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 151)&quot; onmouseover=&quot;showTip(event, 'fs12', 151)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs28', 152)&quot; onmouseover=&quot;showTip(event, 'fs28', 152)&quot; class=&quot;i&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 153)&quot; onmouseover=&quot;showTip(event, 'fs10', 153)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 154)&quot; onmouseover=&quot;showTip(event, 'fs11', 154)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 155)&quot; onmouseover=&quot;showTip(event, 'fs12', 155)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs10', 156)&quot; onmouseover=&quot;showTip(event, 'fs10', 156)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
    ) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 157)&quot; onmouseover=&quot;showTip(event, 'fs27', 157)&quot; class=&quot;f&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 158)&quot; onmouseover=&quot;showTip(event, 'fs27', 158)&quot; class=&quot;f&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 159)&quot; onmouseover=&quot;showTip(event, 'fs27', 159)&quot; class=&quot;f&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 160)&quot; onmouseover=&quot;showTip(event, 'fs27', 160)&quot; class=&quot;f&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 22&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 161)&quot; onmouseover=&quot;showTip(event, 'fs30', 161)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 162)&quot; onmouseover=&quot;showTip(event, 'fs31', 162)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 163)&quot; onmouseover=&quot;showTip(event, 'fs5', 163)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs5', 164)&quot; onmouseover=&quot;showTip(event, 'fs5', 164)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 165)&quot; onmouseover=&quot;showTip(event, 'fs2', 165)&quot; class=&quot;f&quot;&gt;foldk&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 166)&quot; onmouseover=&quot;showTip(event, 'fs32', 166)&quot; class=&quot;i&quot;&gt;collected&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs33', 167)&quot; onmouseover=&quot;showTip(event, 'fs33', 167)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs6', 168)&quot; onmouseover=&quot;showTip(event, 'fs6', 168)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 169)&quot; onmouseover=&quot;showTip(event, 'fs34', 169)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs32', 170)&quot; onmouseover=&quot;showTip(event, 'fs32', 170)&quot; class=&quot;i&quot;&gt;collected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 171)&quot; onmouseover=&quot;showTip(event, 'fs31', 171)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 172)&quot; onmouseover=&quot;showTip(event, 'fs34', 172)&quot; class=&quot;f&quot;&gt;k&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 173)&quot; onmouseover=&quot;showTip(event, 'fs32', 173)&quot; class=&quot;i&quot;&gt;collected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs6', 174)&quot; onmouseover=&quot;showTip(event, 'fs6', 174)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 175)&quot; onmouseover=&quot;showTip(event, 'fs33', 175)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 176)&quot; onmouseover=&quot;showTip(event, 'fs32', 176)&quot; class=&quot;i&quot;&gt;collected&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs33', 177)&quot; onmouseover=&quot;showTip(event, 'fs33', 177)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;)
    ) (&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,[]) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 178)&quot; onmouseover=&quot;showTip(event, 'fs35', 178)&quot; class=&quot;f&quot;&gt;snd&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 179)&quot; onmouseover=&quot;showTip(event, 'fs8', 179)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 180)&quot; onmouseover=&quot;showTip(event, 'fs36', 180)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt;

[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 181)&quot; onmouseover=&quot;showTip(event, 'fs30', 181)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// []&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 182)&quot; onmouseover=&quot;showTip(event, 'fs30', 182)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// [1;2;3]&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]   &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 183)&quot; onmouseover=&quot;showTip(event, 'fs30', 183)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// [1;2;3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The last line is btw. not the exact behaviour of &lt;code&gt;List.take&lt;/code&gt;. The standard implementation throws
an exception if the input list has not enough elements. We can achieve the same by checking
the &lt;code&gt;collected&lt;/code&gt; field after &lt;code&gt;foldk&lt;/code&gt; finished and throw an exception if it is not the same
as &lt;code&gt;amount&lt;/code&gt;. But I like my behaviour more than the default implementation.&lt;/p&gt;
&lt;p&gt;I could continue by implementing further functions, but I think at this point it should
be obvious how &lt;code&gt;foldk&lt;/code&gt; works and how we use it.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Implementing a CPS fold gives the control when to recurs to the caller of &lt;code&gt;foldk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some task are easier solved by &lt;code&gt;foldk&lt;/code&gt;. Some other task can sometimes be more efficient as we don't
need to traverse the complete data-structure. In general if you ever wanted something similar
to &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; as you know it from imperative looping constructs. With &lt;code&gt;foldk&lt;/code&gt;
you have this ability and it works fine with immutable data-structures.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val foldk : f:(&amp;#39;State -&amp;gt; &amp;#39;a -&amp;gt; (&amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; &amp;#39;State) -&amp;gt; acc:&amp;#39;State -&amp;gt; xs:&amp;#39;a list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.foldk&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val f : (&amp;#39;State -&amp;gt; &amp;#39;a -&amp;gt; (&amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val acc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val xs : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val lacc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val k : (int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val tryPick : predicate:(&amp;#39;a -&amp;gt; bool) -&amp;gt; xs:&amp;#39;a list -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.tryPick&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val predicate : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val acc : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val k : (&amp;#39;a option -&amp;gt; &amp;#39;a option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val contains : y:&amp;#39;a -&amp;gt; xs:&amp;#39;a list -&amp;gt; bool (requires equality)&lt;br /&gt;&lt;br /&gt;Full name: Main.contains&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val y : &amp;#39;a (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val xs : &amp;#39;a list (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val acc : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val x : &amp;#39;a (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val k : (bool -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val exists : predicate:(&amp;#39;a -&amp;gt; bool) -&amp;gt; xs:&amp;#39;a list -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.exists&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val forall : predicate:(&amp;#39;a -&amp;gt; bool) -&amp;gt; xs:&amp;#39;a list -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.forall&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val item : idx:int -&amp;gt; xs:int list -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.item&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val idx : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val xs : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val take : amount:int -&amp;gt; xs:&amp;#39;a list -&amp;gt; &amp;#39;a list&lt;br /&gt;&lt;br /&gt;Full name: Main.take&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val amount : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val collected : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val acc : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val k : (int * &amp;#39;a list -&amp;gt; int * &amp;#39;a list)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val snd : tuple:(&amp;#39;T1 * &amp;#39;T2) -&amp;gt; &amp;#39;T2&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.snd&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val rev : list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.rev&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Algebraic Data-Types</title>
   <link href="https://sidburn.github.io/blog/2016/04/26/algebraic-data-types"/>
   <updated>2016-04-26T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/04/26/algebraic-data-types</id>
   <content type="html">&lt;p&gt;When we work in a programming language we usually have some primitive data-types likes
&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; and so on. All of those are important, but when we
need to create more advanced logic we usually want to create our own data-types
and group/compose different types together to create new data-types.&lt;/p&gt;
&lt;p&gt;In an &lt;em&gt;algebraic type-system&lt;/em&gt; there exists two different ways in how we can compose
types. They are named &lt;em&gt;Product-types&lt;/em&gt; and &lt;em&gt;Sum-type&lt;/em&gt;. I often name them &lt;em&gt;AND-composition&lt;/em&gt;
and &lt;em&gt;OR-composition&lt;/em&gt;. F# provides two &lt;em&gt;Product-types&lt;/em&gt; and one &lt;em&gt;Sum-type&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Those compositions are immutable by default. Because of this, we already have default
implementation for equality and comparison.&lt;/p&gt;
&lt;h2&gt;Table of Content&lt;/h2&gt;
&lt;ul class=&quot;toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tuples&quot;&gt;Tuples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#records&quot;&gt;Records&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#discriminated-unions&quot;&gt;Discriminated Unions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#du-as-sum&quot;&gt;Discriminated Unions as Sum-Types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#single-du&quot;&gt;Single-case Discriminated Unions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#units-of-measure&quot;&gt;Units of Measure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#recursive-du&quot;&gt;Recursive Discriminated Unions&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#rdu-lists&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rdu-btree&quot;&gt;Binary Trees&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rdu-ds&quot;&gt;Hierarchical Data-Structures&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#invalid-state&quot;&gt;Make invalid states un-representable&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;tuples&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tuples&lt;/h2&gt;
&lt;p&gt;A Tuple is a &lt;em&gt;Product-type&lt;/em&gt;. The nice thing about Tuples is that we don't have to define
a &lt;em&gt;type&lt;/em&gt; before-hand. We can easily create any kind of tuple by just separating
variables with a comma.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David&amp;quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;123&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Bar&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Baz&amp;quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can extract values from a tuple with &lt;em&gt;Pattern Matching&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 7)&quot; onmouseover=&quot;showTip(event, 'fs3', 7)&quot; class=&quot;i&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;i&quot;&gt;str1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs8', 9)&quot; onmouseover=&quot;showTip(event, 'fs8', 9)&quot; class=&quot;i&quot;&gt;str2&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs9', 10)&quot; onmouseover=&quot;showTip(event, 'fs9', 10)&quot; class=&quot;i&quot;&gt;str3&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs6', 11)&quot; onmouseover=&quot;showTip(event, 'fs6', 11)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 12)&quot; onmouseover=&quot;showTip(event, 'fs4', 12)&quot; class=&quot;i&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we look at the type-signature we see that &lt;code&gt;foo&lt;/code&gt; has the type &lt;code&gt;string * int&lt;/code&gt; and
&lt;code&gt;bar&lt;/code&gt; has the type &lt;code&gt;string * string * string * int&lt;/code&gt;. Tuples only can be compared
if they have the same amount of elements and the types are the same in the exact order.&lt;/p&gt;
&lt;p&gt;A Tuple &lt;code&gt;string * int&lt;/code&gt; is something different as &lt;code&gt;int * string&lt;/code&gt;. But why are they anyway
named &lt;em&gt;Product type&lt;/em&gt; and why do we &lt;em&gt;multiply&lt;/em&gt; types? To understand this, let's look at
a simple tuple consisting of two boolean values. It's type would be &lt;code&gt;bool * bool&lt;/code&gt;.
But how many possible values can we create with such a type? As &lt;code&gt;bool&lt;/code&gt; only has two
states, we only can create four different values.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 13)&quot; onmouseover=&quot;showTip(event, 'fs10', 13)&quot; class=&quot;i&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 14)&quot; onmouseover=&quot;showTip(event, 'fs11', 14)&quot; class=&quot;i&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 15)&quot; onmouseover=&quot;showTip(event, 'fs12', 15)&quot; class=&quot;i&quot;&gt;b3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 16)&quot; onmouseover=&quot;showTip(event, 'fs13', 16)&quot; class=&quot;i&quot;&gt;b4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Every &lt;code&gt;bool&lt;/code&gt; has two different values. A tuple like &lt;code&gt;bool * bool&lt;/code&gt; contains two &lt;code&gt;bool&lt;/code&gt;
at the same time. We can calculate the maximum amount of possible values by multiplying
the amount of every single type. In this case &lt;code&gt;2 * 2&lt;/code&gt;. That is why we name it a
&lt;em&gt;Product-type&lt;/em&gt;. We also could say a &lt;code&gt;bool * bool&lt;/code&gt; is a &lt;code&gt;bool&lt;/code&gt; &lt;strong&gt;AND&lt;/strong&gt; another &lt;code&gt;bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also can create a type-definition first. But it is important to note that those are
not types on it's own, only &lt;em&gt;type-aliases&lt;/em&gt;. For example we could define a &lt;code&gt;Point&lt;/code&gt;
and then define a &lt;code&gt;Line&lt;/code&gt; and a &lt;code&gt;Rect&lt;/code&gt; like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 17)&quot; onmouseover=&quot;showTip(event, 'fs14', 17)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 18)&quot; onmouseover=&quot;showTip(event, 'fs15', 18)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 19)&quot; onmouseover=&quot;showTip(event, 'fs15', 19)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 20)&quot; onmouseover=&quot;showTip(event, 'fs16', 20)&quot; class=&quot;t&quot;&gt;Line&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 21)&quot; onmouseover=&quot;showTip(event, 'fs14', 21)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 22)&quot; onmouseover=&quot;showTip(event, 'fs14', 22)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 23)&quot; onmouseover=&quot;showTip(event, 'fs17', 23)&quot; class=&quot;t&quot;&gt;Rect&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 24)&quot; onmouseover=&quot;showTip(event, 'fs14', 24)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 25)&quot; onmouseover=&quot;showTip(event, 'fs14', 25)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Point&lt;/code&gt;, &lt;code&gt;Line&lt;/code&gt; and &lt;code&gt;Rect&lt;/code&gt; in this example are not types on there own. We can use the names
as they are more declarative, but because their are just &lt;em&gt;aliases&lt;/em&gt; we also can compare a
&lt;code&gt;Line&lt;/code&gt; with a &lt;code&gt;Rect&lt;/code&gt;. This is usually not what we want, and later we see how we can fix this.&lt;/p&gt;
&lt;p&gt;But overall it is an advantage that we don't have to provide a type first. Tuples
are used in a lot of places for some intermediate types where we don't care for a named type.
For example if we have two lists and we want to zip them (1 element of 1.list, 1.element
of second list, 2 element of 1 list, 2 element of 2 list, ...) then we could just use
&lt;code&gt;List.zip&lt;/code&gt; and it just returns us a tuple with values from both lists.&lt;/p&gt;
&lt;p&gt;We also can use it to easily return multiple arguments from a function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 26)&quot; onmouseover=&quot;showTip(event, 'fs18', 26)&quot; class=&quot;f&quot;&gt;doSomething&lt;/span&gt; () &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 27)&quot; onmouseover=&quot;showTip(event, 'fs19', 27)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs20', 28)&quot; onmouseover=&quot;showTip(event, 'fs20', 28)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 29)&quot; onmouseover=&quot;showTip(event, 'fs18', 29)&quot; class=&quot;f&quot;&gt;doSomething&lt;/span&gt; ()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In those examples we don't want to define types all the time before-hand.&lt;/p&gt;
&lt;a name=&quot;records&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Records&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;records&lt;/em&gt; is also a &lt;em&gt;Product-type&lt;/em&gt;. But we must define a type before-hand.
&lt;em&gt;Records&lt;/em&gt; are also often named &lt;em&gt;Named Tuples&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One advantage of a &lt;em&gt;Record-type&lt;/em&gt; over a tuple is that we can use names to describe the
different fields. We could for example create a Person with fields like &lt;em&gt;First-name&lt;/em&gt;,
&lt;em&gt;Last-Name&lt;/em&gt;, &lt;em&gt;Hair-Color&lt;/em&gt;, &lt;em&gt;Birthday&lt;/em&gt; and &lt;em&gt;Size&lt;/em&gt; with a tuple.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 317)&quot; onmouseover=&quot;showTip(event, 'fs21', 317)&quot; class=&quot;i&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 318)&quot; onmouseover=&quot;showTip(event, 'fs22', 318)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 319)&quot; onmouseover=&quot;showTip(event, 'fs22', 319)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 320)&quot; onmouseover=&quot;showTip(event, 'fs22', 320)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 321)&quot; onmouseover=&quot;showTip(event, 'fs15', 321)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But working with that is not really a pleasure, when we want to extract the birthday we
could write a function like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 35)&quot; onmouseover=&quot;showTip(event, 'fs23', 35)&quot; class=&quot;f&quot;&gt;birthday&lt;/span&gt; (_,_,_,&lt;span onmouseout=&quot;hideTip(event, 'fs24', 36)&quot; onmouseover=&quot;showTip(event, 'fs24', 36)&quot; class=&quot;i&quot;&gt;birthday&lt;/span&gt;,_) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 37)&quot; onmouseover=&quot;showTip(event, 'fs24', 37)&quot; class=&quot;i&quot;&gt;birthday&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But that becomes really messy fast. On top, it is also is not clear what the first three
&lt;code&gt;string&lt;/code&gt; are. Actually i would say that using primitive types like &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;,
&lt;code&gt;float&lt;/code&gt; is in general a bad practice. I will later talk more about this topic, but for now,
let's improve that example by just using a Record.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 38)&quot; onmouseover=&quot;showTip(event, 'fs25', 38)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs26', 39)&quot; onmouseover=&quot;showTip(event, 'fs26', 39)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 40)&quot; onmouseover=&quot;showTip(event, 'fs27', 40)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs28', 41)&quot; onmouseover=&quot;showTip(event, 'fs28', 41)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs27', 42)&quot; onmouseover=&quot;showTip(event, 'fs27', 42)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs29', 43)&quot; onmouseover=&quot;showTip(event, 'fs29', 43)&quot; class=&quot;i&quot;&gt;HairColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 44)&quot; onmouseover=&quot;showTip(event, 'fs27', 44)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs30', 45)&quot; onmouseover=&quot;showTip(event, 'fs30', 45)&quot; class=&quot;i&quot;&gt;Birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs31', 46)&quot; onmouseover=&quot;showTip(event, 'fs31', 46)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs32', 47)&quot; onmouseover=&quot;showTip(event, 'fs32', 47)&quot; class=&quot;i&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs33', 48)&quot; onmouseover=&quot;showTip(event, 'fs33', 48)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A Record type gives us a default constructor: &lt;code&gt;{ ... }&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 49)&quot; onmouseover=&quot;showTip(event, 'fs34', 49)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Raab&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;HairColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Blond&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 50)&quot; onmouseover=&quot;showTip(event, 'fs31', 50)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We always must provide all fields, and we can access a field by its name:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 51)&quot; onmouseover=&quot;showTip(event, 'fs35', 51)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; has &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; hair&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 52)&quot; onmouseover=&quot;showTip(event, 'fs34', 52)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 53)&quot; onmouseover=&quot;showTip(event, 'fs26', 53)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 54)&quot; onmouseover=&quot;showTip(event, 'fs34', 54)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 55)&quot; onmouseover=&quot;showTip(event, 'fs28', 55)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 56)&quot; onmouseover=&quot;showTip(event, 'fs34', 56)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 57)&quot; onmouseover=&quot;showTip(event, 'fs29', 57)&quot; class=&quot;i&quot;&gt;HairColor&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// David Raab has Blond hair&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A Record is immutable by default and has value semantic by default. That means we can compare those.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 58)&quot; onmouseover=&quot;showTip(event, 'fs36', 58)&quot; class=&quot;i&quot;&gt;otherMe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Raab&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;HairColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Blond&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 59)&quot; onmouseover=&quot;showTip(event, 'fs31', 59)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;
}

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 60)&quot; onmouseover=&quot;showTip(event, 'fs37', 60)&quot; class=&quot;i&quot;&gt;markus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Markus&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Schwarz&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;HairColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Blond&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 61)&quot; onmouseover=&quot;showTip(event, 'fs31', 61)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;160.0&lt;/span&gt;
}

&lt;span onmouseout=&quot;hideTip(event, 'fs34', 62)&quot; onmouseover=&quot;showTip(event, 'fs34', 62)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 63)&quot; onmouseover=&quot;showTip(event, 'fs36', 63)&quot; class=&quot;i&quot;&gt;otherMe&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// true&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs34', 64)&quot; onmouseover=&quot;showTip(event, 'fs34', 64)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 65)&quot; onmouseover=&quot;showTip(event, 'fs37', 65)&quot; class=&quot;i&quot;&gt;markus&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// false&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs34', 66)&quot; onmouseover=&quot;showTip(event, 'fs34', 66)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 67)&quot; onmouseover=&quot;showTip(event, 'fs37', 67)&quot; class=&quot;i&quot;&gt;markus&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we can see, as long all fields are the same we get a &lt;code&gt;true&lt;/code&gt;. But how does &lt;code&gt;me &amp;lt; markus&lt;/code&gt; work?
By default it uses the order of the fields. It starts comparing &lt;code&gt;FirstName&lt;/code&gt;. Because &quot;D&quot; from
&quot;David&quot; is smaller than &quot;M&quot; from &quot;Markus&quot; we get &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;FirstName&lt;/code&gt; would be the same,
it would compare &lt;code&gt;LastName&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;Often we want to change a field, but because we have an immutable data-type the only thing
we can do is to create a new record. F# provides a &lt;em&gt;Copy-and-update&lt;/em&gt; syntax &lt;code&gt;{ source with ... }&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 68)&quot; onmouseover=&quot;showTip(event, 'fs38', 68)&quot; class=&quot;i&quot;&gt;me2&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs34', 69)&quot; onmouseover=&quot;showTip(event, 'fs34', 69)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;173.0&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 70)&quot; onmouseover=&quot;showTip(event, 'fs39', 70)&quot; class=&quot;i&quot;&gt;markus2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs37', 71)&quot; onmouseover=&quot;showTip(event, 'fs37', 71)&quot; class=&quot;i&quot;&gt;markus&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 72)&quot; onmouseover=&quot;showTip(event, 'fs31', 72)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;); &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;173.0&lt;/span&gt; }

&lt;span onmouseout=&quot;hideTip(event, 'fs34', 73)&quot; onmouseover=&quot;showTip(event, 'fs34', 73)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 74)&quot; onmouseover=&quot;showTip(event, 'fs38', 74)&quot; class=&quot;i&quot;&gt;me2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// true -- because me2 has a bigger size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also can use tuples inside of records. For example in a game we could use a money
field that uses three &lt;code&gt;int&lt;/code&gt; to represent gold, silver and bronze.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 75)&quot; onmouseover=&quot;showTip(event, 'fs40', 75)&quot; class=&quot;t&quot;&gt;Player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs41', 76)&quot; onmouseover=&quot;showTip(event, 'fs41', 76)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs27', 77)&quot; onmouseover=&quot;showTip(event, 'fs27', 77)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs42', 78)&quot; onmouseover=&quot;showTip(event, 'fs42', 78)&quot; class=&quot;i&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 79)&quot; onmouseover=&quot;showTip(event, 'fs43', 79)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 80)&quot; onmouseover=&quot;showTip(event, 'fs43', 80)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 81)&quot; onmouseover=&quot;showTip(event, 'fs43', 81)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
}

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 82)&quot; onmouseover=&quot;showTip(event, 'fs44', 82)&quot; class=&quot;i&quot;&gt;richPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;3000&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 3000 gold, 200 silver, 100 bronze&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Records also can contain other records.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 83)&quot; onmouseover=&quot;showTip(event, 'fs45', 83)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs46', 84)&quot; onmouseover=&quot;showTip(event, 'fs46', 84)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs43', 85)&quot; onmouseover=&quot;showTip(event, 'fs43', 85)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 86)&quot; onmouseover=&quot;showTip(event, 'fs47', 86)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs43', 87)&quot; onmouseover=&quot;showTip(event, 'fs43', 87)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 88)&quot; onmouseover=&quot;showTip(event, 'fs48', 88)&quot; class=&quot;t&quot;&gt;Line&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs49', 89)&quot; onmouseover=&quot;showTip(event, 'fs49', 89)&quot; class=&quot;i&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 90)&quot; onmouseover=&quot;showTip(event, 'fs45', 90)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 91)&quot; onmouseover=&quot;showTip(event, 'fs50', 91)&quot; class=&quot;i&quot;&gt;Stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 92)&quot; onmouseover=&quot;showTip(event, 'fs45', 92)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; }
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 93)&quot; onmouseover=&quot;showTip(event, 'fs51', 93)&quot; class=&quot;t&quot;&gt;Rect&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs52', 94)&quot; onmouseover=&quot;showTip(event, 'fs52', 94)&quot; class=&quot;i&quot;&gt;TopLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 95)&quot; onmouseover=&quot;showTip(event, 'fs45', 95)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 96)&quot; onmouseover=&quot;showTip(event, 'fs53', 96)&quot; class=&quot;i&quot;&gt;BottomRight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 97)&quot; onmouseover=&quot;showTip(event, 'fs45', 97)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; }

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 98)&quot; onmouseover=&quot;showTip(event, 'fs54', 98)&quot; class=&quot;i&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
   &lt;span class=&quot;i&quot;&gt;Start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs46', 99)&quot; onmouseover=&quot;showTip(event, 'fs46', 99)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 100)&quot; onmouseover=&quot;showTip(event, 'fs47', 100)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  }
   &lt;span class=&quot;i&quot;&gt;Stop&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs46', 101)&quot; onmouseover=&quot;showTip(event, 'fs46', 101)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 102)&quot; onmouseover=&quot;showTip(event, 'fs47', 102)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; }
}

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 103)&quot; onmouseover=&quot;showTip(event, 'fs55', 103)&quot; class=&quot;i&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
   &lt;span class=&quot;i&quot;&gt;TopLeft&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs46', 104)&quot; onmouseover=&quot;showTip(event, 'fs46', 104)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;;  &lt;span onmouseout=&quot;hideTip(event, 'fs47', 105)&quot; onmouseover=&quot;showTip(event, 'fs47', 105)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  }
   &lt;span class=&quot;i&quot;&gt;BottomRight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; { &lt;span onmouseout=&quot;hideTip(event, 'fs46', 106)&quot; onmouseover=&quot;showTip(event, 'fs46', 106)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 107)&quot; onmouseover=&quot;showTip(event, 'fs47', 107)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because records are comparable it also means a record that uses other records is also
automatically comparable. But as records are distinct types we cannot compare records of
different types. For example trying to compare &lt;code&gt;line&lt;/code&gt; with &lt;code&gt;rect&lt;/code&gt; will result
in a compile-time error.&lt;/p&gt;
&lt;p&gt;If you know serialization formats like JSON you already can imagine that we can easily
represent JSON Structures this way. But we get the benefit that we have a statically
type-safe version of it, and those data-structures are immutable, and comparable!&lt;/p&gt;
&lt;p&gt;For example we could generate a type-definition from
the &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON example on Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 108)&quot; onmouseover=&quot;showTip(event, 'fs56', 108)&quot; class=&quot;t&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs57', 109)&quot; onmouseover=&quot;showTip(event, 'fs57', 109)&quot; class=&quot;i&quot;&gt;StreetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 110)&quot; onmouseover=&quot;showTip(event, 'fs27', 110)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs58', 111)&quot; onmouseover=&quot;showTip(event, 'fs58', 111)&quot; class=&quot;i&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;          &lt;span onmouseout=&quot;hideTip(event, 'fs27', 112)&quot; onmouseover=&quot;showTip(event, 'fs27', 112)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs59', 113)&quot; onmouseover=&quot;showTip(event, 'fs59', 113)&quot; class=&quot;i&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span onmouseout=&quot;hideTip(event, 'fs27', 114)&quot; onmouseover=&quot;showTip(event, 'fs27', 114)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs60', 115)&quot; onmouseover=&quot;showTip(event, 'fs60', 115)&quot; class=&quot;i&quot;&gt;PostalCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs27', 116)&quot; onmouseover=&quot;showTip(event, 'fs27', 116)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    }

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 117)&quot; onmouseover=&quot;showTip(event, 'fs61', 117)&quot; class=&quot;t&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs62', 118)&quot; onmouseover=&quot;showTip(event, 'fs62', 118)&quot; class=&quot;i&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs27', 119)&quot; onmouseover=&quot;showTip(event, 'fs27', 119)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs63', 120)&quot; onmouseover=&quot;showTip(event, 'fs63', 120)&quot; class=&quot;i&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 121)&quot; onmouseover=&quot;showTip(event, 'fs27', 121)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    }

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 122)&quot; onmouseover=&quot;showTip(event, 'fs64', 122)&quot; class=&quot;t&quot;&gt;Contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs65', 123)&quot; onmouseover=&quot;showTip(event, 'fs65', 123)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs27', 124)&quot; onmouseover=&quot;showTip(event, 'fs27', 124)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs66', 125)&quot; onmouseover=&quot;showTip(event, 'fs66', 125)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs27', 126)&quot; onmouseover=&quot;showTip(event, 'fs27', 126)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs67', 127)&quot; onmouseover=&quot;showTip(event, 'fs67', 127)&quot; class=&quot;i&quot;&gt;IsAlive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs68', 128)&quot; onmouseover=&quot;showTip(event, 'fs68', 128)&quot; class=&quot;t&quot;&gt;bool&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs69', 129)&quot; onmouseover=&quot;showTip(event, 'fs69', 129)&quot; class=&quot;i&quot;&gt;Age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;          &lt;span onmouseout=&quot;hideTip(event, 'fs43', 130)&quot; onmouseover=&quot;showTip(event, 'fs43', 130)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs70', 131)&quot; onmouseover=&quot;showTip(event, 'fs70', 131)&quot; class=&quot;i&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs70', 132)&quot; onmouseover=&quot;showTip(event, 'fs70', 132)&quot; class=&quot;t&quot;&gt;Address&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs71', 133)&quot; onmouseover=&quot;showTip(event, 'fs71', 133)&quot; class=&quot;i&quot;&gt;PhoneNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 134)&quot; onmouseover=&quot;showTip(event, 'fs61', 134)&quot; class=&quot;t&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 135)&quot; onmouseover=&quot;showTip(event, 'fs72', 135)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs73', 136)&quot; onmouseover=&quot;showTip(event, 'fs73', 136)&quot; class=&quot;i&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs64', 137)&quot; onmouseover=&quot;showTip(event, 'fs64', 137)&quot; class=&quot;t&quot;&gt;Contact&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 138)&quot; onmouseover=&quot;showTip(event, 'fs72', 138)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs74', 139)&quot; onmouseover=&quot;showTip(event, 'fs74', 139)&quot; class=&quot;i&quot;&gt;Spouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span onmouseout=&quot;hideTip(event, 'fs64', 140)&quot; onmouseover=&quot;showTip(event, 'fs64', 140)&quot; class=&quot;t&quot;&gt;Contact&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 141)&quot; onmouseover=&quot;showTip(event, 'fs75', 141)&quot; class=&quot;t&quot;&gt;option&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And create a value like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 143)&quot; onmouseover=&quot;showTip(event, 'fs77', 143)&quot; class=&quot;i&quot;&gt;contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Smith&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;IsAlive&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Age&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;25&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs56', 144)&quot; onmouseover=&quot;showTip(event, 'fs56', 144)&quot; class=&quot;i&quot;&gt;Address&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        {
            &lt;span class=&quot;i&quot;&gt;StreetAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;21 2nd Street&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;City&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;NY&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;PostalCode&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10021-3100&amp;quot;&lt;/span&gt;
        }
    &lt;span class=&quot;i&quot;&gt;PhoneNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        [
        {
            &lt;span onmouseout=&quot;hideTip(event, 'fs78', 145)&quot; onmouseover=&quot;showTip(event, 'fs78', 145)&quot; class=&quot;i&quot;&gt;Type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Home&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;212 555-1234&amp;quot;&lt;/span&gt;
        }
        {
            &lt;span onmouseout=&quot;hideTip(event, 'fs78', 146)&quot; onmouseover=&quot;showTip(event, 'fs78', 146)&quot; class=&quot;i&quot;&gt;Type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Office&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;646 555-4567&amp;quot;&lt;/span&gt;
        }
        {
            &lt;span onmouseout=&quot;hideTip(event, 'fs78', 147)&quot; onmouseover=&quot;showTip(event, 'fs78', 147)&quot; class=&quot;i&quot;&gt;Type&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Mobile&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;123 456-7890&amp;quot;&lt;/span&gt;
        }
        ]
    &lt;span class=&quot;i&quot;&gt;Children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;i&quot;&gt;Spouse&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 148)&quot; onmouseover=&quot;showTip(event, 'fs79', 148)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can work with it like you would expect:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 149)&quot; onmouseover=&quot;showTip(event, 'fs35', 149)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; lives in &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 150)&quot; onmouseover=&quot;showTip(event, 'fs77', 150)&quot; class=&quot;i&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs65', 151)&quot; onmouseover=&quot;showTip(event, 'fs65', 151)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 152)&quot; onmouseover=&quot;showTip(event, 'fs77', 152)&quot; class=&quot;i&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs66', 153)&quot; onmouseover=&quot;showTip(event, 'fs66', 153)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 154)&quot; onmouseover=&quot;showTip(event, 'fs77', 154)&quot; class=&quot;i&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs80', 155)&quot; onmouseover=&quot;showTip(event, 'fs80', 155)&quot; class=&quot;i&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs58', 156)&quot; onmouseover=&quot;showTip(event, 'fs58', 156)&quot; class=&quot;i&quot;&gt;City&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// John Smith lives in New York&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 157)&quot; onmouseover=&quot;showTip(event, 'fs81', 157)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 158)&quot; onmouseover=&quot;showTip(event, 'fs77', 158)&quot; class=&quot;i&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs71', 159)&quot; onmouseover=&quot;showTip(event, 'fs71', 159)&quot; class=&quot;i&quot;&gt;PhoneNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 160)&quot; onmouseover=&quot;showTip(event, 'fs82', 160)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs83', 161)&quot; onmouseover=&quot;showTip(event, 'fs83', 161)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 162)&quot; onmouseover=&quot;showTip(event, 'fs84', 162)&quot; class=&quot;i&quot;&gt;phone&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 163)&quot; onmouseover=&quot;showTip(event, 'fs84', 163)&quot; class=&quot;i&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 164)&quot; onmouseover=&quot;showTip(event, 'fs63', 164)&quot; class=&quot;i&quot;&gt;Number&lt;/span&gt;)
&lt;span onmouseout=&quot;hideTip(event, 'fs35', 165)&quot; onmouseover=&quot;showTip(event, 'fs35', 165)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;He has the following numbers: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 166)&quot; onmouseover=&quot;showTip(event, 'fs81', 166)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// He has the following numbers: [&amp;quot;212 555-1234&amp;quot;; &amp;quot;646 555-4567&amp;quot;; &amp;quot;123 456-7890&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;discriminated-unions&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Discriminated Unions (DU)&lt;/h2&gt;
&lt;p&gt;Up to that point, we only discussed two types: &lt;em&gt;Tuples&lt;/em&gt; and &lt;em&gt;Records&lt;/em&gt;. Both are &lt;em&gt;Product-types&lt;/em&gt;
or how I would name them &lt;em&gt;AND Composition&lt;/em&gt;. Both data-types always contains all the specified
fields. But a Discriminated Union is different. A Discriminated Union is a &lt;em&gt;Sum-Type&lt;/em&gt; and
gives us the Possibility of a choice, or how I would name it, an &lt;em&gt;OR Composition&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let's review the JSON example above. What I dislike about it in general is that it just contains
too much &lt;code&gt;string&lt;/code&gt; types. For example the &lt;code&gt;PhoneNumbers&lt;/code&gt; part has a &lt;code&gt;Type&lt;/code&gt; field, in an application
you usually expect that &lt;code&gt;Type&lt;/code&gt; only can be specific &lt;code&gt;strings&lt;/code&gt; but not all possible &lt;code&gt;string&lt;/code&gt;
values. A better approach would be if we can represent the different available choices in
it's own type. With a DU we just can do that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 167)&quot; onmouseover=&quot;showTip(event, 'fs85', 167)&quot; class=&quot;t&quot;&gt;PhoneNumberType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs86', 168)&quot; onmouseover=&quot;showTip(event, 'fs86', 168)&quot; class=&quot;p&quot;&gt;Home&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs87', 169)&quot; onmouseover=&quot;showTip(event, 'fs87', 169)&quot; class=&quot;p&quot;&gt;Office&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs88', 170)&quot; onmouseover=&quot;showTip(event, 'fs88', 170)&quot; class=&quot;p&quot;&gt;Mobile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At this point you might probably compare it to an &lt;em&gt;enum&lt;/em&gt; type as you know it from C# or Java.
But as we see soon there are not really comparable at all. The first difference is. An &lt;em&gt;enum&lt;/em&gt;
usually is just a wrapper around an &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt; and so on. Usually in C# you could
for example still save the number &lt;code&gt;10&lt;/code&gt; in a &lt;code&gt;PhoneNumberType&lt;/code&gt; even if you just defined
three choices. But with a Discriminated Union that is not possible. There are concrete types
not just a wrapper for other values. The names &lt;code&gt;Home&lt;/code&gt;, &lt;code&gt;Office&lt;/code&gt; and &lt;code&gt;Mobile&lt;/code&gt; are
basically constructors to create a &lt;code&gt;PhoneNumberType&lt;/code&gt; and they are not just integers.&lt;/p&gt;
&lt;p&gt;The second important difference. Every Constructor can carry an additional value. This value
can once again be a record, a tuple or another Discriminated Union. At this point we could
change the representation of &lt;code&gt;PhoneNumber&lt;/code&gt; completely to a Discriminated Union instead
of a Record.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;ContactWithDU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs89', 171)&quot; onmouseover=&quot;showTip(event, 'fs89', 171)&quot; class=&quot;t&quot;&gt;Address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs57', 172)&quot; onmouseover=&quot;showTip(event, 'fs57', 172)&quot; class=&quot;i&quot;&gt;StreetAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 173)&quot; onmouseover=&quot;showTip(event, 'fs27', 173)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs58', 174)&quot; onmouseover=&quot;showTip(event, 'fs58', 174)&quot; class=&quot;i&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;          &lt;span onmouseout=&quot;hideTip(event, 'fs27', 175)&quot; onmouseover=&quot;showTip(event, 'fs27', 175)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs59', 176)&quot; onmouseover=&quot;showTip(event, 'fs59', 176)&quot; class=&quot;i&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;         &lt;span onmouseout=&quot;hideTip(event, 'fs27', 177)&quot; onmouseover=&quot;showTip(event, 'fs27', 177)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs60', 178)&quot; onmouseover=&quot;showTip(event, 'fs60', 178)&quot; class=&quot;i&quot;&gt;PostalCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs27', 179)&quot; onmouseover=&quot;showTip(event, 'fs27', 179)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    }

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 180)&quot; onmouseover=&quot;showTip(event, 'fs90', 180)&quot; class=&quot;t&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs91', 181)&quot; onmouseover=&quot;showTip(event, 'fs91', 181)&quot; class=&quot;p&quot;&gt;Home&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 182)&quot; onmouseover=&quot;showTip(event, 'fs27', 182)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs92', 183)&quot; onmouseover=&quot;showTip(event, 'fs92', 183)&quot; class=&quot;p&quot;&gt;Office&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 184)&quot; onmouseover=&quot;showTip(event, 'fs27', 184)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs93', 185)&quot; onmouseover=&quot;showTip(event, 'fs93', 185)&quot; class=&quot;p&quot;&gt;Mobile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 186)&quot; onmouseover=&quot;showTip(event, 'fs27', 186)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 187)&quot; onmouseover=&quot;showTip(event, 'fs94', 187)&quot; class=&quot;t&quot;&gt;Contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs65', 188)&quot; onmouseover=&quot;showTip(event, 'fs65', 188)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs27', 189)&quot; onmouseover=&quot;showTip(event, 'fs27', 189)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs66', 190)&quot; onmouseover=&quot;showTip(event, 'fs66', 190)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs27', 191)&quot; onmouseover=&quot;showTip(event, 'fs27', 191)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs67', 192)&quot; onmouseover=&quot;showTip(event, 'fs67', 192)&quot; class=&quot;i&quot;&gt;IsAlive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs68', 193)&quot; onmouseover=&quot;showTip(event, 'fs68', 193)&quot; class=&quot;t&quot;&gt;bool&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs69', 194)&quot; onmouseover=&quot;showTip(event, 'fs69', 194)&quot; class=&quot;i&quot;&gt;Age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;          &lt;span onmouseout=&quot;hideTip(event, 'fs43', 195)&quot; onmouseover=&quot;showTip(event, 'fs43', 195)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs95', 196)&quot; onmouseover=&quot;showTip(event, 'fs95', 196)&quot; class=&quot;i&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs95', 197)&quot; onmouseover=&quot;showTip(event, 'fs95', 197)&quot; class=&quot;t&quot;&gt;Address&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs71', 198)&quot; onmouseover=&quot;showTip(event, 'fs71', 198)&quot; class=&quot;i&quot;&gt;PhoneNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 199)&quot; onmouseover=&quot;showTip(event, 'fs90', 199)&quot; class=&quot;t&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 200)&quot; onmouseover=&quot;showTip(event, 'fs72', 200)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs73', 201)&quot; onmouseover=&quot;showTip(event, 'fs73', 201)&quot; class=&quot;i&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs94', 202)&quot; onmouseover=&quot;showTip(event, 'fs94', 202)&quot; class=&quot;t&quot;&gt;Contact&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 203)&quot; onmouseover=&quot;showTip(event, 'fs72', 203)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs74', 204)&quot; onmouseover=&quot;showTip(event, 'fs74', 204)&quot; class=&quot;i&quot;&gt;Spouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span onmouseout=&quot;hideTip(event, 'fs94', 205)&quot; onmouseover=&quot;showTip(event, 'fs94', 205)&quot; class=&quot;t&quot;&gt;Contact&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 206)&quot; onmouseover=&quot;showTip(event, 'fs75', 206)&quot; class=&quot;t&quot;&gt;option&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have a type that is either a &lt;code&gt;Home&lt;/code&gt;, &lt;code&gt;Office&lt;/code&gt; or &lt;code&gt;Mobile&lt;/code&gt;. Every case
contains an additional &lt;code&gt;string&lt;/code&gt;. With that in place, we could change the above JSON
construct to.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 208)&quot; onmouseover=&quot;showTip(event, 'fs97', 208)&quot; class=&quot;i&quot;&gt;contactWithDU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Smith&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;IsAlive&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Age&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;25&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs89', 209)&quot; onmouseover=&quot;showTip(event, 'fs89', 209)&quot; class=&quot;i&quot;&gt;Address&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        {
            &lt;span class=&quot;i&quot;&gt;StreetAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;21 2nd Street&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;City&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;NY&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;PostalCode&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10021-3100&amp;quot;&lt;/span&gt;
        }
    &lt;span class=&quot;i&quot;&gt;PhoneNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        [
            &lt;span onmouseout=&quot;hideTip(event, 'fs91', 210)&quot; onmouseover=&quot;showTip(event, 'fs91', 210)&quot; class=&quot;p&quot;&gt;Home&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;&amp;quot;212 555-1234&amp;quot;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs92', 211)&quot; onmouseover=&quot;showTip(event, 'fs92', 211)&quot; class=&quot;p&quot;&gt;Office&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;646 555-4567&amp;quot;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs93', 212)&quot; onmouseover=&quot;showTip(event, 'fs93', 212)&quot; class=&quot;p&quot;&gt;Mobile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;123 456-7890&amp;quot;&lt;/span&gt;
        ]
    &lt;span class=&quot;i&quot;&gt;Children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;i&quot;&gt;Spouse&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 213)&quot; onmouseover=&quot;showTip(event, 'fs79', 213)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Not only is that shorter and more readable, it is also less error-prone because we cannot
provide an arbitrary string for the phone type. On top we now must handle all different cases
when we write code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 214)&quot; onmouseover=&quot;showTip(event, 'fs98', 214)&quot; class=&quot;f&quot;&gt;printPhoneNumber&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 215)&quot; onmouseover=&quot;showTip(event, 'fs99', 215)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 216)&quot; onmouseover=&quot;showTip(event, 'fs99', 216)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs91', 217)&quot; onmouseover=&quot;showTip(event, 'fs91', 217)&quot; class=&quot;p&quot;&gt;Home&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 218)&quot; onmouseover=&quot;showTip(event, 'fs100', 218)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 219)&quot; onmouseover=&quot;showTip(event, 'fs35', 219)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Home Nr. &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 220)&quot; onmouseover=&quot;showTip(event, 'fs100', 220)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs92', 221)&quot; onmouseover=&quot;showTip(event, 'fs92', 221)&quot; class=&quot;p&quot;&gt;Office&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 222)&quot; onmouseover=&quot;showTip(event, 'fs100', 222)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 223)&quot; onmouseover=&quot;showTip(event, 'fs35', 223)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Office Nr. &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 224)&quot; onmouseover=&quot;showTip(event, 'fs100', 224)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs93', 225)&quot; onmouseover=&quot;showTip(event, 'fs93', 225)&quot; class=&quot;p&quot;&gt;Mobile&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 226)&quot; onmouseover=&quot;showTip(event, 'fs100', 226)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 227)&quot; onmouseover=&quot;showTip(event, 'fs35', 227)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Mobile Nr. &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 228)&quot; onmouseover=&quot;showTip(event, 'fs100', 228)&quot; class=&quot;i&quot;&gt;nr&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs98', 229)&quot; onmouseover=&quot;showTip(event, 'fs98', 229)&quot; class=&quot;f&quot;&gt;printPhoneNumber&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs91', 230)&quot; onmouseover=&quot;showTip(event, 'fs91', 230)&quot; class=&quot;p&quot;&gt;Home&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Home Nr. 123&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs98', 231)&quot; onmouseover=&quot;showTip(event, 'fs98', 231)&quot; class=&quot;f&quot;&gt;printPhoneNumber&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs92', 232)&quot; onmouseover=&quot;showTip(event, 'fs92', 232)&quot; class=&quot;p&quot;&gt;Office&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;456&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Office Nr. 456&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs98', 233)&quot; onmouseover=&quot;showTip(event, 'fs98', 233)&quot; class=&quot;f&quot;&gt;printPhoneNumber&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs93', 234)&quot; onmouseover=&quot;showTip(event, 'fs93', 234)&quot; class=&quot;p&quot;&gt;Mobile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;789&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Mobile Nr. 789&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Not &lt;em&gt;Pattern Matching&lt;/em&gt; all cases leads to an error. If we forgot to write Code for the
&lt;code&gt;Mobile&lt;/code&gt; case we get a compile-time &lt;em&gt;warning&lt;/em&gt; that tells us that we forgot to
handle this case.&lt;/p&gt;
&lt;p&gt;Imagine in the future you want to extend &lt;code&gt;PhoneNumber&lt;/code&gt; and add additional types like
&lt;code&gt;Private&lt;/code&gt;, &lt;code&gt;Fax&lt;/code&gt;, &lt;code&gt;Pager&lt;/code&gt; and &lt;code&gt;Other&lt;/code&gt;. With a &lt;code&gt;string&lt;/code&gt; you will just end up with buggy
code, as now you have to find all the places in your code where yo do decisions based on
the phone number types. The language also don't help you to find all those spots.&lt;/p&gt;
&lt;p&gt;But with a DU instead the compiler will give you all places where you worked with
the &lt;code&gt;PhoneNumber&lt;/code&gt; type and you didn't handle the new cases.&lt;/p&gt;
&lt;a name=&quot;du-as-sum&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Discriminated Unions as Sum-Types&lt;/h2&gt;
&lt;p&gt;So far we talked about &lt;em&gt;Tuple&lt;/em&gt; and &lt;em&gt;Records&lt;/em&gt; as a &lt;em&gt;Product-type&lt;/em&gt;. We name it &lt;em&gt;Product-type&lt;/em&gt;
because we get the amount of possible combinations by multiplying the types. A tuple with
2, 3 or 4 &lt;code&gt;bool&lt;/code&gt; can handle &lt;code&gt;2 * 2&lt;/code&gt; (4), &lt;code&gt;2 * 2 * 2&lt;/code&gt; (8) or &lt;code&gt;2 * 2 * 2 * 2&lt;/code&gt; (16) different
values. The same is true for a &lt;em&gt;Record type&lt;/em&gt; as a record type only provides a name for the
fields, but doesn't change the structure itself.&lt;/p&gt;
&lt;p&gt;But with a Discriminated Union the possible amount of values only adds up. For example
a choice with four &lt;code&gt;bool&lt;/code&gt; looks like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 235)&quot; onmouseover=&quot;showTip(event, 'fs101', 235)&quot; class=&quot;t&quot;&gt;Choice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs102', 236)&quot; onmouseover=&quot;showTip(event, 'fs102', 236)&quot; class=&quot;p&quot;&gt;Choice1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 237)&quot; onmouseover=&quot;showTip(event, 'fs68', 237)&quot; class=&quot;t&quot;&gt;bool&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs103', 238)&quot; onmouseover=&quot;showTip(event, 'fs103', 238)&quot; class=&quot;p&quot;&gt;Choice2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 239)&quot; onmouseover=&quot;showTip(event, 'fs68', 239)&quot; class=&quot;t&quot;&gt;bool&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs104', 240)&quot; onmouseover=&quot;showTip(event, 'fs104', 240)&quot; class=&quot;p&quot;&gt;Choice3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 241)&quot; onmouseover=&quot;showTip(event, 'fs68', 241)&quot; class=&quot;t&quot;&gt;bool&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs105', 242)&quot; onmouseover=&quot;showTip(event, 'fs105', 242)&quot; class=&quot;p&quot;&gt;Choice4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 243)&quot; onmouseover=&quot;showTip(event, 'fs68', 243)&quot; class=&quot;t&quot;&gt;bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we only have &lt;code&gt;8&lt;/code&gt; possible values. We have four possible choices, and each choice can contain
two different states &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. So we only have &lt;code&gt;8&lt;/code&gt; possible values.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;Choice1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;Choice1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;Choice2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;Choice2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;Choice3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;Choice3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs105', 244)&quot; onmouseover=&quot;showTip(event, 'fs105', 244)&quot; class=&quot;p&quot;&gt;Choice4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs105', 245)&quot; onmouseover=&quot;showTip(event, 'fs105', 245)&quot; class=&quot;p&quot;&gt;Choice4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can calculate the amount of possible values by adding the types. &lt;code&gt;2 + 2 + 2 + 2&lt;/code&gt;. That's why
we call it a &lt;em&gt;Sum-Type&lt;/em&gt;. But what is the point of calculating the amount of possible values?&lt;/p&gt;
&lt;p&gt;First, we usually don't care for the exact amount of values a type can represent. When we use
four &lt;code&gt;int&lt;/code&gt; we don't care how many billions of different values it can save. But we can use it in a
mathematical way. For example we could use &lt;code&gt;i&lt;/code&gt; that represents &lt;code&gt;int&lt;/code&gt;. A Product type with
four &lt;code&gt;int&lt;/code&gt; can thus save &lt;code&gt;i*i*i*i&lt;/code&gt; or &lt;code&gt;i ^ 4&lt;/code&gt; possible values.&lt;/p&gt;
&lt;p&gt;A Discriminated Union like &lt;code&gt;Choice&lt;/code&gt; with four cases and every case contains a single &lt;code&gt;int&lt;/code&gt; can
save &lt;code&gt;i + i + i + i&lt;/code&gt; or in other words &lt;code&gt;4i&lt;/code&gt; cases. Doing that kind of calculations is what
we call the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cardinality&quot;&gt;Cardinality&lt;/a&gt;. The point of calculating
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cardinality&quot;&gt;Cardinality&lt;/a&gt; is that we can calculate if two
different types can represent the same data.&lt;/p&gt;
&lt;p&gt;For example let's look at the following type definitions:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Cardinality&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs106', 246)&quot; onmouseover=&quot;showTip(event, 'fs106', 246)&quot; class=&quot;t&quot;&gt;Line&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs43', 247)&quot; onmouseover=&quot;showTip(event, 'fs43', 247)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 248)&quot; onmouseover=&quot;showTip(event, 'fs43', 248)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs43', 249)&quot; onmouseover=&quot;showTip(event, 'fs43', 249)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 250)&quot; onmouseover=&quot;showTip(event, 'fs43', 250)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 251)&quot; onmouseover=&quot;showTip(event, 'fs107', 251)&quot; class=&quot;t&quot;&gt;Line2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 252)&quot; onmouseover=&quot;showTip(event, 'fs43', 252)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 253)&quot; onmouseover=&quot;showTip(event, 'fs43', 253)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 254)&quot; onmouseover=&quot;showTip(event, 'fs43', 254)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 255)&quot; onmouseover=&quot;showTip(event, 'fs43', 255)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs108', 256)&quot; onmouseover=&quot;showTip(event, 'fs108', 256)&quot; class=&quot;i&quot;&gt;line&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs109', 257)&quot; onmouseover=&quot;showTip(event, 'fs109', 257)&quot; class=&quot;i&quot;&gt;line2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Line&lt;/code&gt; and &lt;code&gt;Line2&lt;/code&gt; are two different types.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Line&lt;/code&gt; contains &lt;strong&gt;two Tuples&lt;/strong&gt; and each of those Tuple contain two &lt;code&gt;int&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Line2&lt;/code&gt; on the other hand is a single tuple with four &lt;code&gt;int&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even if their are of different shapes, we can easily see that both types can save
the same amount of data. We can easily proof that by calculating the Cardinality.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
For &lt;code&gt;Line&lt;/code&gt; it looks like &lt;code&gt;(i * i) * (i * i)&lt;/code&gt; that turns into &lt;code&gt;(i ^ 2) * (i ^ 2)&lt;/code&gt; and this
again turns into &lt;code&gt;i ^ 4&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Line2&lt;/code&gt; is &lt;code&gt;i * i * i * i&lt;/code&gt; and directly turns into &lt;code&gt;i ^ 4&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With this we now know that we can transform any &lt;code&gt;Line&lt;/code&gt; into a &lt;code&gt;Line2&lt;/code&gt; or vice-versa.
This is important, because in programming it is important to choose the right data-format.
Choosing the right format often means some task can either becomes more easier to solve,
or we could come up with more efficient algorithms. By calculating the &lt;em&gt;Cardinality&lt;/em&gt;
we can be sure that we have different representation of the same data.&lt;/p&gt;
&lt;p&gt;Another way to use it is when we explicitly want to reduce the amount of possible values.
We did that above with the &lt;code&gt;PhoneNumber&lt;/code&gt; type. Having less possible values also means we
need less code to check the edge-cases. Changing a &lt;code&gt;string&lt;/code&gt; into a DU with just four cases
makes the code simpler and less error-prone. Especially if the language forces you
to check for all cases you could have, what F# does.&lt;/p&gt;
&lt;a name=&quot;single-du&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Single-case Discriminated Unions&lt;/h2&gt;
&lt;p&gt;So far we only have seen Discriminated Unions that contain multiple choices, but we also
can create a DU with just a single choice. You will probably wonder why that is useful in
the first place.&lt;/p&gt;
&lt;p&gt;Do you remember the Problem with &lt;code&gt;Line&lt;/code&gt; and &lt;code&gt;Rect&lt;/code&gt; at the beginning and that we could
compare &lt;code&gt;Line&lt;/code&gt; and &lt;code&gt;Rect&lt;/code&gt; because they were just type-aliases? By wrapping the
tuples in a &lt;em&gt;Single-case Discriminated Union&lt;/em&gt; we get distinct types.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;TupleWithDU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 258)&quot; onmouseover=&quot;showTip(event, 'fs110', 258)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 259)&quot; onmouseover=&quot;showTip(event, 'fs110', 259)&quot; class=&quot;p&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 260)&quot; onmouseover=&quot;showTip(event, 'fs33', 260)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 261)&quot; onmouseover=&quot;showTip(event, 'fs33', 261)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs111', 262)&quot; onmouseover=&quot;showTip(event, 'fs111', 262)&quot; class=&quot;t&quot;&gt;Line&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs111', 263)&quot; onmouseover=&quot;showTip(event, 'fs111', 263)&quot; class=&quot;p&quot;&gt;Line&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 264)&quot; onmouseover=&quot;showTip(event, 'fs110', 264)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 265)&quot; onmouseover=&quot;showTip(event, 'fs110', 265)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 266)&quot; onmouseover=&quot;showTip(event, 'fs112', 266)&quot; class=&quot;t&quot;&gt;Rect&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 267)&quot; onmouseover=&quot;showTip(event, 'fs112', 267)&quot; class=&quot;p&quot;&gt;Rect&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 268)&quot; onmouseover=&quot;showTip(event, 'fs110', 268)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 269)&quot; onmouseover=&quot;showTip(event, 'fs110', 269)&quot; class=&quot;t&quot;&gt;Point&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs114', 271)&quot; onmouseover=&quot;showTip(event, 'fs114', 271)&quot; class=&quot;i&quot;&gt;p1&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 272)&quot; onmouseover=&quot;showTip(event, 'fs110', 272)&quot; class=&quot;p&quot;&gt;Point&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs115', 273)&quot; onmouseover=&quot;showTip(event, 'fs115', 273)&quot; class=&quot;i&quot;&gt;p2&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 274)&quot; onmouseover=&quot;showTip(event, 'fs110', 274)&quot; class=&quot;p&quot;&gt;Point&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;5.5&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;8.8&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 275)&quot; onmouseover=&quot;showTip(event, 'fs54', 275)&quot; class=&quot;i&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs111', 276)&quot; onmouseover=&quot;showTip(event, 'fs111', 276)&quot; class=&quot;p&quot;&gt;Line&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs114', 277)&quot; onmouseover=&quot;showTip(event, 'fs114', 277)&quot; class=&quot;i&quot;&gt;p1&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs115', 278)&quot; onmouseover=&quot;showTip(event, 'fs115', 278)&quot; class=&quot;i&quot;&gt;p2&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 279)&quot; onmouseover=&quot;showTip(event, 'fs55', 279)&quot; class=&quot;i&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 280)&quot; onmouseover=&quot;showTip(event, 'fs112', 280)&quot; class=&quot;p&quot;&gt;Rect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs114', 281)&quot; onmouseover=&quot;showTip(event, 'fs114', 281)&quot; class=&quot;i&quot;&gt;p1&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs115', 282)&quot; onmouseover=&quot;showTip(event, 'fs115', 282)&quot; class=&quot;i&quot;&gt;p2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we cannot do &lt;code&gt;line = rect&lt;/code&gt; anymore. We also cannot pass a &lt;code&gt;Rect&lt;/code&gt; to a function
that expects a &lt;code&gt;Line&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But how do we work with those values? Do we always have to &lt;em&gt;Pattern Match&lt;/em&gt; even that we know
there only exists a single case? Yes we do, but every &lt;code&gt;let&lt;/code&gt; expression is already &lt;em&gt;Pattern
Matching&lt;/em&gt;. So we also can write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs112', 283)&quot; onmouseover=&quot;showTip(event, 'fs112', 283)&quot; class=&quot;p&quot;&gt;Rect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs116', 284)&quot; onmouseover=&quot;showTip(event, 'fs116', 284)&quot; class=&quot;i&quot;&gt;tl&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs117', 285)&quot; onmouseover=&quot;showTip(event, 'fs117', 285)&quot; class=&quot;i&quot;&gt;br&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 286)&quot; onmouseover=&quot;showTip(event, 'fs55', 286)&quot; class=&quot;i&quot;&gt;rect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This way we can extract a DU the same way we did with a Tuple. Not only that, we also can
use &lt;em&gt;Pattern Matching&lt;/em&gt; in a function definition, because a function definition is also just
defined by &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 287)&quot; onmouseover=&quot;showTip(event, 'fs118', 287)&quot; class=&quot;f&quot;&gt;printRect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs112', 288)&quot; onmouseover=&quot;showTip(event, 'fs112', 288)&quot; class=&quot;p&quot;&gt;Rect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs119', 289)&quot; onmouseover=&quot;showTip(event, 'fs119', 289)&quot; class=&quot;i&quot;&gt;tl&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs120', 290)&quot; onmouseover=&quot;showTip(event, 'fs120', 290)&quot; class=&quot;i&quot;&gt;br&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs110', 291)&quot; onmouseover=&quot;showTip(event, 'fs110', 291)&quot; class=&quot;p&quot;&gt;Point&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs121', 292)&quot; onmouseover=&quot;showTip(event, 'fs121', 292)&quot; class=&quot;i&quot;&gt;x1&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs122', 293)&quot; onmouseover=&quot;showTip(event, 'fs122', 293)&quot; class=&quot;i&quot;&gt;y1&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 294)&quot; onmouseover=&quot;showTip(event, 'fs119', 294)&quot; class=&quot;i&quot;&gt;tl&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs110', 295)&quot; onmouseover=&quot;showTip(event, 'fs110', 295)&quot; class=&quot;p&quot;&gt;Point&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs123', 296)&quot; onmouseover=&quot;showTip(event, 'fs123', 296)&quot; class=&quot;i&quot;&gt;x2&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs124', 297)&quot; onmouseover=&quot;showTip(event, 'fs124', 297)&quot; class=&quot;i&quot;&gt;y2&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 298)&quot; onmouseover=&quot;showTip(event, 'fs120', 298)&quot; class=&quot;i&quot;&gt;br&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs35', 299)&quot; onmouseover=&quot;showTip(event, 'fs35', 299)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Top Left: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs121', 300)&quot; onmouseover=&quot;showTip(event, 'fs121', 300)&quot; class=&quot;i&quot;&gt;x1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 301)&quot; onmouseover=&quot;showTip(event, 'fs122', 301)&quot; class=&quot;i&quot;&gt;y1&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs35', 302)&quot; onmouseover=&quot;showTip(event, 'fs35', 302)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bottom Right: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 303)&quot; onmouseover=&quot;showTip(event, 'fs123', 303)&quot; class=&quot;i&quot;&gt;x2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs124', 304)&quot; onmouseover=&quot;showTip(event, 'fs124', 304)&quot; class=&quot;i&quot;&gt;y2&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs118', 305)&quot; onmouseover=&quot;showTip(event, 'fs118', 305)&quot; class=&quot;f&quot;&gt;printRect&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 306)&quot; onmouseover=&quot;showTip(event, 'fs55', 306)&quot; class=&quot;i&quot;&gt;rect&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Top Left: 0.000000,5.000000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Bottom Right: 5.500000,8.800000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;printRect&lt;/code&gt; is now a function expecting &lt;code&gt;Rect&lt;/code&gt; as it's input. We cannot pass &lt;code&gt;line&lt;/code&gt; anymore
to that function. Another important thing is that we also can nest &lt;em&gt;Pattern Matches&lt;/em&gt; inside another.
This way we also can extract &lt;code&gt;tl&lt;/code&gt; and &lt;code&gt;br&lt;/code&gt; inside the function definition instead of doing
it in its own &lt;code&gt;let&lt;/code&gt; bindings.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 307)&quot; onmouseover=&quot;showTip(event, 'fs118', 307)&quot; class=&quot;f&quot;&gt;printRect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs112', 308)&quot; onmouseover=&quot;showTip(event, 'fs112', 308)&quot; class=&quot;p&quot;&gt;Rect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs110', 309)&quot; onmouseover=&quot;showTip(event, 'fs110', 309)&quot; class=&quot;p&quot;&gt;Point&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs121', 310)&quot; onmouseover=&quot;showTip(event, 'fs121', 310)&quot; class=&quot;i&quot;&gt;x1&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs122', 311)&quot; onmouseover=&quot;showTip(event, 'fs122', 311)&quot; class=&quot;i&quot;&gt;y1&lt;/span&gt;), &lt;span onmouseout=&quot;hideTip(event, 'fs110', 312)&quot; onmouseover=&quot;showTip(event, 'fs110', 312)&quot; class=&quot;p&quot;&gt;Point&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs123', 313)&quot; onmouseover=&quot;showTip(event, 'fs123', 313)&quot; class=&quot;i&quot;&gt;x2&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs124', 314)&quot; onmouseover=&quot;showTip(event, 'fs124', 314)&quot; class=&quot;i&quot;&gt;y2&lt;/span&gt;))) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs35', 315)&quot; onmouseover=&quot;showTip(event, 'fs35', 315)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Top Left: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y1&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs35', 316)&quot; onmouseover=&quot;showTip(event, 'fs35', 316)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bottom Right: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A Single-case DU is not only useful for giving tuples a distinct type. We can generally wrap
all types into a Single-Case DU and separate it in this way. For example at the beginning i
created a &lt;code&gt;Person&lt;/code&gt; tuple like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 317)&quot; onmouseover=&quot;showTip(event, 'fs21', 317)&quot; class=&quot;i&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 318)&quot; onmouseover=&quot;showTip(event, 'fs22', 318)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 319)&quot; onmouseover=&quot;showTip(event, 'fs22', 319)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 320)&quot; onmouseover=&quot;showTip(event, 'fs22', 320)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 321)&quot; onmouseover=&quot;showTip(event, 'fs15', 321)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Do you still remember what the different &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; types represented?
Me neither. So, why not wrap those Types in a Single-Case DU and give it more meaning?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;PersonDU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 322)&quot; onmouseover=&quot;showTip(event, 'fs125', 322)&quot; class=&quot;t&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 323)&quot; onmouseover=&quot;showTip(event, 'fs125', 323)&quot; class=&quot;p&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 324)&quot; onmouseover=&quot;showTip(event, 'fs27', 324)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 325)&quot; onmouseover=&quot;showTip(event, 'fs126', 325)&quot; class=&quot;t&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 326)&quot; onmouseover=&quot;showTip(event, 'fs126', 326)&quot; class=&quot;p&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 327)&quot; onmouseover=&quot;showTip(event, 'fs27', 327)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 328)&quot; onmouseover=&quot;showTip(event, 'fs127', 328)&quot; class=&quot;t&quot;&gt;HairColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 329)&quot; onmouseover=&quot;showTip(event, 'fs127', 329)&quot; class=&quot;p&quot;&gt;HairColor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 330)&quot; onmouseover=&quot;showTip(event, 'fs27', 330)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs128', 331)&quot; onmouseover=&quot;showTip(event, 'fs128', 331)&quot; class=&quot;t&quot;&gt;Birthday&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs128', 332)&quot; onmouseover=&quot;showTip(event, 'fs128', 332)&quot; class=&quot;p&quot;&gt;Birthday&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 333)&quot; onmouseover=&quot;showTip(event, 'fs31', 333)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 334)&quot; onmouseover=&quot;showTip(event, 'fs129', 334)&quot; class=&quot;t&quot;&gt;Size&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 335)&quot; onmouseover=&quot;showTip(event, 'fs129', 335)&quot; class=&quot;p&quot;&gt;Size&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 336)&quot; onmouseover=&quot;showTip(event, 'fs33', 336)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 337)&quot; onmouseover=&quot;showTip(event, 'fs130', 337)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 338)&quot; onmouseover=&quot;showTip(event, 'fs130', 338)&quot; class=&quot;p&quot;&gt;Person&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 339)&quot; onmouseover=&quot;showTip(event, 'fs125', 339)&quot; class=&quot;t&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 340)&quot; onmouseover=&quot;showTip(event, 'fs126', 340)&quot; class=&quot;t&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 341)&quot; onmouseover=&quot;showTip(event, 'fs127', 341)&quot; class=&quot;t&quot;&gt;HairColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs128', 342)&quot; onmouseover=&quot;showTip(event, 'fs128', 342)&quot; class=&quot;t&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 343)&quot; onmouseover=&quot;showTip(event, 'fs129', 343)&quot; class=&quot;t&quot;&gt;Size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I think a type like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 345)&quot; onmouseover=&quot;showTip(event, 'fs21', 345)&quot; class=&quot;i&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 346)&quot; onmouseover=&quot;showTip(event, 'fs21', 346)&quot; class=&quot;i&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;HairColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;is by far more readable and understandable. A function like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs132', 347)&quot; onmouseover=&quot;showTip(event, 'fs132', 347)&quot; class=&quot;f&quot;&gt;getBirthday&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs130', 348)&quot; onmouseover=&quot;showTip(event, 'fs130', 348)&quot; class=&quot;p&quot;&gt;Person&lt;/span&gt; (_,_,_,&lt;span onmouseout=&quot;hideTip(event, 'fs133', 349)&quot; onmouseover=&quot;showTip(event, 'fs133', 349)&quot; class=&quot;i&quot;&gt;bd&lt;/span&gt;,_)) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;bd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now also has the Type Signature &lt;code&gt;Person -&amp;gt; Birthday&lt;/code&gt;. We would easily spot errors like this
one.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 350)&quot; onmouseover=&quot;showTip(event, 'fs134', 350)&quot; class=&quot;f&quot;&gt;getBirthday&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs130', 351)&quot; onmouseover=&quot;showTip(event, 'fs130', 351)&quot; class=&quot;p&quot;&gt;Person&lt;/span&gt; (_,_,&lt;span onmouseout=&quot;hideTip(event, 'fs135', 352)&quot; onmouseover=&quot;showTip(event, 'fs135', 352)&quot; class=&quot;i&quot;&gt;bd&lt;/span&gt;,_,_)) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;bd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A function named &lt;code&gt;getBirthday&lt;/code&gt; with the signature &lt;code&gt;Person -&amp;gt; HairColor&lt;/code&gt; doesn't seems right!
But it overall helps by eliminating a lot of mistakes. By wrapping types into a DU, we can
enhance a type and make it more distinct to other type.&lt;/p&gt;
&lt;p&gt;For example instead of using &lt;code&gt;string&lt;/code&gt; for an &lt;code&gt;Email&lt;/code&gt;. We could generate a &lt;code&gt;Email&lt;/code&gt; type on it's own.
On top of it, we can create functions that take a &lt;code&gt;string&lt;/code&gt; and return an &lt;code&gt;Email&lt;/code&gt;, and we can add
validation to it, so when we want an &lt;code&gt;Email&lt;/code&gt; we always ensure we have a valid &lt;code&gt;Email&lt;/code&gt;, not
just some random &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That's why I mentioned at the beginning that using &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; and so on
is bad practice. Because we hardly never expects that something can be any &lt;code&gt;string&lt;/code&gt;, we
always have some validation. A &lt;code&gt;Uri&lt;/code&gt;, &lt;code&gt;Email&lt;/code&gt;, &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Content&lt;/code&gt;, &lt;code&gt;HairColor&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt; and
so on might all be represented by a &lt;code&gt;string&lt;/code&gt;. But that doesn't mean they are interchangeable,
or that every &lt;code&gt;string&lt;/code&gt; is automatically a valid &lt;code&gt;Email&lt;/code&gt;, and it also doesn't makes sense
to compare those different types at all.&lt;/p&gt;
&lt;p&gt;Using primitive types like &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; throughout your code is also what we
name &lt;a href=&quot;http://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/&quot;&gt;Primitive Obsession&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With DUs we can easily get rid of &lt;em&gt;Primitive Obsession&lt;/em&gt; and
&lt;a href=&quot;http://reidev275.azurewebsites.net/eliminating-bugs-with-single-case-discriminated-unions/&quot;&gt;eliminate a lot of bugs&lt;/a&gt;.&lt;/p&gt;
&lt;a name=&quot;units-of-measure&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Units of Measure&lt;/h2&gt;
&lt;p&gt;One feature that F# offers that is not directly related to &lt;em&gt;Algebraic-data types&lt;/em&gt; is
&lt;em&gt;Unit of Measures&lt;/em&gt;. Before we go deeper into this topic, let's re-look at our latest
&lt;code&gt;Person&lt;/code&gt; definition. We created a &lt;em&gt;wrapper&lt;/em&gt; called &lt;code&gt;Size&lt;/code&gt;, a &lt;code&gt;Size&lt;/code&gt; contains a &lt;code&gt;float&lt;/code&gt;,
but is that really a good definition? What means &lt;code&gt;Size 172.0&lt;/code&gt; anyway? &lt;code&gt;172&lt;/code&gt; of what?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Meters&lt;/em&gt;, &lt;em&gt;feets&lt;/em&gt;, &lt;em&gt;miles&lt;/em&gt; or &lt;em&gt;egg-sizes&lt;/em&gt;? Working just with &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; and so
on is probably one common source of errors. The most famous one is probably
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mars_Climate_Orbiter&quot;&gt;Mars Climate Orbiter&lt;/a&gt;. Because of
two software-systems, one produced &lt;em&gt;newton-seconds&lt;/em&gt;, and another one produced &lt;em&gt;pound-seconds&lt;/em&gt;
the calculation to enter the Mars atmosphere was wrong and it resulted in the destruction
of the &lt;em&gt;Mars Orbiter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A simple definition like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 353)&quot; onmouseover=&quot;showTip(event, 'fs136', 353)&quot; class=&quot;t&quot;&gt;Lbfs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 354)&quot; onmouseover=&quot;showTip(event, 'fs136', 354)&quot; class=&quot;p&quot;&gt;Lbfs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 355)&quot; onmouseover=&quot;showTip(event, 'fs33', 355)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs137', 356)&quot; onmouseover=&quot;showTip(event, 'fs137', 356)&quot; class=&quot;t&quot;&gt;Ns&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs137', 357)&quot; onmouseover=&quot;showTip(event, 'fs137', 357)&quot; class=&quot;p&quot;&gt;Ns&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 358)&quot; onmouseover=&quot;showTip(event, 'fs33', 358)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Could have eliminated that bug, because we were not able to use &lt;em&gt;Lbfs&lt;/em&gt; and &lt;em&gt;Ns&lt;/em&gt; interchangeable.&lt;/p&gt;
&lt;p&gt;In the same sense it usually makes sense to add unit of measures to types like &lt;code&gt;float&lt;/code&gt;, to make
it clear which unit we expect. We not only eliminate dozens of possible bugs, we also make
the code more readable by having types like &lt;code&gt;meter&lt;/code&gt;, &lt;code&gt;km&lt;/code&gt;, &lt;code&gt;feet&lt;/code&gt; and so on, instead of just
&lt;code&gt;float&lt;/code&gt; everywhere. We could for example upgrade &lt;code&gt;Size&lt;/code&gt; like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs138', 359)&quot; onmouseover=&quot;showTip(event, 'fs138', 359)&quot; class=&quot;t&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs139', 360)&quot; onmouseover=&quot;showTip(event, 'fs139', 360)&quot; class=&quot;p&quot;&gt;Cm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 361)&quot; onmouseover=&quot;showTip(event, 'fs33', 361)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now a definition like &lt;code&gt;Cm 172.0&lt;/code&gt; makes it clear that we have &lt;code&gt;172&lt;/code&gt; &lt;em&gt;centimeter&lt;/em&gt;. We also
cannot easily add a float to a &lt;code&gt;Size&lt;/code&gt; anymore. Because they are of different types.&lt;/p&gt;
&lt;p&gt;Specifying units for numeric values is quite common and can help a lot to make code less
error-prone. But when we work with &lt;code&gt;Cm&lt;/code&gt; we now always have to &lt;em&gt;unwrap&lt;/em&gt; a &lt;code&gt;Cm&lt;/code&gt; type
to work with it. If we just want to add two &lt;code&gt;Cm&lt;/code&gt; together we have to write a function
that unwraps both add the &lt;code&gt;float&lt;/code&gt; together and re-wrap it again in a &lt;code&gt;Cm&lt;/code&gt; type.&lt;/p&gt;
&lt;p&gt;It has advantages, but it is annoying to do that all over again for every numeric type,
because especially for numbers we always expect that we can add, subtract, multiply or divide
numbers. Because wrapping of numbers is such a common task, F# provides a feature named
&lt;em&gt;Units of Measure&lt;/em&gt; that we can use instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 362)&quot; onmouseover=&quot;showTip(event, 'fs140', 362)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs141', 363)&quot; onmouseover=&quot;showTip(event, 'fs141', 363)&quot; class=&quot;t&quot;&gt;meter&lt;/span&gt;
[&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 364)&quot; onmouseover=&quot;showTip(event, 'fs140', 364)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs142', 365)&quot; onmouseover=&quot;showTip(event, 'fs142', 365)&quot; class=&quot;t&quot;&gt;miles&lt;/span&gt;
[&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 366)&quot; onmouseover=&quot;showTip(event, 'fs140', 366)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs143', 367)&quot; onmouseover=&quot;showTip(event, 'fs143', 367)&quot; class=&quot;t&quot;&gt;hour&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs144', 368)&quot; onmouseover=&quot;showTip(event, 'fs144', 368)&quot; class=&quot;i&quot;&gt;sizeA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs141', 369)&quot; onmouseover=&quot;showTip(event, 'fs141', 369)&quot; class=&quot;t&quot;&gt;meter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs145', 370)&quot; onmouseover=&quot;showTip(event, 'fs145', 370)&quot; class=&quot;i&quot;&gt;sizeB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs142', 371)&quot; onmouseover=&quot;showTip(event, 'fs142', 371)&quot; class=&quot;t&quot;&gt;miles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we now do something like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs146', 372)&quot; onmouseover=&quot;showTip(event, 'fs146', 372)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sizeA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sizeB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We get a compile-time error telling us that &lt;em&gt;meter&lt;/em&gt; and &lt;em&gt;miles&lt;/em&gt; doesn't match up. The benefit is
that we can work with those numbers without unwrapping them.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs147', 373)&quot; onmouseover=&quot;showTip(event, 'fs147', 373)&quot; class=&quot;i&quot;&gt;doubleSize&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs144', 374)&quot; onmouseover=&quot;showTip(event, 'fs144', 374)&quot; class=&quot;i&quot;&gt;sizeA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs148', 375)&quot; onmouseover=&quot;showTip(event, 'fs148', 375)&quot; class=&quot;i&quot;&gt;area&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs144', 376)&quot; onmouseover=&quot;showTip(event, 'fs144', 376)&quot; class=&quot;i&quot;&gt;sizeA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs144', 377)&quot; onmouseover=&quot;showTip(event, 'fs144', 377)&quot; class=&quot;i&quot;&gt;sizeA&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs149', 378)&quot; onmouseover=&quot;showTip(event, 'fs149', 378)&quot; class=&quot;i&quot;&gt;meterPerHour&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs144', 379)&quot; onmouseover=&quot;showTip(event, 'fs144', 379)&quot; class=&quot;i&quot;&gt;sizeA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs143', 380)&quot; onmouseover=&quot;showTip(event, 'fs143', 380)&quot; class=&quot;t&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It is quite interesting to look at the types we now get. &lt;code&gt;doubleSize&lt;/code&gt; is &lt;code&gt;20.0&amp;lt;meter&amp;gt;&lt;/code&gt;. But
&lt;code&gt;area&lt;/code&gt; is &lt;code&gt;100.0&amp;lt;meter ^ 2&amp;gt;&lt;/code&gt;. So we get correctly &lt;code&gt;m²&lt;/code&gt; not just &lt;code&gt;meter&lt;/code&gt;. Trying to do
&lt;code&gt;doubleSize + area&lt;/code&gt; would lead to an error again, because the types don't match up.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;meterPerHour&lt;/code&gt; is &lt;code&gt;3.333333333&amp;lt;meter/hour&amp;gt;&lt;/code&gt;, once again a new unit. It is more common
to use &lt;code&gt;kilometer&lt;/code&gt; and &lt;code&gt;kmh&lt;/code&gt; (kilometer per hour) and &lt;code&gt;mph&lt;/code&gt; (miles per hour).&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 381)&quot; onmouseover=&quot;showTip(event, 'fs140', 381)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs150', 382)&quot; onmouseover=&quot;showTip(event, 'fs150', 382)&quot; class=&quot;t&quot;&gt;km&lt;/span&gt;
[&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 383)&quot; onmouseover=&quot;showTip(event, 'fs140', 383)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs151', 384)&quot; onmouseover=&quot;showTip(event, 'fs151', 384)&quot; class=&quot;t&quot;&gt;kmh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs150', 385)&quot; onmouseover=&quot;showTip(event, 'fs150', 385)&quot; class=&quot;t&quot;&gt;km&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs143', 386)&quot; onmouseover=&quot;showTip(event, 'fs143', 386)&quot; class=&quot;t&quot;&gt;hour&lt;/span&gt;
[&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 387)&quot; onmouseover=&quot;showTip(event, 'fs140', 387)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs152', 388)&quot; onmouseover=&quot;showTip(event, 'fs152', 388)&quot; class=&quot;t&quot;&gt;mph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs142', 389)&quot; onmouseover=&quot;showTip(event, 'fs142', 389)&quot; class=&quot;t&quot;&gt;miles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs143', 390)&quot; onmouseover=&quot;showTip(event, 'fs143', 390)&quot; class=&quot;t&quot;&gt;hour&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs153', 391)&quot; onmouseover=&quot;showTip(event, 'fs153', 391)&quot; class=&quot;i&quot;&gt;distance&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;320.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs150', 392)&quot; onmouseover=&quot;showTip(event, 'fs150', 392)&quot; class=&quot;t&quot;&gt;km&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs154', 393)&quot; onmouseover=&quot;showTip(event, 'fs154', 393)&quot; class=&quot;i&quot;&gt;timeTaken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs143', 394)&quot; onmouseover=&quot;showTip(event, 'fs143', 394)&quot; class=&quot;t&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 395)&quot; onmouseover=&quot;showTip(event, 'fs155', 395)&quot; class=&quot;i&quot;&gt;speed&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs153', 396)&quot; onmouseover=&quot;showTip(event, 'fs153', 396)&quot; class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs154', 397)&quot; onmouseover=&quot;showTip(event, 'fs154', 397)&quot; class=&quot;i&quot;&gt;timeTaken&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 71.1111111&amp;lt;kmh&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 398)&quot; onmouseover=&quot;showTip(event, 'fs156', 398)&quot; class=&quot;i&quot;&gt;newSpeed&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 399)&quot; onmouseover=&quot;showTip(event, 'fs155', 399)&quot; class=&quot;i&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;30.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs151', 400)&quot; onmouseover=&quot;showTip(event, 'fs151', 400)&quot; class=&quot;t&quot;&gt;kmh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 101.1111111&amp;lt;kmh&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs157', 401)&quot; onmouseover=&quot;showTip(event, 'fs157', 401)&quot; class=&quot;i&quot;&gt;newTimeTaken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs153', 402)&quot; onmouseover=&quot;showTip(event, 'fs153', 402)&quot; class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 403)&quot; onmouseover=&quot;showTip(event, 'fs156', 403)&quot; class=&quot;i&quot;&gt;newSpeed&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3.164835165&amp;lt;hour&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;With this example we not only can tag the different numbers with &lt;code&gt;km&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt; and so on.
The types also correctly convert to other type. Dividing &lt;code&gt;distance&lt;/code&gt; by &lt;code&gt;timeTaken&lt;/code&gt; produces &lt;code&gt;kmh&lt;/code&gt;.
So we get the result that we travelled with an average speed of &lt;code&gt;71.11&amp;lt;kmh&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we drive &lt;code&gt;30&amp;lt;kmh&amp;gt;&lt;/code&gt; faster, we will only need &lt;code&gt;3.16&amp;lt;hour&amp;gt;&lt;/code&gt; instead of &lt;code&gt;4.5&amp;lt;hour&amp;gt;&lt;/code&gt;. We can
look at the types and see if we get our wanted result. For example when we write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs158', 404)&quot; onmouseover=&quot;showTip(event, 'fs158', 404)&quot; class=&quot;i&quot;&gt;newTimeTaken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newSpeed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we divide a &lt;code&gt;&amp;lt;km&amp;gt;&lt;/code&gt; by &lt;code&gt;&amp;lt;km/hour&amp;gt;&lt;/code&gt; this result is just a &lt;code&gt;&amp;lt;hour&amp;gt;&lt;/code&gt;. But when we do&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs158', 405)&quot; onmouseover=&quot;showTip(event, 'fs158', 405)&quot; class=&quot;i&quot;&gt;newTimeTaken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newSpeed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;then we still get a result &lt;code&gt;32355.55556&amp;lt;km ^ 2/hour&amp;gt;&lt;/code&gt;. But we probably didn't wanted
to calculate the square kilometer per hour. Whatever that means. Trying to pass that value to
a function that expects &lt;code&gt;&amp;lt;hour&amp;gt;&lt;/code&gt; would fail at compile-time, because both are different types.&lt;/p&gt;
&lt;p&gt;From a theoretical standpoint &lt;em&gt;Units of Measure&lt;/em&gt; are not directly related to &lt;em&gt;Algebraic Data-types&lt;/em&gt;,
but whenever you want to wrap a number in a Single-case DU, you should consider using
&lt;em&gt;Units of Measure&lt;/em&gt; instead.&lt;/p&gt;
&lt;p&gt;As a self-speaking example, let's reconsider the player example with money in a game.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;PlayerGame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    [&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 406)&quot; onmouseover=&quot;showTip(event, 'fs140', 406)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs159', 407)&quot; onmouseover=&quot;showTip(event, 'fs159', 407)&quot; class=&quot;t&quot;&gt;Gold&lt;/span&gt;
    [&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 408)&quot; onmouseover=&quot;showTip(event, 'fs140', 408)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs160', 409)&quot; onmouseover=&quot;showTip(event, 'fs160', 409)&quot; class=&quot;t&quot;&gt;Silver&lt;/span&gt;
    [&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 410)&quot; onmouseover=&quot;showTip(event, 'fs140', 410)&quot; class=&quot;t&quot;&gt;Measure&lt;/span&gt;&amp;gt;] &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs161', 411)&quot; onmouseover=&quot;showTip(event, 'fs161', 411)&quot; class=&quot;t&quot;&gt;Bronze&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs162', 412)&quot; onmouseover=&quot;showTip(event, 'fs162', 412)&quot; class=&quot;t&quot;&gt;Player&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs41', 413)&quot; onmouseover=&quot;showTip(event, 'fs41', 413)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs27', 414)&quot; onmouseover=&quot;showTip(event, 'fs27', 414)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs163', 415)&quot; onmouseover=&quot;showTip(event, 'fs163', 415)&quot; class=&quot;i&quot;&gt;Money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 416)&quot; onmouseover=&quot;showTip(event, 'fs43', 416)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs159', 417)&quot; onmouseover=&quot;showTip(event, 'fs159', 417)&quot; class=&quot;t&quot;&gt;Gold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 418)&quot; onmouseover=&quot;showTip(event, 'fs43', 418)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs160', 419)&quot; onmouseover=&quot;showTip(event, 'fs160', 419)&quot; class=&quot;t&quot;&gt;Silver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 420)&quot; onmouseover=&quot;showTip(event, 'fs43', 420)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs161', 421)&quot; onmouseover=&quot;showTip(event, 'fs161', 421)&quot; class=&quot;t&quot;&gt;Bronze&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    }

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs164', 422)&quot; onmouseover=&quot;showTip(event, 'fs164', 422)&quot; class=&quot;i&quot;&gt;richPlayer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Me&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs159', 423)&quot; onmouseover=&quot;showTip(event, 'fs159', 423)&quot; class=&quot;t&quot;&gt;Gold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs160', 424)&quot; onmouseover=&quot;showTip(event, 'fs160', 424)&quot; class=&quot;t&quot;&gt;Silver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs161', 425)&quot; onmouseover=&quot;showTip(event, 'fs161', 425)&quot; class=&quot;t&quot;&gt;Bronze&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;recursive-du&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Recursive Discriminated Unions&lt;/h2&gt;
&lt;p&gt;The biggest advantage of Discriminated Unions is that the definition can be recursive. &lt;em&gt;Tuples&lt;/em&gt;
or &lt;em&gt;Records&lt;/em&gt; cannot be recursive because F# is not lazy by default and we couldn't create
an immutable recursive record. It would be infinite. But a Discriminated Union contains multiple
different cases. So a DU can refer to itself, as long we have at least one non-recursive case.&lt;/p&gt;
&lt;a name=&quot;rdu-lists&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Lists&lt;/h3&gt;
&lt;p&gt;For example, we could create our own &lt;code&gt;MyList&lt;/code&gt; type that way. An Immutable linked-list is just
a DU with two cases. We either reached the end of a list or we have a single-element and another
&lt;code&gt;MyList&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 426)&quot; onmouseover=&quot;showTip(event, 'fs165', 426)&quot; class=&quot;t&quot;&gt;MyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs166', 427)&quot; onmouseover=&quot;showTip(event, 'fs166', 427)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs167', 428)&quot; onmouseover=&quot;showTip(event, 'fs167', 428)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 429)&quot; onmouseover=&quot;showTip(event, 'fs165', 429)&quot; class=&quot;t&quot;&gt;MyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now can create a &lt;code&gt;MyList&lt;/code&gt; like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 430)&quot; onmouseover=&quot;showTip(event, 'fs168', 430)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 431)&quot; onmouseover=&quot;showTip(event, 'fs167', 431)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs167', 432)&quot; onmouseover=&quot;showTip(event, 'fs167', 432)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs167', 433)&quot; onmouseover=&quot;showTip(event, 'fs167', 433)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs167', 434)&quot; onmouseover=&quot;showTip(event, 'fs167', 434)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs167', 435)&quot; onmouseover=&quot;showTip(event, 'fs167', 435)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs166', 436)&quot; onmouseover=&quot;showTip(event, 'fs166', 436)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;)))))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When that looks impractical, actually the built-in F# list is exactly defined like this. The only
difference is that instead of &lt;code&gt;Empty&lt;/code&gt; we use &lt;code&gt;[]&lt;/code&gt;, and &lt;code&gt;Cons&lt;/code&gt; is &lt;code&gt;::&lt;/code&gt;. Because it is written
infix it looks a little bit nicer, but overall it is the same.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 437)&quot; onmouseover=&quot;showTip(event, 'fs169', 437)&quot; class=&quot;i&quot;&gt;numsl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;[]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also can easily create a &lt;code&gt;fold&lt;/code&gt; function, for further information on how fold works
or how you can create your own list functions you can continue with:
&lt;a href=&quot;/blog/2016/04/05/mutable-loops-to-immutability&quot;&gt;From mutable loops to immutable folds&lt;/a&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 438)&quot; onmouseover=&quot;showTip(event, 'fs170', 438)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs171', 439)&quot; onmouseover=&quot;showTip(event, 'fs171', 439)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs172', 440)&quot; onmouseover=&quot;showTip(event, 'fs172', 440)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs173', 441)&quot; onmouseover=&quot;showTip(event, 'fs173', 441)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 442)&quot; onmouseover=&quot;showTip(event, 'fs173', 442)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs166', 443)&quot; onmouseover=&quot;showTip(event, 'fs166', 443)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 444)&quot; onmouseover=&quot;showTip(event, 'fs172', 444)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs167', 445)&quot; onmouseover=&quot;showTip(event, 'fs167', 445)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs174', 446)&quot; onmouseover=&quot;showTip(event, 'fs174', 446)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs173', 447)&quot; onmouseover=&quot;showTip(event, 'fs173', 447)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 448)&quot; onmouseover=&quot;showTip(event, 'fs170', 448)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs171', 449)&quot; onmouseover=&quot;showTip(event, 'fs171', 449)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs171', 450)&quot; onmouseover=&quot;showTip(event, 'fs171', 450)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 451)&quot; onmouseover=&quot;showTip(event, 'fs172', 451)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs174', 452)&quot; onmouseover=&quot;showTip(event, 'fs174', 452)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs173', 453)&quot; onmouseover=&quot;showTip(event, 'fs173', 453)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs175', 454)&quot; onmouseover=&quot;showTip(event, 'fs175', 454)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 455)&quot; onmouseover=&quot;showTip(event, 'fs173', 455)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 456)&quot; onmouseover=&quot;showTip(event, 'fs170', 456)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs176', 457)&quot; onmouseover=&quot;showTip(event, 'fs176', 457)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs174', 458)&quot; onmouseover=&quot;showTip(event, 'fs174', 458)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 459)&quot; onmouseover=&quot;showTip(event, 'fs167', 459)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs174', 460)&quot; onmouseover=&quot;showTip(event, 'fs174', 460)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs176', 461)&quot; onmouseover=&quot;showTip(event, 'fs176', 461)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;))   &lt;span onmouseout=&quot;hideTip(event, 'fs166', 462)&quot; onmouseover=&quot;showTip(event, 'fs166', 462)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 463)&quot; onmouseover=&quot;showTip(event, 'fs173', 463)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs177', 464)&quot; onmouseover=&quot;showTip(event, 'fs177', 464)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs178', 465)&quot; onmouseover=&quot;showTip(event, 'fs178', 465)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 466)&quot; onmouseover=&quot;showTip(event, 'fs173', 466)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 467)&quot; onmouseover=&quot;showTip(event, 'fs170', 467)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs179', 468)&quot; onmouseover=&quot;showTip(event, 'fs179', 468)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs174', 469)&quot; onmouseover=&quot;showTip(event, 'fs174', 469)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 470)&quot; onmouseover=&quot;showTip(event, 'fs167', 470)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs178', 471)&quot; onmouseover=&quot;showTip(event, 'fs178', 471)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs174', 472)&quot; onmouseover=&quot;showTip(event, 'fs174', 472)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs179', 473)&quot; onmouseover=&quot;showTip(event, 'fs179', 473)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;)) &lt;span onmouseout=&quot;hideTip(event, 'fs166', 474)&quot; onmouseover=&quot;showTip(event, 'fs166', 474)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs175', 475)&quot; onmouseover=&quot;showTip(event, 'fs175', 475)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 476)&quot; onmouseover=&quot;showTip(event, 'fs173', 476)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs177', 477)&quot; onmouseover=&quot;showTip(event, 'fs177', 477)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 478)&quot; onmouseover=&quot;showTip(event, 'fs180', 478)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 479)&quot; onmouseover=&quot;showTip(event, 'fs180', 479)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 480)&quot; onmouseover=&quot;showTip(event, 'fs180', 480)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs168', 481)&quot; onmouseover=&quot;showTip(event, 'fs168', 481)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Cons (1, Cons (4, Cons (9, Cons (16, Cons (25, Empty)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;rdu-btree&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Binary Trees&lt;/h3&gt;
&lt;p&gt;We also can generate any kind of Binary Trees easily. Or in general any kind of Tree type. A
Binary Tree is either a &lt;code&gt;Leaf&lt;/code&gt; an End-node without data. Or we have a &lt;code&gt;Node&lt;/code&gt; that contains
a single element and a Left and a Right Node.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 482)&quot; onmouseover=&quot;showTip(event, 'fs181', 482)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs182', 483)&quot; onmouseover=&quot;showTip(event, 'fs182', 483)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs183', 484)&quot; onmouseover=&quot;showTip(event, 'fs183', 484)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 485)&quot; onmouseover=&quot;showTip(event, 'fs181', 485)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 486)&quot; onmouseover=&quot;showTip(event, 'fs181', 486)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//    4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//  2   6&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 1 3 5 7&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs184', 487)&quot; onmouseover=&quot;showTip(event, 'fs184', 487)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs183', 488)&quot; onmouseover=&quot;showTip(event, 'fs183', 488)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,
        &lt;span onmouseout=&quot;hideTip(event, 'fs183', 489)&quot; onmouseover=&quot;showTip(event, 'fs183', 489)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,
            &lt;span onmouseout=&quot;hideTip(event, 'fs183', 490)&quot; onmouseover=&quot;showTip(event, 'fs183', 490)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 491)&quot; onmouseover=&quot;showTip(event, 'fs182', 491)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 492)&quot; onmouseover=&quot;showTip(event, 'fs182', 492)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;),
            &lt;span onmouseout=&quot;hideTip(event, 'fs183', 493)&quot; onmouseover=&quot;showTip(event, 'fs183', 493)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 494)&quot; onmouseover=&quot;showTip(event, 'fs182', 494)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 495)&quot; onmouseover=&quot;showTip(event, 'fs182', 495)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;)),
        &lt;span onmouseout=&quot;hideTip(event, 'fs183', 496)&quot; onmouseover=&quot;showTip(event, 'fs183', 496)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;,
            &lt;span onmouseout=&quot;hideTip(event, 'fs183', 497)&quot; onmouseover=&quot;showTip(event, 'fs183', 497)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 498)&quot; onmouseover=&quot;showTip(event, 'fs182', 498)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 499)&quot; onmouseover=&quot;showTip(event, 'fs182', 499)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;),
            &lt;span onmouseout=&quot;hideTip(event, 'fs183', 500)&quot; onmouseover=&quot;showTip(event, 'fs183', 500)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 501)&quot; onmouseover=&quot;showTip(event, 'fs182', 501)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs182', 502)&quot; onmouseover=&quot;showTip(event, 'fs182', 502)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;)))

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs185', 503)&quot; onmouseover=&quot;showTip(event, 'fs185', 503)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs186', 504)&quot; onmouseover=&quot;showTip(event, 'fs186', 504)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 505)&quot; onmouseover=&quot;showTip(event, 'fs187', 505)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs188', 506)&quot; onmouseover=&quot;showTip(event, 'fs188', 506)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs189', 507)&quot; onmouseover=&quot;showTip(event, 'fs189', 507)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 508)&quot; onmouseover=&quot;showTip(event, 'fs187', 508)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs188', 509)&quot; onmouseover=&quot;showTip(event, 'fs188', 509)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs188', 510)&quot; onmouseover=&quot;showTip(event, 'fs188', 510)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs182', 511)&quot; onmouseover=&quot;showTip(event, 'fs182', 511)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 512)&quot; onmouseover=&quot;showTip(event, 'fs187', 512)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs183', 513)&quot; onmouseover=&quot;showTip(event, 'fs183', 513)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs190', 514)&quot; onmouseover=&quot;showTip(event, 'fs190', 514)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs191', 515)&quot; onmouseover=&quot;showTip(event, 'fs191', 515)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs192', 516)&quot; onmouseover=&quot;showTip(event, 'fs192', 516)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 517)&quot; onmouseover=&quot;showTip(event, 'fs187', 517)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs189', 518)&quot; onmouseover=&quot;showTip(event, 'fs189', 518)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 519)&quot; onmouseover=&quot;showTip(event, 'fs187', 519)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs191', 520)&quot; onmouseover=&quot;showTip(event, 'fs191', 520)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 521)&quot; onmouseover=&quot;showTip(event, 'fs187', 521)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs186', 522)&quot; onmouseover=&quot;showTip(event, 'fs186', 522)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 523)&quot; onmouseover=&quot;showTip(event, 'fs187', 523)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs190', 524)&quot; onmouseover=&quot;showTip(event, 'fs190', 524)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs189', 525)&quot; onmouseover=&quot;showTip(event, 'fs189', 525)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 526)&quot; onmouseover=&quot;showTip(event, 'fs187', 526)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs192', 527)&quot; onmouseover=&quot;showTip(event, 'fs192', 527)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs189', 528)&quot; onmouseover=&quot;showTip(event, 'fs189', 528)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs187', 529)&quot; onmouseover=&quot;showTip(event, 'fs187', 529)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs188', 530)&quot; onmouseover=&quot;showTip(event, 'fs188', 530)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs185', 531)&quot; onmouseover=&quot;showTip(event, 'fs185', 531)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs193', 532)&quot; onmouseover=&quot;showTip(event, 'fs193', 532)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 533)&quot; onmouseover=&quot;showTip(event, 'fs180', 533)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs193', 534)&quot; onmouseover=&quot;showTip(event, 'fs193', 534)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs27', 535)&quot; onmouseover=&quot;showTip(event, 'fs27', 535)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 536)&quot; onmouseover=&quot;showTip(event, 'fs180', 536)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs184', 537)&quot; onmouseover=&quot;showTip(event, 'fs184', 537)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// &amp;quot;1234567&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;rdu-ds&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Hierarchical Data-Structures&lt;/h3&gt;
&lt;p&gt;We not only can generate general Data-Structure like Lists or Trees, but in general any kind
of hierarchical data-structures, for example we can use it in general to represent XML,
HTML and so on. We could use it to represent a document in the Markdown Structure.
(It doesn't contain all elements of Markdown)&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs194', 538)&quot; onmouseover=&quot;showTip(event, 'fs194', 538)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs195', 539)&quot; onmouseover=&quot;showTip(event, 'fs195', 539)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs196', 540)&quot; onmouseover=&quot;showTip(event, 'fs196', 540)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 541)&quot; onmouseover=&quot;showTip(event, 'fs27', 541)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs197', 542)&quot; onmouseover=&quot;showTip(event, 'fs197', 542)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 543)&quot; onmouseover=&quot;showTip(event, 'fs27', 543)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs198', 544)&quot; onmouseover=&quot;showTip(event, 'fs198', 544)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 545)&quot; onmouseover=&quot;showTip(event, 'fs27', 545)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs199', 546)&quot; onmouseover=&quot;showTip(event, 'fs199', 546)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs194', 547)&quot; onmouseover=&quot;showTip(event, 'fs194', 547)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 548)&quot; onmouseover=&quot;showTip(event, 'fs72', 548)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We then can generate a structure like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs200', 549)&quot; onmouseover=&quot;showTip(event, 'fs200', 549)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs199', 550)&quot; onmouseover=&quot;showTip(event, 'fs199', 550)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
        &lt;span onmouseout=&quot;hideTip(event, 'fs196', 551)&quot; onmouseover=&quot;showTip(event, 'fs196', 551)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs197', 552)&quot; onmouseover=&quot;showTip(event, 'fs197', 552)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs195', 553)&quot; onmouseover=&quot;showTip(event, 'fs195', 553)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs196', 554)&quot; onmouseover=&quot;showTip(event, 'fs196', 554)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;InlineCode of&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs198', 555)&quot; onmouseover=&quot;showTip(event, 'fs198', 555)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;let sum x y = x + y&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs195', 556)&quot; onmouseover=&quot;showTip(event, 'fs195', 556)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs199', 557)&quot; onmouseover=&quot;showTip(event, 'fs199', 557)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
            &lt;span onmouseout=&quot;hideTip(event, 'fs196', 558)&quot; onmouseover=&quot;showTip(event, 'fs196', 558)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This is the end&amp;quot;&lt;/span&gt;
        ]
    ]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Usually we would write a parser that turns a string into such kind of structure.
Once you have such a structure working with it becomes pretty easy. To turn
any markdown document into HTML we just write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs204', 563)&quot; onmouseover=&quot;showTip(event, 'fs204', 563)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs205', 564)&quot; onmouseover=&quot;showTip(event, 'fs205', 564)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs206', 565)&quot; onmouseover=&quot;showTip(event, 'fs206', 565)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs201', 566)&quot; onmouseover=&quot;showTip(event, 'fs201', 566)&quot; class=&quot;t&quot;&gt;StringBuilder&lt;/span&gt;()
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs207', 567)&quot; onmouseover=&quot;showTip(event, 'fs207', 567)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs195', 568)&quot; onmouseover=&quot;showTip(event, 'fs195', 568)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs206', 569)&quot; onmouseover=&quot;showTip(event, 'fs206', 569)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs208', 570)&quot; onmouseover=&quot;showTip(event, 'fs208', 570)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt;)
        | &lt;span onmouseout=&quot;hideTip(event, 'fs196', 571)&quot; onmouseover=&quot;showTip(event, 'fs196', 571)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs209', 572)&quot; onmouseover=&quot;showTip(event, 'fs209', 572)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs206', 573)&quot; onmouseover=&quot;showTip(event, 'fs206', 573)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs208', 574)&quot; onmouseover=&quot;showTip(event, 'fs208', 574)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs209', 575)&quot; onmouseover=&quot;showTip(event, 'fs209', 575)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;)
        | &lt;span onmouseout=&quot;hideTip(event, 'fs197', 576)&quot; onmouseover=&quot;showTip(event, 'fs197', 576)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span onmouseout=&quot;hideTip(event, 'fs209', 577)&quot; onmouseover=&quot;showTip(event, 'fs209', 577)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs206', 578)&quot; onmouseover=&quot;showTip(event, 'fs206', 578)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs210', 579)&quot; onmouseover=&quot;showTip(event, 'fs210', 579)&quot; class=&quot;f&quot;&gt;AppendFormat&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;strong&amp;gt;{0}&amp;lt;/strong&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs209', 580)&quot; onmouseover=&quot;showTip(event, 'fs209', 580)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;)
        | &lt;span onmouseout=&quot;hideTip(event, 'fs198', 581)&quot; onmouseover=&quot;showTip(event, 'fs198', 581)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs211', 582)&quot; onmouseover=&quot;showTip(event, 'fs211', 582)&quot; class=&quot;i&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs206', 583)&quot; onmouseover=&quot;showTip(event, 'fs206', 583)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs210', 584)&quot; onmouseover=&quot;showTip(event, 'fs210', 584)&quot; class=&quot;f&quot;&gt;AppendFormat&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;code&amp;gt;{0}&amp;lt;/code&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs211', 585)&quot; onmouseover=&quot;showTip(event, 'fs211', 585)&quot; class=&quot;i&quot;&gt;code&lt;/span&gt;)
        | &lt;span onmouseout=&quot;hideTip(event, 'fs199', 586)&quot; onmouseover=&quot;showTip(event, 'fs199', 586)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs212', 587)&quot; onmouseover=&quot;showTip(event, 'fs212', 587)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs206', 588)&quot; onmouseover=&quot;showTip(event, 'fs206', 588)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs208', 589)&quot; onmouseover=&quot;showTip(event, 'fs208', 589)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs213', 590)&quot; onmouseover=&quot;showTip(event, 'fs213', 590)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs214', 591)&quot; onmouseover=&quot;showTip(event, 'fs214', 591)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs212', 592)&quot; onmouseover=&quot;showTip(event, 'fs212', 592)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs207', 593)&quot; onmouseover=&quot;showTip(event, 'fs207', 593)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs214', 594)&quot; onmouseover=&quot;showTip(event, 'fs214', 594)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs213', 595)&quot; onmouseover=&quot;showTip(event, 'fs213', 595)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs206', 596)&quot; onmouseover=&quot;showTip(event, 'fs206', 596)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs208', 597)&quot; onmouseover=&quot;showTip(event, 'fs208', 597)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;)
    &lt;span onmouseout=&quot;hideTip(event, 'fs207', 598)&quot; onmouseover=&quot;showTip(event, 'fs207', 598)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs212', 599)&quot; onmouseover=&quot;showTip(event, 'fs212', 599)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs213', 600)&quot; onmouseover=&quot;showTip(event, 'fs213', 600)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs206', 601)&quot; onmouseover=&quot;showTip(event, 'fs206', 601)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs215', 602)&quot; onmouseover=&quot;showTip(event, 'fs215', 602)&quot; class=&quot;f&quot;&gt;ToString&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We just handle every DU case. If we encounter a recursive case like &lt;code&gt;Block&lt;/code&gt; we just recurs.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs204', 603)&quot; onmouseover=&quot;showTip(event, 'fs204', 603)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs200', 604)&quot; onmouseover=&quot;showTip(event, 'fs200', 604)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// &amp;lt;p&amp;gt;Hello&amp;lt;strong&amp;gt;World!&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;InlineCode of&amp;lt;code&amp;gt;let sum x y = x + y&amp;lt;/code&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;p&amp;gt;This is the end&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;invalid-state&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Make invalid states un-representable&lt;/h2&gt;
&lt;p&gt;The general idea by designing data-types is to make illegal state un-representable. If invalid
states are un-representable, bugs cannot happen in the first place. This topic alone is big enough
of it's own and I will suggest to watch the videos in the &lt;em&gt;Further Reading&lt;/em&gt; sections instead.&lt;/p&gt;
&lt;p&gt;But to give a quick overview of the idea. Let's imagine we design a system and a user
could provide multiple e-mail addresses for his account. First, we want to make sure that
all e-mails are valid, so instead of using a &lt;code&gt;string&lt;/code&gt; we create an &lt;code&gt;Email&lt;/code&gt; type and
we ensure that we must go through validation. So instead of a list of strings we have
a list of &lt;code&gt;Email&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs216', 605)&quot; onmouseover=&quot;showTip(event, 'fs216', 605)&quot; class=&quot;t&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs216', 606)&quot; onmouseover=&quot;showTip(event, 'fs216', 606)&quot; class=&quot;p&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 607)&quot; onmouseover=&quot;showTip(event, 'fs22', 607)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs217', 608)&quot; onmouseover=&quot;showTip(event, 'fs217', 608)&quot; class=&quot;t&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs216', 609)&quot; onmouseover=&quot;showTip(event, 'fs216', 609)&quot; class=&quot;i&quot;&gt;Email&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 610)&quot; onmouseover=&quot;showTip(event, 'fs72', 610)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's now imagine we want to ensure that every account always have at least one valid e-mail.
We could write code that always check if the list always at least contains one
element. But we also could achieve the same by changing the data-type so we get
compile-time safety that this requirement always holds true.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs217', 611)&quot; onmouseover=&quot;showTip(event, 'fs217', 611)&quot; class=&quot;i&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;PrimaryEmail&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs216', 612)&quot; onmouseover=&quot;showTip(event, 'fs216', 612)&quot; class=&quot;i&quot;&gt;Email&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;SecondaryEmails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs216', 613)&quot; onmouseover=&quot;showTip(event, 'fs216', 613)&quot; class=&quot;i&quot;&gt;Email&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 614)&quot; onmouseover=&quot;showTip(event, 'fs72', 614)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now Account always must have at least one single valid &lt;code&gt;PrimaryEmail&lt;/code&gt;. This idea can be extended.
In &lt;a href=&quot;https://channel9.msdn.com/Events/FSharp-Events/fsharpConf-2016/Types-Properties-Software&quot;&gt;Types + Properties = Software&lt;/a&gt;
Mark Seemann describes how we can embed the rules of Tennis in the Type System itself. For
example in Tennis we have the Points &lt;em&gt;Love, 15, 30, 40&lt;/em&gt;. You could go on and use just a
&lt;code&gt;int&lt;/code&gt; for that, and instead of &lt;code&gt;Love&lt;/code&gt; you use &lt;code&gt;0&lt;/code&gt;. But this is again error-prone. Because an
&lt;code&gt;int&lt;/code&gt; support far more values as we need. We also could set it to &lt;code&gt;-456&lt;/code&gt; for example. So
the natural idea is to use a DU for this case.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs218', 615)&quot; onmouseover=&quot;showTip(event, 'fs218', 615)&quot; class=&quot;t&quot;&gt;Points&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs219', 616)&quot; onmouseover=&quot;showTip(event, 'fs219', 616)&quot; class=&quot;p&quot;&gt;Love&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs220', 617)&quot; onmouseover=&quot;showTip(event, 'fs220', 617)&quot; class=&quot;p&quot;&gt;Fifteen&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs221', 618)&quot; onmouseover=&quot;showTip(event, 'fs221', 618)&quot; class=&quot;p&quot;&gt;Thirty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Why no &lt;code&gt;Forty&lt;/code&gt;? Because if we define &lt;code&gt;Forty&lt;/code&gt; it could happen that two players
have &lt;code&gt;Forty&lt;/code&gt;, but that is an invalid state. When both Players have &lt;code&gt;Forty&lt;/code&gt; the game
state is named &lt;code&gt;Deuce&lt;/code&gt;. What we could do instead, we make &lt;code&gt;Forty&lt;/code&gt; a whole new type
that saves which Player has &lt;code&gt;Forty&lt;/code&gt; and saves the Points of the other player. With this
idea we cannot express the idea to have two Player with &lt;code&gt;Forty&lt;/code&gt; because we designed
the data from the ground-up in a way that we cannot express an invalid state. When you
write the code around your data-structures you are forced to use the &lt;code&gt;Deuce&lt;/code&gt;
game state instead.&lt;/p&gt;
&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;An algebraic-type system is at some point simple. Because it just provides two ways in how
we can compose types. We either can use an &lt;em&gt;AND composition&lt;/em&gt; or we can use an &lt;em&gt;OR composition&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With this idea we can generate various data-structures on its own. We also can encode
various rules into the type-system itself. By using rich types we can get away with a lot
of common bugs and prevent errors from happening in the first place.&lt;/p&gt;
&lt;p&gt;Creating rich data-types can help in readability, and it also helps to write correct code.
As Linus Torvalds once said, we should write our code around our data-structures.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git actually has a simple design, with stable and reasonably well-documented data structures.
In fact, I'm a huge proponent of designing your code around the data, rather than the other
way around, and I think it's one of the reasons git has been fairly successful [...] I will,
in fact, claim that the difference between a bad programmer and a good one is whether he
considers his code or his data structures more important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a name=&quot;further&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/97507575&quot;&gt;[Video] Domain modelling with the F# type system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Events/FSharp-Events/fsharpConf-2016/Types-Properties-Software&quot;&gt;[Video] Types + Properties = Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/series/designing-with-types.html&quot;&gt;The &quot;Designing with types&quot; series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ploeh.dk/2016/02/10/types-properties-software-designing-with-types/&quot;&gt;Types + Properties = Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reidev275.azurewebsites.net/eliminating-bugs-with-single-case-discriminated-unions/&quot;&gt;Eliminating Bugs with Single Case Discriminated Unions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.markheath.net/post/avoid-silly-mistakes-fsharp-units-of-measure&quot;&gt;Avoiding Silly Mistakes with F# Unit of Measure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tomasp.net/blog/types-and-math.aspx/&quot;&gt;Power of mathematics: Reasoning about functional types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.myeyeson.net/validation-by-types/&quot;&gt;Validation by types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/units-of-measure/&quot;&gt;Units of Measure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reidev275.azurewebsites.net/understainding-discriminated-unions-from-enums/&quot;&gt;Understanding Discriminated Unions from Enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cardinality&quot;&gt;Cardinality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/&quot;&gt;[C#] Primitive Obsession&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://verraes.net/2016/02/type-safety-and-money/&quot;&gt;[PHP] Type Safety and Money&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a name=&quot;comments&quot;&gt;&lt;/a&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val foo : string * int&lt;br /&gt;&lt;br /&gt;Full name: Main.foo&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val bar : string * string * string * int&lt;br /&gt;&lt;br /&gt;Full name: Main.bar&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val name : string&lt;br /&gt;&lt;br /&gt;Full name: Main.name&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val nr : int&lt;br /&gt;&lt;br /&gt;Full name: Main.nr&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val str1 : string&lt;br /&gt;&lt;br /&gt;Full name: Main.str1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val str2 : string&lt;br /&gt;&lt;br /&gt;Full name: Main.str2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val str3 : string&lt;br /&gt;&lt;br /&gt;Full name: Main.str3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val b1 : bool * bool&lt;br /&gt;&lt;br /&gt;Full name: Main.b1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val b2 : bool * bool&lt;br /&gt;&lt;br /&gt;Full name: Main.b2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val b3 : bool * bool&lt;br /&gt;&lt;br /&gt;Full name: Main.b3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val b4 : bool * bool&lt;br /&gt;&lt;br /&gt;Full name: Main.b4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;type Point = float * float&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = System.Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;type Line = Point * Point&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.Line&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;type Rect = Point * Point&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.Rect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val doSomething : unit -&amp;gt; int * int&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.doSomething&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val x : int&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val y : int&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;type Person = string * string * string * obj * float&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val birthday : &amp;#39;a * &amp;#39;b * &amp;#39;c * birthday:&amp;#39;d * &amp;#39;e -&amp;gt; &amp;#39;d&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.birthday&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val birthday : &amp;#39;d&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;type Person =&lt;br /&gt;&amp;#160;&amp;#160;{FirstName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;LastName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;HairColor: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Birthday: DateTime;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Size: float;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;Person.FirstName: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;Person.LastName: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;Person.HairColor: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;Person.Birthday: DateTime&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;Multiple items&lt;br /&gt;type DateTime =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;new : ticks:int64 -&amp;gt; DateTime + 10 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Add : value:TimeSpan -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddDays : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddHours : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMilliseconds : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMinutes : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMonths : months:int -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddSeconds : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddTicks : value:int64 -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddYears : value:int -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.DateTime&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;DateTime()&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(ticks: int64) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(ticks: int64, kind: DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(year: int, month: int, day: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(year: int, month: int, day: int, calendar: Globalization.Calendar) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, kind: DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, calendar: Globalization.Calendar) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, kind: DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;Person.Size: float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val me : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.me&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val otherMe : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.otherMe&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val markus : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.markus&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val me2 : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.me2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val markus2 : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.markus2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;type Player =&lt;br /&gt;&amp;#160;&amp;#160;{Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Money: int * int * int;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Player&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;Player.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;Player.Money: int * int * int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val richPlayer : Player&lt;br /&gt;&lt;br /&gt;Full name: Main.richPlayer&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;type Point =&lt;br /&gt;&amp;#160;&amp;#160;{X: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Y: int;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;Point.X: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;Point.Y: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;type Line =&lt;br /&gt;&amp;#160;&amp;#160;{Start: Point;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Stop: Point;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Line&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;Line.Start: Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;Line.Stop: Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;type Rect =&lt;br /&gt;&amp;#160;&amp;#160;{TopLeft: Point;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;BottomRight: Point;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Rect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;Rect.TopLeft: Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;Rect.BottomRight: Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val line : Line&lt;br /&gt;&lt;br /&gt;Full name: Main.line&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val rect : Rect&lt;br /&gt;&lt;br /&gt;Full name: Main.rect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;type Address =&lt;br /&gt;&amp;#160;&amp;#160;{StreetAddress: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;City: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;State: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;PostalCode: string;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Contact.Address&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;Address.StreetAddress: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;Address.City: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;Address.State: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;Address.PostalCode: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;type PhoneNumber =&lt;br /&gt;&amp;#160;&amp;#160;{Type: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Number: string;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Contact.PhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;Multiple items&lt;br /&gt;PhoneNumber.Type: string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Type =&lt;br /&gt;&amp;#160;&amp;#160;inherit MemberInfo&lt;br /&gt;&amp;#160;&amp;#160;member Assembly : Assembly&lt;br /&gt;&amp;#160;&amp;#160;member AssemblyQualifiedName : string&lt;br /&gt;&amp;#160;&amp;#160;member Attributes : TypeAttributes&lt;br /&gt;&amp;#160;&amp;#160;member BaseType : Type&lt;br /&gt;&amp;#160;&amp;#160;member ContainsGenericParameters : bool&lt;br /&gt;&amp;#160;&amp;#160;member DeclaringMethod : MethodBase&lt;br /&gt;&amp;#160;&amp;#160;member DeclaringType : Type&lt;br /&gt;&amp;#160;&amp;#160;member Equals : o:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&amp;gt; Type[]&lt;br /&gt;&amp;#160;&amp;#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&amp;gt; MemberInfo[]&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Type&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;PhoneNumber.Number: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;type Contact =&lt;br /&gt;&amp;#160;&amp;#160;{FirstName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;LastName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;IsAlive: bool;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Age: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Address: Address;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;PhoneNumbers: PhoneNumber list;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Children: Contact list;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Spouse: Contact option;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Contact.Contact&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;Contact.FirstName: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;Contact.LastName: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;Contact.IsAlive: bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;type bool = Boolean&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;Contact.Age: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;Multiple items&lt;br /&gt;Contact.Address: Address&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Address =&lt;br /&gt;&amp;#160;&amp;#160;{StreetAddress: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;City: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;State: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;PostalCode: string;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Contact.Address&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;Contact.PhoneNumbers: PhoneNumber list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;Contact.Children: Contact list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;Contact.Spouse: Contact option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;type &amp;#39;T option = Option&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.option&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;module Contact&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val contact : Contact&lt;br /&gt;&lt;br /&gt;Full name: Main.contact&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;type Type =&lt;br /&gt;&amp;#160;&amp;#160;inherit MemberInfo&lt;br /&gt;&amp;#160;&amp;#160;member Assembly : Assembly&lt;br /&gt;&amp;#160;&amp;#160;member AssemblyQualifiedName : string&lt;br /&gt;&amp;#160;&amp;#160;member Attributes : TypeAttributes&lt;br /&gt;&amp;#160;&amp;#160;member BaseType : Type&lt;br /&gt;&amp;#160;&amp;#160;member ContainsGenericParameters : bool&lt;br /&gt;&amp;#160;&amp;#160;member DeclaringMethod : MethodBase&lt;br /&gt;&amp;#160;&amp;#160;member DeclaringType : Type&lt;br /&gt;&amp;#160;&amp;#160;member Equals : o:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member FindInterfaces : filter:TypeFilter * filterCriteria:obj -&amp;gt; Type[]&lt;br /&gt;&amp;#160;&amp;#160;member FindMembers : memberType:MemberTypes * bindingAttr:BindingFlags * filter:MemberFilter * filterCriteria:obj -&amp;gt; MemberInfo[]&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Type&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;Contact.Address: Address&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val numbers : string list&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val phone : PhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;type PhoneNumberType =&lt;br /&gt;&amp;#160;&amp;#160;| Home&lt;br /&gt;&amp;#160;&amp;#160;| Office&lt;br /&gt;&amp;#160;&amp;#160;| Mobile&lt;br /&gt;&lt;br /&gt;Full name: Main.PhoneNumberType&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;union case PhoneNumberType.Home: PhoneNumberType&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;union case PhoneNumberType.Office: PhoneNumberType&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;union case PhoneNumberType.Mobile: PhoneNumberType&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;type Address =&lt;br /&gt;&amp;#160;&amp;#160;{StreetAddress: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;City: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;State: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;PostalCode: string;}&lt;br /&gt;&lt;br /&gt;Full name: Main.ContactWithDU.Address&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;type PhoneNumber =&lt;br /&gt;&amp;#160;&amp;#160;| Home of string&lt;br /&gt;&amp;#160;&amp;#160;| Office of string&lt;br /&gt;&amp;#160;&amp;#160;| Mobile of string&lt;br /&gt;&lt;br /&gt;Full name: Main.ContactWithDU.PhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;union case PhoneNumber.Home: string -&amp;gt; PhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;union case PhoneNumber.Office: string -&amp;gt; PhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;union case PhoneNumber.Mobile: string -&amp;gt; PhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs94&quot;&gt;Multiple items&lt;br /&gt;module Contact&lt;br /&gt;&lt;br /&gt;from Main&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Contact =&lt;br /&gt;&amp;#160;&amp;#160;{FirstName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;LastName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;IsAlive: bool;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Age: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Address: Address;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;PhoneNumbers: PhoneNumber list;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Children: Contact list;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Spouse: Contact option;}&lt;br /&gt;&lt;br /&gt;Full name: Main.ContactWithDU.Contact&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs95&quot;&gt;Multiple items&lt;br /&gt;Contact.Address: Address&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Address =&lt;br /&gt;&amp;#160;&amp;#160;{StreetAddress: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;City: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;State: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;PostalCode: string;}&lt;br /&gt;&lt;br /&gt;Full name: Main.ContactWithDU.Address&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs96&quot;&gt;module ContactWithDU&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs97&quot;&gt;val contactWithDU : Contact&lt;br /&gt;&lt;br /&gt;Full name: Main.contactWithDU&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs98&quot;&gt;val printPhoneNumber : number:PhoneNumber -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.printPhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs99&quot;&gt;val number : PhoneNumber&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs100&quot;&gt;val nr : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs101&quot;&gt;Multiple items&lt;br /&gt;type Choice =&lt;br /&gt;&amp;#160;&amp;#160;| Choice1 of bool&lt;br /&gt;&amp;#160;&amp;#160;| Choice2 of bool&lt;br /&gt;&amp;#160;&amp;#160;| Choice3 of bool&lt;br /&gt;&amp;#160;&amp;#160;| Choice4 of bool&lt;br /&gt;&lt;br /&gt;Full name: Main.Choice&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Choice&amp;lt;&amp;#39;T1,&amp;#39;T2&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Choice1Of2 of &amp;#39;T1&lt;br /&gt;&amp;#160;&amp;#160;| Choice2Of2 of &amp;#39;T2&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Choice&amp;lt;_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Choice&amp;lt;&amp;#39;T1,&amp;#39;T2,&amp;#39;T3&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Choice1Of3 of &amp;#39;T1&lt;br /&gt;&amp;#160;&amp;#160;| Choice2Of3 of &amp;#39;T2&lt;br /&gt;&amp;#160;&amp;#160;| Choice3Of3 of &amp;#39;T3&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Choice&amp;lt;_,_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Choice&amp;lt;&amp;#39;T1,&amp;#39;T2,&amp;#39;T3,&amp;#39;T4&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Choice1Of4 of &amp;#39;T1&lt;br /&gt;&amp;#160;&amp;#160;| Choice2Of4 of &amp;#39;T2&lt;br /&gt;&amp;#160;&amp;#160;| Choice3Of4 of &amp;#39;T3&lt;br /&gt;&amp;#160;&amp;#160;| Choice4Of4 of &amp;#39;T4&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Choice&amp;lt;_,_,_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Choice&amp;lt;&amp;#39;T1,&amp;#39;T2,&amp;#39;T3,&amp;#39;T4,&amp;#39;T5&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Choice1Of5 of &amp;#39;T1&lt;br /&gt;&amp;#160;&amp;#160;| Choice2Of5 of &amp;#39;T2&lt;br /&gt;&amp;#160;&amp;#160;| Choice3Of5 of &amp;#39;T3&lt;br /&gt;&amp;#160;&amp;#160;| Choice4Of5 of &amp;#39;T4&lt;br /&gt;&amp;#160;&amp;#160;| Choice5Of5 of &amp;#39;T5&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Choice&amp;lt;_,_,_,_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Choice&amp;lt;&amp;#39;T1,&amp;#39;T2,&amp;#39;T3,&amp;#39;T4,&amp;#39;T5,&amp;#39;T6&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Choice1Of6 of &amp;#39;T1&lt;br /&gt;&amp;#160;&amp;#160;| Choice2Of6 of &amp;#39;T2&lt;br /&gt;&amp;#160;&amp;#160;| Choice3Of6 of &amp;#39;T3&lt;br /&gt;&amp;#160;&amp;#160;| Choice4Of6 of &amp;#39;T4&lt;br /&gt;&amp;#160;&amp;#160;| Choice5Of6 of &amp;#39;T5&lt;br /&gt;&amp;#160;&amp;#160;| Choice6Of6 of &amp;#39;T6&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Choice&amp;lt;_,_,_,_,_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Choice&amp;lt;&amp;#39;T1,&amp;#39;T2,&amp;#39;T3,&amp;#39;T4,&amp;#39;T5,&amp;#39;T6,&amp;#39;T7&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Choice1Of7 of &amp;#39;T1&lt;br /&gt;&amp;#160;&amp;#160;| Choice2Of7 of &amp;#39;T2&lt;br /&gt;&amp;#160;&amp;#160;| Choice3Of7 of &amp;#39;T3&lt;br /&gt;&amp;#160;&amp;#160;| Choice4Of7 of &amp;#39;T4&lt;br /&gt;&amp;#160;&amp;#160;| Choice5Of7 of &amp;#39;T5&lt;br /&gt;&amp;#160;&amp;#160;| Choice6Of7 of &amp;#39;T6&lt;br /&gt;&amp;#160;&amp;#160;| Choice7Of7 of &amp;#39;T7&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Choice&amp;lt;_,_,_,_,_,_,_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs102&quot;&gt;union case Choice.Choice1: bool -&amp;gt; Choice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs103&quot;&gt;union case Choice.Choice2: bool -&amp;gt; Choice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs104&quot;&gt;union case Choice.Choice3: bool -&amp;gt; Choice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs105&quot;&gt;union case Choice.Choice4: bool -&amp;gt; Choice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs106&quot;&gt;type Line = (int * int) * (int * int)&lt;br /&gt;&lt;br /&gt;Full name: Main.Cardinality.Line&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs107&quot;&gt;type Line2 = int * int * int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.Cardinality.Line2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs108&quot;&gt;val line : (int * int) * (int * int)&lt;br /&gt;&lt;br /&gt;Full name: Main.Cardinality.line&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs109&quot;&gt;val line2 : int * int * int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.Cardinality.line2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs110&quot;&gt;Multiple items&lt;br /&gt;union case Point.Point: float * float -&amp;gt; Point&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Point = | Point of float * float&lt;br /&gt;&lt;br /&gt;Full name: Main.TupleWithDU.Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs111&quot;&gt;Multiple items&lt;br /&gt;union case Line.Line: Point * Point -&amp;gt; Line&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Line = | Line of Point * Point&lt;br /&gt;&lt;br /&gt;Full name: Main.TupleWithDU.Line&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs112&quot;&gt;Multiple items&lt;br /&gt;union case Rect.Rect: Point * Point -&amp;gt; Rect&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Rect = | Rect of Point * Point&lt;br /&gt;&lt;br /&gt;Full name: Main.TupleWithDU.Rect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs113&quot;&gt;module TupleWithDU&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs114&quot;&gt;val p1 : Point&lt;br /&gt;&lt;br /&gt;Full name: Main.p1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs115&quot;&gt;val p2 : Point&lt;br /&gt;&lt;br /&gt;Full name: Main.p2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs116&quot;&gt;val tl : Point&lt;br /&gt;&lt;br /&gt;Full name: Main.tl&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs117&quot;&gt;val br : Point&lt;br /&gt;&lt;br /&gt;Full name: Main.br&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs118&quot;&gt;val printRect : Rect -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.printRect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs119&quot;&gt;val tl : Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs120&quot;&gt;val br : Point&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs121&quot;&gt;val x1 : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs122&quot;&gt;val y1 : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs123&quot;&gt;val x2 : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs124&quot;&gt;val y2 : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs125&quot;&gt;Multiple items&lt;br /&gt;union case FirstName.FirstName: string -&amp;gt; FirstName&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type FirstName = | FirstName of string&lt;br /&gt;&lt;br /&gt;Full name: Main.PersonDU.FirstName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs126&quot;&gt;Multiple items&lt;br /&gt;union case LastName.LastName: string -&amp;gt; LastName&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type LastName = | LastName of string&lt;br /&gt;&lt;br /&gt;Full name: Main.PersonDU.LastName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs127&quot;&gt;Multiple items&lt;br /&gt;union case HairColor.HairColor: string -&amp;gt; HairColor&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type HairColor = | HairColor of string&lt;br /&gt;&lt;br /&gt;Full name: Main.PersonDU.HairColor&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs128&quot;&gt;Multiple items&lt;br /&gt;union case Birthday.Birthday: DateTime -&amp;gt; Birthday&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Birthday = | Birthday of DateTime&lt;br /&gt;&lt;br /&gt;Full name: Main.PersonDU.Birthday&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs129&quot;&gt;Multiple items&lt;br /&gt;union case Size.Size: float -&amp;gt; Size&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Size = | Size of float&lt;br /&gt;&lt;br /&gt;Full name: Main.PersonDU.Size&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs130&quot;&gt;Multiple items&lt;br /&gt;union case Person.Person: FirstName * LastName * HairColor * Birthday * Size -&amp;gt; Person&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Person = | Person of FirstName * LastName * HairColor * Birthday * Size&lt;br /&gt;&lt;br /&gt;Full name: Main.PersonDU.Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs131&quot;&gt;module PersonDU&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs132&quot;&gt;val getBirthday : Person -&amp;gt; Birthday&lt;br /&gt;&lt;br /&gt;Full name: Main.getBirthday&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs133&quot;&gt;val bd : Birthday&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs134&quot;&gt;val getBirthday : Person -&amp;gt; HairColor&lt;br /&gt;&lt;br /&gt;Full name: Main.getBirthday&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs135&quot;&gt;val bd : HairColor&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs136&quot;&gt;Multiple items&lt;br /&gt;union case Lbfs.Lbfs: float -&amp;gt; Lbfs&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Lbfs = | Lbfs of float&lt;br /&gt;&lt;br /&gt;Full name: Main.Lbfs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs137&quot;&gt;Multiple items&lt;br /&gt;union case Ns.Ns: float -&amp;gt; Ns&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Ns = | Ns of float&lt;br /&gt;&lt;br /&gt;Full name: Main.Ns&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs138&quot;&gt;Multiple items&lt;br /&gt;union case Size.Size: float -&amp;gt; Size&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Size = | Cm of float&lt;br /&gt;&lt;br /&gt;Full name: Main.Size&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs139&quot;&gt;union case Size.Cm: float -&amp;gt; Size&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs140&quot;&gt;Multiple items&lt;br /&gt;type MeasureAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; MeasureAttribute&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.MeasureAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; MeasureAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs141&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type meter&lt;br /&gt;&lt;br /&gt;Full name: Main.meter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs142&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type miles&lt;br /&gt;&lt;br /&gt;Full name: Main.miles&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs143&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type hour&lt;br /&gt;&lt;br /&gt;Full name: Main.hour&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs144&quot;&gt;val sizeA : float&amp;lt;meter&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sizeA&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs145&quot;&gt;val sizeB : float&amp;lt;miles&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sizeB&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs146&quot;&gt;val result : obj&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.result&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs147&quot;&gt;val doubleSize : float&amp;lt;meter&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.doubleSize&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs148&quot;&gt;val area : float&amp;lt;meter ^ 2&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.area&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs149&quot;&gt;val meterPerHour : float&amp;lt;meter/hour&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.meterPerHour&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs150&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type km&lt;br /&gt;&lt;br /&gt;Full name: Main.km&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs151&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type kmh = km/hour&lt;br /&gt;&lt;br /&gt;Full name: Main.kmh&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs152&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type mph = miles/hour&lt;br /&gt;&lt;br /&gt;Full name: Main.mph&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs153&quot;&gt;val distance : float&amp;lt;km&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.distance&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs154&quot;&gt;val timeTaken : float&amp;lt;hour&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.timeTaken&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs155&quot;&gt;val speed : float&amp;lt;km/hour&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.speed&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs156&quot;&gt;val newSpeed : float&amp;lt;km/hour&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.newSpeed&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs157&quot;&gt;val newTimeTaken : float&amp;lt;hour&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.newTimeTaken&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs158&quot;&gt;val newTimeTaken : obj&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.newTimeTaken&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs159&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type Gold&lt;br /&gt;&lt;br /&gt;Full name: Main.PlayerGame.Gold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs160&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type Silver&lt;br /&gt;&lt;br /&gt;Full name: Main.PlayerGame.Silver&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs161&quot;&gt;[&amp;lt;Measure&amp;gt;]&lt;br /&gt;type Bronze&lt;br /&gt;&lt;br /&gt;Full name: Main.PlayerGame.Bronze&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs162&quot;&gt;type Player =&lt;br /&gt;&amp;#160;&amp;#160;{Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Money: int&amp;lt;Gold&amp;gt; * int&amp;lt;Silver&amp;gt; * int&amp;lt;Bronze&amp;gt;;}&lt;br /&gt;&lt;br /&gt;Full name: Main.PlayerGame.Player&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs163&quot;&gt;Player.Money: int&amp;lt;Gold&amp;gt; * int&amp;lt;Silver&amp;gt; * int&amp;lt;Bronze&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs164&quot;&gt;val richPlayer : Player&lt;br /&gt;&lt;br /&gt;Full name: Main.PlayerGame.richPlayer&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs165&quot;&gt;type MyList&amp;lt;&amp;#39;a&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Empty&lt;br /&gt;&amp;#160;&amp;#160;| Cons of &amp;#39;a * MyList&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.MyList&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs166&quot;&gt;union case MyList.Empty: MyList&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs167&quot;&gt;union case MyList.Cons: &amp;#39;a * MyList&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; MyList&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs168&quot;&gt;val nums : MyList&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.nums&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs169&quot;&gt;val numsl : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.numsl&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs170&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;State) -&amp;gt; acc:&amp;#39;State -&amp;gt; list:MyList&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs171&quot;&gt;val folder : (&amp;#39;State -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs172&quot;&gt;val acc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs173&quot;&gt;Multiple items&lt;br /&gt;val list : MyList&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs174&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs175&quot;&gt;val rev : list:MyList&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; MyList&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.rev&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs176&quot;&gt;val acc : MyList&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs177&quot;&gt;val map : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:MyList&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; MyList&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs178&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs179&quot;&gt;val acc : MyList&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs180&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs181&quot;&gt;type Tree&amp;lt;&amp;#39;a&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Leaf&lt;br /&gt;&amp;#160;&amp;#160;| Node of &amp;#39;a * Tree&amp;lt;&amp;#39;a&amp;gt; * Tree&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Tree&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs182&quot;&gt;union case Tree.Leaf: Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs183&quot;&gt;union case Tree.Node: &amp;#39;a * Tree&amp;lt;&amp;#39;a&amp;gt; * Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs184&quot;&gt;val tree : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.tree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs185&quot;&gt;val fold : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a) -&amp;gt; acc:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs186&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs187&quot;&gt;val acc : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs188&quot;&gt;val tree : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs189&quot;&gt;val loop : (&amp;#39;a -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs190&quot;&gt;val x : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs191&quot;&gt;val l : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs192&quot;&gt;val r : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs193&quot;&gt;val acc : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs194&quot;&gt;type Markdown =&lt;br /&gt;&amp;#160;&amp;#160;| NewLine&lt;br /&gt;&amp;#160;&amp;#160;| Literal of string&lt;br /&gt;&amp;#160;&amp;#160;| Bold of string&lt;br /&gt;&amp;#160;&amp;#160;| InlineCode of string&lt;br /&gt;&amp;#160;&amp;#160;| Block of Markdown list&lt;br /&gt;&lt;br /&gt;Full name: Main.Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs195&quot;&gt;union case Markdown.NewLine: Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs196&quot;&gt;Multiple items&lt;br /&gt;union case Markdown.Literal: string -&amp;gt; Markdown&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type LiteralAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; LiteralAttribute&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.LiteralAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; LiteralAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs197&quot;&gt;union case Markdown.Bold: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs198&quot;&gt;union case Markdown.InlineCode: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs199&quot;&gt;union case Markdown.Block: Markdown list -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs200&quot;&gt;val document : Markdown&lt;br /&gt;&lt;br /&gt;Full name: Main.document&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs201&quot;&gt;type StringBuilder = Text.StringBuilder&lt;br /&gt;&lt;br /&gt;Full name: Main.StringBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs202&quot;&gt;namespace System.Text&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs203&quot;&gt;Multiple items&lt;br /&gt;type StringBuilder =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; StringBuilder + 5 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Append : value:string -&amp;gt; StringBuilder + 18 overloads&lt;br /&gt;&amp;#160;&amp;#160;member AppendFormat : format:string * arg0:obj -&amp;gt; StringBuilder + 4 overloads&lt;br /&gt;&amp;#160;&amp;#160;member AppendLine : unit -&amp;gt; StringBuilder + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Capacity : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;member Chars : int -&amp;gt; char with get, set&lt;br /&gt;&amp;#160;&amp;#160;member Clear : unit -&amp;gt; StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member EnsureCapacity : capacity:int -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;member Equals : sb:StringBuilder -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Text.StringBuilder&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;Text.StringBuilder() : unit&lt;br /&gt;Text.StringBuilder(capacity: int) : unit&lt;br /&gt;Text.StringBuilder(value: string) : unit&lt;br /&gt;Text.StringBuilder(value: string, capacity: int) : unit&lt;br /&gt;Text.StringBuilder(capacity: int, maxCapacity: int) : unit&lt;br /&gt;Text.StringBuilder(value: string, startIndex: int, length: int, capacity: int) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs204&quot;&gt;val produceHtml : markdown:Markdown -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.produceHtml&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs205&quot;&gt;val markdown : Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs206&quot;&gt;val sb : Text.StringBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs207&quot;&gt;val recurs : (Markdown -&amp;gt; Text.StringBuilder)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs208&quot;&gt;Text.StringBuilder.Append(value: char []) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: obj) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: uint64) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: uint32) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: uint16) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: decimal) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: float) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: float32) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: int64) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;Text.StringBuilder.Append(value: int) : Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs209&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs210&quot;&gt;Text.StringBuilder.AppendFormat(format: string, [&amp;lt;ParamArray&amp;gt;] args: obj []) : Text.StringBuilder&lt;br /&gt;Text.StringBuilder.AppendFormat(format: string, arg0: obj) : Text.StringBuilder&lt;br /&gt;Text.StringBuilder.AppendFormat(provider: IFormatProvider, format: string, [&amp;lt;ParamArray&amp;gt;] args: obj []) : Text.StringBuilder&lt;br /&gt;Text.StringBuilder.AppendFormat(format: string, arg0: obj, arg1: obj) : Text.StringBuilder&lt;br /&gt;Text.StringBuilder.AppendFormat(format: string, arg0: obj, arg1: obj, arg2: obj) : Text.StringBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs211&quot;&gt;val code : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs212&quot;&gt;val markdown : Markdown list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs213&quot;&gt;val ignore : value:&amp;#39;T -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.ignore&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs214&quot;&gt;val x : Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs215&quot;&gt;Text.StringBuilder.ToString() : string&lt;br /&gt;Text.StringBuilder.ToString(startIndex: int, length: int) : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs216&quot;&gt;Multiple items&lt;br /&gt;union case Email.Email: string -&amp;gt; Email&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Email = | Email of string&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.Email&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs217&quot;&gt;type Account =&lt;br /&gt;&amp;#160;&amp;#160;{}&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.Account&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs218&quot;&gt;type Points =&lt;br /&gt;&amp;#160;&amp;#160;| Love&lt;br /&gt;&amp;#160;&amp;#160;| Fifteen&lt;br /&gt;&amp;#160;&amp;#160;| Thirty&lt;br /&gt;&lt;br /&gt;Full name: algebraicdatatypes.Points&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs219&quot;&gt;union case Points.Love: Points&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs220&quot;&gt;union case Points.Fifteen: Points&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs221&quot;&gt;union case Points.Thirty: Points&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Continuations and foldBack</title>
   <link href="https://sidburn.github.io/blog/2016/04/16/fold-continuations"/>
   <updated>2016-04-16T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/04/16/fold-continuations</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;/blog/2016/04/05/mutable-loops-to-immutability&quot;&gt;From mutable loops to immutable folds&lt;/a&gt;
we implemented &lt;code&gt;foldBack&lt;/code&gt; through &lt;code&gt;rev&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt;. In this post I show you how you can implement
&lt;code&gt;foldBack&lt;/code&gt; by using a &lt;em&gt;continuation function&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;Before we see how to implement &lt;code&gt;foldBack&lt;/code&gt;, I want to give you analogy first. This analogy helped
me in a lot of cases. I hope that this analogy will also help you in better understanding
the further post, or probably even in other areas in programming in general.&lt;/p&gt;
&lt;h3&gt;Back to the Future&lt;/h3&gt;
&lt;p&gt;One idea how you can view functions is, that you can do stuff now, with things you not
have yet, but you know you will get them in the future. Sounds weird? Let's go over an
example that you probably already know. Function composition.&lt;/p&gt;
&lt;p&gt;Usually most definitions of a function that does function composition have three arguments.
But let's write it with only two arguments. You are given the task to write a function
that has two functions as the input, and now you should compose them. How do you do that?&lt;/p&gt;
&lt;p&gt;Usually you start with something like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But what comes next? Your task is to execute &lt;code&gt;f&lt;/code&gt; and pass the result to &lt;code&gt;g&lt;/code&gt;. But how do you execute
&lt;code&gt;f&lt;/code&gt; if you don't a value to execute &lt;code&gt;f&lt;/code&gt;? The answer is, you create a function inside &lt;code&gt;compose&lt;/code&gt;. This
function gets the value to execute &lt;code&gt;f&lt;/code&gt; sometime in the future.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 7)&quot; onmouseover=&quot;showTip(event, 'fs7', 7)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 8)&quot; onmouseover=&quot;showTip(event, 'fs8', 8)&quot; class=&quot;f&quot;&gt;innerFunction&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 9)&quot; onmouseover=&quot;showTip(event, 'fs9', 9)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 10)&quot; onmouseover=&quot;showTip(event, 'fs10', 10)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 11)&quot; onmouseover=&quot;showTip(event, 'fs6', 11)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 12)&quot; onmouseover=&quot;showTip(event, 'fs9', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 14)&quot; onmouseover=&quot;showTip(event, 'fs10', 14)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But what do you now do with &lt;code&gt;innerFunction&lt;/code&gt;? We still don't have a value to execute &lt;code&gt;innerFunction&lt;/code&gt;.
Yes, that's right, because of this, your only option is to return &lt;code&gt;innerFunction&lt;/code&gt; from our &lt;code&gt;compose&lt;/code&gt;
function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 15)&quot; onmouseover=&quot;showTip(event, 'fs11', 15)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 16)&quot; onmouseover=&quot;showTip(event, 'fs6', 16)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 17)&quot; onmouseover=&quot;showTip(event, 'fs7', 17)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;f&quot;&gt;innerFunction&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 20)&quot; onmouseover=&quot;showTip(event, 'fs10', 20)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 21)&quot; onmouseover=&quot;showTip(event, 'fs6', 21)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 22)&quot; onmouseover=&quot;showTip(event, 'fs9', 22)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs7', 23)&quot; onmouseover=&quot;showTip(event, 'fs7', 23)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 24)&quot; onmouseover=&quot;showTip(event, 'fs10', 24)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs8', 25)&quot; onmouseover=&quot;showTip(event, 'fs8', 25)&quot; class=&quot;f&quot;&gt;innerFunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is exactly what &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; does. It is only the fully expanded version of it. If you want to shorten it.
As you create a inner function and just return it. You also can just create a lambda directly and return
it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 26)&quot; onmouseover=&quot;showTip(event, 'fs12', 26)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 27)&quot; onmouseover=&quot;showTip(event, 'fs6', 27)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 28)&quot; onmouseover=&quot;showTip(event, 'fs7', 28)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 29)&quot; onmouseover=&quot;showTip(event, 'fs9', 29)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs7', 30)&quot; onmouseover=&quot;showTip(event, 'fs7', 30)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 31)&quot; onmouseover=&quot;showTip(event, 'fs6', 31)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 32)&quot; onmouseover=&quot;showTip(event, 'fs9', 32)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And because we have &lt;em&gt;Currying&lt;/em&gt; and all functions are anyway just functions that returns function,
you just can add &lt;code&gt;x&lt;/code&gt; as a function argument.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 33)&quot; onmouseover=&quot;showTip(event, 'fs13', 33)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 34)&quot; onmouseover=&quot;showTip(event, 'fs6', 34)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 35)&quot; onmouseover=&quot;showTip(event, 'fs7', 35)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 36)&quot; onmouseover=&quot;showTip(event, 'fs9', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs7', 37)&quot; onmouseover=&quot;showTip(event, 'fs7', 37)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 38)&quot; onmouseover=&quot;showTip(event, 'fs6', 38)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 39)&quot; onmouseover=&quot;showTip(event, 'fs9', 39)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It seems that i only explained &lt;em&gt;function composition&lt;/em&gt; but the analogy I explained fits more nicely
into a lot more use-cases. It doesn't mean you only can execute some kind of functions with a value.
In general it means you already can work with a value you don't have yet! For example, you also
could write a function that first does something with &lt;code&gt;x&lt;/code&gt; and then pass the result to it to &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In general the analogy means. Whenever you need to somehow work with a value you don't have yet.
You just create a function. So you already can work with the value as if you had it. And you
can do whatever you want with it. But then instead of returning a result you return a function
instead. So you expect that someone else in the future gives you a value that starts your execution.&lt;/p&gt;
&lt;p&gt;The general idea is. You already can compose behaviour or functions together without directly
executing anything. You first compose everything, and you delay the execution as far as possible
to the future.&lt;/p&gt;
&lt;h2&gt;Rethinking the problem&lt;/h2&gt;
&lt;p&gt;With that idea in-place. Let's look again at &lt;code&gt;foldBack&lt;/code&gt; and if we somehow can rethink that
problem. Let's first focus on the behaviour of &lt;code&gt;foldBack&lt;/code&gt; and how it should work &lt;em&gt;logically&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 40)&quot; onmouseover=&quot;showTip(event, 'fs14', 40)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 41)&quot; onmouseover=&quot;showTip(event, 'fs15', 41)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 42)&quot; onmouseover=&quot;showTip(event, 'fs15', 42)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 44)&quot; onmouseover=&quot;showTip(event, 'fs16', 44)&quot; class=&quot;i&quot;&gt;squared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 45)&quot; onmouseover=&quot;showTip(event, 'fs17', 45)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 46)&quot; onmouseover=&quot;showTip(event, 'fs18', 46)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 47)&quot; onmouseover=&quot;showTip(event, 'fs15', 47)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 48)&quot; onmouseover=&quot;showTip(event, 'fs19', 48)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 49)&quot; onmouseover=&quot;showTip(event, 'fs14', 49)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 50)&quot; onmouseover=&quot;showTip(event, 'fs15', 50)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 51)&quot; onmouseover=&quot;showTip(event, 'fs19', 51)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] []
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The general &lt;em&gt;logic&lt;/em&gt; is that we traverse a list backwards. Instead of starting with the initial
accumulator and fetching &lt;code&gt;1&lt;/code&gt; from the last, we start by fetching &lt;code&gt;4&lt;/code&gt; from the end. Then &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;
and last but not least &lt;code&gt;1&lt;/code&gt;. The general logic how &lt;code&gt;foldBack&lt;/code&gt; works is like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 52)&quot; onmouseover=&quot;showTip(event, 'fs20', 52)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;      | &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;        | &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; | (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-----------+------------+---+--------------&lt;/span&gt;
 [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] | []         | &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; | [&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]
   [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] | [&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]       | &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; | [&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]
     [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;] | [&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]     | &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; | [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]
       [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;] | [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]   | &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; | [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]
        [] | [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;] | &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At this point let's focus on our &lt;code&gt;f&lt;/code&gt; function that we pass &lt;code&gt;foldBack&lt;/code&gt;. The &lt;code&gt;f&lt;/code&gt; function
get the argument &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;acc&lt;/code&gt;. What does those values represents at any point in time exactly?&lt;/p&gt;
&lt;p&gt;As we basically just loop over a data-structure with &lt;code&gt;foldBack&lt;/code&gt; it just means &lt;code&gt;x&lt;/code&gt; is just
one element from our list. The interesting thing is what &lt;code&gt;acc&lt;/code&gt; contains. &lt;code&gt;acc&lt;/code&gt; contains
the &lt;em&gt;accumulation&lt;/em&gt; of everything right from our current element. To be more concrete, let's
say we reached element &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;x&lt;/code&gt; contains &lt;code&gt;2&lt;/code&gt;, but &lt;code&gt;acc&lt;/code&gt; at this point in time contains &lt;code&gt;[9;16]&lt;/code&gt;. It contains the result
of our accumulation that was right of &lt;code&gt;2&lt;/code&gt;. Let's assume we have.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 53)&quot; onmouseover=&quot;showTip(event, 'fs17', 53)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 55)&quot; onmouseover=&quot;showTip(event, 'fs15', 55)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 56)&quot; onmouseover=&quot;showTip(event, 'fs21', 56)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 57)&quot; onmouseover=&quot;showTip(event, 'fs15', 57)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 58)&quot; onmouseover=&quot;showTip(event, 'fs21', 58)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In that case when we reach &lt;code&gt;2&lt;/code&gt; our &lt;code&gt;x&lt;/code&gt; is once again &lt;code&gt;2&lt;/code&gt; but our &lt;code&gt;acc&lt;/code&gt; contains &lt;code&gt;7&lt;/code&gt;, because so
far it calculated &lt;code&gt;0 + 4 + 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only problem we have. We cannot go backwards through a list. That was the whole reason why we
reversed the list before we looped/recurs through it. We only can go from left to right.
And that is bad. Because we have to start with &lt;code&gt;1&lt;/code&gt; and we need to pass an &lt;code&gt;acc&lt;/code&gt; to the &lt;code&gt;f&lt;/code&gt;
function that we don't have at that point in time!&lt;/p&gt;
&lt;p&gt;Uhm wait! Isn't that exactly what we discussed previously? What do we do if we expect to work
with a value that we don't have yet? We create a function!&lt;/p&gt;
&lt;h2&gt;Functions as accumulator&lt;/h2&gt;
&lt;p&gt;The basic idea to solve our problem is by using a function that we use as our &lt;em&gt;accumulator&lt;/em&gt;.
We use a function because we need to work with values we don't have yet. Because we have a
function I use &lt;code&gt;cont&lt;/code&gt; (for Continuation) in our inner &lt;code&gt;loop&lt;/code&gt; instead of &lt;code&gt;acc&lt;/code&gt;. Let's
first write the basic template to loop through a list first.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;foldBack&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 59)&quot; onmouseover=&quot;showTip(event, 'fs20', 59)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 60)&quot; onmouseover=&quot;showTip(event, 'fs20', 60)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 61)&quot; onmouseover=&quot;showTip(event, 'fs20', 61)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | []      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 62)&quot; onmouseover=&quot;showTip(event, 'fs20', 62)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 63)&quot; onmouseover=&quot;showTip(event, 'fs20', 63)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 64)&quot; onmouseover=&quot;showTip(event, 'fs20', 64)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So the question we have are.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What do we do for every element?&lt;/li&gt;
&lt;li&gt;What do we do after we looped through our list?&lt;/li&gt;
&lt;li&gt;With what kind of value do we start our loop?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What do we do for every element?&lt;/h3&gt;
&lt;p&gt;At first, we reconsider what we are supposed to do. Our task is to execute the &lt;em&gt;folder&lt;/em&gt;
function that the caller provided us as &lt;code&gt;f&lt;/code&gt;. We pass this function the &lt;em&gt;current value&lt;/em&gt; and the
&lt;em&gt;right-accumulator&lt;/em&gt;. At this point in time we have the current value inside of &lt;code&gt;x&lt;/code&gt;,
but we don't have the &lt;em&gt;right-accumulator&lt;/em&gt;. What we now do, we just create a &lt;em&gt;inner function&lt;/em&gt;
&lt;code&gt;newCont&lt;/code&gt; that at some point in the future will get the &lt;em&gt;right-accumulator&lt;/em&gt;, then we also can
call the &lt;code&gt;f&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But is that right? Let's think what would happen. In our first recursion we get &lt;code&gt;1&lt;/code&gt; from
&lt;code&gt;[1;2;3;4]&lt;/code&gt; and save it in &lt;code&gt;x&lt;/code&gt;. We then create a function that basically does.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We pass that function as &lt;code&gt;cont&lt;/code&gt; to the next iteration. In the next recursion we extract &lt;code&gt;2&lt;/code&gt;
from the remaining list &lt;code&gt;[2;3;4]&lt;/code&gt;, now we create a new &lt;code&gt;newCont&lt;/code&gt; that basically does.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Then this new function is used as our &lt;code&gt;cont&lt;/code&gt;. But this behaviour is wrong. We loop through
our list and on every step we just create a new function that will replace the old function.
The problem is, we cannot just throw the old &lt;code&gt;cont&lt;/code&gt; away, we somehow have to use it. But how?&lt;/p&gt;
&lt;p&gt;Let's look at our &lt;code&gt;f 2 racc&lt;/code&gt; call. What does that function return when we call it? Or better yet,
which values do we have here exactly? Our &lt;code&gt;racc&lt;/code&gt; is the &lt;em&gt;right-accumulator&lt;/em&gt; that we have in the
future, in our example this will be &lt;code&gt;[9;16]&lt;/code&gt;. When we call &lt;code&gt;f 2 racc&lt;/code&gt; we actually call
&lt;code&gt;f 2 [9;16]&lt;/code&gt;. What does our &lt;code&gt;f&lt;/code&gt; function in our example? It squares &lt;code&gt;x&lt;/code&gt; and add it to the &lt;code&gt;racc&lt;/code&gt;.
So after we do &lt;code&gt;f 2 [9;16]&lt;/code&gt; we will get &lt;code&gt;[4;9;16]&lt;/code&gt; as a result.&lt;/p&gt;
&lt;p&gt;But wait! Isn't that the &lt;em&gt;right-accumulator&lt;/em&gt; that our previous &lt;code&gt;cont&lt;/code&gt; needed? Yes, it is! And now
it becomes more obvious in how we need to use &lt;code&gt;cont&lt;/code&gt;. We call &lt;code&gt;f x racc&lt;/code&gt;, this then produces a
value that can be used to call our previous function that we passed as &lt;code&gt;cont&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If that sound hard to follow. Just remember &lt;em&gt;function composition&lt;/em&gt; again. What we have hear is
just this idea! In function composition we call a function &lt;code&gt;f&lt;/code&gt; with a value we don't have yet, that
will produce a value that can be passed to &lt;code&gt;g&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 65)&quot; onmouseover=&quot;showTip(event, 'fs13', 65)&quot; class=&quot;i&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;res&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Here we have the same. The only difference is that this time &lt;code&gt;cont&lt;/code&gt; is a function we created
inside a function in a previous loop. Let's shorten the example a little bit. In function composition
we just ended with &lt;code&gt;let compose f g x = g (f x)&lt;/code&gt;. We now shorten our call to:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our &lt;code&gt;f&lt;/code&gt; function takes two arguments, but otherwise it is the same idea. The whole &lt;em&gt;loop-body&lt;/em&gt; part
in our example now looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 66)&quot; onmouseover=&quot;showTip(event, 'fs20', 66)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newCont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 67)&quot; onmouseover=&quot;showTip(event, 'fs20', 67)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we are not done yet, we still have to fill out two missing parts.&lt;/p&gt;
&lt;h3&gt;What do we do after we looped through the list?&lt;/h3&gt;
&lt;p&gt;One remaining part is the logic we have to do once we finished our looping. Let's actually try to
understand what we exactly build. In every step we create a new function
that expects the &lt;em&gt;right-accumulator&lt;/em&gt; with this and the current &lt;code&gt;x&lt;/code&gt; we calculate the
&lt;em&gt;right-accumulator&lt;/em&gt; for the previous function. In our first loop we create.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In our second loop we basically do:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Remember, we create a new function, but we call the previously &lt;code&gt;cont&lt;/code&gt;. I used &lt;code&gt;cont1&lt;/code&gt; to make
the relation more clear. Technically every new step now creates a new &lt;code&gt;cont&lt;/code&gt; function that calls
the previous &lt;code&gt;cont&lt;/code&gt; function. If we expand it fully we basically have.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont1&lt;/span&gt;    (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont2&lt;/span&gt;    (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont3&lt;/span&gt;    (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Every new function that we create contains the previous function as a closure. Actually let's
inline the whole functions step-by-step. First we inline &lt;code&gt;cont1&lt;/code&gt; in our &lt;code&gt;cont2&lt;/code&gt; function, and so on.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;then we inline &lt;code&gt;cont2&lt;/code&gt; into &lt;code&gt;cont3&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;finally &lt;code&gt;cont3&lt;/code&gt; into &lt;code&gt;cont4&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we can see. With every loop iteration that we go forward, we build up a function. Every new
function we create builds the &lt;em&gt;right-accumulator&lt;/em&gt; that is needed for the &lt;em&gt;previous-step&lt;/em&gt;.
Once we looped through our whole data-structure, we ended up with a final function. The only thing
we need to do, is to start our function by passing it the final &lt;em&gt;right-accumulator&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And at this point we have the final &lt;em&gt;right-accumulator&lt;/em&gt;! At the end we have to pass the
&lt;em&gt;right-accumulator&lt;/em&gt; of our last element. We only have the list &lt;code&gt;[1;2;3;4]&lt;/code&gt; so what is the
&lt;em&gt;right-accumulator&lt;/em&gt; of the last element &lt;code&gt;4&lt;/code&gt;? The &lt;em&gt;initial-accumulator&lt;/em&gt; that the user passed
to &lt;code&gt;foldBack&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;So here is our answer. Once we reached the end of our list we have a function and we need to pass it
the &lt;em&gt;initial-accumulator&lt;/em&gt;. Our &lt;em&gt;empty-list case&lt;/em&gt; now looks something like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| [] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;With what kind of value do we start our loop?&lt;/h3&gt;
&lt;p&gt;The last remaining part is how we start our loop. Or put in other words. What do we provide
as our &lt;code&gt;initCont&lt;/code&gt; value? To understand this part better, let's assume we started our loop.
We already saw what kind of structure we build. In the end we just had&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once we reach the end of our data-structure in our example we provided the empty list &lt;code&gt;[]&lt;/code&gt; as the
starting right accumulator. So we basically have.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; []))))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At this point, now our function starts its execution. First &lt;code&gt;f 4 []&lt;/code&gt; is calculated and this will
return &lt;code&gt;[16]&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;])))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now &lt;code&gt;f 3 [16]&lt;/code&gt; executes and we get&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now it is &lt;code&gt;f 2 [9;16]&lt;/code&gt; turn&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And finally we have&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cont4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initCont&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now &lt;code&gt;initCont&lt;/code&gt; also must be a &lt;em&gt;function&lt;/em&gt;. But what do we expect it to do? Well nothing!
We just expect it to return it's input as-is. In other words. Our &lt;em&gt;starting function&lt;/em&gt; is &lt;code&gt;id&lt;/code&gt;. So
we start our &lt;code&gt;loop&lt;/code&gt; with &lt;code&gt;loop id list&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;All pieces together&lt;/h3&gt;
&lt;p&gt;Now let's put all pieces together, our final &lt;code&gt;foldBack&lt;/code&gt; function now looks like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 68)&quot; onmouseover=&quot;showTip(event, 'fs22', 68)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 69)&quot; onmouseover=&quot;showTip(event, 'fs23', 69)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 70)&quot; onmouseover=&quot;showTip(event, 'fs24', 70)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 71)&quot; onmouseover=&quot;showTip(event, 'fs25', 71)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 72)&quot; onmouseover=&quot;showTip(event, 'fs26', 72)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 73)&quot; onmouseover=&quot;showTip(event, 'fs27', 73)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 74)&quot; onmouseover=&quot;showTip(event, 'fs24', 74)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 75)&quot; onmouseover=&quot;showTip(event, 'fs24', 75)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | []      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 76)&quot; onmouseover=&quot;showTip(event, 'fs27', 76)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 77)&quot; onmouseover=&quot;showTip(event, 'fs25', 77)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 78)&quot; onmouseover=&quot;showTip(event, 'fs9', 78)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 79)&quot; onmouseover=&quot;showTip(event, 'fs24', 79)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 80)&quot; onmouseover=&quot;showTip(event, 'fs28', 80)&quot; class=&quot;f&quot;&gt;newCont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 81)&quot; onmouseover=&quot;showTip(event, 'fs29', 81)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 82)&quot; onmouseover=&quot;showTip(event, 'fs27', 82)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 83)&quot; onmouseover=&quot;showTip(event, 'fs23', 83)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 84)&quot; onmouseover=&quot;showTip(event, 'fs9', 84)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 85)&quot; onmouseover=&quot;showTip(event, 'fs29', 85)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt;)
            &lt;span onmouseout=&quot;hideTip(event, 'fs26', 86)&quot; onmouseover=&quot;showTip(event, 'fs26', 86)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 87)&quot; onmouseover=&quot;showTip(event, 'fs28', 87)&quot; class=&quot;f&quot;&gt;newCont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 88)&quot; onmouseover=&quot;showTip(event, 'fs24', 88)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs26', 89)&quot; onmouseover=&quot;showTip(event, 'fs26', 89)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 90)&quot; onmouseover=&quot;showTip(event, 'fs30', 90)&quot; class=&quot;f&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 91)&quot; onmouseover=&quot;showTip(event, 'fs24', 91)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs22', 92)&quot; onmouseover=&quot;showTip(event, 'fs22', 92)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 93)&quot; onmouseover=&quot;showTip(event, 'fs15', 93)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 94)&quot; onmouseover=&quot;showTip(event, 'fs19', 94)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 95)&quot; onmouseover=&quot;showTip(event, 'fs15', 95)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 96)&quot; onmouseover=&quot;showTip(event, 'fs15', 96)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 97)&quot; onmouseover=&quot;showTip(event, 'fs19', 97)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] []
&lt;span class=&quot;c&quot;&gt;// [1; 4; 9; 16]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs22', 98)&quot; onmouseover=&quot;showTip(event, 'fs22', 98)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 99)&quot; onmouseover=&quot;showTip(event, 'fs15', 99)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 100)&quot; onmouseover=&quot;showTip(event, 'fs21', 100)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 101)&quot; onmouseover=&quot;showTip(event, 'fs15', 101)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 102)&quot; onmouseover=&quot;showTip(event, 'fs21', 102)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 55&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs22', 103)&quot; onmouseover=&quot;showTip(event, 'fs22', 103)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 104)&quot; onmouseover=&quot;showTip(event, 'fs15', 104)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 105)&quot; onmouseover=&quot;showTip(event, 'fs31', 105)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 106)&quot; onmouseover=&quot;showTip(event, 'fs32', 106)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 107)&quot; onmouseover=&quot;showTip(event, 'fs15', 107)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 108)&quot; onmouseover=&quot;showTip(event, 'fs31', 108)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// &amp;quot;1234568910&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Continuation functions in general are powerful and we can do a lot with them, solving &lt;code&gt;foldBack&lt;/code&gt;
without reversing a list first is just one example. But in this case i have to admit that
understanding it is quite hard. It has nothing to do that &lt;em&gt;Continuation functions&lt;/em&gt; are itself hard to
understand, the problem why it is so hard is because we cannot traverse a list backwards. Using
a continuation function is just one possible way to solve the problem. I think it is in general
worth to know and understand this solution.&lt;/p&gt;
&lt;p&gt;In general I also hope that the analogy that functions just works on a &lt;em&gt;future value&lt;/em&gt;
helps. At least for me this analogy was quite helpful in a lot of cases in the past.&lt;/p&gt;
&lt;p&gt;One question remains. Which solution of &lt;code&gt;foldBack&lt;/code&gt; should we prefer, and which is better? Well, at
first how do you measure &quot;better&quot;? Is it memory-consumption? CPU-time? Understanding code?&lt;/p&gt;
&lt;p&gt;If you really care for &lt;em&gt;performance&lt;/em&gt; you should benchmark. But make sure to test &lt;em&gt;small&lt;/em&gt;,
&lt;em&gt;medium&lt;/em&gt; and &lt;em&gt;big&lt;/em&gt; input lists. In the previous &lt;code&gt;foldBack&lt;/code&gt; version it doesn't seem that
&lt;em&gt;reversing&lt;/em&gt; a list is the best option, as you have to go through a list twice and create
a new intermediate list.&lt;/p&gt;
&lt;p&gt;But using this kind of &lt;em&gt;continuation&lt;/em&gt; style isn't quite better. We basically still traverse a
list twice. We build first a continuation function, and in the end, we have to execute
it that touches every element again. A &lt;em&gt;continuation function&lt;/em&gt; can result in higher
memory consumption and could be slower, &lt;em&gt;reversing&lt;/em&gt; in the end can be faster and easier
to understand. But if you really care, then do benchmarks on your own.&lt;/p&gt;
&lt;p&gt;But I think we should focus more on &lt;em&gt;readability&lt;/em&gt;. &lt;em&gt;Reversing&lt;/em&gt; is just quite easier,
so try to use the obvious solution first if you design things.&lt;/p&gt;
&lt;p&gt;But at this point I also want to mention &lt;em&gt;mutability&lt;/em&gt;. In functional programming in general
we don't care how a function works. Functions are black-boxes. We only care for the input and
the output of a function. It doesn't matter how it works, as long we have a &lt;em&gt;pure&lt;/em&gt; function
and it expect and returns &lt;em&gt;immutable-data&lt;/em&gt; everything is fine. Even if a function uses
loops, mutation or other kind of stuff. This is absolutely fine!&lt;/p&gt;
&lt;p&gt;Controlled or limited &lt;em&gt;mutation&lt;/em&gt; inside a function is absolutely okay. As long as that function
is &lt;em&gt;pure&lt;/em&gt; and only takes and returns &lt;em&gt;immutable-data&lt;/em&gt;. That doesn't mean everything i said
is useless.&lt;/p&gt;
&lt;p&gt;It just explains the overall concept that is in general good to know and is useable in
different scenarios.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val compose : f:&amp;#39;a -&amp;gt; g:&amp;#39;b -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: foldcontinuations.compose&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val f : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val g : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val compose : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; g:(&amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; &amp;#39;d&lt;br /&gt;&lt;br /&gt;Full name: foldcontinuations.compose&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val g : (&amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val innerFunction : (&amp;#39;a -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val result : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val compose : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; g:(&amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; (&amp;#39;a -&amp;gt; &amp;#39;c)&lt;br /&gt;&lt;br /&gt;Full name: foldcontinuations.compose&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val compose : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; g:(&amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;a -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: foldcontinuations.compose&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val compose : ((&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; (&amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val f : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.f&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val squared : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.squared&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val foldBack : folder:(&amp;#39;T -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;T list -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val acc : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val foldBack : f:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;a list -&amp;gt; acc:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;a list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val acc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val loop : ((&amp;#39;State -&amp;gt; &amp;#39;b) -&amp;gt; &amp;#39;a list -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val cont : (&amp;#39;State -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val newCont : (&amp;#39;State -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val racc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val id : x:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.id&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val acc : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Sequence and Traverse</title>
   <link href="https://sidburn.github.io/blog/2016/04/14/sequence-and-traverse"/>
   <updated>2016-04-14T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/04/14/sequence-and-traverse</id>
   <content type="html">&lt;p&gt;One problem that appears from time to time is that we we have some kind of
collection (I use &lt;code&gt;list&lt;/code&gt; here) and we want to &lt;code&gt;map&lt;/code&gt; every element with a
&lt;em&gt;monadic function&lt;/em&gt; &lt;code&gt;'a -&amp;gt; M&amp;lt;'b&amp;gt;&lt;/code&gt;. This then returns a &lt;code&gt;list&amp;lt;M&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt;. But
often we want a &lt;code&gt;M&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be more concrete. Let's assume we want to turn a list of strings into integers. We could
write a &lt;code&gt;tryParseInt&lt;/code&gt; function that does &lt;code&gt;string -&amp;gt; option&amp;lt;int&amp;gt;&lt;/code&gt;. But if we &lt;code&gt;map&lt;/code&gt;
our function with a &lt;code&gt;list&amp;lt;string&amp;gt;&lt;/code&gt; we get a &lt;code&gt;list&amp;lt;option&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt; back.&lt;/p&gt;
&lt;p&gt;Sometimes that is what we want, but very often it is not. Usually what we want is
a &lt;code&gt;option&amp;lt;list&amp;lt;int&amp;gt;&amp;gt;&lt;/code&gt; instead. So we expect the types to be switched.&lt;/p&gt;
&lt;p&gt;The idea behind it in this example is that when we use &lt;code&gt;map&lt;/code&gt; over a list of strings it is
either successful as a whole and all elements are integers or as soon a single element
is not an integer we get &lt;code&gt;None&lt;/code&gt; back as a whole.&lt;/p&gt;
&lt;p&gt;We could just write a function that somehow does that kind of transformation just for
&lt;code&gt;tryParseInt&lt;/code&gt;, but instead of doing that again and again for every function we try to
generalize that problem, so we can turn every &lt;code&gt;list&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; into &lt;code&gt;option&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt;.
Not only that, we want to generalize the problem that it works for any type, not
just &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This generalization is what we think of the &lt;code&gt;sequence&lt;/code&gt; and &lt;code&gt;traverse&lt;/code&gt; functions.&lt;/p&gt;
&lt;h2&gt;Sequence&lt;/h2&gt;
&lt;p&gt;We first start with the &lt;em&gt;monadic&lt;/em&gt; &lt;code&gt;tryParseInt&lt;/code&gt; function we already mentioned.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 7)&quot; onmouseover=&quot;showTip(event, 'fs3', 7)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 9)&quot; onmouseover=&quot;showTip(event, 'fs8', 9)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs6', 10)&quot; onmouseover=&quot;showTip(event, 'fs6', 10)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 11)&quot; onmouseover=&quot;showTip(event, 'fs9', 11)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 12)&quot; onmouseover=&quot;showTip(event, 'fs10', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 13)&quot; onmouseover=&quot;showTip(event, 'fs11', 13)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 14)&quot; onmouseover=&quot;showTip(event, 'fs10', 14)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Next, we have some kind of input from a file, user or somewhere else.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 15)&quot; onmouseover=&quot;showTip(event, 'fs12', 15)&quot; class=&quot;i&quot;&gt;validInput&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;5789&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 16)&quot; onmouseover=&quot;showTip(event, 'fs13', 16)&quot; class=&quot;i&quot;&gt;invalidInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In our example we want to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parse every &lt;code&gt;string&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If all inputs are valid, we want to &lt;code&gt;sum&lt;/code&gt; the results&lt;/li&gt;
&lt;li&gt;If one input is invalid, we want to print an error message&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first step is easy, as we could just &lt;code&gt;map&lt;/code&gt; the list.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 17)&quot; onmouseover=&quot;showTip(event, 'fs14', 17)&quot; class=&quot;i&quot;&gt;validInts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 18)&quot; onmouseover=&quot;showTip(event, 'fs15', 18)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 19)&quot; onmouseover=&quot;showTip(event, 'fs16', 19)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 20)&quot; onmouseover=&quot;showTip(event, 'fs5', 20)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 21)&quot; onmouseover=&quot;showTip(event, 'fs12', 21)&quot; class=&quot;i&quot;&gt;validInput&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have a list containing:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span onmouseout=&quot;hideTip(event, 'fs11', 22)&quot; onmouseover=&quot;showTip(event, 'fs11', 22)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 23)&quot; onmouseover=&quot;showTip(event, 'fs11', 23)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 24)&quot; onmouseover=&quot;showTip(event, 'fs11', 24)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 25)&quot; onmouseover=&quot;showTip(event, 'fs11', 25)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5789&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The problem starts in how we determine that every element is valid. We sure could
use &lt;code&gt;fold&lt;/code&gt; to loop through our list. Starting with a &lt;code&gt;bool&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; and as soon
we encounter a &lt;code&gt;None&lt;/code&gt; we set the &lt;code&gt;bool&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But we already have &lt;code&gt;Option&lt;/code&gt; for this kind of purpose. With &lt;code&gt;Option&lt;/code&gt; we still can
return the idea of &lt;code&gt;true&lt;/code&gt; (Some) and &lt;code&gt;false&lt;/code&gt; (None), but additional we also can return
a value.&lt;/p&gt;
&lt;p&gt;Instead of just getting a boolean flag like &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; we just return &lt;code&gt;Some&lt;/code&gt;
with a new list that has all the &lt;code&gt;option&lt;/code&gt; values stripped instead. For the valid
input case we just expect:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 26)&quot; onmouseover=&quot;showTip(event, 'fs11', 26)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;5789&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;for the invalid input list we just expect:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 27)&quot; onmouseover=&quot;showTip(event, 'fs9', 27)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we need to loop through every element and build a new list, this is just a task for
&lt;code&gt;List.foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Because we want a &lt;code&gt;option&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; as a result, we start with &lt;code&gt;Some []&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then we check if &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; are both &lt;code&gt;Some&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If that is the case we add &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;acc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Otherwise we return &lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We name this operation &lt;code&gt;sequence&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 28)&quot; onmouseover=&quot;showTip(event, 'fs17', 28)&quot; class=&quot;f&quot;&gt;sequenceFold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 29)&quot; onmouseover=&quot;showTip(event, 'fs18', 29)&quot; class=&quot;i&quot;&gt;listOfOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 30)&quot; onmouseover=&quot;showTip(event, 'fs19', 30)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 31)&quot; onmouseover=&quot;showTip(event, 'fs20', 31)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 32)&quot; onmouseover=&quot;showTip(event, 'fs21', 32)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 33)&quot; onmouseover=&quot;showTip(event, 'fs20', 33)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs21', 34)&quot; onmouseover=&quot;showTip(event, 'fs21', 34)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs11', 35)&quot; onmouseover=&quot;showTip(event, 'fs11', 35)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 36)&quot; onmouseover=&quot;showTip(event, 'fs22', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs11', 37)&quot; onmouseover=&quot;showTip(event, 'fs11', 37)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 38)&quot; onmouseover=&quot;showTip(event, 'fs23', 38)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 39)&quot; onmouseover=&quot;showTip(event, 'fs11', 39)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 40)&quot; onmouseover=&quot;showTip(event, 'fs22', 40)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 41)&quot; onmouseover=&quot;showTip(event, 'fs23', 41)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;)
        | &lt;span onmouseout=&quot;hideTip(event, 'fs11', 42)&quot; onmouseover=&quot;showTip(event, 'fs11', 42)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs9', 43)&quot; onmouseover=&quot;showTip(event, 'fs9', 43)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _    &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 44)&quot; onmouseover=&quot;showTip(event, 'fs9', 44)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 45)&quot; onmouseover=&quot;showTip(event, 'fs9', 45)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs11', 46)&quot; onmouseover=&quot;showTip(event, 'fs11', 46)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; _    &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 47)&quot; onmouseover=&quot;showTip(event, 'fs9', 47)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 48)&quot; onmouseover=&quot;showTip(event, 'fs9', 48)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs9', 49)&quot; onmouseover=&quot;showTip(event, 'fs9', 49)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _    &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 50)&quot; onmouseover=&quot;showTip(event, 'fs9', 50)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 51)&quot; onmouseover=&quot;showTip(event, 'fs15', 51)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 52)&quot; onmouseover=&quot;showTip(event, 'fs24', 52)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 53)&quot; onmouseover=&quot;showTip(event, 'fs19', 53)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;i&quot;&gt;listOfOptions&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 55)&quot; onmouseover=&quot;showTip(event, 'fs11', 55)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; [])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we test our function it returns the right result&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 56)&quot; onmouseover=&quot;showTip(event, 'fs15', 56)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 57)&quot; onmouseover=&quot;showTip(event, 'fs16', 57)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 58)&quot; onmouseover=&quot;showTip(event, 'fs5', 58)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 59)&quot; onmouseover=&quot;showTip(event, 'fs12', 59)&quot; class=&quot;i&quot;&gt;validInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 60)&quot; onmouseover=&quot;showTip(event, 'fs17', 60)&quot; class=&quot;f&quot;&gt;sequenceFold&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Some [1; 100; 12; 5789]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs15', 61)&quot; onmouseover=&quot;showTip(event, 'fs15', 61)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 62)&quot; onmouseover=&quot;showTip(event, 'fs16', 62)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 63)&quot; onmouseover=&quot;showTip(event, 'fs5', 63)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 64)&quot; onmouseover=&quot;showTip(event, 'fs13', 64)&quot; class=&quot;i&quot;&gt;invalidInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 65)&quot; onmouseover=&quot;showTip(event, 'fs17', 65)&quot; class=&quot;f&quot;&gt;sequenceFold&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Nice, it works! But this implementation still has a problem. Our &lt;code&gt;folder&lt;/code&gt; function
is basically a duplicate of the &lt;code&gt;apply&lt;/code&gt; function! The whole idea to check two
&lt;code&gt;option&lt;/code&gt; and only execute some code if both are &lt;code&gt;Some&lt;/code&gt; is exactly what &lt;code&gt;apply&lt;/code&gt; does.
Let's look again at &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 66)&quot; onmouseover=&quot;showTip(event, 'fs25', 66)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 67)&quot; onmouseover=&quot;showTip(event, 'fs26', 67)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 68)&quot; onmouseover=&quot;showTip(event, 'fs27', 68)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 69)&quot; onmouseover=&quot;showTip(event, 'fs26', 69)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs27', 70)&quot; onmouseover=&quot;showTip(event, 'fs27', 70)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs11', 71)&quot; onmouseover=&quot;showTip(event, 'fs11', 71)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 72)&quot; onmouseover=&quot;showTip(event, 'fs28', 72)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs11', 73)&quot; onmouseover=&quot;showTip(event, 'fs11', 73)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 74)&quot; onmouseover=&quot;showTip(event, 'fs29', 74)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 75)&quot; onmouseover=&quot;showTip(event, 'fs11', 75)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs28', 76)&quot; onmouseover=&quot;showTip(event, 'fs28', 76)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 77)&quot; onmouseover=&quot;showTip(event, 'fs29', 77)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    | &lt;span onmouseout=&quot;hideTip(event, 'fs11', 78)&quot; onmouseover=&quot;showTip(event, 'fs11', 78)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs9', 79)&quot; onmouseover=&quot;showTip(event, 'fs9', 79)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 80)&quot; onmouseover=&quot;showTip(event, 'fs9', 80)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 81)&quot; onmouseover=&quot;showTip(event, 'fs9', 81)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs11', 82)&quot; onmouseover=&quot;showTip(event, 'fs11', 82)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 83)&quot; onmouseover=&quot;showTip(event, 'fs9', 83)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 84)&quot; onmouseover=&quot;showTip(event, 'fs9', 84)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs9', 85)&quot; onmouseover=&quot;showTip(event, 'fs9', 85)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 86)&quot; onmouseover=&quot;showTip(event, 'fs9', 86)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 87)&quot; onmouseover=&quot;showTip(event, 'fs25', 87)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;There is also another problem here. It doesn't matter which type we use. We always have
to lift an empty list. In this case we did &lt;code&gt;Some []&lt;/code&gt; for the accumulator. But in a
&lt;code&gt;Async&lt;/code&gt; case we just want an empty list inside an &lt;code&gt;Async&lt;/code&gt;. So we always just want to
&lt;code&gt;return&lt;/code&gt; a list for the context. It just means: We always can create a &lt;code&gt;sequence&lt;/code&gt;
function as long our type provides a &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; function. Or in other words,
our type is an &lt;a href=&quot;/blog/2016/03/31/applicative-functors&quot;&gt;Applicative Functor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's think about how we can implement &lt;code&gt;sequence&lt;/code&gt; with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The code we executed when we had two &lt;code&gt;Some&lt;/code&gt; values was &lt;code&gt;x :: list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;So we just create a function for this operation&lt;/li&gt;
&lt;li&gt;And &lt;code&gt;apply&lt;/code&gt; this function&lt;/li&gt;
&lt;li&gt;Then we use this function as our &lt;code&gt;folder&lt;/code&gt; function&lt;/li&gt;
&lt;/ol&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 88)&quot; onmouseover=&quot;showTip(event, 'fs30', 88)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 89)&quot; onmouseover=&quot;showTip(event, 'fs29', 89)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 90)&quot; onmouseover=&quot;showTip(event, 'fs11', 90)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 91)&quot; onmouseover=&quot;showTip(event, 'fs29', 91)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 92)&quot; onmouseover=&quot;showTip(event, 'fs31', 92)&quot; class=&quot;f&quot;&gt;sequence&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 93)&quot; onmouseover=&quot;showTip(event, 'fs18', 93)&quot; class=&quot;i&quot;&gt;listOfOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 94)&quot; onmouseover=&quot;showTip(event, 'fs19', 94)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 95)&quot; onmouseover=&quot;showTip(event, 'fs20', 95)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 96)&quot; onmouseover=&quot;showTip(event, 'fs32', 96)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 97)&quot; onmouseover=&quot;showTip(event, 'fs30', 97)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 98)&quot; onmouseover=&quot;showTip(event, 'fs22', 98)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 99)&quot; onmouseover=&quot;showTip(event, 'fs33', 99)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 100)&quot; onmouseover=&quot;showTip(event, 'fs22', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 101)&quot; onmouseover=&quot;showTip(event, 'fs33', 101)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 102)&quot; onmouseover=&quot;showTip(event, 'fs20', 102)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 103)&quot; onmouseover=&quot;showTip(event, 'fs32', 103)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 104)&quot; onmouseover=&quot;showTip(event, 'fs15', 104)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 105)&quot; onmouseover=&quot;showTip(event, 'fs24', 105)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 106)&quot; onmouseover=&quot;showTip(event, 'fs19', 106)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 107)&quot; onmouseover=&quot;showTip(event, 'fs18', 107)&quot; class=&quot;i&quot;&gt;listOfOptions&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs30', 108)&quot; onmouseover=&quot;showTip(event, 'fs30', 108)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; [])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We still get our expected results&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 109)&quot; onmouseover=&quot;showTip(event, 'fs15', 109)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 110)&quot; onmouseover=&quot;showTip(event, 'fs16', 110)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 111)&quot; onmouseover=&quot;showTip(event, 'fs5', 111)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 112)&quot; onmouseover=&quot;showTip(event, 'fs12', 112)&quot; class=&quot;i&quot;&gt;validInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 113)&quot; onmouseover=&quot;showTip(event, 'fs31', 113)&quot; class=&quot;f&quot;&gt;sequence&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Some [1; 100; 12; 5789]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs15', 114)&quot; onmouseover=&quot;showTip(event, 'fs15', 114)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 115)&quot; onmouseover=&quot;showTip(event, 'fs16', 115)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 116)&quot; onmouseover=&quot;showTip(event, 'fs5', 116)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 117)&quot; onmouseover=&quot;showTip(event, 'fs13', 117)&quot; class=&quot;i&quot;&gt;invalidInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 118)&quot; onmouseover=&quot;showTip(event, 'fs31', 118)&quot; class=&quot;f&quot;&gt;sequence&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Nice, everything works. So why is rewriting &lt;code&gt;sequence&lt;/code&gt; in such a way better?
What we basically have here is a &lt;em&gt;Design Pattern&lt;/em&gt; (or what every Design Pattern is --
A Copy &amp;amp; Paste Pattern).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sequence&lt;/code&gt; operation for a &lt;code&gt;list&lt;/code&gt; is &lt;em&gt;always&lt;/em&gt; the same. It just depends solely that
a type supports a &lt;code&gt;retn&lt;/code&gt; and a &lt;code&gt;apply&lt;/code&gt; function. It probably opens up the question
that when the implementation is always the same if we cannot just have a single
implementation?&lt;/p&gt;
&lt;p&gt;Yes and no. Currently in F# &lt;code&gt;retn&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; are not Polymorphic, they are specific functions
we define ourself. &lt;a href=&quot;/blog/2016/03/24/higher-kinded-polymorphism&quot;&gt;We could fix it with Higher-Kinded Polymorphism&lt;/a&gt;
but F# don't support this nicely, but there are ways around it. But i will not cover
this topic here.&lt;/p&gt;
&lt;h2&gt;Traverse&lt;/h2&gt;
&lt;p&gt;So far we discussed &lt;code&gt;sequence&lt;/code&gt; but in practice you will less likely implement &lt;code&gt;sequence&lt;/code&gt;
at all. Instead we will implement &lt;code&gt;traverse&lt;/code&gt;. So how is &lt;code&gt;traverse&lt;/code&gt; different from &lt;code&gt;sequence&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;As you have seen so far. Even with &lt;code&gt;sequence&lt;/code&gt; there is one &lt;em&gt;pattern&lt;/em&gt; that is always the same.
You first &lt;code&gt;map&lt;/code&gt; a list, then you use &lt;code&gt;sequence&lt;/code&gt; on it. &lt;code&gt;traverse&lt;/code&gt; is just the idea to combine
both operations into a single operation.&lt;/p&gt;
&lt;p&gt;If that sounds complicated, it isn't at all! Just think for a moment. &lt;code&gt;map&lt;/code&gt; just means we apply
a function to every element before we use &lt;code&gt;sequence&lt;/code&gt;. So the only thing we need to
implement &lt;code&gt;traverse&lt;/code&gt; is to make sure we call a function that transforms every element
before we pass it to our &lt;em&gt;lifted&lt;/em&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 119)&quot; onmouseover=&quot;showTip(event, 'fs34', 119)&quot; class=&quot;f&quot;&gt;traverse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 120)&quot; onmouseover=&quot;showTip(event, 'fs35', 120)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 121)&quot; onmouseover=&quot;showTip(event, 'fs36', 121)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 122)&quot; onmouseover=&quot;showTip(event, 'fs37', 122)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 123)&quot; onmouseover=&quot;showTip(event, 'fs29', 123)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 124)&quot; onmouseover=&quot;showTip(event, 'fs32', 124)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 125)&quot; onmouseover=&quot;showTip(event, 'fs30', 125)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 126)&quot; onmouseover=&quot;showTip(event, 'fs22', 126)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 127)&quot; onmouseover=&quot;showTip(event, 'fs33', 127)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 128)&quot; onmouseover=&quot;showTip(event, 'fs22', 128)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 129)&quot; onmouseover=&quot;showTip(event, 'fs33', 129)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 130)&quot; onmouseover=&quot;showTip(event, 'fs35', 130)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 131)&quot; onmouseover=&quot;showTip(event, 'fs29', 131)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 132)&quot; onmouseover=&quot;showTip(event, 'fs32', 132)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 133)&quot; onmouseover=&quot;showTip(event, 'fs15', 133)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 134)&quot; onmouseover=&quot;showTip(event, 'fs24', 134)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 135)&quot; onmouseover=&quot;showTip(event, 'fs37', 135)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 136)&quot; onmouseover=&quot;showTip(event, 'fs36', 136)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs30', 137)&quot; onmouseover=&quot;showTip(event, 'fs30', 137)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; [])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The difference is so &lt;em&gt;minimal&lt;/em&gt; that it can even be overlooked easily. We added the function
call between the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; operators: &lt;code&gt;... &amp;lt;*&amp;gt; f x &amp;lt;*&amp;gt; xs&lt;/code&gt;. Instead of &lt;code&gt;map&lt;/code&gt; and then calling
&lt;code&gt;sequence&lt;/code&gt;, we now just can use &lt;code&gt;traverse&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 138)&quot; onmouseover=&quot;showTip(event, 'fs34', 138)&quot; class=&quot;f&quot;&gt;traverse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 139)&quot; onmouseover=&quot;showTip(event, 'fs5', 139)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 140)&quot; onmouseover=&quot;showTip(event, 'fs12', 140)&quot; class=&quot;i&quot;&gt;validInput&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Some [1; 100; 12; 5789]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs34', 141)&quot; onmouseover=&quot;showTip(event, 'fs34', 141)&quot; class=&quot;f&quot;&gt;traverse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 142)&quot; onmouseover=&quot;showTip(event, 'fs5', 142)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 143)&quot; onmouseover=&quot;showTip(event, 'fs13', 143)&quot; class=&quot;i&quot;&gt;invalidInput&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If the &lt;em&gt;logic&lt;/em&gt; seems still hard to follow. We just can think of &lt;code&gt;traverse&lt;/code&gt; as a &lt;code&gt;map&lt;/code&gt; function
for &lt;em&gt;monadic functions&lt;/em&gt; that additionally &lt;em&gt;swaps&lt;/em&gt; the layer when it finishes. When we use&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 144)&quot; onmouseover=&quot;showTip(event, 'fs15', 144)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 145)&quot; onmouseover=&quot;showTip(event, 'fs16', 145)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tryParseInt&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We get a &lt;code&gt;list&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt;. But when we use&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;traverse&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tryParseInt&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we get a &lt;code&gt;option&amp;lt;list&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Sequence defined through traverse&lt;/h2&gt;
&lt;p&gt;The primary reason why you less likely implement &lt;code&gt;sequence&lt;/code&gt; is because &lt;code&gt;traverse&lt;/code&gt; is
basically the same implementation. You can enhance a &lt;code&gt;sequence&lt;/code&gt; implementation easily
by just adding a function call to the element before you &lt;code&gt;apply&lt;/code&gt; it.&lt;/p&gt;
&lt;p&gt;Once you have a &lt;code&gt;traverse&lt;/code&gt; function, you can very easily create &lt;code&gt;sequence&lt;/code&gt; by just
using the &lt;code&gt;id&lt;/code&gt; function with &lt;code&gt;traverse&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 146)&quot; onmouseover=&quot;showTip(event, 'fs38', 146)&quot; class=&quot;f&quot;&gt;sequence&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 147)&quot; onmouseover=&quot;showTip(event, 'fs39', 147)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 148)&quot; onmouseover=&quot;showTip(event, 'fs34', 148)&quot; class=&quot;f&quot;&gt;traverse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 149)&quot; onmouseover=&quot;showTip(event, 'fs40', 149)&quot; class=&quot;f&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 150)&quot; onmouseover=&quot;showTip(event, 'fs39', 150)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You could even come to the conclusion to not provide a &lt;code&gt;sequence&lt;/code&gt; implementation at all.&lt;/p&gt;
&lt;h2&gt;Finishing the Example&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;traverse&lt;/code&gt; we now can easily finish our example that we started.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 151)&quot; onmouseover=&quot;showTip(event, 'fs41', 151)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 152)&quot; onmouseover=&quot;showTip(event, 'fs42', 152)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs42', 153)&quot; onmouseover=&quot;showTip(event, 'fs42', 153)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 154)&quot; onmouseover=&quot;showTip(event, 'fs34', 154)&quot; class=&quot;f&quot;&gt;traverse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 155)&quot; onmouseover=&quot;showTip(event, 'fs5', 155)&quot; class=&quot;f&quot;&gt;tryParseInt&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 156)&quot; onmouseover=&quot;showTip(event, 'fs43', 156)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs44', 157)&quot; onmouseover=&quot;showTip(event, 'fs44', 157)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 158)&quot; onmouseover=&quot;showTip(event, 'fs15', 158)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 159)&quot; onmouseover=&quot;showTip(event, 'fs45', 159)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 160)&quot; onmouseover=&quot;showTip(event, 'fs46', 160)&quot; class=&quot;f&quot;&gt;printSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 161)&quot; onmouseover=&quot;showTip(event, 'fs47', 161)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 162)&quot; onmouseover=&quot;showTip(event, 'fs47', 162)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 163)&quot; onmouseover=&quot;showTip(event, 'fs9', 163)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 164)&quot; onmouseover=&quot;showTip(event, 'fs48', 164)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error: Some inputs were not numbers!&amp;quot;&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs11', 165)&quot; onmouseover=&quot;showTip(event, 'fs11', 165)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 166)&quot; onmouseover=&quot;showTip(event, 'fs49', 166)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 167)&quot; onmouseover=&quot;showTip(event, 'fs48', 167)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Sum: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 168)&quot; onmouseover=&quot;showTip(event, 'fs49', 168)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs46', 169)&quot; onmouseover=&quot;showTip(event, 'fs46', 169)&quot; class=&quot;f&quot;&gt;printSum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs41', 170)&quot; onmouseover=&quot;showTip(event, 'fs41', 170)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 171)&quot; onmouseover=&quot;showTip(event, 'fs12', 171)&quot; class=&quot;i&quot;&gt;validInput&lt;/span&gt;)
&lt;span onmouseout=&quot;hideTip(event, 'fs46', 172)&quot; onmouseover=&quot;showTip(event, 'fs46', 172)&quot; class=&quot;f&quot;&gt;printSum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs41', 173)&quot; onmouseover=&quot;showTip(event, 'fs41', 173)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 174)&quot; onmouseover=&quot;showTip(event, 'fs13', 174)&quot; class=&quot;i&quot;&gt;invalidInput&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This code now produces:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;Sum: 5902
Error: Some inputs were not numbers!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Not limited to Option&lt;/h2&gt;
&lt;p&gt;It is in general important to understand that this concept is not limited to &lt;code&gt;list&lt;/code&gt;
and &lt;code&gt;option&lt;/code&gt;. The only thing we need is a data-structure that has a &lt;code&gt;fold&lt;/code&gt; function,
and another type that is an &lt;em&gt;Applicative Functor&lt;/em&gt; (has &lt;code&gt;return&lt;/code&gt; and a &lt;code&gt;apply&lt;/code&gt; function).&lt;/p&gt;
&lt;p&gt;After we have those the general idea is to swap both layers.
For example when we have a &lt;em&gt;monadic function&lt;/em&gt; &lt;code&gt;download&lt;/code&gt; that has the signature
&lt;code&gt;Uri -&amp;gt; Async&amp;lt;string&amp;gt;&lt;/code&gt; we expect that we can use this function on a &lt;code&gt;list&amp;lt;Uri&amp;gt;&lt;/code&gt;.
With &lt;code&gt;List.map&lt;/code&gt; we would get a&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs50', 175)&quot; onmouseover=&quot;showTip(event, 'fs50', 175)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs51', 176)&quot; onmouseover=&quot;showTip(event, 'fs51', 176)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 177)&quot; onmouseover=&quot;showTip(event, 'fs52', 177)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we use &lt;code&gt;traverse&lt;/code&gt; we get a&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs51', 178)&quot; onmouseover=&quot;showTip(event, 'fs51', 178)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs50', 179)&quot; onmouseover=&quot;showTip(event, 'fs50', 179)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 180)&quot; onmouseover=&quot;showTip(event, 'fs52', 180)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We don't need to write such a function for the &lt;code&gt;Async&lt;/code&gt; type as we can use &lt;code&gt;Async.Parallel&lt;/code&gt;.
&lt;code&gt;Async.Parallel&lt;/code&gt; is basically the &lt;code&gt;sequence&lt;/code&gt; function. It takes a &lt;code&gt;seq&amp;lt;Async&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; and turns
it into an Async containing an array &lt;code&gt;Async&amp;lt;'b []&amp;gt;&lt;/code&gt;. But anyway to see how it works we could
extend the &lt;code&gt;Async&lt;/code&gt; module with the needed functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 181)&quot; onmouseover=&quot;showTip(event, 'fs51', 181)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 182)&quot; onmouseover=&quot;showTip(event, 'fs53', 182)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 183)&quot; onmouseover=&quot;showTip(event, 'fs29', 183)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 184)&quot; onmouseover=&quot;showTip(event, 'fs54', 184)&quot; class=&quot;i&quot;&gt;async&lt;/span&gt; { &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 185)&quot; onmouseover=&quot;showTip(event, 'fs29', 185)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; }

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 186)&quot; onmouseover=&quot;showTip(event, 'fs55', 186)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 187)&quot; onmouseover=&quot;showTip(event, 'fs56', 187)&quot; class=&quot;i&quot;&gt;af&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 188)&quot; onmouseover=&quot;showTip(event, 'fs57', 188)&quot; class=&quot;i&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 189)&quot; onmouseover=&quot;showTip(event, 'fs54', 189)&quot; class=&quot;i&quot;&gt;async&lt;/span&gt; {
        &lt;span class=&quot;c&quot;&gt;// We start both async task in Parallel&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 190)&quot; onmouseover=&quot;showTip(event, 'fs58', 190)&quot; class=&quot;i&quot;&gt;pf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 191)&quot; onmouseover=&quot;showTip(event, 'fs51', 191)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs59', 192)&quot; onmouseover=&quot;showTip(event, 'fs59', 192)&quot; class=&quot;f&quot;&gt;StartChild&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 193)&quot; onmouseover=&quot;showTip(event, 'fs56', 193)&quot; class=&quot;i&quot;&gt;af&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 194)&quot; onmouseover=&quot;showTip(event, 'fs60', 194)&quot; class=&quot;i&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 195)&quot; onmouseover=&quot;showTip(event, 'fs51', 195)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs59', 196)&quot; onmouseover=&quot;showTip(event, 'fs59', 196)&quot; class=&quot;f&quot;&gt;StartChild&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 197)&quot; onmouseover=&quot;showTip(event, 'fs57', 197)&quot; class=&quot;i&quot;&gt;ax&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// We then wait that both async operations complete&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 198)&quot; onmouseover=&quot;showTip(event, 'fs28', 198)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 199)&quot; onmouseover=&quot;showTip(event, 'fs58', 199)&quot; class=&quot;i&quot;&gt;pf&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 200)&quot; onmouseover=&quot;showTip(event, 'fs29', 200)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 201)&quot; onmouseover=&quot;showTip(event, 'fs60', 201)&quot; class=&quot;i&quot;&gt;px&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Finally we execute (f x)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 202)&quot; onmouseover=&quot;showTip(event, 'fs28', 202)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 203)&quot; onmouseover=&quot;showTip(event, 'fs29', 203)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
    }

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;)   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 204)&quot; onmouseover=&quot;showTip(event, 'fs55', 204)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 205)&quot; onmouseover=&quot;showTip(event, 'fs61', 205)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 206)&quot; onmouseover=&quot;showTip(event, 'fs28', 206)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 207)&quot; onmouseover=&quot;showTip(event, 'fs62', 207)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 208)&quot; onmouseover=&quot;showTip(event, 'fs53', 208)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 209)&quot; onmouseover=&quot;showTip(event, 'fs28', 209)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 210)&quot; onmouseover=&quot;showTip(event, 'fs62', 210)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 211)&quot; onmouseover=&quot;showTip(event, 'fs63', 211)&quot; class=&quot;f&quot;&gt;traverse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 212)&quot; onmouseover=&quot;showTip(event, 'fs64', 212)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 213)&quot; onmouseover=&quot;showTip(event, 'fs36', 213)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 214)&quot; onmouseover=&quot;showTip(event, 'fs65', 214)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 215)&quot; onmouseover=&quot;showTip(event, 'fs29', 215)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 216)&quot; onmouseover=&quot;showTip(event, 'fs66', 216)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 217)&quot; onmouseover=&quot;showTip(event, 'fs53', 217)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 218)&quot; onmouseover=&quot;showTip(event, 'fs22', 218)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 219)&quot; onmouseover=&quot;showTip(event, 'fs33', 219)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 220)&quot; onmouseover=&quot;showTip(event, 'fs22', 220)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 221)&quot; onmouseover=&quot;showTip(event, 'fs33', 221)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 222)&quot; onmouseover=&quot;showTip(event, 'fs64', 222)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 223)&quot; onmouseover=&quot;showTip(event, 'fs29', 223)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 224)&quot; onmouseover=&quot;showTip(event, 'fs66', 224)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs15', 225)&quot; onmouseover=&quot;showTip(event, 'fs15', 225)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 226)&quot; onmouseover=&quot;showTip(event, 'fs24', 226)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 227)&quot; onmouseover=&quot;showTip(event, 'fs65', 227)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 228)&quot; onmouseover=&quot;showTip(event, 'fs36', 228)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 229)&quot; onmouseover=&quot;showTip(event, 'fs53', 229)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; [])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now can use &lt;code&gt;Async.traverse&lt;/code&gt; in the following way&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 230)&quot; onmouseover=&quot;showTip(event, 'fs67', 230)&quot; class=&quot;i&quot;&gt;uris&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs2', 231)&quot; onmouseover=&quot;showTip(event, 'fs2', 231)&quot; class=&quot;t&quot;&gt;Uri&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.google.com&amp;quot;&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs2', 232)&quot; onmouseover=&quot;showTip(event, 'fs2', 232)&quot; class=&quot;t&quot;&gt;Uri&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;https://fsharpforfunandprofit.com&amp;quot;&lt;/span&gt;)]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 233)&quot; onmouseover=&quot;showTip(event, 'fs68', 233)&quot; class=&quot;f&quot;&gt;download&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 234)&quot; onmouseover=&quot;showTip(event, 'fs69', 234)&quot; class=&quot;i&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 235)&quot; onmouseover=&quot;showTip(event, 'fs70', 235)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 236)&quot; onmouseover=&quot;showTip(event, 'fs3', 236)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs71', 237)&quot; onmouseover=&quot;showTip(event, 'fs71', 237)&quot; class=&quot;i&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs72', 238)&quot; onmouseover=&quot;showTip(event, 'fs72', 238)&quot; class=&quot;t&quot;&gt;WebClient&lt;/span&gt;()
    &lt;span onmouseout=&quot;hideTip(event, 'fs70', 239)&quot; onmouseover=&quot;showTip(event, 'fs70', 239)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs73', 240)&quot; onmouseover=&quot;showTip(event, 'fs73', 240)&quot; class=&quot;f&quot;&gt;AsyncDownloadString&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs69', 241)&quot; onmouseover=&quot;showTip(event, 'fs69', 241)&quot; class=&quot;i&quot;&gt;uri&lt;/span&gt;)

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 242)&quot; onmouseover=&quot;showTip(event, 'fs74', 242)&quot; class=&quot;i&quot;&gt;sizes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs67', 243)&quot; onmouseover=&quot;showTip(event, 'fs67', 243)&quot; class=&quot;i&quot;&gt;uris&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 244)&quot; onmouseover=&quot;showTip(event, 'fs75', 244)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 245)&quot; onmouseover=&quot;showTip(event, 'fs63', 245)&quot; class=&quot;f&quot;&gt;traverse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 246)&quot; onmouseover=&quot;showTip(event, 'fs68', 246)&quot; class=&quot;f&quot;&gt;download&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 247)&quot; onmouseover=&quot;showTip(event, 'fs75', 247)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 248)&quot; onmouseover=&quot;showTip(event, 'fs61', 248)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 249)&quot; onmouseover=&quot;showTip(event, 'fs15', 249)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 250)&quot; onmouseover=&quot;showTip(event, 'fs16', 250)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 251)&quot; onmouseover=&quot;showTip(event, 'fs6', 251)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 252)&quot; onmouseover=&quot;showTip(event, 'fs6', 252)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs76', 253)&quot; onmouseover=&quot;showTip(event, 'fs76', 253)&quot; class=&quot;i&quot;&gt;Length&lt;/span&gt;))
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 254)&quot; onmouseover=&quot;showTip(event, 'fs75', 254)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs77', 255)&quot; onmouseover=&quot;showTip(event, 'fs77', 255)&quot; class=&quot;f&quot;&gt;RunSynchronously&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 256)&quot; onmouseover=&quot;showTip(event, 'fs78', 256)&quot; class=&quot;i&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 257)&quot; onmouseover=&quot;showTip(event, 'fs74', 257)&quot; class=&quot;i&quot;&gt;sizes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs48', 258)&quot; onmouseover=&quot;showTip(event, 'fs48', 258)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Content Length: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 259)&quot; onmouseover=&quot;showTip(event, 'fs78', 259)&quot; class=&quot;i&quot;&gt;size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;With &lt;code&gt;Async.traverse&lt;/code&gt; we get a single Async that only completes once all Uris are downloaded.
As you can see from the implementation. &lt;code&gt;Async.traverse&lt;/code&gt; is identical to the version that we
wrote for the &lt;code&gt;option&lt;/code&gt; type. We just have to set &lt;code&gt;retn&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; to functions that work
with &lt;code&gt;Async&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/posts/elevated-world-4/&quot;&gt;Understanding traverse and sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Traversable&quot;&gt;[Haskell] Traversable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;type Uri = System.Uri&lt;br /&gt;&lt;br /&gt;Full name: Main.Uri&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;type Uri =&lt;br /&gt;&amp;#160;&amp;#160;new : uriString:string -&amp;gt; Uri + 5 overloads&lt;br /&gt;&amp;#160;&amp;#160;member AbsolutePath : string&lt;br /&gt;&amp;#160;&amp;#160;member AbsoluteUri : string&lt;br /&gt;&amp;#160;&amp;#160;member Authority : string&lt;br /&gt;&amp;#160;&amp;#160;member DnsSafeHost : string&lt;br /&gt;&amp;#160;&amp;#160;member Equals : comparand:obj -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member Fragment : string&lt;br /&gt;&amp;#160;&amp;#160;member GetComponents : components:UriComponents * format:UriFormat -&amp;gt; string&lt;br /&gt;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;member GetLeftPart : part:UriPartial -&amp;gt; string&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Uri&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Uri(uriString: string) : unit&lt;br /&gt;System.Uri(uriString: string, uriKind: System.UriKind) : unit&lt;br /&gt;System.Uri(baseUri: System.Uri, relativeUri: string) : unit&lt;br /&gt;System.Uri(baseUri: System.Uri, relativeUri: System.Uri) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val tryParseInt : str:string -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.tryParseInt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;System.Int32.TryParse(s: string, result: byref&amp;lt;int&amp;gt;) : bool&lt;br /&gt;System.Int32.TryParse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider, result: byref&amp;lt;int&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val validInput : string list&lt;br /&gt;&lt;br /&gt;Full name: Main.validInput&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val invalidInput : string list&lt;br /&gt;&lt;br /&gt;Full name: Main.invalidInput&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val validInts : int option list&lt;br /&gt;&lt;br /&gt;Full name: Main.validInts&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val sequenceFold : listOfOptions:&amp;#39;a option list -&amp;gt; &amp;#39;a list option&lt;br /&gt;&lt;br /&gt;Full name: Main.sequenceFold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val listOfOptions : &amp;#39;a option list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val folder : (&amp;#39;b option -&amp;gt; &amp;#39;b list option -&amp;gt; &amp;#39;b list option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val x : &amp;#39;b option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val acc : &amp;#39;b list option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val x : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;b list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val foldBack : folder:(&amp;#39;T -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;T list -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val apply : fo:(&amp;#39;a -&amp;gt; &amp;#39;b) option -&amp;gt; xo:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.apply&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val fo : (&amp;#39;a -&amp;gt; &amp;#39;b) option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val xo : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val retn : x:&amp;#39;a -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.retn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val sequence : listOfOptions:&amp;#39;a option list -&amp;gt; &amp;#39;a list option&lt;br /&gt;&lt;br /&gt;Full name: Main.sequence&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val xs : &amp;#39;b list option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val xs : &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val traverse : f:(&amp;#39;a -&amp;gt; &amp;#39;b option) -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list option&lt;br /&gt;&lt;br /&gt;Full name: Main.traverse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;a list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;b list option -&amp;gt; &amp;#39;b list option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val sequence : xs:&amp;#39;a option list -&amp;gt; &amp;#39;a list option&lt;br /&gt;&lt;br /&gt;Full name: Main.sequence&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val xs : &amp;#39;a option list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val id : x:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.id&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val sum : input:string list -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val input : string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val sum : list:&amp;#39;T list -&amp;gt; &amp;#39;T (requires member ( + ) and member get_Zero)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val printSum : opt:int option -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.printSum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val opt : int option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val sum : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;Multiple items&lt;br /&gt;type Async&lt;br /&gt;static member AsBeginEnd : computation:(&amp;#39;Arg -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;) -&amp;gt; (&amp;#39;Arg * AsyncCallback * obj -&amp;gt; IAsyncResult) * (IAsyncResult -&amp;gt; &amp;#39;T) * (IAsyncResult -&amp;gt; unit)&lt;br /&gt;static member AwaitEvent : event:IEvent&amp;lt;&amp;#39;Del,&amp;#39;T&amp;gt; * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt; (requires delegate and &amp;#39;Del :&amp;gt; Delegate)&lt;br /&gt;static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member CancelDefaultToken : unit -&amp;gt; unit&lt;br /&gt;static member Catch : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;Choice&amp;lt;&amp;#39;T,exn&amp;gt;&amp;gt;&lt;br /&gt;static member FromBeginEnd : beginAction:(AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg:&amp;#39;Arg1 * beginAction:(&amp;#39;Arg1 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * arg3:&amp;#39;Arg3 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * &amp;#39;Arg3 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromContinuations : callback:((&amp;#39;T -&amp;gt; unit) * (exn -&amp;gt; unit) * (OperationCanceledException -&amp;gt; unit) -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member Ignore : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member OnCancel : interruption:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;IDisposable&amp;gt;&lt;br /&gt;static member Parallel : computations:seq&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T []&amp;gt;&lt;br /&gt;static member RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:CancellationToken -&amp;gt; &amp;#39;T&lt;br /&gt;static member Sleep : millisecondsDueTime:int -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member Start : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&amp;gt; Task&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member StartChild : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartChildAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions -&amp;gt; Async&amp;lt;Task&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartImmediate : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartWithContinuations : computation:Async&amp;lt;&amp;#39;T&amp;gt; * continuation:(&amp;#39;T -&amp;gt; unit) * exceptionContinuation:(exn -&amp;gt; unit) * cancellationContinuation:(OperationCanceledException -&amp;gt; unit) * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member SwitchToContext : syncContext:SynchronizationContext -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToNewThread : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToThreadPool : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member TryCancelled : computation:Async&amp;lt;&amp;#39;T&amp;gt; * compensation:(OperationCanceledException -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member CancellationToken : Async&amp;lt;CancellationToken&amp;gt;&lt;br /&gt;static member DefaultCancellationToken : CancellationToken&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val retn : x:&amp;#39;a -&amp;gt; Async&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Async.retn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val async : AsyncBuilder&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.async&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val apply : af:Async&amp;lt;(&amp;#39;a -&amp;gt; &amp;#39;b)&amp;gt; -&amp;gt; ax:Async&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Async.apply&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val af : Async&amp;lt;(&amp;#39;a -&amp;gt; &amp;#39;b)&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val ax : Async&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val pf : Async&amp;lt;(&amp;#39;a -&amp;gt; &amp;#39;b)&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;static member Async.StartChild : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val px : Async&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val map : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; x:Async&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Async.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val x : Async&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val traverse : f:(&amp;#39;a -&amp;gt; Async&amp;lt;&amp;#39;b&amp;gt;) -&amp;gt; list:&amp;#39;a list -&amp;gt; Async&amp;lt;&amp;#39;b list&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Async.traverse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val f : (&amp;#39;a -&amp;gt; Async&amp;lt;&amp;#39;b&amp;gt;)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val folder : (&amp;#39;a -&amp;gt; Async&amp;lt;&amp;#39;b list&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;b list&amp;gt;)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val xs : Async&amp;lt;&amp;#39;b list&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val uris : System.Uri list&lt;br /&gt;&lt;br /&gt;Full name: Main.uris&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val download : uri:System.Uri -&amp;gt; Async&amp;lt;string&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.download&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val uri : System.Uri&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val wc : System.Net.WebClient&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;namespace System.Net&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;Multiple items&lt;br /&gt;type WebClient =&lt;br /&gt;&amp;#160;&amp;#160;inherit Component&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; WebClient&lt;br /&gt;&amp;#160;&amp;#160;member BaseAddress : string with get, set&lt;br /&gt;&amp;#160;&amp;#160;member CachePolicy : RequestCachePolicy with get, set&lt;br /&gt;&amp;#160;&amp;#160;member CancelAsync : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Credentials : ICredentials with get, set&lt;br /&gt;&amp;#160;&amp;#160;member DownloadData : address:string -&amp;gt; byte[] + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadDataAsync : address:Uri -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadFile : address:string * fileName:string -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadFileAsync : address:Uri * fileName:string -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadString : address:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Net.WebClient&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Net.WebClient() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;member System.Net.WebClient.AsyncDownloadString : address:System.Uri -&amp;gt; Async&amp;lt;string&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val sizes : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.sizes&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;Multiple items&lt;br /&gt;module Async&lt;br /&gt;&lt;br /&gt;from Main&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&lt;br /&gt;static member AsBeginEnd : computation:(&amp;#39;Arg -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;) -&amp;gt; (&amp;#39;Arg * AsyncCallback * obj -&amp;gt; IAsyncResult) * (IAsyncResult -&amp;gt; &amp;#39;T) * (IAsyncResult -&amp;gt; unit)&lt;br /&gt;static member AwaitEvent : event:IEvent&amp;lt;&amp;#39;Del,&amp;#39;T&amp;gt; * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt; (requires delegate and &amp;#39;Del :&amp;gt; Delegate)&lt;br /&gt;static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member CancelDefaultToken : unit -&amp;gt; unit&lt;br /&gt;static member Catch : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;Choice&amp;lt;&amp;#39;T,exn&amp;gt;&amp;gt;&lt;br /&gt;static member FromBeginEnd : beginAction:(AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg:&amp;#39;Arg1 * beginAction:(&amp;#39;Arg1 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * arg3:&amp;#39;Arg3 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * &amp;#39;Arg3 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromContinuations : callback:((&amp;#39;T -&amp;gt; unit) * (exn -&amp;gt; unit) * (OperationCanceledException -&amp;gt; unit) -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member Ignore : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member OnCancel : interruption:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;IDisposable&amp;gt;&lt;br /&gt;static member Parallel : computations:seq&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T []&amp;gt;&lt;br /&gt;static member RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:CancellationToken -&amp;gt; &amp;#39;T&lt;br /&gt;static member Sleep : millisecondsDueTime:int -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member Start : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&amp;gt; Task&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member StartChild : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartChildAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions -&amp;gt; Async&amp;lt;Task&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartImmediate : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartWithContinuations : computation:Async&amp;lt;&amp;#39;T&amp;gt; * continuation:(&amp;#39;T -&amp;gt; unit) * exceptionContinuation:(exn -&amp;gt; unit) * cancellationContinuation:(OperationCanceledException -&amp;gt; unit) * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member SwitchToContext : syncContext:SynchronizationContext -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToNewThread : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToThreadPool : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member TryCancelled : computation:Async&amp;lt;&amp;#39;T&amp;gt; * compensation:(OperationCanceledException -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member CancellationToken : Async&amp;lt;CancellationToken&amp;gt;&lt;br /&gt;static member DefaultCancellationToken : CancellationToken&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;property System.String.Length: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;static member Async.RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:System.Threading.CancellationToken -&amp;gt; &amp;#39;T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val size : int&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Applicative: Lists</title>
   <link href="https://sidburn.github.io/blog/2016/04/13/applicative-list"/>
   <updated>2016-04-13T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/04/13/applicative-list</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;/blog/2016/03/31/applicative-functors&quot;&gt;Understanding apply&lt;/a&gt; I primarily
used the &lt;code&gt;Option&lt;/code&gt; type to show how you implement and use an &lt;em&gt;Applicative Functor&lt;/em&gt;.
But the concept also works for any other type. This time I want to show
you the idea of an &lt;em&gt;Applicative&lt;/em&gt; with a list, what it means, what you can do
with it and how &lt;code&gt;apply&lt;/code&gt; works.&lt;/p&gt;
&lt;h2&gt;Implementing &lt;code&gt;apply&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Currently the &lt;code&gt;List&lt;/code&gt; module don't offer a &lt;code&gt;apply&lt;/code&gt; function. So we must write it on our own.
As we learned in &lt;a href=&quot;/blog/2016/04/03/understanding-bind&quot;&gt;Understanding bind&lt;/a&gt; we
could implement &lt;code&gt;apply&lt;/code&gt; with &lt;code&gt;bind&lt;/code&gt;. Because &lt;code&gt;List.collect&lt;/code&gt; is the &lt;code&gt;bind&lt;/code&gt; function (you
can see that by inspecting the function-signature), we could implement &lt;code&gt;apply&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;lf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;lx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs3', 5)&quot; onmouseover=&quot;showTip(event, 'fs3', 5)&quot; class=&quot;i&quot;&gt;lf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 6)&quot; onmouseover=&quot;showTip(event, 'fs5', 6)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 7)&quot; onmouseover=&quot;showTip(event, 'fs6', 7)&quot; class=&quot;f&quot;&gt;collect&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs4', 9)&quot; onmouseover=&quot;showTip(event, 'fs4', 9)&quot; class=&quot;i&quot;&gt;lx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 10)&quot; onmouseover=&quot;showTip(event, 'fs5', 10)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 11)&quot; onmouseover=&quot;showTip(event, 'fs6', 11)&quot; class=&quot;f&quot;&gt;collect&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 12)&quot; onmouseover=&quot;showTip(event, 'fs8', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        [&lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 14)&quot; onmouseover=&quot;showTip(event, 'fs8', 14)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;]
    ))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Although it is good to know this, this time we implement &lt;code&gt;apply&lt;/code&gt; from scratch. So we can
better understand how &lt;code&gt;apply&lt;/code&gt; works.&lt;/p&gt;
&lt;p&gt;The general idea of &lt;code&gt;apply&lt;/code&gt; is easy. We need to implement a function that expects a
function as it's first argument, and a value as the second argument. But both arguments
are &lt;em&gt;boxed&lt;/em&gt; in our type. The only thing we must do is somehow call our function with
our value. So we need a function that can handle the following function signature:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 15)&quot; onmouseover=&quot;showTip(event, 'fs9', 15)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 16)&quot; onmouseover=&quot;showTip(event, 'fs9', 16)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 17)&quot; onmouseover=&quot;showTip(event, 'fs9', 17)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If it is unclear why we get a &lt;code&gt;list&amp;lt;'b&amp;gt;&lt;/code&gt; as a result. We should remember
what &lt;code&gt;apply&lt;/code&gt; does as a single argument function. It just takes a &lt;code&gt;A&amp;lt;('a -&amp;gt; 'b)&amp;gt;&lt;/code&gt; and
transform it into a new function &lt;code&gt;A&amp;lt;'a&amp;gt; -&amp;gt; A&amp;lt;'b&amp;gt;&lt;/code&gt;. Here &lt;code&gt;A&lt;/code&gt; stands for any &lt;em&gt;Applicative&lt;/em&gt;
type.&lt;/p&gt;
&lt;p&gt;For a list it has the following meaning:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We get a list of functions as the first value&lt;/li&gt;
&lt;li&gt;We get a list of values as the second argument&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Unboxing&lt;/em&gt; a list means we just loop over the list&lt;/li&gt;
&lt;li&gt;Then we just execute every function with every value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can implement &lt;code&gt;apply&lt;/code&gt; like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 18)&quot; onmouseover=&quot;showTip(event, 'fs10', 18)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 19)&quot; onmouseover=&quot;showTip(event, 'fs11', 19)&quot; class=&quot;i&quot;&gt;lf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 20)&quot; onmouseover=&quot;showTip(event, 'fs12', 20)&quot; class=&quot;i&quot;&gt;lx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 21)&quot; onmouseover=&quot;showTip(event, 'fs7', 21)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 22)&quot; onmouseover=&quot;showTip(event, 'fs11', 22)&quot; class=&quot;i&quot;&gt;lf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 23)&quot; onmouseover=&quot;showTip(event, 'fs8', 23)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 24)&quot; onmouseover=&quot;showTip(event, 'fs12', 24)&quot; class=&quot;i&quot;&gt;lx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 25)&quot; onmouseover=&quot;showTip(event, 'fs7', 25)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 26)&quot; onmouseover=&quot;showTip(event, 'fs8', 26)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
]

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 27)&quot; onmouseover=&quot;showTip(event, 'fs10', 27)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Working with &lt;code&gt;apply&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We keep it easy, so we just create two to four arguments functions that just adds its
inputs together.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 28)&quot; onmouseover=&quot;showTip(event, 'fs13', 28)&quot; class=&quot;f&quot;&gt;add2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 29)&quot; onmouseover=&quot;showTip(event, 'fs14', 29)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 30)&quot; onmouseover=&quot;showTip(event, 'fs15', 30)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 32)&quot; onmouseover=&quot;showTip(event, 'fs15', 32)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 33)&quot; onmouseover=&quot;showTip(event, 'fs16', 33)&quot; class=&quot;f&quot;&gt;add3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 34)&quot; onmouseover=&quot;showTip(event, 'fs14', 34)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 35)&quot; onmouseover=&quot;showTip(event, 'fs15', 35)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 36)&quot; onmouseover=&quot;showTip(event, 'fs17', 36)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 37)&quot; onmouseover=&quot;showTip(event, 'fs14', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 38)&quot; onmouseover=&quot;showTip(event, 'fs15', 38)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 39)&quot; onmouseover=&quot;showTip(event, 'fs17', 39)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 40)&quot; onmouseover=&quot;showTip(event, 'fs18', 40)&quot; class=&quot;f&quot;&gt;add4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 42)&quot; onmouseover=&quot;showTip(event, 'fs15', 42)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 43)&quot; onmouseover=&quot;showTip(event, 'fs17', 43)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 44)&quot; onmouseover=&quot;showTip(event, 'fs19', 44)&quot; class=&quot;i&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 45)&quot; onmouseover=&quot;showTip(event, 'fs14', 45)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 46)&quot; onmouseover=&quot;showTip(event, 'fs15', 46)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 47)&quot; onmouseover=&quot;showTip(event, 'fs17', 47)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 48)&quot; onmouseover=&quot;showTip(event, 'fs19', 48)&quot; class=&quot;i&quot;&gt;w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Usually we need a &lt;code&gt;return&lt;/code&gt; function, but we can easily lift any values into a list by just
surrounding it with &lt;code&gt;[]&lt;/code&gt;, so we will skip this one. The idea of &lt;code&gt;apply&lt;/code&gt; means every argument
of a function can now be a boxed type. That means, instead of just passing two &lt;code&gt;int&lt;/code&gt;
to &lt;code&gt;add2&lt;/code&gt; we can now pass a &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; as the first argument and a &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt;
as the second argument, and so on. We now can write something like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span onmouseout=&quot;hideTip(event, 'fs13', 49)&quot; onmouseover=&quot;showTip(event, 'fs13', 49)&quot; class=&quot;f&quot;&gt;add2&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;]
[&lt;span onmouseout=&quot;hideTip(event, 'fs16', 50)&quot; onmouseover=&quot;showTip(event, 'fs16', 50)&quot; class=&quot;f&quot;&gt;add3&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span onmouseout=&quot;hideTip(event, 'fs18', 51)&quot; onmouseover=&quot;showTip(event, 'fs18', 51)&quot; class=&quot;f&quot;&gt;add4&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's see what those function calls produces&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;22&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;13&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;23&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;26&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;17&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;27&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;18&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;28&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;116&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;216&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;126&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;226&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;117&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;217&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;127&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;227&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;118&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;218&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;128&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;228&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What we get back is the result of every input combination. Our first call with &lt;code&gt;add2&lt;/code&gt;
expands to:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;How &lt;code&gt;apply&lt;/code&gt; works&lt;/h2&gt;
&lt;p&gt;At this point it is interesting to see how &lt;code&gt;apply&lt;/code&gt; actually works to get a better understanding
why we get those results. First we should remember how the operator &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; works. Our
apply operator is just a infix function. It uses the the thing on the left-side as the
first argument, and the thing on the right-side as the second argument. Instead of&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we also could write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 52)&quot; onmouseover=&quot;showTip(event, 'fs2', 52)&quot; class=&quot;i&quot;&gt;apply&lt;/span&gt; [&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;] [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we have a term like &lt;code&gt;[add2] &amp;lt;*&amp;gt; [1;2;3] &amp;lt;*&amp;gt; [10;20]&lt;/code&gt; it means, first &lt;code&gt;[add2] &amp;lt;*&amp;gt; [1;2;3]&lt;/code&gt;
is executed and it will return a result! This is exactly how a normal function call work.
Even a normal function call like &lt;code&gt;add2 1 10&lt;/code&gt; basically works by first executing &lt;code&gt;add2 1&lt;/code&gt;
returning a new function and then pass &lt;code&gt;10&lt;/code&gt; to it. That's why we also can write. &lt;code&gt;(add2 1) 10&lt;/code&gt;
and it produces the same result. With &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; it is the same, our term is
basically interpreted as&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;( [&lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] )     &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At first, our &lt;code&gt;apply&lt;/code&gt; function is called with &lt;code&gt;[add2]&lt;/code&gt; and &lt;code&gt;[1;2;3]&lt;/code&gt; as its arguments.
Our &lt;code&gt;apply&lt;/code&gt; function just just loops over the functions and the values and call every
function with a value. After &lt;code&gt;[add2] &amp;lt;*&amp;gt; [1;2;3]&lt;/code&gt; we get a new list back, containing:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At this point it probably becomes clear why we can view &lt;code&gt;apply&lt;/code&gt; as some kind of
&lt;em&gt;Partial Application&lt;/em&gt; for &lt;em&gt;boxed&lt;/em&gt; functions. The only thing that &lt;code&gt;apply&lt;/code&gt; does is take
a &lt;em&gt;boxed&lt;/em&gt; function and a &lt;em&gt;boxed&lt;/em&gt; value and execute it. But it only does it for the
next argument. The first &lt;code&gt;apply&lt;/code&gt; call returns a new list with three &lt;em&gt;Partial Applied&lt;/em&gt;
functions. We get:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In other words, the new list is used as the first argument to the next &lt;code&gt;apply&lt;/code&gt; call.
This time we have a list of functions that contains three functions and two values.
Once again we loop over the functions and call every function with every value. We get:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And this will result in&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;21&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;22&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;13&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;23&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To get a hang of it, let's once again go through the &lt;code&gt;add4&lt;/code&gt; example and visualize
every step. We start with&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The first &lt;code&gt;apply&lt;/code&gt; call produces:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We then use this result with &lt;code&gt;apply&lt;/code&gt; and use &lt;code&gt;[10;20]&lt;/code&gt; next.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Then we use this list of functions with &lt;code&gt;[5]&lt;/code&gt; and we get&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Finally we use &lt;code&gt;[100;200]&lt;/code&gt; on this list, and we get.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;add4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The last call executes the functions, so we get the result.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;116&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;216&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;126&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;226&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;117&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;217&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;127&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;227&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;118&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;218&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;128&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;228&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Using &lt;code&gt;apply&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In general what we can do with an &lt;em&gt;Applicative&lt;/em&gt; for a list is that we can get the result
of all possible input combinations for a function, no matter how many arguments that
function has.&lt;/p&gt;
&lt;p&gt;We also can easily create &lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_product&quot;&gt;Cartesian Products&lt;/a&gt;
for a set of data. For example we could create all possible Playing cards in a game this way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 53)&quot; onmouseover=&quot;showTip(event, 'fs20', 53)&quot; class=&quot;t&quot;&gt;Suit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs21', 54)&quot; onmouseover=&quot;showTip(event, 'fs21', 54)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs22', 55)&quot; onmouseover=&quot;showTip(event, 'fs22', 55)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs23', 56)&quot; onmouseover=&quot;showTip(event, 'fs23', 56)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs24', 57)&quot; onmouseover=&quot;showTip(event, 'fs24', 57)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 58)&quot; onmouseover=&quot;showTip(event, 'fs25', 58)&quot; class=&quot;t&quot;&gt;Rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs26', 59)&quot; onmouseover=&quot;showTip(event, 'fs26', 59)&quot; class=&quot;p&quot;&gt;Ace&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs27', 60)&quot; onmouseover=&quot;showTip(event, 'fs27', 60)&quot; class=&quot;p&quot;&gt;Two&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs28', 61)&quot; onmouseover=&quot;showTip(event, 'fs28', 61)&quot; class=&quot;p&quot;&gt;Three&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs29', 62)&quot; onmouseover=&quot;showTip(event, 'fs29', 62)&quot; class=&quot;p&quot;&gt;Four&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs30', 63)&quot; onmouseover=&quot;showTip(event, 'fs30', 63)&quot; class=&quot;p&quot;&gt;Five&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs31', 64)&quot; onmouseover=&quot;showTip(event, 'fs31', 64)&quot; class=&quot;p&quot;&gt;Six&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs32', 65)&quot; onmouseover=&quot;showTip(event, 'fs32', 65)&quot; class=&quot;p&quot;&gt;Seven&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs33', 66)&quot; onmouseover=&quot;showTip(event, 'fs33', 66)&quot; class=&quot;p&quot;&gt;Eight&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs34', 67)&quot; onmouseover=&quot;showTip(event, 'fs34', 67)&quot; class=&quot;p&quot;&gt;Nine&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs35', 68)&quot; onmouseover=&quot;showTip(event, 'fs35', 68)&quot; class=&quot;p&quot;&gt;Ten&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs36', 69)&quot; onmouseover=&quot;showTip(event, 'fs36', 69)&quot; class=&quot;p&quot;&gt;Jack&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 70)&quot; onmouseover=&quot;showTip(event, 'fs37', 70)&quot; class=&quot;p&quot;&gt;Queen&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 71)&quot; onmouseover=&quot;showTip(event, 'fs38', 71)&quot; class=&quot;p&quot;&gt;King&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 72)&quot; onmouseover=&quot;showTip(event, 'fs39', 72)&quot; class=&quot;t&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 73)&quot; onmouseover=&quot;showTip(event, 'fs39', 73)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 74)&quot; onmouseover=&quot;showTip(event, 'fs20', 74)&quot; class=&quot;t&quot;&gt;Suit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 75)&quot; onmouseover=&quot;showTip(event, 'fs25', 75)&quot; class=&quot;t&quot;&gt;Rank&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now can generate all possible Cards by using.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 76)&quot; onmouseover=&quot;showTip(event, 'fs40', 76)&quot; class=&quot;i&quot;&gt;suits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs21', 77)&quot; onmouseover=&quot;showTip(event, 'fs21', 77)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs22', 78)&quot; onmouseover=&quot;showTip(event, 'fs22', 78)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs23', 79)&quot; onmouseover=&quot;showTip(event, 'fs23', 79)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 80)&quot; onmouseover=&quot;showTip(event, 'fs24', 80)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 81)&quot; onmouseover=&quot;showTip(event, 'fs41', 81)&quot; class=&quot;i&quot;&gt;ranks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs26', 82)&quot; onmouseover=&quot;showTip(event, 'fs26', 82)&quot; class=&quot;p&quot;&gt;Ace&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 83)&quot; onmouseover=&quot;showTip(event, 'fs27', 83)&quot; class=&quot;p&quot;&gt;Two&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 84)&quot; onmouseover=&quot;showTip(event, 'fs28', 84)&quot; class=&quot;p&quot;&gt;Three&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 85)&quot; onmouseover=&quot;showTip(event, 'fs29', 85)&quot; class=&quot;p&quot;&gt;Four&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs30', 86)&quot; onmouseover=&quot;showTip(event, 'fs30', 86)&quot; class=&quot;p&quot;&gt;Five&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs31', 87)&quot; onmouseover=&quot;showTip(event, 'fs31', 87)&quot; class=&quot;p&quot;&gt;Six&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 88)&quot; onmouseover=&quot;showTip(event, 'fs32', 88)&quot; class=&quot;p&quot;&gt;Seven&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 89)&quot; onmouseover=&quot;showTip(event, 'fs33', 89)&quot; class=&quot;p&quot;&gt;Eight&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 90)&quot; onmouseover=&quot;showTip(event, 'fs34', 90)&quot; class=&quot;p&quot;&gt;Nine&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 91)&quot; onmouseover=&quot;showTip(event, 'fs35', 91)&quot; class=&quot;p&quot;&gt;Ten&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 92)&quot; onmouseover=&quot;showTip(event, 'fs36', 92)&quot; class=&quot;p&quot;&gt;Jack&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs37', 93)&quot; onmouseover=&quot;showTip(event, 'fs37', 93)&quot; class=&quot;p&quot;&gt;Queen&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 94)&quot; onmouseover=&quot;showTip(event, 'fs38', 94)&quot; class=&quot;p&quot;&gt;King&lt;/span&gt;]

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 95)&quot; onmouseover=&quot;showTip(event, 'fs42', 95)&quot; class=&quot;i&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 96)&quot; onmouseover=&quot;showTip(event, 'fs43', 96)&quot; class=&quot;i&quot;&gt;s&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 97)&quot; onmouseover=&quot;showTip(event, 'fs44', 97)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 98)&quot; onmouseover=&quot;showTip(event, 'fs39', 98)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs43', 99)&quot; onmouseover=&quot;showTip(event, 'fs43', 99)&quot; class=&quot;i&quot;&gt;s&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs44', 100)&quot; onmouseover=&quot;showTip(event, 'fs44', 100)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 101)&quot; onmouseover=&quot;showTip(event, 'fs40', 101)&quot; class=&quot;i&quot;&gt;suits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 102)&quot; onmouseover=&quot;showTip(event, 'fs41', 102)&quot; class=&quot;i&quot;&gt;ranks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now get a list of all 52 cards as a result.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 103)&quot; onmouseover=&quot;showTip(event, 'fs42', 103)&quot; class=&quot;i&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 104)&quot; onmouseover=&quot;showTip(event, 'fs39', 104)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 105)&quot; onmouseover=&quot;showTip(event, 'fs21', 105)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs26', 106)&quot; onmouseover=&quot;showTip(event, 'fs26', 106)&quot; class=&quot;p&quot;&gt;Ace&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 107)&quot; onmouseover=&quot;showTip(event, 'fs39', 107)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 108)&quot; onmouseover=&quot;showTip(event, 'fs21', 108)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs27', 109)&quot; onmouseover=&quot;showTip(event, 'fs27', 109)&quot; class=&quot;p&quot;&gt;Two&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 110)&quot; onmouseover=&quot;showTip(event, 'fs39', 110)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 111)&quot; onmouseover=&quot;showTip(event, 'fs21', 111)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs28', 112)&quot; onmouseover=&quot;showTip(event, 'fs28', 112)&quot; class=&quot;p&quot;&gt;Three&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 113)&quot; onmouseover=&quot;showTip(event, 'fs39', 113)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 114)&quot; onmouseover=&quot;showTip(event, 'fs21', 114)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs29', 115)&quot; onmouseover=&quot;showTip(event, 'fs29', 115)&quot; class=&quot;p&quot;&gt;Four&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 116)&quot; onmouseover=&quot;showTip(event, 'fs39', 116)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 117)&quot; onmouseover=&quot;showTip(event, 'fs21', 117)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs30', 118)&quot; onmouseover=&quot;showTip(event, 'fs30', 118)&quot; class=&quot;p&quot;&gt;Five&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 119)&quot; onmouseover=&quot;showTip(event, 'fs39', 119)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 120)&quot; onmouseover=&quot;showTip(event, 'fs21', 120)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 121)&quot; onmouseover=&quot;showTip(event, 'fs31', 121)&quot; class=&quot;p&quot;&gt;Six&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 122)&quot; onmouseover=&quot;showTip(event, 'fs39', 122)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 123)&quot; onmouseover=&quot;showTip(event, 'fs21', 123)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs32', 124)&quot; onmouseover=&quot;showTip(event, 'fs32', 124)&quot; class=&quot;p&quot;&gt;Seven&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 125)&quot; onmouseover=&quot;showTip(event, 'fs39', 125)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 126)&quot; onmouseover=&quot;showTip(event, 'fs21', 126)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs33', 127)&quot; onmouseover=&quot;showTip(event, 'fs33', 127)&quot; class=&quot;p&quot;&gt;Eight&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 128)&quot; onmouseover=&quot;showTip(event, 'fs39', 128)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 129)&quot; onmouseover=&quot;showTip(event, 'fs21', 129)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs34', 130)&quot; onmouseover=&quot;showTip(event, 'fs34', 130)&quot; class=&quot;p&quot;&gt;Nine&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 131)&quot; onmouseover=&quot;showTip(event, 'fs39', 131)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 132)&quot; onmouseover=&quot;showTip(event, 'fs21', 132)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 133)&quot; onmouseover=&quot;showTip(event, 'fs35', 133)&quot; class=&quot;p&quot;&gt;Ten&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 134)&quot; onmouseover=&quot;showTip(event, 'fs39', 134)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 135)&quot; onmouseover=&quot;showTip(event, 'fs21', 135)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 136)&quot; onmouseover=&quot;showTip(event, 'fs36', 136)&quot; class=&quot;p&quot;&gt;Jack&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 137)&quot; onmouseover=&quot;showTip(event, 'fs39', 137)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 138)&quot; onmouseover=&quot;showTip(event, 'fs21', 138)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 139)&quot; onmouseover=&quot;showTip(event, 'fs37', 139)&quot; class=&quot;p&quot;&gt;Queen&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 140)&quot; onmouseover=&quot;showTip(event, 'fs39', 140)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 141)&quot; onmouseover=&quot;showTip(event, 'fs21', 141)&quot; class=&quot;p&quot;&gt;Club&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs38', 142)&quot; onmouseover=&quot;showTip(event, 'fs38', 142)&quot; class=&quot;p&quot;&gt;King&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 143)&quot; onmouseover=&quot;showTip(event, 'fs39', 143)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 144)&quot; onmouseover=&quot;showTip(event, 'fs22', 144)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs26', 145)&quot; onmouseover=&quot;showTip(event, 'fs26', 145)&quot; class=&quot;p&quot;&gt;Ace&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 146)&quot; onmouseover=&quot;showTip(event, 'fs39', 146)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 147)&quot; onmouseover=&quot;showTip(event, 'fs22', 147)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs27', 148)&quot; onmouseover=&quot;showTip(event, 'fs27', 148)&quot; class=&quot;p&quot;&gt;Two&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 149)&quot; onmouseover=&quot;showTip(event, 'fs39', 149)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 150)&quot; onmouseover=&quot;showTip(event, 'fs22', 150)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs28', 151)&quot; onmouseover=&quot;showTip(event, 'fs28', 151)&quot; class=&quot;p&quot;&gt;Three&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 152)&quot; onmouseover=&quot;showTip(event, 'fs39', 152)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 153)&quot; onmouseover=&quot;showTip(event, 'fs22', 153)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs29', 154)&quot; onmouseover=&quot;showTip(event, 'fs29', 154)&quot; class=&quot;p&quot;&gt;Four&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 155)&quot; onmouseover=&quot;showTip(event, 'fs39', 155)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 156)&quot; onmouseover=&quot;showTip(event, 'fs22', 156)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs30', 157)&quot; onmouseover=&quot;showTip(event, 'fs30', 157)&quot; class=&quot;p&quot;&gt;Five&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 158)&quot; onmouseover=&quot;showTip(event, 'fs39', 158)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 159)&quot; onmouseover=&quot;showTip(event, 'fs22', 159)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 160)&quot; onmouseover=&quot;showTip(event, 'fs31', 160)&quot; class=&quot;p&quot;&gt;Six&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 161)&quot; onmouseover=&quot;showTip(event, 'fs39', 161)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 162)&quot; onmouseover=&quot;showTip(event, 'fs22', 162)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs32', 163)&quot; onmouseover=&quot;showTip(event, 'fs32', 163)&quot; class=&quot;p&quot;&gt;Seven&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 164)&quot; onmouseover=&quot;showTip(event, 'fs39', 164)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 165)&quot; onmouseover=&quot;showTip(event, 'fs22', 165)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs33', 166)&quot; onmouseover=&quot;showTip(event, 'fs33', 166)&quot; class=&quot;p&quot;&gt;Eight&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 167)&quot; onmouseover=&quot;showTip(event, 'fs39', 167)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 168)&quot; onmouseover=&quot;showTip(event, 'fs22', 168)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs34', 169)&quot; onmouseover=&quot;showTip(event, 'fs34', 169)&quot; class=&quot;p&quot;&gt;Nine&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 170)&quot; onmouseover=&quot;showTip(event, 'fs39', 170)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 171)&quot; onmouseover=&quot;showTip(event, 'fs22', 171)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 172)&quot; onmouseover=&quot;showTip(event, 'fs35', 172)&quot; class=&quot;p&quot;&gt;Ten&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 173)&quot; onmouseover=&quot;showTip(event, 'fs39', 173)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 174)&quot; onmouseover=&quot;showTip(event, 'fs22', 174)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 175)&quot; onmouseover=&quot;showTip(event, 'fs36', 175)&quot; class=&quot;p&quot;&gt;Jack&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 176)&quot; onmouseover=&quot;showTip(event, 'fs39', 176)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 177)&quot; onmouseover=&quot;showTip(event, 'fs22', 177)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 178)&quot; onmouseover=&quot;showTip(event, 'fs37', 178)&quot; class=&quot;p&quot;&gt;Queen&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 179)&quot; onmouseover=&quot;showTip(event, 'fs39', 179)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 180)&quot; onmouseover=&quot;showTip(event, 'fs22', 180)&quot; class=&quot;p&quot;&gt;Diamond&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs38', 181)&quot; onmouseover=&quot;showTip(event, 'fs38', 181)&quot; class=&quot;p&quot;&gt;King&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 182)&quot; onmouseover=&quot;showTip(event, 'fs39', 182)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 183)&quot; onmouseover=&quot;showTip(event, 'fs23', 183)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs26', 184)&quot; onmouseover=&quot;showTip(event, 'fs26', 184)&quot; class=&quot;p&quot;&gt;Ace&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 185)&quot; onmouseover=&quot;showTip(event, 'fs39', 185)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 186)&quot; onmouseover=&quot;showTip(event, 'fs23', 186)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs27', 187)&quot; onmouseover=&quot;showTip(event, 'fs27', 187)&quot; class=&quot;p&quot;&gt;Two&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 188)&quot; onmouseover=&quot;showTip(event, 'fs39', 188)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 189)&quot; onmouseover=&quot;showTip(event, 'fs23', 189)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs28', 190)&quot; onmouseover=&quot;showTip(event, 'fs28', 190)&quot; class=&quot;p&quot;&gt;Three&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 191)&quot; onmouseover=&quot;showTip(event, 'fs39', 191)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 192)&quot; onmouseover=&quot;showTip(event, 'fs23', 192)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs29', 193)&quot; onmouseover=&quot;showTip(event, 'fs29', 193)&quot; class=&quot;p&quot;&gt;Four&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 194)&quot; onmouseover=&quot;showTip(event, 'fs39', 194)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 195)&quot; onmouseover=&quot;showTip(event, 'fs23', 195)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs30', 196)&quot; onmouseover=&quot;showTip(event, 'fs30', 196)&quot; class=&quot;p&quot;&gt;Five&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 197)&quot; onmouseover=&quot;showTip(event, 'fs39', 197)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 198)&quot; onmouseover=&quot;showTip(event, 'fs23', 198)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 199)&quot; onmouseover=&quot;showTip(event, 'fs31', 199)&quot; class=&quot;p&quot;&gt;Six&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 200)&quot; onmouseover=&quot;showTip(event, 'fs39', 200)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 201)&quot; onmouseover=&quot;showTip(event, 'fs23', 201)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs32', 202)&quot; onmouseover=&quot;showTip(event, 'fs32', 202)&quot; class=&quot;p&quot;&gt;Seven&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 203)&quot; onmouseover=&quot;showTip(event, 'fs39', 203)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 204)&quot; onmouseover=&quot;showTip(event, 'fs23', 204)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs33', 205)&quot; onmouseover=&quot;showTip(event, 'fs33', 205)&quot; class=&quot;p&quot;&gt;Eight&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 206)&quot; onmouseover=&quot;showTip(event, 'fs39', 206)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 207)&quot; onmouseover=&quot;showTip(event, 'fs23', 207)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs34', 208)&quot; onmouseover=&quot;showTip(event, 'fs34', 208)&quot; class=&quot;p&quot;&gt;Nine&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 209)&quot; onmouseover=&quot;showTip(event, 'fs39', 209)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 210)&quot; onmouseover=&quot;showTip(event, 'fs23', 210)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 211)&quot; onmouseover=&quot;showTip(event, 'fs35', 211)&quot; class=&quot;p&quot;&gt;Ten&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 212)&quot; onmouseover=&quot;showTip(event, 'fs39', 212)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 213)&quot; onmouseover=&quot;showTip(event, 'fs23', 213)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 214)&quot; onmouseover=&quot;showTip(event, 'fs36', 214)&quot; class=&quot;p&quot;&gt;Jack&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 215)&quot; onmouseover=&quot;showTip(event, 'fs39', 215)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 216)&quot; onmouseover=&quot;showTip(event, 'fs23', 216)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 217)&quot; onmouseover=&quot;showTip(event, 'fs37', 217)&quot; class=&quot;p&quot;&gt;Queen&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 218)&quot; onmouseover=&quot;showTip(event, 'fs39', 218)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs23', 219)&quot; onmouseover=&quot;showTip(event, 'fs23', 219)&quot; class=&quot;p&quot;&gt;Heart&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs38', 220)&quot; onmouseover=&quot;showTip(event, 'fs38', 220)&quot; class=&quot;p&quot;&gt;King&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 221)&quot; onmouseover=&quot;showTip(event, 'fs39', 221)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 222)&quot; onmouseover=&quot;showTip(event, 'fs24', 222)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs26', 223)&quot; onmouseover=&quot;showTip(event, 'fs26', 223)&quot; class=&quot;p&quot;&gt;Ace&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 224)&quot; onmouseover=&quot;showTip(event, 'fs39', 224)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 225)&quot; onmouseover=&quot;showTip(event, 'fs24', 225)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs27', 226)&quot; onmouseover=&quot;showTip(event, 'fs27', 226)&quot; class=&quot;p&quot;&gt;Two&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 227)&quot; onmouseover=&quot;showTip(event, 'fs39', 227)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 228)&quot; onmouseover=&quot;showTip(event, 'fs24', 228)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs28', 229)&quot; onmouseover=&quot;showTip(event, 'fs28', 229)&quot; class=&quot;p&quot;&gt;Three&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 230)&quot; onmouseover=&quot;showTip(event, 'fs39', 230)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 231)&quot; onmouseover=&quot;showTip(event, 'fs24', 231)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs29', 232)&quot; onmouseover=&quot;showTip(event, 'fs29', 232)&quot; class=&quot;p&quot;&gt;Four&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 233)&quot; onmouseover=&quot;showTip(event, 'fs39', 233)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 234)&quot; onmouseover=&quot;showTip(event, 'fs24', 234)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs30', 235)&quot; onmouseover=&quot;showTip(event, 'fs30', 235)&quot; class=&quot;p&quot;&gt;Five&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 236)&quot; onmouseover=&quot;showTip(event, 'fs39', 236)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 237)&quot; onmouseover=&quot;showTip(event, 'fs24', 237)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 238)&quot; onmouseover=&quot;showTip(event, 'fs31', 238)&quot; class=&quot;p&quot;&gt;Six&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 239)&quot; onmouseover=&quot;showTip(event, 'fs39', 239)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 240)&quot; onmouseover=&quot;showTip(event, 'fs24', 240)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs32', 241)&quot; onmouseover=&quot;showTip(event, 'fs32', 241)&quot; class=&quot;p&quot;&gt;Seven&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 242)&quot; onmouseover=&quot;showTip(event, 'fs39', 242)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 243)&quot; onmouseover=&quot;showTip(event, 'fs24', 243)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs33', 244)&quot; onmouseover=&quot;showTip(event, 'fs33', 244)&quot; class=&quot;p&quot;&gt;Eight&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 245)&quot; onmouseover=&quot;showTip(event, 'fs39', 245)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 246)&quot; onmouseover=&quot;showTip(event, 'fs24', 246)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs34', 247)&quot; onmouseover=&quot;showTip(event, 'fs34', 247)&quot; class=&quot;p&quot;&gt;Nine&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 248)&quot; onmouseover=&quot;showTip(event, 'fs39', 248)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 249)&quot; onmouseover=&quot;showTip(event, 'fs24', 249)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 250)&quot; onmouseover=&quot;showTip(event, 'fs35', 250)&quot; class=&quot;p&quot;&gt;Ten&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 251)&quot; onmouseover=&quot;showTip(event, 'fs39', 251)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 252)&quot; onmouseover=&quot;showTip(event, 'fs24', 252)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 253)&quot; onmouseover=&quot;showTip(event, 'fs36', 253)&quot; class=&quot;p&quot;&gt;Jack&lt;/span&gt;); &lt;span onmouseout=&quot;hideTip(event, 'fs39', 254)&quot; onmouseover=&quot;showTip(event, 'fs39', 254)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 255)&quot; onmouseover=&quot;showTip(event, 'fs24', 255)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 256)&quot; onmouseover=&quot;showTip(event, 'fs37', 256)&quot; class=&quot;p&quot;&gt;Queen&lt;/span&gt;);
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 257)&quot; onmouseover=&quot;showTip(event, 'fs39', 257)&quot; class=&quot;p&quot;&gt;Card&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 258)&quot; onmouseover=&quot;showTip(event, 'fs24', 258)&quot; class=&quot;p&quot;&gt;Spade&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs38', 259)&quot; onmouseover=&quot;showTip(event, 'fs38', 259)&quot; class=&quot;p&quot;&gt;King&lt;/span&gt;)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;em&gt;Cartesian Product&lt;/em&gt; is also the idea how we view relational data. We could for example
create two lists that refers to each other, with &lt;code&gt;apply&lt;/code&gt; we then can easily create the
&lt;em&gt;Cartesian Product&lt;/em&gt; and filter those data.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 260)&quot; onmouseover=&quot;showTip(event, 'fs45', 260)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs46', 261)&quot; onmouseover=&quot;showTip(event, 'fs46', 261)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs47', 262)&quot; onmouseover=&quot;showTip(event, 'fs47', 262)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs48', 263)&quot; onmouseover=&quot;showTip(event, 'fs48', 263)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 264)&quot; onmouseover=&quot;showTip(event, 'fs49', 264)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
} &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 265)&quot; onmouseover=&quot;showTip(event, 'fs50', 265)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 266)&quot; onmouseover=&quot;showTip(event, 'fs51', 266)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 267)&quot; onmouseover=&quot;showTip(event, 'fs52', 267)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs51', 268)&quot; onmouseover=&quot;showTip(event, 'fs51', 268)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 269)&quot; onmouseover=&quot;showTip(event, 'fs52', 269)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;}

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 270)&quot; onmouseover=&quot;showTip(event, 'fs53', 270)&quot; class=&quot;t&quot;&gt;Like&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs54', 271)&quot; onmouseover=&quot;showTip(event, 'fs54', 271)&quot; class=&quot;i&quot;&gt;PersonId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 272)&quot; onmouseover=&quot;showTip(event, 'fs47', 272)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs55', 273)&quot; onmouseover=&quot;showTip(event, 'fs55', 273)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs49', 274)&quot; onmouseover=&quot;showTip(event, 'fs49', 274)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
} &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 275)&quot; onmouseover=&quot;showTip(event, 'fs56', 275)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 276)&quot; onmouseover=&quot;showTip(event, 'fs57', 276)&quot; class=&quot;i&quot;&gt;pid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 277)&quot; onmouseover=&quot;showTip(event, 'fs52', 277)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;PersonId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs57', 278)&quot; onmouseover=&quot;showTip(event, 'fs57', 278)&quot; class=&quot;i&quot;&gt;pid&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 279)&quot; onmouseover=&quot;showTip(event, 'fs52', 279)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;}

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 280)&quot; onmouseover=&quot;showTip(event, 'fs58', 280)&quot; class=&quot;i&quot;&gt;persons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [
    &lt;span onmouseout=&quot;hideTip(event, 'fs45', 281)&quot; onmouseover=&quot;showTip(event, 'fs45', 281)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs59', 282)&quot; onmouseover=&quot;showTip(event, 'fs59', 282)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs45', 283)&quot; onmouseover=&quot;showTip(event, 'fs45', 283)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs59', 284)&quot; onmouseover=&quot;showTip(event, 'fs59', 284)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Markus&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs45', 285)&quot; onmouseover=&quot;showTip(event, 'fs45', 285)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs59', 286)&quot; onmouseover=&quot;showTip(event, 'fs59', 286)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bj&amp;#246;rn&amp;quot;&lt;/span&gt;
]

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 287)&quot; onmouseover=&quot;showTip(event, 'fs60', 287)&quot; class=&quot;i&quot;&gt;likes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [
    &lt;span onmouseout=&quot;hideTip(event, 'fs53', 288)&quot; onmouseover=&quot;showTip(event, 'fs53', 288)&quot; class=&quot;t&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 289)&quot; onmouseover=&quot;showTip(event, 'fs61', 289)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Pizza&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs53', 290)&quot; onmouseover=&quot;showTip(event, 'fs53', 290)&quot; class=&quot;t&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 291)&quot; onmouseover=&quot;showTip(event, 'fs61', 291)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Pizza&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs53', 292)&quot; onmouseover=&quot;showTip(event, 'fs53', 292)&quot; class=&quot;t&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 293)&quot; onmouseover=&quot;showTip(event, 'fs61', 293)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Pizza&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs53', 294)&quot; onmouseover=&quot;showTip(event, 'fs53', 294)&quot; class=&quot;t&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 295)&quot; onmouseover=&quot;showTip(event, 'fs61', 295)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Coffee&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs53', 296)&quot; onmouseover=&quot;showTip(event, 'fs53', 296)&quot; class=&quot;t&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 297)&quot; onmouseover=&quot;showTip(event, 'fs61', 297)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs53', 298)&quot; onmouseover=&quot;showTip(event, 'fs53', 298)&quot; class=&quot;t&quot;&gt;Like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 299)&quot; onmouseover=&quot;showTip(event, 'fs61', 299)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now can create the &lt;em&gt;Cartesian Product&lt;/em&gt; of those Data. And afterwards filter it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 300)&quot; onmouseover=&quot;showTip(event, 'fs62', 300)&quot; class=&quot;i&quot;&gt;likesTea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    [&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 301)&quot; onmouseover=&quot;showTip(event, 'fs63', 301)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 302)&quot; onmouseover=&quot;showTip(event, 'fs64', 302)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 303)&quot; onmouseover=&quot;showTip(event, 'fs63', 303)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs64', 304)&quot; onmouseover=&quot;showTip(event, 'fs64', 304)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 305)&quot; onmouseover=&quot;showTip(event, 'fs58', 305)&quot; class=&quot;i&quot;&gt;persons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 306)&quot; onmouseover=&quot;showTip(event, 'fs60', 306)&quot; class=&quot;i&quot;&gt;likes&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 307)&quot; onmouseover=&quot;showTip(event, 'fs5', 307)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs65', 308)&quot; onmouseover=&quot;showTip(event, 'fs65', 308)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 309)&quot; onmouseover=&quot;showTip(event, 'fs66', 309)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs67', 310)&quot; onmouseover=&quot;showTip(event, 'fs67', 310)&quot; class=&quot;i&quot;&gt;like&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 311)&quot; onmouseover=&quot;showTip(event, 'fs66', 311)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 312)&quot; onmouseover=&quot;showTip(event, 'fs46', 312)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 313)&quot; onmouseover=&quot;showTip(event, 'fs67', 313)&quot; class=&quot;i&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs54', 314)&quot; onmouseover=&quot;showTip(event, 'fs54', 314)&quot; class=&quot;i&quot;&gt;PersonId&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 315)&quot; onmouseover=&quot;showTip(event, 'fs5', 315)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs65', 316)&quot; onmouseover=&quot;showTip(event, 'fs65', 316)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 317)&quot; onmouseover=&quot;showTip(event, 'fs66', 317)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs67', 318)&quot; onmouseover=&quot;showTip(event, 'fs67', 318)&quot; class=&quot;i&quot;&gt;like&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 319)&quot; onmouseover=&quot;showTip(event, 'fs67', 319)&quot; class=&quot;i&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs55', 320)&quot; onmouseover=&quot;showTip(event, 'fs55', 320)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 321)&quot; onmouseover=&quot;showTip(event, 'fs5', 321)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs68', 322)&quot; onmouseover=&quot;showTip(event, 'fs68', 322)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt;    (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 323)&quot; onmouseover=&quot;showTip(event, 'fs66', 323)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs67', 324)&quot; onmouseover=&quot;showTip(event, 'fs67', 324)&quot; class=&quot;i&quot;&gt;like&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 325)&quot; onmouseover=&quot;showTip(event, 'fs66', 325)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 326)&quot; onmouseover=&quot;showTip(event, 'fs48', 326)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This will return: &lt;code&gt;[&quot;David&quot;; &quot;Markus&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and resembles a SQL-Statement like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; p.Name
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;   person p, likes l
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt;  p.Id = l.PersonId
&lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt;    l.Name = &quot;Tea&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Sure, most stuff is basically &lt;em&gt;List-Processing&lt;/em&gt; at this point, but &lt;code&gt;apply&lt;/code&gt; is just another
functions in a tool-set that opens up some possibilities. And at this point you probably
even see the connection between functional list processing and SQL, or in general the
C# LINQ Feature.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val apply : lf:(&amp;#39;a -&amp;gt; &amp;#39;b) list -&amp;gt; lx:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: applicativelist.apply&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val lf : (&amp;#39;a -&amp;gt; &amp;#39;b) list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val lx : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val collect : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U list) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.collect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val apply : lf:seq&amp;lt;(&amp;#39;a -&amp;gt; &amp;#39;b)&amp;gt; -&amp;gt; lx:seq&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.apply&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val lf : seq&amp;lt;(&amp;#39;a -&amp;gt; &amp;#39;b)&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val lx : seq&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val add2 : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val add3 : x:int -&amp;gt; y:int -&amp;gt; z:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val z : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val add4 : x:int -&amp;gt; y:int -&amp;gt; z:int -&amp;gt; w:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val w : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;type Suit =&lt;br /&gt;&amp;#160;&amp;#160;| Club&lt;br /&gt;&amp;#160;&amp;#160;| Diamond&lt;br /&gt;&amp;#160;&amp;#160;| Heart&lt;br /&gt;&amp;#160;&amp;#160;| Spade&lt;br /&gt;&lt;br /&gt;Full name: Main.Suit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;union case Suit.Club: Suit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;union case Suit.Diamond: Suit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;union case Suit.Heart: Suit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;union case Suit.Spade: Suit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;type Rank =&lt;br /&gt;&amp;#160;&amp;#160;| Ace&lt;br /&gt;&amp;#160;&amp;#160;| Two&lt;br /&gt;&amp;#160;&amp;#160;| Three&lt;br /&gt;&amp;#160;&amp;#160;| Four&lt;br /&gt;&amp;#160;&amp;#160;| Five&lt;br /&gt;&amp;#160;&amp;#160;| Six&lt;br /&gt;&amp;#160;&amp;#160;| Seven&lt;br /&gt;&amp;#160;&amp;#160;| Eight&lt;br /&gt;&amp;#160;&amp;#160;| Nine&lt;br /&gt;&amp;#160;&amp;#160;| Ten&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: Main.Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;union case Rank.Ace: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;union case Rank.Two: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;union case Rank.Three: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;union case Rank.Four: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;union case Rank.Five: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;union case Rank.Six: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;union case Rank.Seven: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;union case Rank.Eight: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;union case Rank.Nine: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;union case Rank.Ten: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;union case Rank.Jack: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;union case Rank.Queen: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;union case Rank.King: Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;Multiple items&lt;br /&gt;union case Card.Card: Suit * Rank -&amp;gt; Card&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Card = | Card of Suit * Rank&lt;br /&gt;&lt;br /&gt;Full name: Main.Card&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val suits : Suit list&lt;br /&gt;&lt;br /&gt;Full name: Main.suits&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val ranks : Rank list&lt;br /&gt;&lt;br /&gt;Full name: Main.ranks&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val cards : Card list&lt;br /&gt;&lt;br /&gt;Full name: Main.cards&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val s : Suit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val r : Rank&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;type Person =&lt;br /&gt;&amp;#160;&amp;#160;{Id: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Name: string;}&lt;br /&gt;&amp;#160;&amp;#160;static member create : id:int -&amp;gt; name:string -&amp;gt; Person&lt;br /&gt;&lt;br /&gt;Full name: Main.Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;Person.Id: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;Person.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;static member Person.create : id:int -&amp;gt; name:string -&amp;gt; Person&lt;br /&gt;&lt;br /&gt;Full name: Main.Person.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val id : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val name : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;type Like =&lt;br /&gt;&amp;#160;&amp;#160;{PersonId: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Name: string;}&lt;br /&gt;&amp;#160;&amp;#160;static member create : pid:int -&amp;gt; name:string -&amp;gt; Like&lt;br /&gt;&lt;br /&gt;Full name: Main.Like&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;Like.PersonId: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;Like.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;static member Like.create : pid:int -&amp;gt; name:string -&amp;gt; Like&lt;br /&gt;&lt;br /&gt;Full name: Main.Like.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val pid : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val persons : Person list&lt;br /&gt;&lt;br /&gt;Full name: Main.persons&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;static member Person.create : id:int -&amp;gt; name:string -&amp;gt; Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val likes : Like list&lt;br /&gt;&lt;br /&gt;Full name: Main.likes&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;static member Like.create : pid:int -&amp;gt; name:string -&amp;gt; Like&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val likesTea : string list&lt;br /&gt;&lt;br /&gt;Full name: Main.likesTea&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val p : Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val l : Like&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val person : Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val like : Like&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Optionals</title>
   <link href="https://sidburn.github.io/blog/2016/04/11/optionals"/>
   <updated>2016-04-11T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/04/11/optionals</id>
   <content type="html">&lt;p&gt;In this post I want to talk about &lt;em&gt;Optionals&lt;/em&gt; more deeply. I already wrote
&lt;a href=&quot;/blog/2016/03/20/null-is-evil&quot;&gt;about null&lt;/a&gt;, but I noticed that it is still
not immediately clear on why &lt;em&gt;Optionals&lt;/em&gt; are better. Instead of focusing why &lt;code&gt;null&lt;/code&gt;
is bad, this time I want to focus why &lt;em&gt;Optionals&lt;/em&gt; are good. For this purpose I also wrote
a small application that I will cover. But first, let's go over &lt;em&gt;Optionals&lt;/em&gt; and see
which benefits they have.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;null&lt;/code&gt; is not the problem&lt;/h2&gt;
&lt;p&gt;At first, I will state that &lt;code&gt;null&lt;/code&gt; itself is not even the problem.&lt;/p&gt;
&lt;p&gt;Let's assume we write a application and we need to read some &lt;em&gt;Product&lt;/em&gt; entries from a
database. We just have a simple &lt;em&gt;id&lt;/em&gt; as an &lt;code&gt;int&lt;/code&gt; to identify a product.&lt;/p&gt;
&lt;p&gt;Now let's assume we get some user input that tells us to show a Product with the id &lt;code&gt;12345&lt;/code&gt;.
Sure, as long we only get request to products that exists, we don't run into any kind of problems.
But let's imagine we write a function that returns a &lt;em&gt;Product&lt;/em&gt;, and the requested &lt;em&gt;Product&lt;/em&gt; doesn't
exists. What do we do in such a case?&lt;/p&gt;
&lt;p&gt;The usual approach, at least in OO programming, is to either return &lt;code&gt;null&lt;/code&gt;, or throwing an
&lt;em&gt;Exception&lt;/em&gt;. But i &lt;a href=&quot;/blog/2016/03/25/exceptions-are-evil&quot;&gt;don't think that Exceptions are better compared to null&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, why is returning &lt;code&gt;null&lt;/code&gt; bad? Because a client calling our function is not forced to check
for &lt;code&gt;null&lt;/code&gt;. And if he works with &lt;code&gt;null&lt;/code&gt; as if he had a &lt;em&gt;Product&lt;/em&gt;, the program will crash. What
happens if we throw an &lt;em&gt;Exception&lt;/em&gt;? Well, our program still crashes!&lt;/p&gt;
&lt;p&gt;The thing is. No matter if we return &lt;code&gt;null&lt;/code&gt; or we throw &lt;em&gt;exceptions&lt;/em&gt;. We must handle the case when
we don't get a &lt;em&gt;Product&lt;/em&gt;. But &lt;code&gt;null&lt;/code&gt; or &lt;em&gt;exceptions&lt;/em&gt; don't force you to handle both cases.
Neither &lt;code&gt;null&lt;/code&gt; or &lt;em&gt;exceptions&lt;/em&gt; forces you to add checks. Both concepts just crashes your program
at runtime. The only &lt;em&gt;hope&lt;/em&gt; you have is that you &lt;em&gt;hopefully&lt;/em&gt; have a &lt;em&gt;test-suite&lt;/em&gt; that &lt;em&gt;hopefully&lt;/em&gt;
handles those cases. For me, that is too much of &lt;em&gt;hope&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Yes, throwing an &lt;em&gt;Exception&lt;/em&gt; is a &lt;em&gt;little bit&lt;/em&gt; better. But think on why it is &lt;em&gt;a little bit better&lt;/em&gt;.
We see it as an advantage as we &lt;em&gt;hopefully&lt;/em&gt; (&lt;em&gt;gosh!&lt;/em&gt;) already see any kind of error during development,
so we can add the needed &lt;code&gt;try/catch&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;But wouldn't it be better if we are forced to add the checks because the language forces us to
do it? Because we otherwise get a compile-time error? If we somehow could get this kind of behaviour
it would mean we never can forgot to add a &lt;code&gt;null&lt;/code&gt; check or a &lt;code&gt;try/catch&lt;/code&gt; statements. It will become
impossible to write programs that unexpectedly crashes at runtime.&lt;/p&gt;
&lt;p&gt;Our program either compiles fine, and we handled all places where a &lt;strong&gt;no value&lt;/strong&gt; could be returned,
or if we forgot to handle such a place we just get a compile-time error that gives us the exact place
and line where we forgot to handle such a case.&lt;/p&gt;
&lt;p&gt;It seems like a dream. But this is exactly what &lt;em&gt;Optionals&lt;/em&gt; gives us!&lt;/p&gt;
&lt;h2&gt;Optionals&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Optionals&lt;/em&gt; fixes that problem because it makes the idea of &lt;strong&gt;No value&lt;/strong&gt; it's own type. The &lt;code&gt;option&lt;/code&gt;
type in F# is defined as followed:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs1', 1)&quot; onmouseover=&quot;showTip(event, 'fs1', 1)&quot; class=&quot;t&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What does that mean? You can compare it to a &lt;code&gt;bool&lt;/code&gt; or an &lt;em&gt;enum&lt;/em&gt; type. We have two cases. Like
a &lt;code&gt;bool&lt;/code&gt; that either can be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Here we have an &lt;code&gt;option&lt;/code&gt; that either can be &lt;code&gt;Some&lt;/code&gt;
or &lt;code&gt;None&lt;/code&gt;. The difference is that the &lt;code&gt;Some&lt;/code&gt; case can carry an additional value. Something
that an &lt;em&gt;enum&lt;/em&gt; or a &lt;code&gt;bool&lt;/code&gt; cannot do.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; are basically constructors. In the same sense that &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; are
constructors that creates a &lt;code&gt;bool&lt;/code&gt;. As &lt;code&gt;None&lt;/code&gt; don't carry any value, you just can write &lt;code&gt;None&lt;/code&gt;,
the same you just can write &lt;code&gt;null&lt;/code&gt;. But, if a function has a path that returns &lt;code&gt;None&lt;/code&gt;, you
must ensure that all code paths return an &lt;code&gt;option&lt;/code&gt; type. As we cannot create functions with
mixed return types. So you cannot write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;containsE&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 7)&quot; onmouseover=&quot;showTip(event, 'fs5', 7)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;f&quot;&gt;Contains&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;E&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// string&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 10)&quot; onmouseover=&quot;showTip(event, 'fs3', 10)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// option&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This would either return a &lt;code&gt;string&lt;/code&gt; or an &lt;code&gt;option&lt;/code&gt;. So what you must do is wrap your value in a &lt;code&gt;Some&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 11)&quot; onmouseover=&quot;showTip(event, 'fs8', 11)&quot; class=&quot;f&quot;&gt;containsE&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 12)&quot; onmouseover=&quot;showTip(event, 'fs5', 12)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 14)&quot; onmouseover=&quot;showTip(event, 'fs5', 14)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 15)&quot; onmouseover=&quot;showTip(event, 'fs7', 15)&quot; class=&quot;f&quot;&gt;Contains&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;E&amp;quot;&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 16)&quot; onmouseover=&quot;showTip(event, 'fs2', 16)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 17)&quot; onmouseover=&quot;showTip(event, 'fs5', 17)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// option&amp;lt;string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 18)&quot; onmouseover=&quot;showTip(event, 'fs3', 18)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;// option&amp;lt;string&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This has some implications:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Now you have a function that returns an &lt;code&gt;option&lt;/code&gt; containing a &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A user can see that &lt;code&gt;containsE&lt;/code&gt; not always returns a value.&lt;/li&gt;
&lt;li&gt;A user that wants to work with the result of &lt;code&gt;containsE&lt;/code&gt; first must check which case he got.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last implication means you must check if you either got &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 20)&quot; onmouseover=&quot;showTip(event, 'fs8', 20)&quot; class=&quot;f&quot;&gt;containsE&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 21)&quot; onmouseover=&quot;showTip(event, 'fs9', 21)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs3', 22)&quot; onmouseover=&quot;showTip(event, 'fs3', 22)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 23)&quot; onmouseover=&quot;showTip(event, 'fs10', 23)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;No E&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs2', 24)&quot; onmouseover=&quot;showTip(event, 'fs2', 24)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 25)&quot; onmouseover=&quot;showTip(event, 'fs5', 25)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 26)&quot; onmouseover=&quot;showTip(event, 'fs10', 26)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; contains an e&amp;quot;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we also have a lot of helper functions in the &lt;code&gt;Option&lt;/code&gt; module like &lt;code&gt;Option.map&lt;/code&gt;,
&lt;code&gt;Option.iter&lt;/code&gt;, &lt;code&gt;Option.bind&lt;/code&gt; and so on that helps us working with &lt;code&gt;option&lt;/code&gt; types.&lt;/p&gt;
&lt;p&gt;For example it is quite common that we want to check if we have &lt;code&gt;Some value&lt;/code&gt; and call a
function with &lt;code&gt;value&lt;/code&gt;. But what do we do if we have &lt;code&gt;None&lt;/code&gt;? Then we can't call
our function. This kind of stuff is what a &lt;code&gt;Option.map&lt;/code&gt; does. So instead of&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 27)&quot; onmouseover=&quot;showTip(event, 'fs11', 27)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 28)&quot; onmouseover=&quot;showTip(event, 'fs2', 28)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 29)&quot; onmouseover=&quot;showTip(event, 'fs12', 29)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 30)&quot; onmouseover=&quot;showTip(event, 'fs11', 30)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs3', 31)&quot; onmouseover=&quot;showTip(event, 'fs3', 31)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 32)&quot; onmouseover=&quot;showTip(event, 'fs3', 32)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs2', 33)&quot; onmouseover=&quot;showTip(event, 'fs2', 33)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 34)&quot; onmouseover=&quot;showTip(event, 'fs13', 34)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 35)&quot; onmouseover=&quot;showTip(event, 'fs2', 35)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs13', 36)&quot; onmouseover=&quot;showTip(event, 'fs13', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we also can just write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 37)&quot; onmouseover=&quot;showTip(event, 'fs14', 37)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 38)&quot; onmouseover=&quot;showTip(event, 'fs15', 38)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 39)&quot; onmouseover=&quot;showTip(event, 'fs16', 39)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 40)&quot; onmouseover=&quot;showTip(event, 'fs13', 40)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 41)&quot; onmouseover=&quot;showTip(event, 'fs13', 41)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs11', 42)&quot; onmouseover=&quot;showTip(event, 'fs11', 42)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now, we are forced to handle &lt;code&gt;option&lt;/code&gt; values. But &lt;code&gt;option&lt;/code&gt; itself is it's own type and we have
a lot of functions that helps us working with &lt;code&gt;option&lt;/code&gt; values.&lt;/p&gt;
&lt;h2&gt;The Application&lt;/h2&gt;
&lt;p&gt;The best way to show the benefits and the difference is to go through a small example. For that
purpose I created a small in-memory database and a CLI program with basic CRUD operations. You
can see the full source code at the end. But i don't want to cover every detail. I want to focus on
the &lt;em&gt;Optional&lt;/em&gt; part. First, let's see how we can use the program&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;Command: show
  Id |                      Name | Price
   1 |                        TV | 499.99
   2 |                    A Book | 29.99
   3 |              Game Console | 349.99
Command: asdasdfkhjb
Error: invalid command -- [asdasdfkhjb]
Command: delete 2
Command: show 2
Product with id 2 doesn't exists.
Command: insert &quot;Zelda: Skyward Swords&quot; 49,99
Command: show
  Id |                      Name | Price
   1 |                        TV | 499.99
   3 |              Game Console | 349.99
   4 |     Zelda: Skyward Swords | 49.99
Command: name 1 &quot;Television&quot;
Command: price 3 299,99
Command: show
  Id |                      Name | Price
   1 |                Television | 499.99
   3 |              Game Console | 299.99
   4 |     Zelda: Skyward Swords | 49.99
Command: exit
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The program just contains the commands &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;price&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; as
valid commands. As you can imagine we need to handle a lot of failures.&lt;/p&gt;
&lt;p&gt;As usual, all kind of user input can be invalid. A command that doesn't exists. Parsing of
a number failed, in general a user just enters garbage. Or a user tries to change or show
a specific entry that doesn't exists.&lt;/p&gt;
&lt;p&gt;As i don't want to cover the whole program, just let's look first at the modules and functions
and their signatures to get a overview of the code.&lt;/p&gt;
&lt;p&gt;So let's just go through some of the interesting parts. At first, i added a &lt;code&gt;Option.IfNone&lt;/code&gt;
function. It either returns a value if present or the provided value. It is just a call
to &lt;code&gt;defaultArg&lt;/code&gt;. I created &lt;code&gt;ifNone&lt;/code&gt; because the default argument order of &lt;code&gt;defaultArg&lt;/code&gt;
doesn't work nicely with piping.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 503)&quot; onmouseover=&quot;showTip(event, 'fs15', 503)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs143', 504)&quot; onmouseover=&quot;showTip(event, 'fs143', 504)&quot; class=&quot;f&quot;&gt;ifNone&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 505)&quot; onmouseover=&quot;showTip(event, 'fs34', 505)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 506)&quot; onmouseover=&quot;showTip(event, 'fs35', 506)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 507)&quot; onmouseover=&quot;showTip(event, 'fs36', 507)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 508)&quot; onmouseover=&quot;showTip(event, 'fs35', 508)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 509)&quot; onmouseover=&quot;showTip(event, 'fs34', 509)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Here is a brief overview of the modules and functions i created.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;create&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 43)&quot; onmouseover=&quot;showTip(event, 'fs17', 43)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 44)&quot; onmouseover=&quot;showTip(event, 'fs6', 44)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 45)&quot; onmouseover=&quot;showTip(event, 'fs18', 45)&quot; class=&quot;i&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;withName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 46)&quot; onmouseover=&quot;showTip(event, 'fs6', 46)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;withPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 47)&quot; onmouseover=&quot;showTip(event, 'fs18', 47)&quot; class=&quot;i&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;getById&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 48)&quot; onmouseover=&quot;showTip(event, 'fs19', 48)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs1', 49)&quot; onmouseover=&quot;showTip(event, 'fs1', 49)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;getAll&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 50)&quot; onmouseover=&quot;showTip(event, 'fs19', 50)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 51)&quot; onmouseover=&quot;showTip(event, 'fs20', 51)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;containsId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 52)&quot; onmouseover=&quot;showTip(event, 'fs19', 52)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 53)&quot; onmouseover=&quot;showTip(event, 'fs21', 53)&quot; class=&quot;i&quot;&gt;bool&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;nextId&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 54)&quot; onmouseover=&quot;showTip(event, 'fs19', 54)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 55)&quot; onmouseover=&quot;showTip(event, 'fs17', 55)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 56)&quot; onmouseover=&quot;showTip(event, 'fs17', 56)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;insert&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 57)&quot; onmouseover=&quot;showTip(event, 'fs19', 57)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 58)&quot; onmouseover=&quot;showTip(event, 'fs19', 58)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;delete&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 59)&quot; onmouseover=&quot;showTip(event, 'fs19', 59)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 60)&quot; onmouseover=&quot;showTip(event, 'fs19', 60)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;update&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 61)&quot; onmouseover=&quot;showTip(event, 'fs19', 61)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 62)&quot; onmouseover=&quot;showTip(event, 'fs19', 62)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;updateId&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 63)&quot; onmouseover=&quot;showTip(event, 'fs19', 63)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 64)&quot; onmouseover=&quot;showTip(event, 'fs19', 64)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;CLI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;parseCommand&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 65)&quot; onmouseover=&quot;showTip(event, 'fs6', 65)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Command&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;printProduct&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 66)&quot; onmouseover=&quot;showTip(event, 'fs22', 66)&quot; class=&quot;i&quot;&gt;unit&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;show&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 67)&quot; onmouseover=&quot;showTip(event, 'fs19', 67)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 68)&quot; onmouseover=&quot;showTip(event, 'fs19', 68)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;showProduct&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 69)&quot; onmouseover=&quot;showTip(event, 'fs19', 69)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 70)&quot; onmouseover=&quot;showTip(event, 'fs17', 70)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 71)&quot; onmouseover=&quot;showTip(event, 'fs17', 71)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 72)&quot; onmouseover=&quot;showTip(event, 'fs19', 72)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 73)&quot; onmouseover=&quot;showTip(event, 'fs17', 73)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;insert&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 74)&quot; onmouseover=&quot;showTip(event, 'fs19', 74)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 75)&quot; onmouseover=&quot;showTip(event, 'fs17', 75)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 76)&quot; onmouseover=&quot;showTip(event, 'fs6', 76)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 77)&quot; onmouseover=&quot;showTip(event, 'fs18', 77)&quot; class=&quot;i&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 78)&quot; onmouseover=&quot;showTip(event, 'fs19', 78)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 79)&quot; onmouseover=&quot;showTip(event, 'fs17', 79)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;updateName&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 80)&quot; onmouseover=&quot;showTip(event, 'fs19', 80)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 81)&quot; onmouseover=&quot;showTip(event, 'fs6', 81)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 82)&quot; onmouseover=&quot;showTip(event, 'fs19', 82)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;updatePrice&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 83)&quot; onmouseover=&quot;showTip(event, 'fs19', 83)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 84)&quot; onmouseover=&quot;showTip(event, 'fs18', 84)&quot; class=&quot;i&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 85)&quot; onmouseover=&quot;showTip(event, 'fs19', 85)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;executeCommand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 86)&quot; onmouseover=&quot;showTip(event, 'fs19', 86)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 87)&quot; onmouseover=&quot;showTip(event, 'fs17', 87)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 88)&quot; onmouseover=&quot;showTip(event, 'fs19', 88)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 89)&quot; onmouseover=&quot;showTip(event, 'fs17', 89)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs1', 90)&quot; onmouseover=&quot;showTip(event, 'fs1', 90)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;eval&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 91)&quot; onmouseover=&quot;showTip(event, 'fs19', 91)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 92)&quot; onmouseover=&quot;showTip(event, 'fs17', 92)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 93)&quot; onmouseover=&quot;showTip(event, 'fs6', 93)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 94)&quot; onmouseover=&quot;showTip(event, 'fs19', 94)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 95)&quot; onmouseover=&quot;showTip(event, 'fs17', 95)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs1', 96)&quot; onmouseover=&quot;showTip(event, 'fs1', 96)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;For the &lt;em&gt;in-memory&lt;/em&gt; database i just used a &lt;code&gt;Map&lt;/code&gt; without creating a new type,
that's why you see a lot of &lt;code&gt;Map&lt;/code&gt; types. But overall you still see that we don't have
so few functions returning &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At first we have the &lt;code&gt;Product&lt;/code&gt; module. It just provides some helper functions to create and
modify the following &lt;code&gt;Product&lt;/code&gt; Record type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs144', 510)&quot; onmouseover=&quot;showTip(event, 'fs144', 510)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs38', 511)&quot; onmouseover=&quot;showTip(event, 'fs38', 511)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs17', 512)&quot; onmouseover=&quot;showTip(event, 'fs17', 512)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 513)&quot; onmouseover=&quot;showTip(event, 'fs39', 513)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs40', 514)&quot; onmouseover=&quot;showTip(event, 'fs40', 514)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs41', 515)&quot; onmouseover=&quot;showTip(event, 'fs41', 515)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 516)&quot; onmouseover=&quot;showTip(event, 'fs42', 516)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;Product&lt;/code&gt; type should contain all our Business logic, validation and so on. It should
only contain &lt;em&gt;pure&lt;/em&gt; functions, usually this modules should contain the most code, but
in this example &lt;code&gt;Product&lt;/code&gt; doesn't really do much, so it is the smallest module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DB&lt;/code&gt; is basically an &lt;em&gt;Application layer&lt;/em&gt; or &lt;em&gt;Service layer&lt;/em&gt;. It just provides the code
to save things to a database or read things from a database. It is just a simple
&lt;em&gt;Key/Value&lt;/em&gt; interface. As you can see from the types. It is fully &lt;em&gt;generic&lt;/em&gt; and could
work with any type.&lt;/p&gt;
&lt;p&gt;From the types, only &lt;code&gt;getById&lt;/code&gt; returns an &lt;code&gt;option&lt;/code&gt;. But that doesn't mean it is the only
function that has some &lt;code&gt;option&lt;/code&gt; handling in it.&lt;/p&gt;
&lt;p&gt;Finally, on top we have the &lt;code&gt;CLI&lt;/code&gt; module. The purpose of it is to provide the logic
for the &lt;code&gt;CLI&lt;/code&gt;. We parse our input string, interpret the commands and update the database.&lt;/p&gt;
&lt;h2&gt;DB&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; itself is an &lt;em&gt;immutable&lt;/em&gt; type. So the general idea is that operations like
&lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; return the new state of &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs148', 538)&quot; onmouseover=&quot;showTip(event, 'fs148', 538)&quot; class=&quot;f&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 539)&quot; onmouseover=&quot;showTip(event, 'fs56', 539)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 540)&quot; onmouseover=&quot;showTip(event, 'fs57', 540)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs19', 541)&quot; onmouseover=&quot;showTip(event, 'fs19', 541)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs58', 542)&quot; onmouseover=&quot;showTip(event, 'fs58', 542)&quot; class=&quot;f&quot;&gt;tryFind&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 543)&quot; onmouseover=&quot;showTip(event, 'fs56', 543)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 544)&quot; onmouseover=&quot;showTip(event, 'fs57', 544)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our &lt;code&gt;getbyid&lt;/code&gt; function is fairly simple, as it is just a call to &lt;code&gt;tryFind&lt;/code&gt;. But it makes
sense to talk about &lt;code&gt;tryFind&lt;/code&gt; and compare it with a &lt;code&gt;Dictionary&lt;/code&gt;. If you use a &lt;code&gt;Dictionary&lt;/code&gt;
in C# and you try to fetch an entry you usually have two different behaviours.&lt;/p&gt;
&lt;p&gt;Either you choose that retrieving an entry could throw an exception, or you use the
&lt;code&gt;TryGetValue&lt;/code&gt; method. It doesn't throw an exception, but instead it returns a &lt;code&gt;bool&lt;/code&gt; that
you must check, to get the value you have to pass an &lt;code&gt;out&lt;/code&gt; parameter to &lt;code&gt;TryGetValue&lt;/code&gt;.
I don't really like both ways. We don't want &lt;em&gt;exceptions&lt;/em&gt; and wrap the code in &lt;code&gt;try/catch&lt;/code&gt;.
But also &lt;code&gt;TryGetValue&lt;/code&gt; is annoying as we first create a (mutable) value and pass
it to &lt;code&gt;TryGetValue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In F# on the other hand a function like &lt;code&gt;tryFind&lt;/code&gt; just returns an &lt;code&gt;option&lt;/code&gt;, we
either have &lt;code&gt;Some value&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. Here we just return the &lt;code&gt;option&lt;/code&gt; as-is. That is
also the reason why &lt;code&gt;getById&lt;/code&gt; returns an &lt;code&gt;option&lt;/code&gt;. We don't must immediately check the
&lt;code&gt;option&lt;/code&gt;. We also can just pass it as a value around. We only must check it if we need
the value inside &lt;code&gt;Some&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs154', 594)&quot; onmouseover=&quot;showTip(event, 'fs154', 594)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 595)&quot; onmouseover=&quot;showTip(event, 'fs76', 595)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 596)&quot; onmouseover=&quot;showTip(event, 'fs77', 596)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 597)&quot; onmouseover=&quot;showTip(event, 'fs57', 597)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs19', 598)&quot; onmouseover=&quot;showTip(event, 'fs19', 598)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 599)&quot; onmouseover=&quot;showTip(event, 'fs78', 599)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 600)&quot; onmouseover=&quot;showTip(event, 'fs76', 600)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 601)&quot; onmouseover=&quot;showTip(event, 'fs77', 601)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 602)&quot; onmouseover=&quot;showTip(event, 'fs57', 602)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 603)&quot; onmouseover=&quot;showTip(event, 'fs155', 603)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 604)&quot; onmouseover=&quot;showTip(event, 'fs83', 604)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 605)&quot; onmouseover=&quot;showTip(event, 'fs84', 605)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 606)&quot; onmouseover=&quot;showTip(event, 'fs85', 606)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs85', 607)&quot; onmouseover=&quot;showTip(event, 'fs85', 607)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs148', 608)&quot; onmouseover=&quot;showTip(event, 'fs148', 608)&quot; class=&quot;f&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 609)&quot; onmouseover=&quot;showTip(event, 'fs84', 609)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 610)&quot; onmouseover=&quot;showTip(event, 'fs156', 610)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 611)&quot; onmouseover=&quot;showTip(event, 'fs16', 611)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 612)&quot; onmouseover=&quot;showTip(event, 'fs87', 612)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs154', 613)&quot; onmouseover=&quot;showTip(event, 'fs154', 613)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 614)&quot; onmouseover=&quot;showTip(event, 'fs84', 614)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs83', 615)&quot; onmouseover=&quot;showTip(event, 'fs83', 615)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 616)&quot; onmouseover=&quot;showTip(event, 'fs87', 616)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs85', 617)&quot; onmouseover=&quot;showTip(event, 'fs85', 617)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;)
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 618)&quot; onmouseover=&quot;showTip(event, 'fs156', 618)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs143', 619)&quot; onmouseover=&quot;showTip(event, 'fs143', 619)&quot; class=&quot;f&quot;&gt;ifNone&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 620)&quot; onmouseover=&quot;showTip(event, 'fs85', 620)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Inside &lt;code&gt;DB&lt;/code&gt; i added a &lt;code&gt;updateId&lt;/code&gt; function. Usually i wouldn't add such a function, but
on the other hand, it is useful and at the same time interesting. The purpose of this
function is that we can fetch and update an entry at the same time. The interesting is:
&lt;code&gt;updateId&lt;/code&gt; don't return an &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At first we fetch the specified entry with &lt;code&gt;getById&lt;/code&gt; that returns an &lt;code&gt;option&lt;/code&gt;.
When we got a result we want to transform the &lt;code&gt;value&lt;/code&gt;. That's why we have &lt;code&gt;(f value)&lt;/code&gt;
in-there. The result of this is passed to update, that then returns a new updated
&lt;code&gt;Map&lt;/code&gt;. But what happens if &lt;code&gt;getById&lt;/code&gt; returns a &lt;code&gt;None&lt;/code&gt; instead of a value? The &lt;code&gt;Option.map&lt;/code&gt;
part will also directly return &lt;code&gt;None&lt;/code&gt; instead of executing the &lt;code&gt;update&lt;/code&gt; call.
But we always want to ensure to return a &lt;code&gt;Map&lt;/code&gt;, so we either return a new updated &lt;code&gt;Map&lt;/code&gt;
or in the case we had &lt;code&gt;None&lt;/code&gt;. &lt;code&gt;Option.ifNone&lt;/code&gt; returns the &lt;code&gt;Map&lt;/code&gt; we started with, without
any change applied.&lt;/p&gt;
&lt;p&gt;Assume you work in a language without &lt;code&gt;option&lt;/code&gt; and you get a &lt;code&gt;null&lt;/code&gt;. You theoretically could
write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 97)&quot; onmouseover=&quot;showTip(event, 'fs23', 97)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 98)&quot; onmouseover=&quot;showTip(event, 'fs24', 98)&quot; class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 99)&quot; onmouseover=&quot;showTip(event, 'fs25', 99)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 100)&quot; onmouseover=&quot;showTip(event, 'fs26', 100)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 101)&quot; onmouseover=&quot;showTip(event, 'fs27', 101)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 102)&quot; onmouseover=&quot;showTip(event, 'fs26', 102)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 103)&quot; onmouseover=&quot;showTip(event, 'fs25', 103)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 104)&quot; onmouseover=&quot;showTip(event, 'fs25', 104)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 105)&quot; onmouseover=&quot;showTip(event, 'fs24', 105)&quot; class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 106)&quot; onmouseover=&quot;showTip(event, 'fs27', 106)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs26', 107)&quot; onmouseover=&quot;showTip(event, 'fs26', 107)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But you will only notice that this is error-prone. As this code can just throw a
&lt;code&gt;NullReferenceException&lt;/code&gt; if you try to update a non-existent value. Sure you then could add
the typical &lt;code&gt;null&lt;/code&gt; checks to get it safe.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 108)&quot; onmouseover=&quot;showTip(event, 'fs28', 108)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 109)&quot; onmouseover=&quot;showTip(event, 'fs24', 109)&quot; class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 110)&quot; onmouseover=&quot;showTip(event, 'fs25', 110)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 111)&quot; onmouseover=&quot;showTip(event, 'fs26', 111)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 112)&quot; onmouseover=&quot;showTip(event, 'fs27', 112)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 113)&quot; onmouseover=&quot;showTip(event, 'fs26', 113)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 114)&quot; onmouseover=&quot;showTip(event, 'fs25', 114)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 115)&quot; onmouseover=&quot;showTip(event, 'fs27', 115)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 116)&quot; onmouseover=&quot;showTip(event, 'fs25', 116)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 117)&quot; onmouseover=&quot;showTip(event, 'fs24', 117)&quot; class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 118)&quot; onmouseover=&quot;showTip(event, 'fs27', 118)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs26', 119)&quot; onmouseover=&quot;showTip(event, 'fs26', 119)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 120)&quot; onmouseover=&quot;showTip(event, 'fs26', 120)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The difference is, with an &lt;code&gt;option&lt;/code&gt; you are forced to handle that case. You cannot
write error-prone code in the first-place! But in general it also shows that &lt;code&gt;updateId&lt;/code&gt;
even the fact that an &lt;code&gt;id&lt;/code&gt; could not be presented, still don't return an &lt;code&gt;option&lt;/code&gt;. Actually
we have an operation that cannot fail here. Either it updates an entry, or it does
nothing. And you get that behaviour ensured by the type-system at compilation-time!&lt;/p&gt;
&lt;h3&gt;CLI&lt;/h3&gt;
&lt;p&gt;The CLI handling is in general split into two parts. First I parse the input by the user
and I use a &lt;em&gt;Discriminated Union&lt;/em&gt; to save the different input commands. The type is just
named &lt;code&gt;Command&lt;/code&gt;. &lt;code&gt;parseCommand&lt;/code&gt; do the transformation of converting the input &lt;code&gt;string&lt;/code&gt;
to such a &lt;code&gt;Command&lt;/code&gt;. The interesting thing is. Parsing could fail, but you don't see
a &lt;code&gt;Command option&lt;/code&gt; for this function.&lt;/p&gt;
&lt;p&gt;This is a general idea. Sure &lt;code&gt;option&lt;/code&gt; is nice, but if you anyway build a custom type,
you can make the &quot;None&quot;, &quot;NotExistence&quot; or &quot;Invalid&quot; a part of your type. Here I just
have a &lt;code&gt;Command&lt;/code&gt; that contains an &lt;code&gt;Invalid&lt;/code&gt; case.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;c&quot;&gt;// The CLI Commands&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs157', 621)&quot; onmouseover=&quot;showTip(event, 'fs157', 621)&quot; class=&quot;t&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs89', 622)&quot; onmouseover=&quot;showTip(event, 'fs89', 622)&quot; class=&quot;p&quot;&gt;Invalid&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 623)&quot; onmouseover=&quot;showTip(event, 'fs40', 623)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs90', 624)&quot; onmouseover=&quot;showTip(event, 'fs90', 624)&quot; class=&quot;p&quot;&gt;Show&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs91', 625)&quot; onmouseover=&quot;showTip(event, 'fs91', 625)&quot; class=&quot;p&quot;&gt;ShowProduct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 626)&quot; onmouseover=&quot;showTip(event, 'fs17', 626)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs92', 627)&quot; onmouseover=&quot;showTip(event, 'fs92', 627)&quot; class=&quot;p&quot;&gt;NewName&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 628)&quot; onmouseover=&quot;showTip(event, 'fs17', 628)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 629)&quot; onmouseover=&quot;showTip(event, 'fs40', 629)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs93', 630)&quot; onmouseover=&quot;showTip(event, 'fs93', 630)&quot; class=&quot;p&quot;&gt;NewPrice&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 631)&quot; onmouseover=&quot;showTip(event, 'fs17', 631)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 632)&quot; onmouseover=&quot;showTip(event, 'fs42', 632)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs94', 633)&quot; onmouseover=&quot;showTip(event, 'fs94', 633)&quot; class=&quot;p&quot;&gt;Insert&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 634)&quot; onmouseover=&quot;showTip(event, 'fs40', 634)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 635)&quot; onmouseover=&quot;showTip(event, 'fs42', 635)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs95', 636)&quot; onmouseover=&quot;showTip(event, 'fs95', 636)&quot; class=&quot;p&quot;&gt;Delete&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 637)&quot; onmouseover=&quot;showTip(event, 'fs17', 637)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs96', 638)&quot; onmouseover=&quot;showTip(event, 'fs96', 638)&quot; class=&quot;p&quot;&gt;Exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In general you can see that the &lt;em&gt;Discriminated Union&lt;/em&gt; just contains a case for every CLI command,
it also contains the parsed input as &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;decimal&lt;/code&gt;. In my code
I just use &lt;em&gt;Pattern Matching&lt;/em&gt;, but with &lt;em&gt;Active Patterns&lt;/em&gt; I can specify &lt;em&gt;transformation&lt;/em&gt;
functions on top of it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;c&quot;&gt;// Parsing string to Command&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (|&lt;span class=&quot;p&quot;&gt;Int&lt;/span&gt;|_|) &lt;span onmouseout=&quot;hideTip(event, 'fs97', 639)&quot; onmouseover=&quot;showTip(event, 'fs97', 639)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 640)&quot; onmouseover=&quot;showTip(event, 'fs98', 640)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs99', 641)&quot; onmouseover=&quot;showTip(event, 'fs99', 641)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 642)&quot; onmouseover=&quot;showTip(event, 'fs97', 642)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 643)&quot; onmouseover=&quot;showTip(event, 'fs100', 643)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
        | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs13', 644)&quot; onmouseover=&quot;showTip(event, 'fs13', 644)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 645)&quot; onmouseover=&quot;showTip(event, 'fs101', 645)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 646)&quot; onmouseover=&quot;showTip(event, 'fs13', 646)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (|&lt;span onmouseout=&quot;hideTip(event, 'fs102', 647)&quot; onmouseover=&quot;showTip(event, 'fs102', 647)&quot; class=&quot;p&quot;&gt;Decimal&lt;/span&gt;|_|) &lt;span onmouseout=&quot;hideTip(event, 'fs97', 648)&quot; onmouseover=&quot;showTip(event, 'fs97', 648)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 649)&quot; onmouseover=&quot;showTip(event, 'fs102', 649)&quot; class=&quot;t&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 650)&quot; onmouseover=&quot;showTip(event, 'fs103', 650)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 651)&quot; onmouseover=&quot;showTip(event, 'fs97', 651)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 652)&quot; onmouseover=&quot;showTip(event, 'fs100', 652)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
        | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs104', 653)&quot; onmouseover=&quot;showTip(event, 'fs104', 653)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 654)&quot; onmouseover=&quot;showTip(event, 'fs101', 654)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 655)&quot; onmouseover=&quot;showTip(event, 'fs104', 655)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (|&lt;span class=&quot;p&quot;&gt;LC&lt;/span&gt;|) (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 656)&quot; onmouseover=&quot;showTip(event, 'fs5', 656)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 657)&quot; onmouseover=&quot;showTip(event, 'fs40', 657)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 658)&quot; onmouseover=&quot;showTip(event, 'fs5', 658)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs105', 659)&quot; onmouseover=&quot;showTip(event, 'fs105', 659)&quot; class=&quot;f&quot;&gt;ToLowerInvariant&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;LC&lt;/code&gt; in that example is a &lt;em&gt;Complete Active Pattern&lt;/em&gt;. As it will always succeed. &lt;code&gt;LC&lt;/code&gt; just
takes a &lt;code&gt;string&lt;/code&gt; and turns it into a &lt;code&gt;lower-case&lt;/code&gt; string. I use it like that&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| [| &lt;span class=&quot;i&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;show&amp;quot;&lt;/span&gt; |] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Show&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This not only a &lt;em&gt;Pattern Match&lt;/em&gt; that checks if we have an array with &quot;show&quot; as the only
entry. It first transform the entry to a lower-case string and then compares it with &quot;show&quot;.&lt;/p&gt;
&lt;p&gt;Transforming a string to a lower-case string always succeed, but we also can use
&lt;em&gt;Partial Active Patterns&lt;/em&gt; for operation that could fail. That is what &lt;code&gt;(|Int|_|)&lt;/code&gt; and
&lt;code&gt;(|Decimal|_|)&lt;/code&gt; stands for. Both operation try to parse a string as either &lt;code&gt;Int&lt;/code&gt; or
&lt;code&gt;Decimal&lt;/code&gt;. In a success case we return &lt;code&gt;Some&lt;/code&gt;, otherwise &lt;code&gt;None&lt;/code&gt;. But the handling of those
&lt;code&gt;option&lt;/code&gt; is done for us. You also see something like that in other functions.&lt;/p&gt;
&lt;p&gt;For example a &lt;code&gt;List.choose&lt;/code&gt; is basically a &lt;code&gt;map&lt;/code&gt; and then a &lt;code&gt;filter&lt;/code&gt; operation in one
step. You not only can transform an entry to a new value. By returning &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;
you also can filter. The &lt;code&gt;choose&lt;/code&gt; operation only take the &lt;code&gt;Some&lt;/code&gt; elements. Here we have
the same. Using &lt;em&gt;Options&lt;/em&gt; for a &lt;em&gt;success/failure&lt;/em&gt; or &lt;em&gt;filter&lt;/em&gt; case is quite common.&lt;/p&gt;
&lt;p&gt;So parsing and validation can be done in one-step. For example &lt;em&gt;parsing&lt;/em&gt; the &lt;code&gt;price&lt;/code&gt;
case looks like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| [| &lt;span class=&quot;i&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;price&amp;quot;&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 121)&quot; onmouseover=&quot;showTip(event, 'fs29', 121)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Decimal&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;price&lt;/span&gt; |] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We &lt;em&gt;Pattern Match&lt;/em&gt; and only if we have an Array with three elements and the second element can
successfully transformed into an &lt;code&gt;int&lt;/code&gt; and the third element can be turned into a &lt;code&gt;Decimal&lt;/code&gt;,
only then the case successfully matches. &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; are also &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;decimal&lt;/code&gt;
not &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 735)&quot; onmouseover=&quot;showTip(event, 'fs165', 735)&quot; class=&quot;f&quot;&gt;showProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 736)&quot; onmouseover=&quot;showTip(event, 'fs126', 736)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 737)&quot; onmouseover=&quot;showTip(event, 'fs47', 737)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 738)&quot; onmouseover=&quot;showTip(event, 'fs126', 738)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs164', 739)&quot; onmouseover=&quot;showTip(event, 'fs164', 739)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs148', 740)&quot; onmouseover=&quot;showTip(event, 'fs148', 740)&quot; class=&quot;f&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 741)&quot; onmouseover=&quot;showTip(event, 'fs47', 741)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs100', 742)&quot; onmouseover=&quot;showTip(event, 'fs100', 742)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 743)&quot; onmouseover=&quot;showTip(event, 'fs10', 743)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Product with id &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; doesn&amp;#39;t exists.&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 744)&quot; onmouseover=&quot;showTip(event, 'fs47', 744)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs101', 745)&quot; onmouseover=&quot;showTip(event, 'fs101', 745)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 746)&quot; onmouseover=&quot;showTip(event, 'fs127', 746)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs162', 747)&quot; onmouseover=&quot;showTip(event, 'fs162', 747)&quot; class=&quot;f&quot;&gt;printProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 748)&quot; onmouseover=&quot;showTip(event, 'fs127', 748)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs126', 749)&quot; onmouseover=&quot;showTip(event, 'fs126', 749)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Also the &lt;code&gt;CLI&lt;/code&gt; functions have the idea that they just return the new &lt;code&gt;Map&lt;/code&gt;. &lt;code&gt;showProduct&lt;/code&gt;
is a operation that could fail, as the specified entry cannot exists. That's why we handle
both cases here. We either print a message that the Product didn't exists, or we print
the returned &lt;code&gt;product&lt;/code&gt;. Because we expect the new &lt;code&gt;Map&lt;/code&gt; state as a return value, but
&lt;code&gt;showProduct&lt;/code&gt; never changes &lt;code&gt;Map&lt;/code&gt;, we always just return &lt;code&gt;db&lt;/code&gt; (the input &lt;code&gt;Map&lt;/code&gt;).&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 769)&quot; onmouseover=&quot;showTip(event, 'fs168', 769)&quot; class=&quot;f&quot;&gt;updateName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 770)&quot; onmouseover=&quot;showTip(event, 'fs122', 770)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 771)&quot; onmouseover=&quot;showTip(event, 'fs56', 771)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 772)&quot; onmouseover=&quot;showTip(event, 'fs51', 772)&quot; class=&quot;i&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs164', 773)&quot; onmouseover=&quot;showTip(event, 'fs164', 773)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs155', 774)&quot; onmouseover=&quot;showTip(event, 'fs155', 774)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs167', 775)&quot; onmouseover=&quot;showTip(event, 'fs167', 775)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs146', 776)&quot; onmouseover=&quot;showTip(event, 'fs146', 776)&quot; class=&quot;f&quot;&gt;withName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 777)&quot; onmouseover=&quot;showTip(event, 'fs51', 777)&quot; class=&quot;i&quot;&gt;newName&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs56', 778)&quot; onmouseover=&quot;showTip(event, 'fs56', 778)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 779)&quot; onmouseover=&quot;showTip(event, 'fs122', 779)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 780)&quot; onmouseover=&quot;showTip(event, 'fs169', 780)&quot; class=&quot;f&quot;&gt;updatePrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 781)&quot; onmouseover=&quot;showTip(event, 'fs122', 781)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 782)&quot; onmouseover=&quot;showTip(event, 'fs56', 782)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 783)&quot; onmouseover=&quot;showTip(event, 'fs54', 783)&quot; class=&quot;i&quot;&gt;newPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs164', 784)&quot; onmouseover=&quot;showTip(event, 'fs164', 784)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs155', 785)&quot; onmouseover=&quot;showTip(event, 'fs155', 785)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs167', 786)&quot; onmouseover=&quot;showTip(event, 'fs167', 786)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs147', 787)&quot; onmouseover=&quot;showTip(event, 'fs147', 787)&quot; class=&quot;f&quot;&gt;withPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 788)&quot; onmouseover=&quot;showTip(event, 'fs54', 788)&quot; class=&quot;i&quot;&gt;newPrice&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs56', 789)&quot; onmouseover=&quot;showTip(event, 'fs56', 789)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 790)&quot; onmouseover=&quot;showTip(event, 'fs122', 790)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our &lt;code&gt;DB.updateId&lt;/code&gt; already handled the &lt;code&gt;option&lt;/code&gt; for us, that means we just can write
the &lt;code&gt;updateName&lt;/code&gt; and &lt;code&gt;updatePrice&lt;/code&gt; functions without thinking about &lt;code&gt;option&lt;/code&gt;. And still
everything works as expected without any failure!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;c&quot;&gt;// Execution of CLI Commands&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 791)&quot; onmouseover=&quot;showTip(event, 'fs170', 791)&quot; class=&quot;f&quot;&gt;executeCommand&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 792)&quot; onmouseover=&quot;showTip(event, 'fs126', 792)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 793)&quot; onmouseover=&quot;showTip(event, 'fs133', 793)&quot; class=&quot;i&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 794)&quot; onmouseover=&quot;showTip(event, 'fs133', 794)&quot; class=&quot;i&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs90', 795)&quot; onmouseover=&quot;showTip(event, 'fs90', 795)&quot; class=&quot;p&quot;&gt;Show&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 796)&quot; onmouseover=&quot;showTip(event, 'fs101', 796)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs163', 797)&quot; onmouseover=&quot;showTip(event, 'fs163', 797)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 798)&quot; onmouseover=&quot;showTip(event, 'fs126', 798)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs91', 799)&quot; onmouseover=&quot;showTip(event, 'fs91', 799)&quot; class=&quot;p&quot;&gt;ShowProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 800)&quot; onmouseover=&quot;showTip(event, 'fs13', 800)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 801)&quot; onmouseover=&quot;showTip(event, 'fs101', 801)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 802)&quot; onmouseover=&quot;showTip(event, 'fs165', 802)&quot; class=&quot;f&quot;&gt;showProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 803)&quot; onmouseover=&quot;showTip(event, 'fs126', 803)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 804)&quot; onmouseover=&quot;showTip(event, 'fs13', 804)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs94', 805)&quot; onmouseover=&quot;showTip(event, 'fs94', 805)&quot; class=&quot;p&quot;&gt;Insert&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs48', 806)&quot; onmouseover=&quot;showTip(event, 'fs48', 806)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs49', 807)&quot; onmouseover=&quot;showTip(event, 'fs49', 807)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 808)&quot; onmouseover=&quot;showTip(event, 'fs101', 808)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs166', 809)&quot; onmouseover=&quot;showTip(event, 'fs166', 809)&quot; class=&quot;f&quot;&gt;insert&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 810)&quot; onmouseover=&quot;showTip(event, 'fs126', 810)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 811)&quot; onmouseover=&quot;showTip(event, 'fs48', 811)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 812)&quot; onmouseover=&quot;showTip(event, 'fs49', 812)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs92', 813)&quot; onmouseover=&quot;showTip(event, 'fs92', 813)&quot; class=&quot;p&quot;&gt;NewName&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs47', 814)&quot; onmouseover=&quot;showTip(event, 'fs47', 814)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs48', 815)&quot; onmouseover=&quot;showTip(event, 'fs48', 815)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;)   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 816)&quot; onmouseover=&quot;showTip(event, 'fs101', 816)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 817)&quot; onmouseover=&quot;showTip(event, 'fs168', 817)&quot; class=&quot;f&quot;&gt;updateName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 818)&quot; onmouseover=&quot;showTip(event, 'fs126', 818)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 819)&quot; onmouseover=&quot;showTip(event, 'fs47', 819)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 820)&quot; onmouseover=&quot;showTip(event, 'fs48', 820)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs93', 821)&quot; onmouseover=&quot;showTip(event, 'fs93', 821)&quot; class=&quot;p&quot;&gt;NewPrice&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs47', 822)&quot; onmouseover=&quot;showTip(event, 'fs47', 822)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs49', 823)&quot; onmouseover=&quot;showTip(event, 'fs49', 823)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 824)&quot; onmouseover=&quot;showTip(event, 'fs101', 824)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 825)&quot; onmouseover=&quot;showTip(event, 'fs169', 825)&quot; class=&quot;f&quot;&gt;updatePrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 826)&quot; onmouseover=&quot;showTip(event, 'fs126', 826)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 827)&quot; onmouseover=&quot;showTip(event, 'fs47', 827)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 828)&quot; onmouseover=&quot;showTip(event, 'fs49', 828)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs95', 829)&quot; onmouseover=&quot;showTip(event, 'fs95', 829)&quot; class=&quot;p&quot;&gt;Delete&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 830)&quot; onmouseover=&quot;showTip(event, 'fs13', 830)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 831)&quot; onmouseover=&quot;showTip(event, 'fs101', 831)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs164', 832)&quot; onmouseover=&quot;showTip(event, 'fs164', 832)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs153', 833)&quot; onmouseover=&quot;showTip(event, 'fs153', 833)&quot; class=&quot;f&quot;&gt;delete&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 834)&quot; onmouseover=&quot;showTip(event, 'fs13', 834)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 835)&quot; onmouseover=&quot;showTip(event, 'fs126', 835)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs89', 836)&quot; onmouseover=&quot;showTip(event, 'fs89', 836)&quot; class=&quot;p&quot;&gt;Invalid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 837)&quot; onmouseover=&quot;showTip(event, 'fs97', 837)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs10', 838)&quot; onmouseover=&quot;showTip(event, 'fs10', 838)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error: invalid command -- [&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 839)&quot; onmouseover=&quot;showTip(event, 'fs97', 839)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs101', 840)&quot; onmouseover=&quot;showTip(event, 'fs101', 840)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 841)&quot; onmouseover=&quot;showTip(event, 'fs126', 841)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs96', 842)&quot; onmouseover=&quot;showTip(event, 'fs96', 842)&quot; class=&quot;p&quot;&gt;Exit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 843)&quot; onmouseover=&quot;showTip(event, 'fs100', 843)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In &lt;code&gt;executeCommand&lt;/code&gt; I use the &lt;code&gt;option&lt;/code&gt; type for signalling if we still &lt;em&gt;continue&lt;/em&gt; or want
to &lt;em&gt;stop&lt;/em&gt;. The idea is once again that we just return a new &lt;code&gt;Map&lt;/code&gt; after every command.
That &lt;code&gt;Map&lt;/code&gt; contains the new state. But once I return &lt;code&gt;None&lt;/code&gt; it marks an end. Here
you also see the mapping from the &lt;code&gt;Command&lt;/code&gt; to the actual functions. The &lt;code&gt;Invalid&lt;/code&gt;
case for example doesn't abort the program. We just print an error message and just return
&lt;code&gt;db&lt;/code&gt; unchanged. Only the &lt;code&gt;Exit&lt;/code&gt; command ends the program.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs171', 844)&quot; onmouseover=&quot;showTip(event, 'fs171', 844)&quot; class=&quot;f&quot;&gt;eval&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 845)&quot; onmouseover=&quot;showTip(event, 'fs126', 845)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 846)&quot; onmouseover=&quot;showTip(event, 'fs5', 846)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs158', 847)&quot; onmouseover=&quot;showTip(event, 'fs158', 847)&quot; class=&quot;f&quot;&gt;parseCommand&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 848)&quot; onmouseover=&quot;showTip(event, 'fs5', 848)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 849)&quot; onmouseover=&quot;showTip(event, 'fs170', 849)&quot; class=&quot;f&quot;&gt;executeCommand&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 850)&quot; onmouseover=&quot;showTip(event, 'fs126', 850)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Near the end I simplified the whole program into two function. Parsing a &lt;code&gt;string&lt;/code&gt;
to a &lt;code&gt;Command&lt;/code&gt;, and executing a &lt;code&gt;Command&lt;/code&gt; that returns us the next &lt;code&gt;Map&lt;/code&gt;. At this
level we just compose both operations into a single function. Now we have &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; takes a &lt;code&gt;Map&lt;/code&gt; and an input &lt;code&gt;string&lt;/code&gt;, and will just return a new updated &lt;code&gt;Map&lt;/code&gt;
for us. We already achieved a higher-level beyond error or option checking.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 851)&quot; onmouseover=&quot;showTip(event, 'fs172', 851)&quot; class=&quot;f&quot;&gt;main&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 852)&quot; onmouseover=&quot;showTip(event, 'fs126', 852)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 853)&quot; onmouseover=&quot;showTip(event, 'fs136', 853)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 854)&quot; onmouseover=&quot;showTip(event, 'fs126', 854)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs137', 855)&quot; onmouseover=&quot;showTip(event, 'fs137', 855)&quot; class=&quot;f&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Command: &amp;quot;&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs138', 856)&quot; onmouseover=&quot;showTip(event, 'fs138', 856)&quot; class=&quot;i&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;f&quot;&gt;ReadLine&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 857)&quot; onmouseover=&quot;showTip(event, 'fs173', 857)&quot; class=&quot;t&quot;&gt;CLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs171', 858)&quot; onmouseover=&quot;showTip(event, 'fs171', 858)&quot; class=&quot;f&quot;&gt;eval&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 859)&quot; onmouseover=&quot;showTip(event, 'fs126', 859)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 860)&quot; onmouseover=&quot;showTip(event, 'fs156', 860)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 861)&quot; onmouseover=&quot;showTip(event, 'fs140', 861)&quot; class=&quot;f&quot;&gt;iter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 862)&quot; onmouseover=&quot;showTip(event, 'fs136', 862)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs136', 863)&quot; onmouseover=&quot;showTip(event, 'fs136', 863)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 864)&quot; onmouseover=&quot;showTip(event, 'fs126', 864)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
    ()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The only thing needed is the main program loop. We just print &quot;Command: &quot; to the terminal.
We read a string. Pass it to &lt;code&gt;Cli.eval db&lt;/code&gt;. This will Parse our string, do all kind
of checking and just returns us a &lt;em&gt;eventually&lt;/em&gt; a new &lt;code&gt;Map&lt;/code&gt;. As long we get a new &lt;code&gt;Map&lt;/code&gt;.
we just call &lt;code&gt;loop&lt;/code&gt; again that recurs with the new &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Start with some default entries&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs174', 865)&quot; onmouseover=&quot;showTip(event, 'fs174', 865)&quot; class=&quot;i&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs19', 866)&quot; onmouseover=&quot;showTip(event, 'fs19', 866)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs142', 867)&quot; onmouseover=&quot;showTip(event, 'fs142', 867)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
        &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs167', 868)&quot; onmouseover=&quot;showTip(event, 'fs167', 868)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs145', 869)&quot; onmouseover=&quot;showTip(event, 'fs145', 869)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TV&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;499.99m&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs167', 870)&quot; onmouseover=&quot;showTip(event, 'fs167', 870)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs145', 871)&quot; onmouseover=&quot;showTip(event, 'fs145', 871)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A Book&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;29.99m&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs167', 872)&quot; onmouseover=&quot;showTip(event, 'fs167', 872)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs145', 873)&quot; onmouseover=&quot;showTip(event, 'fs145', 873)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Game Console&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;349.99m&lt;/span&gt;
    ]

&lt;span class=&quot;c&quot;&gt;// Start program loop&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs172', 874)&quot; onmouseover=&quot;showTip(event, 'fs172', 874)&quot; class=&quot;f&quot;&gt;main&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs174', 875)&quot; onmouseover=&quot;showTip(event, 'fs174', 875)&quot; class=&quot;i&quot;&gt;storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We create an &lt;em&gt;immutable&lt;/em&gt; &lt;code&gt;Map&lt;/code&gt; as our starting database. With &lt;code&gt;main storage&lt;/code&gt; we finally
start our whole application loop.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/posts/the-option-type/&quot;&gt;The Option Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/F_Sharp_Programming/Option_Types&quot;&gt;Wikibook - Option Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.davesquared.net/2012/12/optional-fp-in-csharp.html&quot;&gt;[C#] Some optional, functional goodness in C#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Full Code&lt;/h2&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;  1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;  9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 36: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 37: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 38: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 39: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 40: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 41: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 42: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 43: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 44: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 45: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 46: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 47: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 48: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 49: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 50: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 51: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 52: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 53: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 54: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 55: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 56: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 57: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 58: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 59: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 60: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 61: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 62: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 63: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 64: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 65: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 66: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 67: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 68: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 69: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 70: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 71: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 72: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 73: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 74: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 75: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 76: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 77: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 78: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 79: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 80: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 81: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 82: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 83: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 84: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 85: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 86: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 87: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 88: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 89: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 90: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 91: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 92: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 93: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 94: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 95: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 96: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 97: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 98: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 99: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;100: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;101: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;102: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;103: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;104: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;105: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;106: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;107: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;108: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;109: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;110: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;111: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;112: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;113: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;114: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;115: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;116: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;117: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;118: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;119: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;120: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;121: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;122: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;123: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;124: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;125: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;126: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;127: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;128: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;129: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;130: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;131: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;132: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;133: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;134: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;135: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;136: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;137: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;138: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;139: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;140: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;141: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;142: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;143: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;144: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;145: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;146: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;147: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;148: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;149: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;150: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;151: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;152: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;153: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;154: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;155: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;156: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;157: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;158: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;159: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;160: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;161: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;162: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// The &amp;quot;module App =&amp;quot; including the intention is not needed, here i added it&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// because of the tools i use for this blog. But you can Copy &amp;amp; Paste the code&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// to a &amp;quot;fsx&amp;quot; file without &amp;quot;module App =&amp;quot; and execute the code with F# Interactive&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 122)&quot; onmouseover=&quot;showTip(event, 'fs30', 122)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 123)&quot; onmouseover=&quot;showTip(event, 'fs30', 123)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs31', 124)&quot; onmouseover=&quot;showTip(event, 'fs31', 124)&quot; class=&quot;i&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 125)&quot; onmouseover=&quot;showTip(event, 'fs32', 125)&quot; class=&quot;i&quot;&gt;RegularExpressions&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 126)&quot; onmouseover=&quot;showTip(event, 'fs15', 126)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 127)&quot; onmouseover=&quot;showTip(event, 'fs33', 127)&quot; class=&quot;f&quot;&gt;ifNone&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 128)&quot; onmouseover=&quot;showTip(event, 'fs34', 128)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 129)&quot; onmouseover=&quot;showTip(event, 'fs35', 129)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 130)&quot; onmouseover=&quot;showTip(event, 'fs36', 130)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 131)&quot; onmouseover=&quot;showTip(event, 'fs35', 131)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 132)&quot; onmouseover=&quot;showTip(event, 'fs34', 132)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 133)&quot; onmouseover=&quot;showTip(event, 'fs37', 133)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs38', 134)&quot; onmouseover=&quot;showTip(event, 'fs38', 134)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs17', 135)&quot; onmouseover=&quot;showTip(event, 'fs17', 135)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs39', 136)&quot; onmouseover=&quot;showTip(event, 'fs39', 136)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs40', 137)&quot; onmouseover=&quot;showTip(event, 'fs40', 137)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs41', 138)&quot; onmouseover=&quot;showTip(event, 'fs41', 138)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 139)&quot; onmouseover=&quot;showTip(event, 'fs42', 139)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
    }

    [&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs43', 140)&quot; onmouseover=&quot;showTip(event, 'fs43', 140)&quot; class=&quot;t&quot;&gt;CompilationRepresentation&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs44', 141)&quot; onmouseover=&quot;showTip(event, 'fs44', 141)&quot; class=&quot;t&quot;&gt;CompilationRepresentationFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 142)&quot; onmouseover=&quot;showTip(event, 'fs45', 142)&quot; class=&quot;i&quot;&gt;ModuleSuffix&lt;/span&gt;)&amp;gt;]
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 143)&quot; onmouseover=&quot;showTip(event, 'fs37', 143)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 144)&quot; onmouseover=&quot;showTip(event, 'fs46', 144)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 145)&quot; onmouseover=&quot;showTip(event, 'fs47', 145)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 146)&quot; onmouseover=&quot;showTip(event, 'fs48', 146)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 147)&quot; onmouseover=&quot;showTip(event, 'fs49', 147)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            {&lt;span class=&quot;i&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 148)&quot; onmouseover=&quot;showTip(event, 'fs47', 148)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 149)&quot; onmouseover=&quot;showTip(event, 'fs48', 149)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 150)&quot; onmouseover=&quot;showTip(event, 'fs49', 150)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;}

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 151)&quot; onmouseover=&quot;showTip(event, 'fs50', 151)&quot; class=&quot;f&quot;&gt;withName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 152)&quot; onmouseover=&quot;showTip(event, 'fs51', 152)&quot; class=&quot;i&quot;&gt;newName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 153)&quot; onmouseover=&quot;showTip(event, 'fs52', 153)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            {&lt;span onmouseout=&quot;hideTip(event, 'fs52', 154)&quot; onmouseover=&quot;showTip(event, 'fs52', 154)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs51', 155)&quot; onmouseover=&quot;showTip(event, 'fs51', 155)&quot; class=&quot;i&quot;&gt;newName&lt;/span&gt;}

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 156)&quot; onmouseover=&quot;showTip(event, 'fs53', 156)&quot; class=&quot;f&quot;&gt;withPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 157)&quot; onmouseover=&quot;showTip(event, 'fs54', 157)&quot; class=&quot;i&quot;&gt;newPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 158)&quot; onmouseover=&quot;showTip(event, 'fs52', 158)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            {&lt;span onmouseout=&quot;hideTip(event, 'fs52', 159)&quot; onmouseover=&quot;showTip(event, 'fs52', 159)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs54', 160)&quot; onmouseover=&quot;showTip(event, 'fs54', 160)&quot; class=&quot;i&quot;&gt;newPrice&lt;/span&gt;}

    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 161)&quot; onmouseover=&quot;showTip(event, 'fs55', 161)&quot; class=&quot;f&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 162)&quot; onmouseover=&quot;showTip(event, 'fs56', 162)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 163)&quot; onmouseover=&quot;showTip(event, 'fs57', 163)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs19', 164)&quot; onmouseover=&quot;showTip(event, 'fs19', 164)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs58', 165)&quot; onmouseover=&quot;showTip(event, 'fs58', 165)&quot; class=&quot;f&quot;&gt;tryFind&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 166)&quot; onmouseover=&quot;showTip(event, 'fs56', 166)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 167)&quot; onmouseover=&quot;showTip(event, 'fs57', 167)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 168)&quot; onmouseover=&quot;showTip(event, 'fs59', 168)&quot; class=&quot;f&quot;&gt;getAll&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 169)&quot; onmouseover=&quot;showTip(event, 'fs57', 169)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs57', 170)&quot; onmouseover=&quot;showTip(event, 'fs57', 170)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 171)&quot; onmouseover=&quot;showTip(event, 'fs19', 171)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs60', 172)&quot; onmouseover=&quot;showTip(event, 'fs60', 172)&quot; class=&quot;f&quot;&gt;toList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 173)&quot; onmouseover=&quot;showTip(event, 'fs61', 173)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs62', 174)&quot; onmouseover=&quot;showTip(event, 'fs62', 174)&quot; class=&quot;f&quot;&gt;sortBy&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 175)&quot; onmouseover=&quot;showTip(event, 'fs63', 175)&quot; class=&quot;f&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 176)&quot; onmouseover=&quot;showTip(event, 'fs61', 176)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs64', 177)&quot; onmouseover=&quot;showTip(event, 'fs64', 177)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 178)&quot; onmouseover=&quot;showTip(event, 'fs65', 178)&quot; class=&quot;f&quot;&gt;snd&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 179)&quot; onmouseover=&quot;showTip(event, 'fs66', 179)&quot; class=&quot;f&quot;&gt;containsId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 180)&quot; onmouseover=&quot;showTip(event, 'fs56', 180)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 181)&quot; onmouseover=&quot;showTip(event, 'fs57', 181)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs19', 182)&quot; onmouseover=&quot;showTip(event, 'fs19', 182)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 183)&quot; onmouseover=&quot;showTip(event, 'fs67', 183)&quot; class=&quot;f&quot;&gt;containsKey&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 184)&quot; onmouseover=&quot;showTip(event, 'fs56', 184)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 185)&quot; onmouseover=&quot;showTip(event, 'fs57', 185)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 186)&quot; onmouseover=&quot;showTip(event, 'fs68', 186)&quot; class=&quot;f&quot;&gt;nextId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 187)&quot; onmouseover=&quot;showTip(event, 'fs69', 187)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            (&lt;span onmouseout=&quot;hideTip(event, 'fs19', 188)&quot; onmouseover=&quot;showTip(event, 'fs19', 188)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs70', 189)&quot; onmouseover=&quot;showTip(event, 'fs70', 189)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 190)&quot; onmouseover=&quot;showTip(event, 'fs71', 190)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 191)&quot; onmouseover=&quot;showTip(event, 'fs72', 191)&quot; class=&quot;i&quot;&gt;k&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 192)&quot; onmouseover=&quot;showTip(event, 'fs73', 192)&quot; class=&quot;i&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 193)&quot; onmouseover=&quot;showTip(event, 'fs74', 193)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 194)&quot; onmouseover=&quot;showTip(event, 'fs71', 194)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 195)&quot; onmouseover=&quot;showTip(event, 'fs72', 195)&quot; class=&quot;i&quot;&gt;k&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 196)&quot; onmouseover=&quot;showTip(event, 'fs69', 196)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 197)&quot; onmouseover=&quot;showTip(event, 'fs75', 197)&quot; class=&quot;f&quot;&gt;insert&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 198)&quot; onmouseover=&quot;showTip(event, 'fs76', 198)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 199)&quot; onmouseover=&quot;showTip(event, 'fs77', 199)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 200)&quot; onmouseover=&quot;showTip(event, 'fs57', 200)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Check if we have that key&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs57', 201)&quot; onmouseover=&quot;showTip(event, 'fs57', 201)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 202)&quot; onmouseover=&quot;showTip(event, 'fs66', 202)&quot; class=&quot;f&quot;&gt;containsId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 203)&quot; onmouseover=&quot;showTip(event, 'fs76', 203)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 204)&quot; onmouseover=&quot;showTip(event, 'fs57', 204)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;// yes -- return &amp;quot;db&amp;quot; unchanged&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 205)&quot; onmouseover=&quot;showTip(event, 'fs57', 205)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 206)&quot; onmouseover=&quot;showTip(event, 'fs19', 206)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 207)&quot; onmouseover=&quot;showTip(event, 'fs78', 207)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 208)&quot; onmouseover=&quot;showTip(event, 'fs76', 208)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 209)&quot; onmouseover=&quot;showTip(event, 'fs77', 209)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// no  -- add product&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 210)&quot; onmouseover=&quot;showTip(event, 'fs79', 210)&quot; class=&quot;f&quot;&gt;delete&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 211)&quot; onmouseover=&quot;showTip(event, 'fs56', 211)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 212)&quot; onmouseover=&quot;showTip(event, 'fs57', 212)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs57', 213)&quot; onmouseover=&quot;showTip(event, 'fs57', 213)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 214)&quot; onmouseover=&quot;showTip(event, 'fs19', 214)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs80', 215)&quot; onmouseover=&quot;showTip(event, 'fs80', 215)&quot; class=&quot;f&quot;&gt;remove&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 216)&quot; onmouseover=&quot;showTip(event, 'fs56', 216)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 217)&quot; onmouseover=&quot;showTip(event, 'fs81', 217)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 218)&quot; onmouseover=&quot;showTip(event, 'fs76', 218)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 219)&quot; onmouseover=&quot;showTip(event, 'fs77', 219)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 220)&quot; onmouseover=&quot;showTip(event, 'fs57', 220)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs19', 221)&quot; onmouseover=&quot;showTip(event, 'fs19', 221)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 222)&quot; onmouseover=&quot;showTip(event, 'fs78', 222)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 223)&quot; onmouseover=&quot;showTip(event, 'fs76', 223)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 224)&quot; onmouseover=&quot;showTip(event, 'fs77', 224)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 225)&quot; onmouseover=&quot;showTip(event, 'fs57', 225)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 226)&quot; onmouseover=&quot;showTip(event, 'fs82', 226)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 227)&quot; onmouseover=&quot;showTip(event, 'fs83', 227)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 228)&quot; onmouseover=&quot;showTip(event, 'fs84', 228)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 229)&quot; onmouseover=&quot;showTip(event, 'fs85', 229)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs85', 230)&quot; onmouseover=&quot;showTip(event, 'fs85', 230)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 231)&quot; onmouseover=&quot;showTip(event, 'fs55', 231)&quot; class=&quot;f&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 232)&quot; onmouseover=&quot;showTip(event, 'fs84', 232)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 233)&quot; onmouseover=&quot;showTip(event, 'fs86', 233)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 234)&quot; onmouseover=&quot;showTip(event, 'fs16', 234)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 235)&quot; onmouseover=&quot;showTip(event, 'fs87', 235)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 236)&quot; onmouseover=&quot;showTip(event, 'fs81', 236)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 237)&quot; onmouseover=&quot;showTip(event, 'fs84', 237)&quot; class=&quot;i&quot;&gt;key&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs83', 238)&quot; onmouseover=&quot;showTip(event, 'fs83', 238)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 239)&quot; onmouseover=&quot;showTip(event, 'fs87', 239)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs85', 240)&quot; onmouseover=&quot;showTip(event, 'fs85', 240)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;)
            &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 241)&quot; onmouseover=&quot;showTip(event, 'fs86', 241)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 242)&quot; onmouseover=&quot;showTip(event, 'fs33', 242)&quot; class=&quot;f&quot;&gt;ifNone&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 243)&quot; onmouseover=&quot;showTip(event, 'fs85', 243)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;CLI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// The CLI Commands&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 244)&quot; onmouseover=&quot;showTip(event, 'fs88', 244)&quot; class=&quot;t&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs89', 245)&quot; onmouseover=&quot;showTip(event, 'fs89', 245)&quot; class=&quot;p&quot;&gt;Invalid&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 246)&quot; onmouseover=&quot;showTip(event, 'fs40', 246)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs90', 247)&quot; onmouseover=&quot;showTip(event, 'fs90', 247)&quot; class=&quot;p&quot;&gt;Show&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs91', 248)&quot; onmouseover=&quot;showTip(event, 'fs91', 248)&quot; class=&quot;p&quot;&gt;ShowProduct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 249)&quot; onmouseover=&quot;showTip(event, 'fs17', 249)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs92', 250)&quot; onmouseover=&quot;showTip(event, 'fs92', 250)&quot; class=&quot;p&quot;&gt;NewName&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 251)&quot; onmouseover=&quot;showTip(event, 'fs17', 251)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 252)&quot; onmouseover=&quot;showTip(event, 'fs40', 252)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs93', 253)&quot; onmouseover=&quot;showTip(event, 'fs93', 253)&quot; class=&quot;p&quot;&gt;NewPrice&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 254)&quot; onmouseover=&quot;showTip(event, 'fs17', 254)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 255)&quot; onmouseover=&quot;showTip(event, 'fs42', 255)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs94', 256)&quot; onmouseover=&quot;showTip(event, 'fs94', 256)&quot; class=&quot;p&quot;&gt;Insert&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 257)&quot; onmouseover=&quot;showTip(event, 'fs40', 257)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 258)&quot; onmouseover=&quot;showTip(event, 'fs42', 258)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs95', 259)&quot; onmouseover=&quot;showTip(event, 'fs95', 259)&quot; class=&quot;p&quot;&gt;Delete&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 260)&quot; onmouseover=&quot;showTip(event, 'fs17', 260)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs96', 261)&quot; onmouseover=&quot;showTip(event, 'fs96', 261)&quot; class=&quot;p&quot;&gt;Exit&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// Parsing string to Command&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (|&lt;span class=&quot;p&quot;&gt;Int&lt;/span&gt;|_|) &lt;span onmouseout=&quot;hideTip(event, 'fs97', 262)&quot; onmouseover=&quot;showTip(event, 'fs97', 262)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 263)&quot; onmouseover=&quot;showTip(event, 'fs98', 263)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs99', 264)&quot; onmouseover=&quot;showTip(event, 'fs99', 264)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 265)&quot; onmouseover=&quot;showTip(event, 'fs97', 265)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 266)&quot; onmouseover=&quot;showTip(event, 'fs100', 266)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
            | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs13', 267)&quot; onmouseover=&quot;showTip(event, 'fs13', 267)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 268)&quot; onmouseover=&quot;showTip(event, 'fs101', 268)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 269)&quot; onmouseover=&quot;showTip(event, 'fs13', 269)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (|&lt;span onmouseout=&quot;hideTip(event, 'fs102', 270)&quot; onmouseover=&quot;showTip(event, 'fs102', 270)&quot; class=&quot;p&quot;&gt;Decimal&lt;/span&gt;|_|) &lt;span onmouseout=&quot;hideTip(event, 'fs97', 271)&quot; onmouseover=&quot;showTip(event, 'fs97', 271)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 272)&quot; onmouseover=&quot;showTip(event, 'fs102', 272)&quot; class=&quot;t&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 273)&quot; onmouseover=&quot;showTip(event, 'fs103', 273)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 274)&quot; onmouseover=&quot;showTip(event, 'fs97', 274)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 275)&quot; onmouseover=&quot;showTip(event, 'fs100', 275)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
            | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs104', 276)&quot; onmouseover=&quot;showTip(event, 'fs104', 276)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 277)&quot; onmouseover=&quot;showTip(event, 'fs101', 277)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 278)&quot; onmouseover=&quot;showTip(event, 'fs104', 278)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (|&lt;span class=&quot;p&quot;&gt;LC&lt;/span&gt;|) (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 279)&quot; onmouseover=&quot;showTip(event, 'fs5', 279)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 280)&quot; onmouseover=&quot;showTip(event, 'fs40', 280)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 281)&quot; onmouseover=&quot;showTip(event, 'fs5', 281)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs105', 282)&quot; onmouseover=&quot;showTip(event, 'fs105', 282)&quot; class=&quot;f&quot;&gt;ToLowerInvariant&lt;/span&gt;()

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs106', 283)&quot; onmouseover=&quot;showTip(event, 'fs106', 283)&quot; class=&quot;f&quot;&gt;parseCommand&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs97', 284)&quot; onmouseover=&quot;showTip(event, 'fs97', 284)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 285)&quot; onmouseover=&quot;showTip(event, 'fs40', 285)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 286)&quot; onmouseover=&quot;showTip(event, 'fs107', 286)&quot; class=&quot;i&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs108', 287)&quot; onmouseover=&quot;showTip(event, 'fs108', 287)&quot; class=&quot;t&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs109', 288)&quot; onmouseover=&quot;showTip(event, 'fs109', 288)&quot; class=&quot;f&quot;&gt;Matches&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs97', 289)&quot; onmouseover=&quot;showTip(event, 'fs97', 289)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;(?:&lt;/span&gt;&lt;span class=&quot;e&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(?&amp;lt;str&amp;gt;[^&lt;/span&gt;&lt;span class=&quot;e&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]+)&lt;/span&gt;&lt;span class=&quot;e&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|(?&amp;lt;str&amp;gt;\S+))&amp;quot;&lt;/span&gt;)
                &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 290)&quot; onmouseover=&quot;showTip(event, 'fs110', 290)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs111', 291)&quot; onmouseover=&quot;showTip(event, 'fs111', 291)&quot; class=&quot;f&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs112', 292)&quot; onmouseover=&quot;showTip(event, 'fs112', 292)&quot; class=&quot;t&quot;&gt;Match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 293)&quot; onmouseover=&quot;showTip(event, 'fs110', 293)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs113', 294)&quot; onmouseover=&quot;showTip(event, 'fs113', 294)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs114', 295)&quot; onmouseover=&quot;showTip(event, 'fs114', 295)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs114', 296)&quot; onmouseover=&quot;showTip(event, 'fs114', 296)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs115', 297)&quot; onmouseover=&quot;showTip(event, 'fs115', 297)&quot; class=&quot;i&quot;&gt;Groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;[&lt;span class=&quot;s&quot;&gt;&amp;quot;str&amp;quot;&lt;/span&gt;]&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Value&lt;/span&gt;)
                &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 298)&quot; onmouseover=&quot;showTip(event, 'fs110', 298)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs116', 299)&quot; onmouseover=&quot;showTip(event, 'fs116', 299)&quot; class=&quot;f&quot;&gt;toArray&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 300)&quot; onmouseover=&quot;showTip(event, 'fs107', 300)&quot; class=&quot;i&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | [| &lt;span onmouseout=&quot;hideTip(event, 'fs117', 301)&quot; onmouseover=&quot;showTip(event, 'fs117', 301)&quot; class=&quot;p&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;show&amp;quot;&lt;/span&gt; |]        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 302)&quot; onmouseover=&quot;showTip(event, 'fs90', 302)&quot; class=&quot;p&quot;&gt;Show&lt;/span&gt;
            | [| &lt;span onmouseout=&quot;hideTip(event, 'fs117', 303)&quot; onmouseover=&quot;showTip(event, 'fs117', 303)&quot; class=&quot;p&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;show&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 304)&quot; onmouseover=&quot;showTip(event, 'fs118', 304)&quot; class=&quot;p&quot;&gt;Int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 305)&quot; onmouseover=&quot;showTip(event, 'fs13', 305)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; |] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 306)&quot; onmouseover=&quot;showTip(event, 'fs91', 306)&quot; class=&quot;p&quot;&gt;ShowProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 307)&quot; onmouseover=&quot;showTip(event, 'fs13', 307)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
            | [| &lt;span onmouseout=&quot;hideTip(event, 'fs117', 308)&quot; onmouseover=&quot;showTip(event, 'fs117', 308)&quot; class=&quot;p&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;insert&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 309)&quot; onmouseover=&quot;showTip(event, 'fs48', 309)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 310)&quot; onmouseover=&quot;showTip(event, 'fs119', 310)&quot; class=&quot;p&quot;&gt;Decimal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 311)&quot; onmouseover=&quot;showTip(event, 'fs49', 311)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; |] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs94', 312)&quot; onmouseover=&quot;showTip(event, 'fs94', 312)&quot; class=&quot;p&quot;&gt;Insert&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs48', 313)&quot; onmouseover=&quot;showTip(event, 'fs48', 313)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs49', 314)&quot; onmouseover=&quot;showTip(event, 'fs49', 314)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;)
            | [| &lt;span onmouseout=&quot;hideTip(event, 'fs117', 315)&quot; onmouseover=&quot;showTip(event, 'fs117', 315)&quot; class=&quot;p&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 316)&quot; onmouseover=&quot;showTip(event, 'fs118', 316)&quot; class=&quot;p&quot;&gt;Int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 317)&quot; onmouseover=&quot;showTip(event, 'fs47', 317)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 318)&quot; onmouseover=&quot;showTip(event, 'fs48', 318)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; |] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 319)&quot; onmouseover=&quot;showTip(event, 'fs92', 319)&quot; class=&quot;p&quot;&gt;NewName&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 320)&quot; onmouseover=&quot;showTip(event, 'fs47', 320)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs48', 321)&quot; onmouseover=&quot;showTip(event, 'fs48', 321)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;)
            | [| &lt;span onmouseout=&quot;hideTip(event, 'fs117', 322)&quot; onmouseover=&quot;showTip(event, 'fs117', 322)&quot; class=&quot;p&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;price&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 323)&quot; onmouseover=&quot;showTip(event, 'fs118', 323)&quot; class=&quot;p&quot;&gt;Int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 324)&quot; onmouseover=&quot;showTip(event, 'fs47', 324)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 325)&quot; onmouseover=&quot;showTip(event, 'fs119', 325)&quot; class=&quot;p&quot;&gt;Decimal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 326)&quot; onmouseover=&quot;showTip(event, 'fs49', 326)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; |] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs93', 327)&quot; onmouseover=&quot;showTip(event, 'fs93', 327)&quot; class=&quot;p&quot;&gt;NewPrice&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 328)&quot; onmouseover=&quot;showTip(event, 'fs47', 328)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs49', 329)&quot; onmouseover=&quot;showTip(event, 'fs49', 329)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;)
            | [| &lt;span onmouseout=&quot;hideTip(event, 'fs117', 330)&quot; onmouseover=&quot;showTip(event, 'fs117', 330)&quot; class=&quot;p&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 331)&quot; onmouseover=&quot;showTip(event, 'fs118', 331)&quot; class=&quot;p&quot;&gt;Int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 332)&quot; onmouseover=&quot;showTip(event, 'fs13', 332)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; |]      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs95', 333)&quot; onmouseover=&quot;showTip(event, 'fs95', 333)&quot; class=&quot;p&quot;&gt;Delete&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 334)&quot; onmouseover=&quot;showTip(event, 'fs13', 334)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
            | [| &lt;span onmouseout=&quot;hideTip(event, 'fs117', 335)&quot; onmouseover=&quot;showTip(event, 'fs117', 335)&quot; class=&quot;p&quot;&gt;LC&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt; |] &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 336)&quot; onmouseover=&quot;showTip(event, 'fs96', 336)&quot; class=&quot;p&quot;&gt;Exit&lt;/span&gt;
            | _               &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs89', 337)&quot; onmouseover=&quot;showTip(event, 'fs89', 337)&quot; class=&quot;p&quot;&gt;Invalid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 338)&quot; onmouseover=&quot;showTip(event, 'fs97', 338)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// Helper functions&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 339)&quot; onmouseover=&quot;showTip(event, 'fs120', 339)&quot; class=&quot;f&quot;&gt;printProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 340)&quot; onmouseover=&quot;showTip(event, 'fs52', 340)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs10', 341)&quot; onmouseover=&quot;showTip(event, 'fs10', 341)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%4d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%25s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%4.2f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 342)&quot; onmouseover=&quot;showTip(event, 'fs52', 342)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 343)&quot; onmouseover=&quot;showTip(event, 'fs38', 343)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 344)&quot; onmouseover=&quot;showTip(event, 'fs52', 344)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 345)&quot; onmouseover=&quot;showTip(event, 'fs39', 345)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 346)&quot; onmouseover=&quot;showTip(event, 'fs52', 346)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 347)&quot; onmouseover=&quot;showTip(event, 'fs41', 347)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// CLI Commands&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs121', 348)&quot; onmouseover=&quot;showTip(event, 'fs121', 348)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 349)&quot; onmouseover=&quot;showTip(event, 'fs122', 349)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs10', 350)&quot; onmouseover=&quot;showTip(event, 'fs10', 350)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%4s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%25s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; | &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Id&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Name&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Price&amp;quot;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs122', 351)&quot; onmouseover=&quot;showTip(event, 'fs122', 351)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 352)&quot; onmouseover=&quot;showTip(event, 'fs123', 352)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs59', 353)&quot; onmouseover=&quot;showTip(event, 'fs59', 353)&quot; class=&quot;f&quot;&gt;getAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 354)&quot; onmouseover=&quot;showTip(event, 'fs61', 354)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs124', 355)&quot; onmouseover=&quot;showTip(event, 'fs124', 355)&quot; class=&quot;f&quot;&gt;iter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 356)&quot; onmouseover=&quot;showTip(event, 'fs120', 356)&quot; class=&quot;f&quot;&gt;printProduct&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs122', 357)&quot; onmouseover=&quot;showTip(event, 'fs122', 357)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 358)&quot; onmouseover=&quot;showTip(event, 'fs125', 358)&quot; class=&quot;f&quot;&gt;showProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 359)&quot; onmouseover=&quot;showTip(event, 'fs126', 359)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 360)&quot; onmouseover=&quot;showTip(event, 'fs47', 360)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 361)&quot; onmouseover=&quot;showTip(event, 'fs126', 361)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 362)&quot; onmouseover=&quot;showTip(event, 'fs123', 362)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs55', 363)&quot; onmouseover=&quot;showTip(event, 'fs55', 363)&quot; class=&quot;f&quot;&gt;getById&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 364)&quot; onmouseover=&quot;showTip(event, 'fs47', 364)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs100', 365)&quot; onmouseover=&quot;showTip(event, 'fs100', 365)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 366)&quot; onmouseover=&quot;showTip(event, 'fs10', 366)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Product with id &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; doesn&amp;#39;t exists.&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 367)&quot; onmouseover=&quot;showTip(event, 'fs47', 367)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs101', 368)&quot; onmouseover=&quot;showTip(event, 'fs101', 368)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 369)&quot; onmouseover=&quot;showTip(event, 'fs127', 369)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 370)&quot; onmouseover=&quot;showTip(event, 'fs120', 370)&quot; class=&quot;f&quot;&gt;printProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 371)&quot; onmouseover=&quot;showTip(event, 'fs127', 371)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs126', 372)&quot; onmouseover=&quot;showTip(event, 'fs126', 372)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs128', 373)&quot; onmouseover=&quot;showTip(event, 'fs128', 373)&quot; class=&quot;f&quot;&gt;insert&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 374)&quot; onmouseover=&quot;showTip(event, 'fs126', 374)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 375)&quot; onmouseover=&quot;showTip(event, 'fs48', 375)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 376)&quot; onmouseover=&quot;showTip(event, 'fs49', 376)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 377)&quot; onmouseover=&quot;showTip(event, 'fs47', 377)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 378)&quot; onmouseover=&quot;showTip(event, 'fs123', 378)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs68', 379)&quot; onmouseover=&quot;showTip(event, 'fs68', 379)&quot; class=&quot;f&quot;&gt;nextId&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 380)&quot; onmouseover=&quot;showTip(event, 'fs126', 380)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 381)&quot; onmouseover=&quot;showTip(event, 'fs52', 381)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 382)&quot; onmouseover=&quot;showTip(event, 'fs129', 382)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 383)&quot; onmouseover=&quot;showTip(event, 'fs46', 383)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 384)&quot; onmouseover=&quot;showTip(event, 'fs47', 384)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 385)&quot; onmouseover=&quot;showTip(event, 'fs48', 385)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 386)&quot; onmouseover=&quot;showTip(event, 'fs49', 386)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs123', 387)&quot; onmouseover=&quot;showTip(event, 'fs123', 387)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs75', 388)&quot; onmouseover=&quot;showTip(event, 'fs75', 388)&quot; class=&quot;f&quot;&gt;insert&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 389)&quot; onmouseover=&quot;showTip(event, 'fs47', 389)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 390)&quot; onmouseover=&quot;showTip(event, 'fs52', 390)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 391)&quot; onmouseover=&quot;showTip(event, 'fs126', 391)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 392)&quot; onmouseover=&quot;showTip(event, 'fs130', 392)&quot; class=&quot;f&quot;&gt;updateName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 393)&quot; onmouseover=&quot;showTip(event, 'fs122', 393)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 394)&quot; onmouseover=&quot;showTip(event, 'fs56', 394)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 395)&quot; onmouseover=&quot;showTip(event, 'fs51', 395)&quot; class=&quot;i&quot;&gt;newName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs123', 396)&quot; onmouseover=&quot;showTip(event, 'fs123', 396)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs82', 397)&quot; onmouseover=&quot;showTip(event, 'fs82', 397)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs129', 398)&quot; onmouseover=&quot;showTip(event, 'fs129', 398)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs50', 399)&quot; onmouseover=&quot;showTip(event, 'fs50', 399)&quot; class=&quot;f&quot;&gt;withName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 400)&quot; onmouseover=&quot;showTip(event, 'fs51', 400)&quot; class=&quot;i&quot;&gt;newName&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs56', 401)&quot; onmouseover=&quot;showTip(event, 'fs56', 401)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 402)&quot; onmouseover=&quot;showTip(event, 'fs122', 402)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs131', 403)&quot; onmouseover=&quot;showTip(event, 'fs131', 403)&quot; class=&quot;f&quot;&gt;updatePrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 404)&quot; onmouseover=&quot;showTip(event, 'fs122', 404)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 405)&quot; onmouseover=&quot;showTip(event, 'fs56', 405)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 406)&quot; onmouseover=&quot;showTip(event, 'fs54', 406)&quot; class=&quot;i&quot;&gt;newPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs123', 407)&quot; onmouseover=&quot;showTip(event, 'fs123', 407)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs82', 408)&quot; onmouseover=&quot;showTip(event, 'fs82', 408)&quot; class=&quot;f&quot;&gt;updateId&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs129', 409)&quot; onmouseover=&quot;showTip(event, 'fs129', 409)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs53', 410)&quot; onmouseover=&quot;showTip(event, 'fs53', 410)&quot; class=&quot;f&quot;&gt;withPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 411)&quot; onmouseover=&quot;showTip(event, 'fs54', 411)&quot; class=&quot;i&quot;&gt;newPrice&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs56', 412)&quot; onmouseover=&quot;showTip(event, 'fs56', 412)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 413)&quot; onmouseover=&quot;showTip(event, 'fs122', 413)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// Execution of CLI Commands&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs132', 414)&quot; onmouseover=&quot;showTip(event, 'fs132', 414)&quot; class=&quot;f&quot;&gt;executeCommand&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 415)&quot; onmouseover=&quot;showTip(event, 'fs126', 415)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 416)&quot; onmouseover=&quot;showTip(event, 'fs133', 416)&quot; class=&quot;i&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 417)&quot; onmouseover=&quot;showTip(event, 'fs133', 417)&quot; class=&quot;i&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs90', 418)&quot; onmouseover=&quot;showTip(event, 'fs90', 418)&quot; class=&quot;p&quot;&gt;Show&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 419)&quot; onmouseover=&quot;showTip(event, 'fs101', 419)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs121', 420)&quot; onmouseover=&quot;showTip(event, 'fs121', 420)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 421)&quot; onmouseover=&quot;showTip(event, 'fs126', 421)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs91', 422)&quot; onmouseover=&quot;showTip(event, 'fs91', 422)&quot; class=&quot;p&quot;&gt;ShowProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 423)&quot; onmouseover=&quot;showTip(event, 'fs13', 423)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 424)&quot; onmouseover=&quot;showTip(event, 'fs101', 424)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 425)&quot; onmouseover=&quot;showTip(event, 'fs125', 425)&quot; class=&quot;f&quot;&gt;showProduct&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 426)&quot; onmouseover=&quot;showTip(event, 'fs126', 426)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 427)&quot; onmouseover=&quot;showTip(event, 'fs13', 427)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs94', 428)&quot; onmouseover=&quot;showTip(event, 'fs94', 428)&quot; class=&quot;p&quot;&gt;Insert&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs48', 429)&quot; onmouseover=&quot;showTip(event, 'fs48', 429)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs49', 430)&quot; onmouseover=&quot;showTip(event, 'fs49', 430)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 431)&quot; onmouseover=&quot;showTip(event, 'fs101', 431)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs128', 432)&quot; onmouseover=&quot;showTip(event, 'fs128', 432)&quot; class=&quot;f&quot;&gt;insert&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 433)&quot; onmouseover=&quot;showTip(event, 'fs126', 433)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 434)&quot; onmouseover=&quot;showTip(event, 'fs48', 434)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 435)&quot; onmouseover=&quot;showTip(event, 'fs49', 435)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs92', 436)&quot; onmouseover=&quot;showTip(event, 'fs92', 436)&quot; class=&quot;p&quot;&gt;NewName&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs47', 437)&quot; onmouseover=&quot;showTip(event, 'fs47', 437)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs48', 438)&quot; onmouseover=&quot;showTip(event, 'fs48', 438)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;)   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 439)&quot; onmouseover=&quot;showTip(event, 'fs101', 439)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 440)&quot; onmouseover=&quot;showTip(event, 'fs130', 440)&quot; class=&quot;f&quot;&gt;updateName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 441)&quot; onmouseover=&quot;showTip(event, 'fs126', 441)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 442)&quot; onmouseover=&quot;showTip(event, 'fs47', 442)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 443)&quot; onmouseover=&quot;showTip(event, 'fs48', 443)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs93', 444)&quot; onmouseover=&quot;showTip(event, 'fs93', 444)&quot; class=&quot;p&quot;&gt;NewPrice&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs47', 445)&quot; onmouseover=&quot;showTip(event, 'fs47', 445)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs49', 446)&quot; onmouseover=&quot;showTip(event, 'fs49', 446)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 447)&quot; onmouseover=&quot;showTip(event, 'fs101', 447)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs131', 448)&quot; onmouseover=&quot;showTip(event, 'fs131', 448)&quot; class=&quot;f&quot;&gt;updatePrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 449)&quot; onmouseover=&quot;showTip(event, 'fs126', 449)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 450)&quot; onmouseover=&quot;showTip(event, 'fs47', 450)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 451)&quot; onmouseover=&quot;showTip(event, 'fs49', 451)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs95', 452)&quot; onmouseover=&quot;showTip(event, 'fs95', 452)&quot; class=&quot;p&quot;&gt;Delete&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 453)&quot; onmouseover=&quot;showTip(event, 'fs13', 453)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 454)&quot; onmouseover=&quot;showTip(event, 'fs101', 454)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 455)&quot; onmouseover=&quot;showTip(event, 'fs123', 455)&quot; class=&quot;t&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs79', 456)&quot; onmouseover=&quot;showTip(event, 'fs79', 456)&quot; class=&quot;f&quot;&gt;delete&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 457)&quot; onmouseover=&quot;showTip(event, 'fs13', 457)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 458)&quot; onmouseover=&quot;showTip(event, 'fs126', 458)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs89', 459)&quot; onmouseover=&quot;showTip(event, 'fs89', 459)&quot; class=&quot;p&quot;&gt;Invalid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 460)&quot; onmouseover=&quot;showTip(event, 'fs97', 460)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs10', 461)&quot; onmouseover=&quot;showTip(event, 'fs10', 461)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error: invalid command -- [&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 462)&quot; onmouseover=&quot;showTip(event, 'fs97', 462)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs101', 463)&quot; onmouseover=&quot;showTip(event, 'fs101', 463)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 464)&quot; onmouseover=&quot;showTip(event, 'fs126', 464)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs96', 465)&quot; onmouseover=&quot;showTip(event, 'fs96', 465)&quot; class=&quot;p&quot;&gt;Exit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 466)&quot; onmouseover=&quot;showTip(event, 'fs100', 466)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 467)&quot; onmouseover=&quot;showTip(event, 'fs134', 467)&quot; class=&quot;f&quot;&gt;eval&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 468)&quot; onmouseover=&quot;showTip(event, 'fs126', 468)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 469)&quot; onmouseover=&quot;showTip(event, 'fs5', 469)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs106', 470)&quot; onmouseover=&quot;showTip(event, 'fs106', 470)&quot; class=&quot;f&quot;&gt;parseCommand&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 471)&quot; onmouseover=&quot;showTip(event, 'fs5', 471)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs132', 472)&quot; onmouseover=&quot;showTip(event, 'fs132', 472)&quot; class=&quot;f&quot;&gt;executeCommand&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 473)&quot; onmouseover=&quot;showTip(event, 'fs126', 473)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs135', 474)&quot; onmouseover=&quot;showTip(event, 'fs135', 474)&quot; class=&quot;f&quot;&gt;main&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 475)&quot; onmouseover=&quot;showTip(event, 'fs126', 475)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 476)&quot; onmouseover=&quot;showTip(event, 'fs136', 476)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 477)&quot; onmouseover=&quot;showTip(event, 'fs126', 477)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs137', 478)&quot; onmouseover=&quot;showTip(event, 'fs137', 478)&quot; class=&quot;f&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Command: &amp;quot;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs138', 479)&quot; onmouseover=&quot;showTip(event, 'fs138', 479)&quot; class=&quot;i&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;f&quot;&gt;ReadLine&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs139', 480)&quot; onmouseover=&quot;showTip(event, 'fs139', 480)&quot; class=&quot;t&quot;&gt;CLI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs134', 481)&quot; onmouseover=&quot;showTip(event, 'fs134', 481)&quot; class=&quot;f&quot;&gt;eval&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 482)&quot; onmouseover=&quot;showTip(event, 'fs126', 482)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 483)&quot; onmouseover=&quot;showTip(event, 'fs86', 483)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 484)&quot; onmouseover=&quot;showTip(event, 'fs140', 484)&quot; class=&quot;f&quot;&gt;iter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 485)&quot; onmouseover=&quot;showTip(event, 'fs136', 485)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs136', 486)&quot; onmouseover=&quot;showTip(event, 'fs136', 486)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 487)&quot; onmouseover=&quot;showTip(event, 'fs126', 487)&quot; class=&quot;i&quot;&gt;db&lt;/span&gt;
        ()

    &lt;span class=&quot;c&quot;&gt;// Start with some default entries&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs141', 488)&quot; onmouseover=&quot;showTip(event, 'fs141', 488)&quot; class=&quot;i&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs19', 489)&quot; onmouseover=&quot;showTip(event, 'fs19', 489)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs142', 490)&quot; onmouseover=&quot;showTip(event, 'fs142', 490)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
            &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs129', 491)&quot; onmouseover=&quot;showTip(event, 'fs129', 491)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 492)&quot; onmouseover=&quot;showTip(event, 'fs46', 492)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;TV&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;499.99m&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs129', 493)&quot; onmouseover=&quot;showTip(event, 'fs129', 493)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 494)&quot; onmouseover=&quot;showTip(event, 'fs46', 494)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A Book&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;29.99m&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs129', 495)&quot; onmouseover=&quot;showTip(event, 'fs129', 495)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 496)&quot; onmouseover=&quot;showTip(event, 'fs46', 496)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Game Console&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;349.99m&lt;/span&gt;
        ]

    &lt;span class=&quot;c&quot;&gt;// Start program loop&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs135', 497)&quot; onmouseover=&quot;showTip(event, 'fs135', 497)&quot; class=&quot;f&quot;&gt;main&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs141', 498)&quot; onmouseover=&quot;showTip(event, 'fs141', 498)&quot; class=&quot;i&quot;&gt;storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;type option&amp;lt;&amp;#39;a&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Some of &amp;#39;a&lt;br /&gt;&amp;#160;&amp;#160;| None&lt;br /&gt;&lt;br /&gt;Full name: optionals.option&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;union case option.Some: &amp;#39;a -&amp;gt; option&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;union case option.None: option&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val containsE : str:string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: optionals.containsE&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;System.String.Contains(value: string) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val containsE : str:string -&amp;gt; option&amp;lt;string&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: optionals.containsE&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val opt : option&amp;lt;string&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: optionals.opt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val x : option&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: optionals.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val y : option&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: optionals.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val y : int option&lt;br /&gt;&lt;br /&gt;Full name: optionals.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;Multiple items&lt;br /&gt;val decimal : value:&amp;#39;T -&amp;gt; decimal (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal = System.Decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal&amp;lt;&amp;#39;Measure&amp;gt; = decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;Multiple items&lt;br /&gt;module Map&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Map&amp;lt;&amp;#39;Key,&amp;#39;Value (requires comparison)&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IComparable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;KeyValuePair&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface ICollection&amp;lt;KeyValuePair&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface IDictionary&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;new : elements:seq&amp;lt;&amp;#39;Key * &amp;#39;Value&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Add : key:&amp;#39;Key * value:&amp;#39;Value -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member ContainsKey : key:&amp;#39;Key -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;override Equals : obj -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member Remove : key:&amp;#39;Key -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map&amp;lt;_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : elements:seq&amp;lt;&amp;#39;Key * &amp;#39;Value&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;type bool = System.Boolean&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;type unit = Unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val updateId : f:&amp;#39;a -&amp;gt; key:&amp;#39;b -&amp;gt; db:&amp;#39;c -&amp;gt; &amp;#39;d&lt;br /&gt;&lt;br /&gt;Full name: optionals.updateId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val f : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val key : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val db : &amp;#39;c&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val value : obj&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val updateId : f:&amp;#39;a -&amp;gt; key:&amp;#39;b -&amp;gt; db:&amp;#39;c -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: optionals.updateId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val id : x:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.id&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;namespace System.Text&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;namespace System.Text.RegularExpressions&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val ifNone : x:&amp;#39;a -&amp;gt; opt:&amp;#39;a option -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.Option.ifNone&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val opt : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val defaultArg : arg:&amp;#39;T option -&amp;gt; defaultValue:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.defaultArg&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;type Product =&lt;br /&gt;&amp;#160;&amp;#160;{Id: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Price: decimal;}&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;Product.Id: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;Product.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;Product.Price: decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;Multiple items&lt;br /&gt;val decimal : value:&amp;#39;T -&amp;gt; decimal (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal = Decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal&amp;lt;&amp;#39;Measure&amp;gt; = decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;Multiple items&lt;br /&gt;type CompilationRepresentationAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : flags:CompilationRepresentationFlags -&amp;gt; CompilationRepresentationAttribute&lt;br /&gt;&amp;#160;&amp;#160;member Flags : CompilationRepresentationFlags&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.CompilationRepresentationAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : flags:CompilationRepresentationFlags -&amp;gt; CompilationRepresentationAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;type CompilationRepresentationFlags =&lt;br /&gt;&amp;#160;&amp;#160;|  None  =  0&lt;br /&gt;&amp;#160;&amp;#160;|  Static  =  1&lt;br /&gt;&amp;#160;&amp;#160;|  Instance  =  2&lt;br /&gt;&amp;#160;&amp;#160;|  ModuleSuffix  =  4&lt;br /&gt;&amp;#160;&amp;#160;|  UseNullAsTrueValue  =  8&lt;br /&gt;&amp;#160;&amp;#160;|  Event  =  16&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.CompilationRepresentationFlags&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;CompilationRepresentationFlags.ModuleSuffix: CompilationRepresentationFlags = 4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val create : id:int -&amp;gt; name:string -&amp;gt; price:decimal -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.ProductModule.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val id : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val name : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val price : decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val withName : newName:string -&amp;gt; product:Product -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.ProductModule.withName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val newName : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val product : Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val withPrice : newPrice:decimal -&amp;gt; product:Product -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.ProductModule.withPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val newPrice : decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val getById : id:&amp;#39;a -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;b option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.getById&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val id : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val db : Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val tryFind : key:&amp;#39;Key -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.tryFind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val getAll : db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;b list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.getAll&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val toList : table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; (&amp;#39;Key * &amp;#39;T) list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.toList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val sortBy : projection:(&amp;#39;T -&amp;gt; &amp;#39;Key) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.sortBy&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val fst : tuple:(&amp;#39;T1 * &amp;#39;T2) -&amp;gt; &amp;#39;T1&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.fst&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val snd : tuple:(&amp;#39;T1 * &amp;#39;T2) -&amp;gt; &amp;#39;T2&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.snd&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val containsId : id:&amp;#39;a -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.containsId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val containsKey : key:&amp;#39;Key -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.containsKey&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val nextId : db:Map&amp;lt;int,&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.nextId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val db : Map&amp;lt;int,&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;Key -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;State (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val k : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val v : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val insert : key:&amp;#39;a -&amp;gt; value:&amp;#39;b -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.insert&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val key : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val value : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val add : key:&amp;#39;Key -&amp;gt; value:&amp;#39;T -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;val delete : id:&amp;#39;a -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.delete&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val remove : key:&amp;#39;Key -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.remove&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val update : key:&amp;#39;a -&amp;gt; value:&amp;#39;b -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.update&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val updateId : f:(&amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; key:&amp;#39;b -&amp;gt; db:Map&amp;lt;&amp;#39;b,&amp;#39;a&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;b,&amp;#39;a&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.DB.updateId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val key : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val db : Map&amp;lt;&amp;#39;b,&amp;#39;a&amp;gt; (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;Multiple items&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals.App&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val value : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;type Command =&lt;br /&gt;&amp;#160;&amp;#160;| Invalid of string&lt;br /&gt;&amp;#160;&amp;#160;| Show&lt;br /&gt;&amp;#160;&amp;#160;| ShowProduct of int&lt;br /&gt;&amp;#160;&amp;#160;| NewName of int * string&lt;br /&gt;&amp;#160;&amp;#160;| NewPrice of int * decimal&lt;br /&gt;&amp;#160;&amp;#160;| Insert of name: string * price: decimal&lt;br /&gt;&amp;#160;&amp;#160;| Delete of int&lt;br /&gt;&amp;#160;&amp;#160;| Exit&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;union case Command.Invalid: string -&amp;gt; Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;union case Command.Show: Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;union case Command.ShowProduct: int -&amp;gt; Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;union case Command.NewName: int * string -&amp;gt; Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;union case Command.NewPrice: int * decimal -&amp;gt; Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs94&quot;&gt;union case Command.Insert: name: string * price: decimal -&amp;gt; Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs95&quot;&gt;union case Command.Delete: int -&amp;gt; Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs96&quot;&gt;union case Command.Exit: Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs97&quot;&gt;val input : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs98&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs99&quot;&gt;Int32.TryParse(s: string, result: byref&amp;lt;int&amp;gt;) : bool&lt;br /&gt;Int32.TryParse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider, result: byref&amp;lt;int&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs100&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs101&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs102&quot;&gt;Multiple items&lt;br /&gt;type Decimal =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;new : value:int -&amp;gt; decimal + 7 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : value:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val Zero : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val One : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinusOne : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;Decimal()&lt;br /&gt;Decimal(value: int) : unit&lt;br /&gt;Decimal(value: uint32) : unit&lt;br /&gt;Decimal(value: int64) : unit&lt;br /&gt;Decimal(value: uint64) : unit&lt;br /&gt;Decimal(value: float32) : unit&lt;br /&gt;Decimal(value: float) : unit&lt;br /&gt;Decimal(bits: int []) : unit&lt;br /&gt;Decimal(lo: int, mid: int, hi: int, isNegative: bool, scale: byte) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs103&quot;&gt;Decimal.TryParse(s: string, result: byref&amp;lt;decimal&amp;gt;) : bool&lt;br /&gt;Decimal.TryParse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider, result: byref&amp;lt;decimal&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs104&quot;&gt;val x : decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs105&quot;&gt;String.ToLowerInvariant() : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs106&quot;&gt;val parseCommand : input:string -&amp;gt; Command&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.parseCommand&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs107&quot;&gt;val args : string []&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs108&quot;&gt;Multiple items&lt;br /&gt;type Regex =&lt;br /&gt;&amp;#160;&amp;#160;new : pattern:string -&amp;gt; Regex + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member GetGroupNames : unit -&amp;gt; string[]&lt;br /&gt;&amp;#160;&amp;#160;member GetGroupNumbers : unit -&amp;gt; int[]&lt;br /&gt;&amp;#160;&amp;#160;member GroupNameFromNumber : i:int -&amp;gt; string&lt;br /&gt;&amp;#160;&amp;#160;member GroupNumberFromName : name:string -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;member IsMatch : input:string -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Match : input:string -&amp;gt; Match + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Matches : input:string -&amp;gt; MatchCollection + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Options : RegexOptions&lt;br /&gt;&amp;#160;&amp;#160;member Replace : input:string * replacement:string -&amp;gt; string + 5 overloads&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Text.RegularExpressions.Regex&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;Regex(pattern: string) : unit&lt;br /&gt;Regex(pattern: string, options: RegexOptions) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs109&quot;&gt;Regex.Matches(input: string, pattern: string) : MatchCollection&lt;br /&gt;Regex.Matches(input: string, pattern: string, options: RegexOptions) : MatchCollection&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs110&quot;&gt;module Seq&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs111&quot;&gt;val cast : source:Collections.IEnumerable -&amp;gt; seq&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.cast&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs112&quot;&gt;type Match =&lt;br /&gt;&amp;#160;&amp;#160;inherit Group&lt;br /&gt;&amp;#160;&amp;#160;member Groups : GroupCollection&lt;br /&gt;&amp;#160;&amp;#160;member NextMatch : unit -&amp;gt; Match&lt;br /&gt;&amp;#160;&amp;#160;member Result : replacement:string -&amp;gt; string&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : Match&lt;br /&gt;&amp;#160;&amp;#160;static member Synchronized : inner:Match -&amp;gt; Match&lt;br /&gt;&lt;br /&gt;Full name: System.Text.RegularExpressions.Match&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs113&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;U&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs114&quot;&gt;val m : Match&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs115&quot;&gt;property Match.Groups: GroupCollection&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs116&quot;&gt;val toArray : source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.toArray&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs117&quot;&gt;active recognizer LC: string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.( |LC| )&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs118&quot;&gt;active recognizer Int: string -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.( |Int|_| )&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs119&quot;&gt;Multiple items&lt;br /&gt;active recognizer Decimal: string -&amp;gt; decimal option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.( |Decimal|_| )&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Decimal =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;new : value:int -&amp;gt; decimal + 7 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : value:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val Zero : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val One : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinusOne : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;Decimal()&lt;br /&gt;Decimal(value: int) : unit&lt;br /&gt;Decimal(value: uint32) : unit&lt;br /&gt;Decimal(value: int64) : unit&lt;br /&gt;Decimal(value: uint64) : unit&lt;br /&gt;Decimal(value: float32) : unit&lt;br /&gt;Decimal(value: float) : unit&lt;br /&gt;Decimal(bits: int []) : unit&lt;br /&gt;Decimal(lo: int, mid: int, hi: int, isNegative: bool, scale: byte) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs120&quot;&gt;val printProduct : product:Product -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.printProduct&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs121&quot;&gt;val show : db:Map&amp;lt;&amp;#39;a,Product&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,Product&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs122&quot;&gt;val db : Map&amp;lt;&amp;#39;a,Product&amp;gt; (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs123&quot;&gt;module DB&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals.App&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs124&quot;&gt;val iter : action:(&amp;#39;T -&amp;gt; unit) -&amp;gt; list:&amp;#39;T list -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.iter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs125&quot;&gt;val showProduct : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; id:int -&amp;gt; Map&amp;lt;int,Product&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.showProduct&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs126&quot;&gt;val db : Map&amp;lt;int,Product&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs127&quot;&gt;val p : Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs128&quot;&gt;val insert : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; name:string -&amp;gt; price:decimal -&amp;gt; Map&amp;lt;int,Product&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.insert&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs129&quot;&gt;Multiple items&lt;br /&gt;module Product&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals.App&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Product =&lt;br /&gt;&amp;#160;&amp;#160;{Id: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Price: decimal;}&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs130&quot;&gt;val updateName : db:Map&amp;lt;&amp;#39;a,Product&amp;gt; -&amp;gt; id:&amp;#39;a -&amp;gt; newName:string -&amp;gt; Map&amp;lt;&amp;#39;a,Product&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.updateName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs131&quot;&gt;val updatePrice : db:Map&amp;lt;&amp;#39;a,Product&amp;gt; -&amp;gt; id:&amp;#39;a -&amp;gt; newPrice:decimal -&amp;gt; Map&amp;lt;&amp;#39;a,Product&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.updatePrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs132&quot;&gt;val executeCommand : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; command:Command -&amp;gt; Map&amp;lt;int,Product&amp;gt; option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.executeCommand&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs133&quot;&gt;val command : Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs134&quot;&gt;val eval : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; str:string -&amp;gt; Map&amp;lt;int,Product&amp;gt; option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.CLI.eval&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs135&quot;&gt;val main : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs136&quot;&gt;val loop : (Map&amp;lt;int,Product&amp;gt; -&amp;gt; unit)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs137&quot;&gt;val printf : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printf&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs138&quot;&gt;val stdin&amp;lt;&amp;#39;T&amp;gt; : IO.TextReader&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.stdin&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs139&quot;&gt;module CLI&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals.App&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs140&quot;&gt;val iter : action:(&amp;#39;T -&amp;gt; unit) -&amp;gt; option:&amp;#39;T option -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.iter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs141&quot;&gt;val storage : Map&amp;lt;int,Product&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.App.storage&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs142&quot;&gt;val ofList : elements:(&amp;#39;Key * &amp;#39;T) list -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.ofList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs143&quot;&gt;val ifNone : x:&amp;#39;a -&amp;gt; opt:&amp;#39;a option -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.Option.ifNone&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs144&quot;&gt;type Product =&lt;br /&gt;&amp;#160;&amp;#160;{Id: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Price: decimal;}&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs145&quot;&gt;val create : id:int -&amp;gt; name:string -&amp;gt; price:decimal -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.ProductModule.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs146&quot;&gt;val withName : newName:string -&amp;gt; product:Product -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.ProductModule.withName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs147&quot;&gt;val withPrice : newPrice:decimal -&amp;gt; product:Product -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.ProductModule.withPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs148&quot;&gt;val getById : id:&amp;#39;a -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;b option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.getById&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs149&quot;&gt;val getAll : db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;b list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.getAll&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs150&quot;&gt;val containsId : id:&amp;#39;a -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.containsId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs151&quot;&gt;val nextId : db:Map&amp;lt;int,&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.nextId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs152&quot;&gt;val insert : key:&amp;#39;a -&amp;gt; value:&amp;#39;b -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.insert&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs153&quot;&gt;val delete : id:&amp;#39;a -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.delete&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs154&quot;&gt;val update : key:&amp;#39;a -&amp;gt; value:&amp;#39;b -&amp;gt; db:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.update&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs155&quot;&gt;val updateId : f:(&amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; key:&amp;#39;b -&amp;gt; db:Map&amp;lt;&amp;#39;b,&amp;#39;a&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;b,&amp;#39;a&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.DB.updateId&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs156&quot;&gt;Multiple items&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs157&quot;&gt;type Command =&lt;br /&gt;&amp;#160;&amp;#160;| Invalid of string&lt;br /&gt;&amp;#160;&amp;#160;| Show&lt;br /&gt;&amp;#160;&amp;#160;| ShowProduct of int&lt;br /&gt;&amp;#160;&amp;#160;| NewName of int * string&lt;br /&gt;&amp;#160;&amp;#160;| NewPrice of int * decimal&lt;br /&gt;&amp;#160;&amp;#160;| Insert of name: string * price: decimal&lt;br /&gt;&amp;#160;&amp;#160;| Delete of int&lt;br /&gt;&amp;#160;&amp;#160;| Exit&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.Command&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs158&quot;&gt;val parseCommand : input:string -&amp;gt; Command&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.parseCommand&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs159&quot;&gt;active recognizer LC: string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.( |LC| )&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs160&quot;&gt;active recognizer Int: string -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.( |Int|_| )&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs161&quot;&gt;Multiple items&lt;br /&gt;active recognizer Decimal: string -&amp;gt; decimal option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.( |Decimal|_| )&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Decimal =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;new : value:int -&amp;gt; decimal + 7 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : value:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val Zero : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val One : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinusOne : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : decimal&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;Decimal()&lt;br /&gt;Decimal(value: int) : unit&lt;br /&gt;Decimal(value: uint32) : unit&lt;br /&gt;Decimal(value: int64) : unit&lt;br /&gt;Decimal(value: uint64) : unit&lt;br /&gt;Decimal(value: float32) : unit&lt;br /&gt;Decimal(value: float) : unit&lt;br /&gt;Decimal(bits: int []) : unit&lt;br /&gt;Decimal(lo: int, mid: int, hi: int, isNegative: bool, scale: byte) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs162&quot;&gt;val printProduct : product:Product -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.printProduct&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs163&quot;&gt;val show : db:Map&amp;lt;&amp;#39;a,Product&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;a,Product&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs164&quot;&gt;module DB&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs165&quot;&gt;val showProduct : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; id:int -&amp;gt; Map&amp;lt;int,Product&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.showProduct&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs166&quot;&gt;val insert : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; name:string -&amp;gt; price:decimal -&amp;gt; Map&amp;lt;int,Product&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.insert&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs167&quot;&gt;Multiple items&lt;br /&gt;module Product&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Product =&lt;br /&gt;&amp;#160;&amp;#160;{Id: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Price: decimal;}&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs168&quot;&gt;val updateName : db:Map&amp;lt;&amp;#39;a,Product&amp;gt; -&amp;gt; id:&amp;#39;a -&amp;gt; newName:string -&amp;gt; Map&amp;lt;&amp;#39;a,Product&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.updateName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs169&quot;&gt;val updatePrice : db:Map&amp;lt;&amp;#39;a,Product&amp;gt; -&amp;gt; id:&amp;#39;a -&amp;gt; newPrice:decimal -&amp;gt; Map&amp;lt;&amp;#39;a,Product&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.updatePrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs170&quot;&gt;val executeCommand : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; command:Command -&amp;gt; Map&amp;lt;int,Product&amp;gt; option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.executeCommand&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs171&quot;&gt;val eval : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; str:string -&amp;gt; Map&amp;lt;int,Product&amp;gt; option&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.CLI.eval&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs172&quot;&gt;val main : db:Map&amp;lt;int,Product&amp;gt; -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs173&quot;&gt;module CLI&lt;br /&gt;&lt;br /&gt;from 2016-04-11-optionals&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs174&quot;&gt;val storage : Map&amp;lt;int,Product&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: 2016-04-11-optionals.storage&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>From mutable loops to immutable folds</title>
   <link href="https://sidburn.github.io/blog/2016/04/05/mutable-loops-to-immutability"/>
   <updated>2016-04-05T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/04/05/mutable-loops-to-immutability</id>
   <content type="html">&lt;p&gt;When we ask of &lt;em&gt;key-features&lt;/em&gt; of functional programming, you will probably hear two things most often.
Immutability and recursion. But why is that so? As Immutability also becomes more important in OO
languages you will probably find a lot of reason for that one, but why are recursive
functions so important? The short answer is, because of Immutability! To understand the connection
between those, let's start with some code that uses loops with mutation.&lt;/p&gt;
&lt;h2&gt;ResizeArray&lt;/h2&gt;
&lt;p&gt;Let's start with &lt;code&gt;ResizeArray&lt;/code&gt;, and let's implement a &lt;code&gt;map&lt;/code&gt; for it. The interesting idea,
even if we have a &lt;em&gt;mutable data-structures&lt;/em&gt; we still can write functions that behaves as
if we had &lt;em&gt;immutable data&lt;/em&gt;. That means, we return new data, instead of &lt;em&gt;mutating&lt;/em&gt; data.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;t&quot;&gt;ResizeArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;oldArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;newArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 7)&quot; onmouseover=&quot;showTip(event, 'fs2', 7)&quot; class=&quot;t&quot;&gt;ResizeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;_&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;()
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;i&quot;&gt;oldArray&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs6', 10)&quot; onmouseover=&quot;showTip(event, 'fs6', 10)&quot; class=&quot;i&quot;&gt;newArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 11)&quot; onmouseover=&quot;showTip(event, 'fs8', 11)&quot; class=&quot;f&quot;&gt;Add&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 12)&quot; onmouseover=&quot;showTip(event, 'fs4', 12)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
        &lt;span onmouseout=&quot;hideTip(event, 'fs6', 14)&quot; onmouseover=&quot;showTip(event, 'fs6', 14)&quot; class=&quot;i&quot;&gt;newArray&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we can do stuff like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 15)&quot; onmouseover=&quot;showTip(event, 'fs9', 15)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 16)&quot; onmouseover=&quot;showTip(event, 'fs10', 16)&quot; class=&quot;t&quot;&gt;ResizeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;_&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 17)&quot; onmouseover=&quot;showTip(event, 'fs9', 17)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 18)&quot; onmouseover=&quot;showTip(event, 'fs11', 18)&quot; class=&quot;f&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 20)&quot; onmouseover=&quot;showTip(event, 'fs11', 20)&quot; class=&quot;f&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 21)&quot; onmouseover=&quot;showTip(event, 'fs9', 21)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 22)&quot; onmouseover=&quot;showTip(event, 'fs11', 22)&quot; class=&quot;f&quot;&gt;Add&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 23)&quot; onmouseover=&quot;showTip(event, 'fs12', 23)&quot; class=&quot;i&quot;&gt;squaredNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 24)&quot; onmouseover=&quot;showTip(event, 'fs10', 24)&quot; class=&quot;t&quot;&gt;ResizeArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 25)&quot; onmouseover=&quot;showTip(event, 'fs3', 25)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 26)&quot; onmouseover=&quot;showTip(event, 'fs13', 26)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 27)&quot; onmouseover=&quot;showTip(event, 'fs13', 27)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 28)&quot; onmouseover=&quot;showTip(event, 'fs13', 28)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs9', 29)&quot; onmouseover=&quot;showTip(event, 'fs9', 29)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have two &lt;code&gt;ResizeArray&lt;/code&gt;. &lt;code&gt;numbers&lt;/code&gt; still contains &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; while &lt;code&gt;squaredNumbers&lt;/code&gt;
contains &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;9&lt;/code&gt;. So while this behaves like &lt;em&gt;immutability&lt;/em&gt;, it still isn't exactly
&lt;em&gt;immutable&lt;/em&gt;. We also see that in the &lt;code&gt;map&lt;/code&gt; implementation. In &lt;code&gt;map&lt;/code&gt; we first create
an empty &lt;em&gt;mutable&lt;/em&gt; &lt;code&gt;newArray&lt;/code&gt;. While we loop over &lt;code&gt;oldArray&lt;/code&gt; we &lt;em&gt;mutate&lt;/em&gt; &lt;code&gt;newArray&lt;/code&gt; by adding
the result of the transformation &lt;code&gt;f x&lt;/code&gt; to &lt;code&gt;newArray&lt;/code&gt;. But the only reason why we could do that
is because &lt;code&gt;newArray&lt;/code&gt; is &lt;em&gt;mutable&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;But what do we do if we have a true &lt;em&gt;immutable list&lt;/em&gt; like the built-in F# list? We cannot start with
an &lt;code&gt;empty list&lt;/code&gt; just loop over &lt;code&gt;oldArray&lt;/code&gt; and directly add an element to the empty list. We only can
prepend elements, but this would create a whole new list and not &lt;em&gt;mutate&lt;/em&gt; the empty list.&lt;/p&gt;
&lt;p&gt;Sure we can assign the new list to a new variable inside the loop. But this doesn't make much sense
as with the next iteration we will lose our newly created list. The thing is, looping always need
some kind of &lt;em&gt;mutable&lt;/em&gt; variable outside of the loop that we can &lt;em&gt;mutate&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Actually F# supports &lt;em&gt;mutable variables&lt;/em&gt; so as a quick fix we could define a &lt;em&gt;mutable variable&lt;/em&gt;
outside the loop.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 30)&quot; onmouseover=&quot;showTip(event, 'fs14', 30)&quot; class=&quot;f&quot;&gt;mapWithImmutableList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 31)&quot; onmouseover=&quot;showTip(event, 'fs4', 31)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 32)&quot; onmouseover=&quot;showTip(event, 'fs15', 32)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;_ &lt;span onmouseout=&quot;hideTip(event, 'fs15', 33)&quot; onmouseover=&quot;showTip(event, 'fs15', 33)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 34)&quot; onmouseover=&quot;showTip(event, 'fs16', 34)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 35)&quot; onmouseover=&quot;showTip(event, 'fs7', 35)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 36)&quot; onmouseover=&quot;showTip(event, 'fs15', 36)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs16', 37)&quot; onmouseover=&quot;showTip(event, 'fs16', 37)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 38)&quot; onmouseover=&quot;showTip(event, 'fs4', 38)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 39)&quot; onmouseover=&quot;showTip(event, 'fs7', 39)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 40)&quot; onmouseover=&quot;showTip(event, 'fs16', 40)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs16', 41)&quot; onmouseover=&quot;showTip(event, 'fs16', 41)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It doesn't mean we created a &lt;em&gt;mutable list&lt;/em&gt; here. We still only have &lt;em&gt;immutable lists&lt;/em&gt;.
But &lt;code&gt;acc&lt;/code&gt; itself is &lt;em&gt;mutable&lt;/em&gt; and can be changed to point to a new &lt;em&gt;immutable list&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;(f x) :: acc&lt;/code&gt; we always create a whole new &lt;em&gt;immutable list&lt;/em&gt; by using the &lt;code&gt;acc&lt;/code&gt;
from the previous &lt;em&gt;loop iteration&lt;/em&gt;. So &lt;code&gt;acc&lt;/code&gt; only keeps track of the &lt;em&gt;last or newest&lt;/em&gt;
&lt;code&gt;acc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This implementation still has a problem as we will also &lt;em&gt;reverse&lt;/em&gt; the list. The problem
is that we only can &lt;em&gt;prepend&lt;/em&gt; elements to a list and not &lt;em&gt;append&lt;/em&gt; them.&lt;/p&gt;
&lt;p&gt;But on top, we still relaying on &lt;em&gt;mutable&lt;/em&gt; variables. Let's first forget about the &lt;em&gt;reverse&lt;/em&gt;
problem. Here we see a general problem. Looping needs &lt;em&gt;mutable&lt;/em&gt; variables! Sure, we
also can do just some &lt;em&gt;side-effects&lt;/em&gt; and don't &lt;em&gt;mutate&lt;/em&gt; anything, but whenever you really
want to compute something you are forced to use &lt;em&gt;mutation&lt;/em&gt; if you choose a loop.&lt;/p&gt;
&lt;p&gt;Looping constructs in general just don't work nicely together with &lt;em&gt;immuability&lt;/em&gt;. That's also
the reason why looping is discouraged in functional programming. But it opens up the
question how we solve the problems that &lt;em&gt;looping&lt;/em&gt; solves. How can we for example go through an
&lt;em&gt;immutable list&lt;/em&gt; without &lt;em&gt;looping&lt;/em&gt;? And how can we compute something with every element
without accessing a &lt;em&gt;mutable variable&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;The answer is: Through recursion!&lt;/p&gt;
&lt;h2&gt;Looping with recursion&lt;/h2&gt;
&lt;p&gt;To understand how we can replace loops through recursion, let's start with something simple. We
start with a typical &lt;code&gt;for&lt;/code&gt; loop as you can see with &lt;code&gt;C#&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; i+&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) {
    Console.WriteLine(&lt;span class=&quot;s&quot;&gt;&quot;{0}&quot;&lt;/span&gt;, i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;If we really appreciate &lt;em&gt;immutability&lt;/em&gt; we cannot directly create such a looping construct.
Because such a &lt;code&gt;for&lt;/code&gt; loop relies on mutating &lt;code&gt;i&lt;/code&gt; after every step. But it doesn't mean we can
calculate &lt;code&gt;i + 1&lt;/code&gt;. We can increment &lt;code&gt;i&lt;/code&gt;, but we have to assign the result to a new variable.
Technically we could expand the looping construct into separate statements.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 42)&quot; onmouseover=&quot;showTip(event, 'fs17', 42)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs18', 43)&quot; onmouseover=&quot;showTip(event, 'fs18', 43)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 44)&quot; onmouseover=&quot;showTip(event, 'fs17', 44)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 45)&quot; onmouseover=&quot;showTip(event, 'fs19', 45)&quot; class=&quot;i&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 46)&quot; onmouseover=&quot;showTip(event, 'fs17', 46)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs18', 47)&quot; onmouseover=&quot;showTip(event, 'fs18', 47)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 48)&quot; onmouseover=&quot;showTip(event, 'fs19', 48)&quot; class=&quot;i&quot;&gt;i1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 49)&quot; onmouseover=&quot;showTip(event, 'fs20', 49)&quot; class=&quot;i&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 50)&quot; onmouseover=&quot;showTip(event, 'fs19', 50)&quot; class=&quot;i&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs18', 51)&quot; onmouseover=&quot;showTip(event, 'fs18', 51)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 52)&quot; onmouseover=&quot;showTip(event, 'fs20', 52)&quot; class=&quot;i&quot;&gt;i2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 53)&quot; onmouseover=&quot;showTip(event, 'fs21', 53)&quot; class=&quot;i&quot;&gt;i3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 54)&quot; onmouseover=&quot;showTip(event, 'fs20', 54)&quot; class=&quot;i&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs18', 55)&quot; onmouseover=&quot;showTip(event, 'fs18', 55)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 56)&quot; onmouseover=&quot;showTip(event, 'fs21', 56)&quot; class=&quot;i&quot;&gt;i3&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Sure, writing stuff like that is simple stupid. We don't want to increment &lt;code&gt;i&lt;/code&gt; ten times, always
create a new variable, and a new print statement. But it is still interesting that the idea
is the same with our first &lt;code&gt;map&lt;/code&gt; implementation we did for &lt;code&gt;ResizeArray&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We always create a new &lt;em&gt;immutable state&lt;/em&gt;, by using the previous state. And that is where functions
come into play. Actually we are not limited to just assign the result of a calculation just to a
variable. We also can pass the result to a function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 57)&quot; onmouseover=&quot;showTip(event, 'fs22', 57)&quot; class=&quot;i&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 58)&quot; onmouseover=&quot;showTip(event, 'fs22', 58)&quot; class=&quot;i&quot;&gt;calc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;or better, we can do it in one step.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is an important idea. It just means that when we call a function, it is also an assign statement
at the same time! With this idea, we can actually create a looping construct just out of functions.
Instead of mutating &lt;code&gt;i&lt;/code&gt; at the end of a loop and repeating our loop. We just call our function
recursively and pass it the next state as an argument!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 59)&quot; onmouseover=&quot;showTip(event, 'fs23', 59)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 60)&quot; onmouseover=&quot;showTip(event, 'fs24', 60)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs18', 61)&quot; onmouseover=&quot;showTip(event, 'fs18', 61)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 62)&quot; onmouseover=&quot;showTip(event, 'fs24', 62)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs23', 63)&quot; onmouseover=&quot;showTip(event, 'fs23', 63)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 64)&quot; onmouseover=&quot;showTip(event, 'fs24', 64)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs23', 65)&quot; onmouseover=&quot;showTip(event, 'fs23', 65)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// infinity loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Sure, we now have another problem, as we currently have an infinity loop. We now &lt;em&gt;always&lt;/em&gt; call &lt;code&gt;loop i+1&lt;/code&gt;.
So we have to add some condition when we really want to loop.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 66)&quot; onmouseover=&quot;showTip(event, 'fs25', 66)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 67)&quot; onmouseover=&quot;showTip(event, 'fs24', 67)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 68)&quot; onmouseover=&quot;showTip(event, 'fs24', 68)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs18', 69)&quot; onmouseover=&quot;showTip(event, 'fs18', 69)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 70)&quot; onmouseover=&quot;showTip(event, 'fs24', 70)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs25', 71)&quot; onmouseover=&quot;showTip(event, 'fs25', 71)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 72)&quot; onmouseover=&quot;showTip(event, 'fs24', 72)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs25', 73)&quot; onmouseover=&quot;showTip(event, 'fs25', 73)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Will now print numbers from 0 to 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's abstract it further. Instead of hard coding &lt;code&gt;10&lt;/code&gt; we want to provide the end as an argument.
Additionally, we also want to be able to execute &lt;em&gt;any code&lt;/em&gt; &lt;em&gt;inside our loop&lt;/em&gt; iteration, instead
of hard-coding the &lt;em&gt;print-statement&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 74)&quot; onmouseover=&quot;showTip(event, 'fs26', 74)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 75)&quot; onmouseover=&quot;showTip(event, 'fs24', 75)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 76)&quot; onmouseover=&quot;showTip(event, 'fs27', 76)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 77)&quot; onmouseover=&quot;showTip(event, 'fs28', 77)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 78)&quot; onmouseover=&quot;showTip(event, 'fs24', 78)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 79)&quot; onmouseover=&quot;showTip(event, 'fs27', 79)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs28', 80)&quot; onmouseover=&quot;showTip(event, 'fs28', 80)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 81)&quot; onmouseover=&quot;showTip(event, 'fs24', 81)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs26', 82)&quot; onmouseover=&quot;showTip(event, 'fs26', 82)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 83)&quot; onmouseover=&quot;showTip(event, 'fs24', 83)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs27', 84)&quot; onmouseover=&quot;showTip(event, 'fs27', 84)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 85)&quot; onmouseover=&quot;showTip(event, 'fs28', 85)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs26', 86)&quot; onmouseover=&quot;showTip(event, 'fs26', 86)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 87)&quot; onmouseover=&quot;showTip(event, 'fs24', 87)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 88)&quot; onmouseover=&quot;showTip(event, 'fs18', 88)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 89)&quot; onmouseover=&quot;showTip(event, 'fs24', 89)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now basically recreated a &lt;code&gt;for&lt;/code&gt; loop through a recursive function! We just can provide
the starting and the stop value and just provide a function for the &lt;em&gt;loop-body&lt;/em&gt; that describes
what should be done at every step. The current &lt;code&gt;i&lt;/code&gt; is just passed as an argument to our function
&lt;code&gt;f&lt;/code&gt;. This way we can do something with the value.&lt;/p&gt;
&lt;p&gt;Let's improve that solution a little bit. It feels a little bit awkward that we have
to provide &lt;code&gt;stop&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; again as arguments. We can fix this problem by just creating a special
&lt;code&gt;loop&lt;/code&gt; function inside &lt;code&gt;forLoop&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 90)&quot; onmouseover=&quot;showTip(event, 'fs29', 90)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 91)&quot; onmouseover=&quot;showTip(event, 'fs30', 91)&quot; class=&quot;i&quot;&gt;start&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 92)&quot; onmouseover=&quot;showTip(event, 'fs27', 92)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 93)&quot; onmouseover=&quot;showTip(event, 'fs28', 93)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 94)&quot; onmouseover=&quot;showTip(event, 'fs31', 94)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 95)&quot; onmouseover=&quot;showTip(event, 'fs24', 95)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 96)&quot; onmouseover=&quot;showTip(event, 'fs24', 96)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 97)&quot; onmouseover=&quot;showTip(event, 'fs27', 97)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs28', 98)&quot; onmouseover=&quot;showTip(event, 'fs28', 98)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 99)&quot; onmouseover=&quot;showTip(event, 'fs24', 99)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs31', 100)&quot; onmouseover=&quot;showTip(event, 'fs31', 100)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 101)&quot; onmouseover=&quot;showTip(event, 'fs24', 101)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
    &lt;span onmouseout=&quot;hideTip(event, 'fs31', 102)&quot; onmouseover=&quot;showTip(event, 'fs31', 102)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 103)&quot; onmouseover=&quot;showTip(event, 'fs30', 103)&quot; class=&quot;i&quot;&gt;start&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs29', 104)&quot; onmouseover=&quot;showTip(event, 'fs29', 104)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 105)&quot; onmouseover=&quot;showTip(event, 'fs24', 105)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 106)&quot; onmouseover=&quot;showTip(event, 'fs18', 106)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 107)&quot; onmouseover=&quot;showTip(event, 'fs24', 107)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our &lt;code&gt;forLoop&lt;/code&gt; function is not a recursive function any more, instead it contains a recursive &lt;code&gt;loop&lt;/code&gt;
function. &lt;code&gt;loop&lt;/code&gt; only contains those variables as arguments that we really expect to change.&lt;/p&gt;
&lt;p&gt;This has several advantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt; itself is easier and nearly resembles the first &lt;code&gt;loop&lt;/code&gt; we started with.&lt;/li&gt;
&lt;li&gt;
We don't need to pass variables like &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;stop&lt;/code&gt; to the recursive call as we don't expect
them to change.
&lt;/li&gt;
&lt;li&gt;
This reduces the possibility of bugs as we cannot change variables that we didn't expect to change.
For example, previously we could write: &lt;code&gt;forLoop (i+1) (stop+1) f&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
In other cases it also means we can &lt;em&gt;pre-&lt;/em&gt; or &lt;em&gt;post-process&lt;/em&gt; data before or after the loop
starts/finish.
&lt;/li&gt;
&lt;li&gt;
Sometimes we just want to provide a fixed starting value. For example in a &lt;code&gt;sum&lt;/code&gt; function
we provide &lt;code&gt;0&lt;/code&gt; as the starting value. We don't want that the user must enter &lt;code&gt;0&lt;/code&gt; as a
starting value for the recursion call!
&lt;/li&gt;
&lt;li&gt;
Different names for arguments. For example our &lt;code&gt;forLoop&lt;/code&gt; now has &lt;code&gt;start&lt;/code&gt; instead of &lt;code&gt;i&lt;/code&gt;. But
it doesn't make sense to use &lt;code&gt;start&lt;/code&gt; inside of &lt;code&gt;loop&lt;/code&gt;. Clearer names can help in understanding
code. But it also helps users of &lt;code&gt;forEach&lt;/code&gt;. As they now see &lt;code&gt;start&lt;/code&gt; as an argument, not &lt;code&gt;i&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The only problem so far is that we only can call functions that do some sort of side-effect.
But we cannot for example create something new out of the looping. For example if we want to
create the sum of all numbers from 0 to 9 we could write something like this in C#&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; sum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; i+&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) {
    sum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; i;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;But we now know how to fix that problem. We just add &lt;code&gt;sum&lt;/code&gt; to the &lt;code&gt;loop&lt;/code&gt; function
as this is a value that we expect to change with every &lt;em&gt;iteration&lt;/em&gt;. On top our function &lt;code&gt;f&lt;/code&gt; must
change. In the body of a loop we have access to &lt;code&gt;i&lt;/code&gt; and access to &lt;code&gt;sum&lt;/code&gt; outside of the loop.
With recursion we only get access to those data that we pass to the &lt;code&gt;f&lt;/code&gt; function. So we also must
pass &lt;code&gt;sum&lt;/code&gt; as an argument to our &lt;code&gt;f&lt;/code&gt; function. As we cannot &lt;em&gt;mutate&lt;/em&gt; &lt;code&gt;sum&lt;/code&gt; inside &lt;code&gt;f&lt;/code&gt; we expect that
&lt;code&gt;f&lt;/code&gt; returns the new &lt;code&gt;sum&lt;/code&gt; that we then use for the next &lt;em&gt;recursive call&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 108)&quot; onmouseover=&quot;showTip(event, 'fs32', 108)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 109)&quot; onmouseover=&quot;showTip(event, 'fs30', 109)&quot; class=&quot;i&quot;&gt;start&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 110)&quot; onmouseover=&quot;showTip(event, 'fs27', 110)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 111)&quot; onmouseover=&quot;showTip(event, 'fs33', 111)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 112)&quot; onmouseover=&quot;showTip(event, 'fs34', 112)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 113)&quot; onmouseover=&quot;showTip(event, 'fs24', 113)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 114)&quot; onmouseover=&quot;showTip(event, 'fs35', 114)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 115)&quot; onmouseover=&quot;showTip(event, 'fs24', 115)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 116)&quot; onmouseover=&quot;showTip(event, 'fs27', 116)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// create the next sum&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 117)&quot; onmouseover=&quot;showTip(event, 'fs36', 117)&quot; class=&quot;i&quot;&gt;nextSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 118)&quot; onmouseover=&quot;showTip(event, 'fs33', 118)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 119)&quot; onmouseover=&quot;showTip(event, 'fs24', 119)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 120)&quot; onmouseover=&quot;showTip(event, 'fs35', 120)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// next recursive call with updated &amp;quot;i&amp;quot; and &amp;quot;sum&amp;quot;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs34', 121)&quot; onmouseover=&quot;showTip(event, 'fs34', 121)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 122)&quot; onmouseover=&quot;showTip(event, 'fs24', 122)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs36', 123)&quot; onmouseover=&quot;showTip(event, 'fs36', 123)&quot; class=&quot;i&quot;&gt;nextSum&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Return &amp;quot;sum&amp;quot; as soon we reach stop&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs35', 124)&quot; onmouseover=&quot;showTip(event, 'fs35', 124)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs34', 125)&quot; onmouseover=&quot;showTip(event, 'fs34', 125)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 126)&quot; onmouseover=&quot;showTip(event, 'fs30', 126)&quot; class=&quot;i&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 127)&quot; onmouseover=&quot;showTip(event, 'fs37', 127)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 128)&quot; onmouseover=&quot;showTip(event, 'fs32', 128)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 129)&quot; onmouseover=&quot;showTip(event, 'fs24', 129)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 130)&quot; onmouseover=&quot;showTip(event, 'fs35', 130)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 131)&quot; onmouseover=&quot;showTip(event, 'fs35', 131)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 132)&quot; onmouseover=&quot;showTip(event, 'fs24', 132)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The only thing I dislike at this point is that the usage of our &lt;code&gt;forLoop&lt;/code&gt; is still limited. We have
the signature.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 133)&quot; onmouseover=&quot;showTip(event, 'fs38', 133)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 134)&quot; onmouseover=&quot;showTip(event, 'fs38', 134)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 135)&quot; onmouseover=&quot;showTip(event, 'fs38', 135)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 136)&quot; onmouseover=&quot;showTip(event, 'fs38', 136)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 137)&quot; onmouseover=&quot;showTip(event, 'fs38', 137)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 138)&quot; onmouseover=&quot;showTip(event, 'fs38', 138)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It makes sense that &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; are &lt;code&gt;int&lt;/code&gt;. But usually we expect that the &lt;em&gt;looping-body&lt;/em&gt; (&lt;code&gt;f&lt;/code&gt;)
can work with any type. Or in other words, that &lt;code&gt;sum&lt;/code&gt; can be of any type. And that a &lt;code&gt;forLoop&lt;/code&gt;
also can return any type. But currently we are limited to &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is an &lt;code&gt;int&lt;/code&gt; because we call &lt;code&gt;loop start 0&lt;/code&gt; and directly pass &lt;code&gt;0&lt;/code&gt; (an &lt;code&gt;int&lt;/code&gt;) as &lt;code&gt;sum&lt;/code&gt;.
It makes more sense that the user can provide the &lt;em&gt;initial-value&lt;/em&gt;. And &lt;code&gt;f&lt;/code&gt; just returns a new value
of the same type. This way, the &lt;em&gt;initial-value&lt;/em&gt; can be generic.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 139)&quot; onmouseover=&quot;showTip(event, 'fs39', 139)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 140)&quot; onmouseover=&quot;showTip(event, 'fs30', 140)&quot; class=&quot;i&quot;&gt;start&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 141)&quot; onmouseover=&quot;showTip(event, 'fs27', 141)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 142)&quot; onmouseover=&quot;showTip(event, 'fs40', 142)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 143)&quot; onmouseover=&quot;showTip(event, 'fs41', 143)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 144)&quot; onmouseover=&quot;showTip(event, 'fs42', 144)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 145)&quot; onmouseover=&quot;showTip(event, 'fs24', 145)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 146)&quot; onmouseover=&quot;showTip(event, 'fs43', 146)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 147)&quot; onmouseover=&quot;showTip(event, 'fs24', 147)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 148)&quot; onmouseover=&quot;showTip(event, 'fs27', 148)&quot; class=&quot;i&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 149)&quot; onmouseover=&quot;showTip(event, 'fs44', 149)&quot; class=&quot;i&quot;&gt;nextAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 150)&quot; onmouseover=&quot;showTip(event, 'fs41', 150)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 151)&quot; onmouseover=&quot;showTip(event, 'fs24', 151)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 152)&quot; onmouseover=&quot;showTip(event, 'fs43', 152)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs42', 153)&quot; onmouseover=&quot;showTip(event, 'fs42', 153)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 154)&quot; onmouseover=&quot;showTip(event, 'fs24', 154)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs44', 155)&quot; onmouseover=&quot;showTip(event, 'fs44', 155)&quot; class=&quot;i&quot;&gt;nextAcc&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs43', 156)&quot; onmouseover=&quot;showTip(event, 'fs43', 156)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs42', 157)&quot; onmouseover=&quot;showTip(event, 'fs42', 157)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 158)&quot; onmouseover=&quot;showTip(event, 'fs30', 158)&quot; class=&quot;i&quot;&gt;start&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 159)&quot; onmouseover=&quot;showTip(event, 'fs40', 159)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 160)&quot; onmouseover=&quot;showTip(event, 'fs37', 160)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 161)&quot; onmouseover=&quot;showTip(event, 'fs39', 161)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 162)&quot; onmouseover=&quot;showTip(event, 'fs24', 162)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 163)&quot; onmouseover=&quot;showTip(event, 'fs35', 163)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 164)&quot; onmouseover=&quot;showTip(event, 'fs35', 164)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 165)&quot; onmouseover=&quot;showTip(event, 'fs24', 165)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have the signature:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 166)&quot; onmouseover=&quot;showTip(event, 'fs38', 166)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 167)&quot; onmouseover=&quot;showTip(event, 'fs38', 167)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 168)&quot; onmouseover=&quot;showTip(event, 'fs38', 168)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now created a &lt;code&gt;forLoop&lt;/code&gt; just with recursion and without any &lt;em&gt;mutable variable&lt;/em&gt;. Our loop supports
the creation of any value. The function &lt;code&gt;f&lt;/code&gt; just returns the next state (&lt;code&gt;acc&lt;/code&gt;) that is used for
the next &lt;em&gt;iteration/recursion&lt;/em&gt; and we don't need any &lt;em&gt;mutable variable&lt;/em&gt; anymore.&lt;/p&gt;
&lt;p&gt;We now can create any type not just &lt;code&gt;int&lt;/code&gt;. We could for example build another list from it in
an &lt;em&gt;immutable&lt;/em&gt; way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 169)&quot; onmouseover=&quot;showTip(event, 'fs45', 169)&quot; class=&quot;i&quot;&gt;listOfNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 170)&quot; onmouseover=&quot;showTip(event, 'fs39', 170)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; [] (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 171)&quot; onmouseover=&quot;showTip(event, 'fs24', 171)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 172)&quot; onmouseover=&quot;showTip(event, 'fs46', 172)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 173)&quot; onmouseover=&quot;showTip(event, 'fs24', 173)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 174)&quot; onmouseover=&quot;showTip(event, 'fs46', 174)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// [9;8;7;6;5;4;3;2;1;0]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Or build a string&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 175)&quot; onmouseover=&quot;showTip(event, 'fs47', 175)&quot; class=&quot;i&quot;&gt;stringofNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 176)&quot; onmouseover=&quot;showTip(event, 'fs39', 176)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 177)&quot; onmouseover=&quot;showTip(event, 'fs24', 177)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 178)&quot; onmouseover=&quot;showTip(event, 'fs48', 178)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 179)&quot; onmouseover=&quot;showTip(event, 'fs48', 179)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs49', 180)&quot; onmouseover=&quot;showTip(event, 'fs49', 180)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 181)&quot; onmouseover=&quot;showTip(event, 'fs24', 181)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;))
&lt;span class=&quot;c&quot;&gt;// &amp;quot;0123456789&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Or start with a value and just repeatedly call a function on it&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 182)&quot; onmouseover=&quot;showTip(event, 'fs50', 182)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 183)&quot; onmouseover=&quot;showTip(event, 'fs51', 183)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 184)&quot; onmouseover=&quot;showTip(event, 'fs39', 184)&quot; class=&quot;f&quot;&gt;forLoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 185)&quot; onmouseover=&quot;showTip(event, 'fs50', 185)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 186)&quot; onmouseover=&quot;showTip(event, 'fs24', 186)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 187)&quot; onmouseover=&quot;showTip(event, 'fs52', 187)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 188)&quot; onmouseover=&quot;showTip(event, 'fs52', 188)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// 3.125&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Creating an immutable &lt;code&gt;foreach&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;So far we only looped over numbers. But usually we want to loop over whole &lt;em&gt;data-structures&lt;/em&gt;.
In C# we have &lt;code&gt;foreach&lt;/code&gt; for this kind of idea. For example we can loop over a list in this way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; sum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; ( &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; list ) {
    sum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sum &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; x;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We now want to do the same but with an &lt;em&gt;immutable F# list&lt;/em&gt; instead, so how do we loop an
&lt;em&gt;immutable list&lt;/em&gt;? Actually the only thing we can do with a F# list is either prepend some element
or use pattern matching to extract values from the beginning.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 189)&quot; onmouseover=&quot;showTip(event, 'fs53', 189)&quot; class=&quot;i&quot;&gt;numbers1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 190)&quot; onmouseover=&quot;showTip(event, 'fs54', 190)&quot; class=&quot;i&quot;&gt;numbers2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 191)&quot; onmouseover=&quot;showTip(event, 'fs53', 191)&quot; class=&quot;i&quot;&gt;numbers1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs55', 192)&quot; onmouseover=&quot;showTip(event, 'fs55', 192)&quot; class=&quot;i&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs56', 193)&quot; onmouseover=&quot;showTip(event, 'fs56', 193)&quot; class=&quot;i&quot;&gt;tail&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 194)&quot; onmouseover=&quot;showTip(event, 'fs54', 194)&quot; class=&quot;i&quot;&gt;numbers2&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs55', 195)&quot; onmouseover=&quot;showTip(event, 'fs55', 195)&quot; class=&quot;i&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 196)&quot; onmouseover=&quot;showTip(event, 'fs56', 196)&quot; class=&quot;i&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// [2;3;4;5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Doing the extraction with a &lt;code&gt;let&lt;/code&gt; is usually discouraged because such an operation could fail.
If we have an empty list for example we couldn't extract the first element of a list
(and the code throws an exception). With Pattern matching we can specify multiple cases that we
can check. But as you already can imagine again. This must be recursive again! Because we
repeatedly want to extract one element from &lt;code&gt;tail&lt;/code&gt; and we sure don't want to write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs57', 197)&quot; onmouseover=&quot;showTip(event, 'fs57', 197)&quot; class=&quot;i&quot;&gt;head1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs58', 198)&quot; onmouseover=&quot;showTip(event, 'fs58', 198)&quot; class=&quot;i&quot;&gt;tail1&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 199)&quot; onmouseover=&quot;showTip(event, 'fs54', 199)&quot; class=&quot;i&quot;&gt;numbers2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 1 [2;3;4;5]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs59', 200)&quot; onmouseover=&quot;showTip(event, 'fs59', 200)&quot; class=&quot;i&quot;&gt;head2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs60', 201)&quot; onmouseover=&quot;showTip(event, 'fs60', 201)&quot; class=&quot;i&quot;&gt;tail2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 202)&quot; onmouseover=&quot;showTip(event, 'fs58', 202)&quot; class=&quot;i&quot;&gt;tail1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 2 [3;4;5]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs61', 203)&quot; onmouseover=&quot;showTip(event, 'fs61', 203)&quot; class=&quot;i&quot;&gt;head3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs62', 204)&quot; onmouseover=&quot;showTip(event, 'fs62', 204)&quot; class=&quot;i&quot;&gt;tail3&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 205)&quot; onmouseover=&quot;showTip(event, 'fs60', 205)&quot; class=&quot;i&quot;&gt;tail2&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 3 [4;5]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// and so on ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And on top, we need an exit condition. We want to end as soon we end up with an empty list for &lt;code&gt;tail&lt;/code&gt;.
Now let's do the same stuff we did with our &lt;code&gt;forLoop&lt;/code&gt;. We expect some &lt;em&gt;initial value&lt;/em&gt; that we can
specify as an &lt;em&gt;accumulator&lt;/em&gt;. The &lt;code&gt;f&lt;/code&gt; function now just gets the list element and our &lt;em&gt;accumulator&lt;/em&gt;.
Once we end up with an empty list, we just return the &lt;em&gt;accumulator&lt;/em&gt;. We call this function &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 206)&quot; onmouseover=&quot;showTip(event, 'fs63', 206)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 207)&quot; onmouseover=&quot;showTip(event, 'fs64', 207)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs65', 208)&quot; onmouseover=&quot;showTip(event, 'fs65', 208)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs15', 209)&quot; onmouseover=&quot;showTip(event, 'fs15', 209)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 210)&quot; onmouseover=&quot;showTip(event, 'fs66', 210)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 211)&quot; onmouseover=&quot;showTip(event, 'fs67', 211)&quot; class=&quot;i&quot;&gt;remainingList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 212)&quot; onmouseover=&quot;showTip(event, 'fs65', 212)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 213)&quot; onmouseover=&quot;showTip(event, 'fs67', 213)&quot; class=&quot;i&quot;&gt;remainingList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | []         &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 214)&quot; onmouseover=&quot;showTip(event, 'fs65', 214)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// We return &amp;quot;acc&amp;quot; when we reached the end of the list&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs68', 215)&quot; onmouseover=&quot;showTip(event, 'fs68', 215)&quot; class=&quot;i&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs69', 216)&quot; onmouseover=&quot;showTip(event, 'fs69', 216)&quot; class=&quot;i&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;// extract first element of remainingList&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 217)&quot; onmouseover=&quot;showTip(event, 'fs70', 217)&quot; class=&quot;i&quot;&gt;nextAcc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 218)&quot; onmouseover=&quot;showTip(event, 'fs64', 218)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 219)&quot; onmouseover=&quot;showTip(event, 'fs65', 219)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 220)&quot; onmouseover=&quot;showTip(event, 'fs68', 220)&quot; class=&quot;i&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Compute the next accumulator&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs66', 221)&quot; onmouseover=&quot;showTip(event, 'fs66', 221)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 222)&quot; onmouseover=&quot;showTip(event, 'fs69', 222)&quot; class=&quot;i&quot;&gt;tail&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 223)&quot; onmouseover=&quot;showTip(event, 'fs70', 223)&quot; class=&quot;i&quot;&gt;nextAcc&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// Recurse with remaining list &amp;quot;tail&amp;quot; and &amp;quot;nextAcc&amp;quot;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs66', 224)&quot; onmouseover=&quot;showTip(event, 'fs66', 224)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 225)&quot; onmouseover=&quot;showTip(event, 'fs15', 225)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 226)&quot; onmouseover=&quot;showTip(event, 'fs65', 226)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I also changed the order of the arguments compared to the &lt;code&gt;forEach&lt;/code&gt; function. Now &lt;code&gt;f&lt;/code&gt; comes first
followed by &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;list&lt;/code&gt;. Summing a list of &lt;code&gt;int&lt;/code&gt;s can now be written as:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 227)&quot; onmouseover=&quot;showTip(event, 'fs37', 227)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 228)&quot; onmouseover=&quot;showTip(event, 'fs63', 228)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 229)&quot; onmouseover=&quot;showTip(event, 'fs71', 229)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 230)&quot; onmouseover=&quot;showTip(event, 'fs13', 230)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 231)&quot; onmouseover=&quot;showTip(event, 'fs71', 231)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 232)&quot; onmouseover=&quot;showTip(event, 'fs13', 232)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, what is &lt;code&gt;fold&lt;/code&gt; exactly? &lt;code&gt;fold&lt;/code&gt; is just the idea of looping through a &lt;em&gt;data-structure&lt;/em&gt;
in an &lt;em&gt;immutable way&lt;/em&gt;. Instead of accessing a &lt;em&gt;mutable variable&lt;/em&gt; that you access and &lt;em&gt;mutate&lt;/em&gt; while
you are looping, you provide a function as the &lt;em&gt;loop-body&lt;/em&gt; and an &lt;em&gt;initial-accumulator&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In looping you then have access to the current element and a &lt;em&gt;mutable variable&lt;/em&gt; that you can
modify. In &lt;code&gt;fold&lt;/code&gt; your &lt;code&gt;f&lt;/code&gt; function you get the current element and the last state as
function arguments. Instead of &lt;em&gt;mutating&lt;/em&gt; a variable outside of a loop. In &lt;code&gt;fold&lt;/code&gt; you just
return the new state that will be used for the next recursive call.&lt;/p&gt;
&lt;p&gt;Your &lt;em&gt;accumulator&lt;/em&gt; will be returned as a result once you traversed all elements of
your data-structure.&lt;/p&gt;
&lt;h2&gt;Creating &lt;code&gt;map&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we abstracted the recursive looping in it's own function, we don't need to write a
recursive loop function anymore to traverse a list! We just can use &lt;code&gt;fold&lt;/code&gt; for this purpose.&lt;/p&gt;
&lt;p&gt;A first attempt to build &lt;code&gt;map&lt;/code&gt; could look like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 233)&quot; onmouseover=&quot;showTip(event, 'fs72', 233)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 234)&quot; onmouseover=&quot;showTip(event, 'fs4', 234)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 235)&quot; onmouseover=&quot;showTip(event, 'fs15', 235)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs63', 236)&quot; onmouseover=&quot;showTip(event, 'fs63', 236)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 237)&quot; onmouseover=&quot;showTip(event, 'fs73', 237)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 238)&quot; onmouseover=&quot;showTip(event, 'fs7', 238)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// foreach (var x in list )&lt;/span&gt;
        (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 239)&quot; onmouseover=&quot;showTip(event, 'fs4', 239)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 240)&quot; onmouseover=&quot;showTip(event, 'fs7', 240)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 241)&quot; onmouseover=&quot;showTip(event, 'fs73', 241)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;//     nextAcc &amp;lt;- (f x) :: acc&lt;/span&gt;
    ) [] &lt;span onmouseout=&quot;hideTip(event, 'fs15', 242)&quot; onmouseover=&quot;showTip(event, 'fs15', 242)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;// Start with &amp;quot;[]&amp;quot; as &amp;quot;acc&amp;quot; and go through &amp;quot;list&amp;quot;&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs72', 243)&quot; onmouseover=&quot;showTip(event, 'fs72', 243)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 244)&quot; onmouseover=&quot;showTip(event, 'fs13', 244)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 245)&quot; onmouseover=&quot;showTip(event, 'fs13', 245)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;0..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;]
&lt;span class=&quot;c&quot;&gt;// [18; 16; 14; 12; 10; 8; 6; 4; 2; 0]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we still have the same problem as in the beginning. The list is reversed because we &lt;em&gt;prepend&lt;/em&gt;
and not &lt;em&gt;append&lt;/em&gt; elements. As we cannot &lt;em&gt;append&lt;/em&gt; we have to provide another solution.&lt;/p&gt;
&lt;p&gt;Besides a &lt;code&gt;fold&lt;/code&gt; we usually also provide a &lt;code&gt;foldBack&lt;/code&gt;. A &lt;code&gt;foldBack&lt;/code&gt; just traverses a data-structure
backwards or from &lt;em&gt;right-to-left&lt;/em&gt; instead of &lt;em&gt;left-to-right&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But we also cannot easily go through a list backwards, an easy fix to this problem is when we
implement &lt;code&gt;foldBack&lt;/code&gt; by first &lt;em&gt;reversing&lt;/em&gt; the input list and then use &lt;code&gt;fold&lt;/code&gt; on it. After we
have &lt;code&gt;foldBack&lt;/code&gt; we can define &lt;code&gt;map&lt;/code&gt; with &lt;code&gt;foldBack&lt;/code&gt; instead of &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Reverses a List&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 246)&quot; onmouseover=&quot;showTip(event, 'fs74', 246)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 247)&quot; onmouseover=&quot;showTip(event, 'fs15', 247)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 248)&quot; onmouseover=&quot;showTip(event, 'fs63', 248)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 249)&quot; onmouseover=&quot;showTip(event, 'fs75', 249)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 250)&quot; onmouseover=&quot;showTip(event, 'fs7', 250)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 251)&quot; onmouseover=&quot;showTip(event, 'fs7', 251)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 252)&quot; onmouseover=&quot;showTip(event, 'fs75', 252)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [] &lt;span onmouseout=&quot;hideTip(event, 'fs15', 253)&quot; onmouseover=&quot;showTip(event, 'fs15', 253)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// foldBack loops through the list from the end to start&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 254)&quot; onmouseover=&quot;showTip(event, 'fs76', 254)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 255)&quot; onmouseover=&quot;showTip(event, 'fs77', 255)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 256)&quot; onmouseover=&quot;showTip(event, 'fs15', 256)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs65', 257)&quot; onmouseover=&quot;showTip(event, 'fs65', 257)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs63', 258)&quot; onmouseover=&quot;showTip(event, 'fs63', 258)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 259)&quot; onmouseover=&quot;showTip(event, 'fs65', 259)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 260)&quot; onmouseover=&quot;showTip(event, 'fs7', 260)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 261)&quot; onmouseover=&quot;showTip(event, 'fs77', 261)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 262)&quot; onmouseover=&quot;showTip(event, 'fs7', 262)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 263)&quot; onmouseover=&quot;showTip(event, 'fs65', 263)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 264)&quot; onmouseover=&quot;showTip(event, 'fs65', 264)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 265)&quot; onmouseover=&quot;showTip(event, 'fs74', 265)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 266)&quot; onmouseover=&quot;showTip(event, 'fs15', 266)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// map defined in terms of foldBack&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 267)&quot; onmouseover=&quot;showTip(event, 'fs72', 267)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 268)&quot; onmouseover=&quot;showTip(event, 'fs4', 268)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 269)&quot; onmouseover=&quot;showTip(event, 'fs15', 269)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs76', 270)&quot; onmouseover=&quot;showTip(event, 'fs76', 270)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 271)&quot; onmouseover=&quot;showTip(event, 'fs7', 271)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 272)&quot; onmouseover=&quot;showTip(event, 'fs73', 272)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 273)&quot; onmouseover=&quot;showTip(event, 'fs4', 273)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 274)&quot; onmouseover=&quot;showTip(event, 'fs7', 274)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 275)&quot; onmouseover=&quot;showTip(event, 'fs73', 275)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs15', 276)&quot; onmouseover=&quot;showTip(event, 'fs15', 276)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; []

&lt;span class=&quot;c&quot;&gt;// Now we get the right result&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 277)&quot; onmouseover=&quot;showTip(event, 'fs78', 277)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 278)&quot; onmouseover=&quot;showTip(event, 'fs72', 278)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 279)&quot; onmouseover=&quot;showTip(event, 'fs13', 279)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 280)&quot; onmouseover=&quot;showTip(event, 'fs13', 280)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;]
&lt;span class=&quot;c&quot;&gt;// [2; 4; 6; 8; 10; 12; 14; 16; 18]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably you wonder why we choose different argument orders for &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; including the
arguments for the &lt;code&gt;f&lt;/code&gt; function. In &lt;code&gt;fold&lt;/code&gt; we first have &lt;code&gt;acc&lt;/code&gt; then &lt;code&gt;x&lt;/code&gt;, in &lt;code&gt;foldBack&lt;/code&gt; it is reversed.
&lt;code&gt;x&lt;/code&gt; then &lt;code&gt;acc&lt;/code&gt;. The reason is, the position of &lt;code&gt;acc&lt;/code&gt; &lt;em&gt;resembles&lt;/em&gt; the order how we traverse the list.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;fold&lt;/code&gt; we go from left to right. We start with the initial &lt;code&gt;acc&lt;/code&gt;, we extract the first value
from our list and we somehow &lt;em&gt;combine&lt;/em&gt; it with the already present &lt;code&gt;acc&lt;/code&gt;. Let's visualize the
steps that code like this do:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 281)&quot; onmouseover=&quot;showTip(event, 'fs37', 281)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 282)&quot; onmouseover=&quot;showTip(event, 'fs63', 282)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 283)&quot; onmouseover=&quot;showTip(event, 'fs71', 283)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 284)&quot; onmouseover=&quot;showTip(event, 'fs13', 284)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 285)&quot; onmouseover=&quot;showTip(event, 'fs71', 285)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 286)&quot; onmouseover=&quot;showTip(event, 'fs13', 286)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; | &lt;span onmouseout=&quot;hideTip(event, 'fs79', 287)&quot; onmouseover=&quot;showTip(event, 'fs79', 287)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;        | &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-----------------------------&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;   | [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] | &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;   | [&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]   | &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;   | [&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]     | &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;   | [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]       | &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;  | [&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]         | &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;  | []          | &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we use &lt;code&gt;foldBack&lt;/code&gt; we get the same result, but we go from right to left.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 288)&quot; onmouseover=&quot;showTip(event, 'fs37', 288)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 289)&quot; onmouseover=&quot;showTip(event, 'fs76', 289)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 290)&quot; onmouseover=&quot;showTip(event, 'fs13', 290)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 291)&quot; onmouseover=&quot;showTip(event, 'fs71', 291)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 292)&quot; onmouseover=&quot;showTip(event, 'fs13', 292)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 293)&quot; onmouseover=&quot;showTip(event, 'fs71', 293)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs79', 294)&quot; onmouseover=&quot;showTip(event, 'fs79', 294)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;        | &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; | &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---------------------------&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] | &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;   | &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
  [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] | &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;   | &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
    [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] | &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;   | &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;
      [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;] | &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;  | &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;
        [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;] | &lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;  | &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;
         [] | &lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;  | &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;That's why we use &lt;code&gt;acc x&lt;/code&gt; in &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;x acc&lt;/code&gt; in &lt;code&gt;foldBack&lt;/code&gt;. For summing numbers this
doesn't make any difference, but for other operations like &lt;code&gt;map&lt;/code&gt; it does!&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;length&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;iter&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt; and &lt;code&gt;collect&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let's create some more functions. As an exercise you also can try to first implement
those functions yourself.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Length&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 295)&quot; onmouseover=&quot;showTip(event, 'fs80', 295)&quot; class=&quot;f&quot;&gt;length&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 296)&quot; onmouseover=&quot;showTip(event, 'fs81', 296)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs63', 297)&quot; onmouseover=&quot;showTip(event, 'fs63', 297)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 298)&quot; onmouseover=&quot;showTip(event, 'fs71', 298)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 299)&quot; onmouseover=&quot;showTip(event, 'fs7', 299)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 300)&quot; onmouseover=&quot;showTip(event, 'fs71', 300)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 301)&quot; onmouseover=&quot;showTip(event, 'fs81', 301)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs80', 302)&quot; onmouseover=&quot;showTip(event, 'fs80', 302)&quot; class=&quot;f&quot;&gt;length&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Filter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 303)&quot; onmouseover=&quot;showTip(event, 'fs82', 303)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 304)&quot; onmouseover=&quot;showTip(event, 'fs83', 304)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 305)&quot; onmouseover=&quot;showTip(event, 'fs81', 305)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs76', 306)&quot; onmouseover=&quot;showTip(event, 'fs76', 306)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 307)&quot; onmouseover=&quot;showTip(event, 'fs7', 307)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 308)&quot; onmouseover=&quot;showTip(event, 'fs75', 308)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 309)&quot; onmouseover=&quot;showTip(event, 'fs83', 309)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 310)&quot; onmouseover=&quot;showTip(event, 'fs7', 310)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 311)&quot; onmouseover=&quot;showTip(event, 'fs7', 311)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 312)&quot; onmouseover=&quot;showTip(event, 'fs75', 312)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 313)&quot; onmouseover=&quot;showTip(event, 'fs75', 313)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs81', 314)&quot; onmouseover=&quot;showTip(event, 'fs81', 314)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; []

&lt;span onmouseout=&quot;hideTip(event, 'fs82', 315)&quot; onmouseover=&quot;showTip(event, 'fs82', 315)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 316)&quot; onmouseover=&quot;showTip(event, 'fs13', 316)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 317)&quot; onmouseover=&quot;showTip(event, 'fs13', 317)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [2;4;6;8;10]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Iter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 318)&quot; onmouseover=&quot;showTip(event, 'fs84', 318)&quot; class=&quot;f&quot;&gt;iter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 319)&quot; onmouseover=&quot;showTip(event, 'fs85', 319)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 320)&quot; onmouseover=&quot;showTip(event, 'fs81', 320)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs63', 321)&quot; onmouseover=&quot;showTip(event, 'fs63', 321)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 322)&quot; onmouseover=&quot;showTip(event, 'fs86', 322)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 323)&quot; onmouseover=&quot;showTip(event, 'fs7', 323)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 324)&quot; onmouseover=&quot;showTip(event, 'fs85', 324)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 325)&quot; onmouseover=&quot;showTip(event, 'fs7', 325)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) () &lt;span onmouseout=&quot;hideTip(event, 'fs81', 326)&quot; onmouseover=&quot;showTip(event, 'fs81', 326)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs84', 327)&quot; onmouseover=&quot;showTip(event, 'fs84', 327)&quot; class=&quot;f&quot;&gt;iter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 328)&quot; onmouseover=&quot;showTip(event, 'fs13', 328)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 329)&quot; onmouseover=&quot;showTip(event, 'fs18', 329)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 330)&quot; onmouseover=&quot;showTip(event, 'fs13', 330)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// Prints numbers 1 to 5 on a line&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Append&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 331)&quot; onmouseover=&quot;showTip(event, 'fs87', 331)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 332)&quot; onmouseover=&quot;showTip(event, 'fs81', 332)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 333)&quot; onmouseover=&quot;showTip(event, 'fs88', 333)&quot; class=&quot;i&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs76', 334)&quot; onmouseover=&quot;showTip(event, 'fs76', 334)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 335)&quot; onmouseover=&quot;showTip(event, 'fs7', 335)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 336)&quot; onmouseover=&quot;showTip(event, 'fs75', 336)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 337)&quot; onmouseover=&quot;showTip(event, 'fs7', 337)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 338)&quot; onmouseover=&quot;showTip(event, 'fs75', 338)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs81', 339)&quot; onmouseover=&quot;showTip(event, 'fs81', 339)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 340)&quot; onmouseover=&quot;showTip(event, 'fs88', 340)&quot; class=&quot;i&quot;&gt;ys&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs87', 341)&quot; onmouseover=&quot;showTip(event, 'fs87', 341)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// concat&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs89', 342)&quot; onmouseover=&quot;showTip(event, 'fs89', 342)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 343)&quot; onmouseover=&quot;showTip(event, 'fs90', 343)&quot; class=&quot;i&quot;&gt;lol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs63', 344)&quot; onmouseover=&quot;showTip(event, 'fs63', 344)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 345)&quot; onmouseover=&quot;showTip(event, 'fs75', 345)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 346)&quot; onmouseover=&quot;showTip(event, 'fs91', 346)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 347)&quot; onmouseover=&quot;showTip(event, 'fs87', 347)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 348)&quot; onmouseover=&quot;showTip(event, 'fs75', 348)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 349)&quot; onmouseover=&quot;showTip(event, 'fs91', 349)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) [] &lt;span onmouseout=&quot;hideTip(event, 'fs90', 350)&quot; onmouseover=&quot;showTip(event, 'fs90', 350)&quot; class=&quot;i&quot;&gt;lol&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs89', 351)&quot; onmouseover=&quot;showTip(event, 'fs89', 351)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; [[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;]; [&lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;8&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;]] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6;7;8;9]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// collect&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 352)&quot; onmouseover=&quot;showTip(event, 'fs92', 352)&quot; class=&quot;f&quot;&gt;collect&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 353)&quot; onmouseover=&quot;showTip(event, 'fs93', 353)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 354)&quot; onmouseover=&quot;showTip(event, 'fs81', 354)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs72', 355)&quot; onmouseover=&quot;showTip(event, 'fs72', 355)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 356)&quot; onmouseover=&quot;showTip(event, 'fs93', 356)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 357)&quot; onmouseover=&quot;showTip(event, 'fs81', 357)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs89', 358)&quot; onmouseover=&quot;showTip(event, 'fs89', 358)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs92', 359)&quot; onmouseover=&quot;showTip(event, 'fs92', 359)&quot; class=&quot;f&quot;&gt;collect&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 360)&quot; onmouseover=&quot;showTip(event, 'fs13', 360)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs13', 361)&quot; onmouseover=&quot;showTip(event, 'fs13', 361)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 362)&quot; onmouseover=&quot;showTip(event, 'fs13', 362)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 363)&quot; onmouseover=&quot;showTip(event, 'fs13', 363)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;]) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;From the implementation i think only &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt; and &lt;code&gt;collect&lt;/code&gt; are interesting.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;append&lt;/code&gt; you see that you don't have to start from an empty list. Appending two list basically
means you prepend the first list to the second list by going backwards through the first list. So
the second list is your starting &lt;em&gt;accumulator&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;append&lt;/code&gt; in place, &lt;code&gt;concat&lt;/code&gt; becomes easy. As you just repeatedly append two lists to a single
one.&lt;/p&gt;
&lt;p&gt;And once you have &lt;code&gt;concat&lt;/code&gt;, it is also pretty easy to implement &lt;code&gt;collect&lt;/code&gt; through &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;concat&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We first started with some loops that modifies &lt;em&gt;mutable variables&lt;/em&gt;. In order to get rid of &lt;em&gt;mutable&lt;/em&gt;
variables or to work with &lt;em&gt;immutable data-structures&lt;/em&gt; we need recursion. Without &lt;em&gt;recursion&lt;/em&gt;
it is basically impossible to effectively work with &lt;em&gt;immutable data-structures&lt;/em&gt;. But this doesn't mean
we always have to write recursive functions.&lt;/p&gt;
&lt;p&gt;We start by implementing a &lt;code&gt;fold&lt;/code&gt; function that does the same thing as a &lt;code&gt;foreach&lt;/code&gt; loop just in
an &lt;em&gt;immutable&lt;/em&gt; way. With &lt;code&gt;fold&lt;/code&gt; we abstracted the &lt;em&gt;recursive looping&lt;/em&gt; in it's own function.
New functions can now be implemented on top of &lt;code&gt;fold&lt;/code&gt; or the function we created with &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;em&gt;recursion&lt;/em&gt; is indeed an important aspect of functional programming, as we just need it to
work with &lt;em&gt;immutable data&lt;/em&gt;. It doesn't mean we should use &lt;em&gt;recursion&lt;/em&gt; all over the place. The use
of &lt;em&gt;recursion&lt;/em&gt; is often a sign that we lack abstraction.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lorgonblog.wordpress.com/2008/04/05/catamorphisms-part-one/&quot;&gt;Catamorphisms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/series/recursive-types-and-folds.html&quot;&gt;Recursive Types and Folds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/F_Sharp_Programming/Lists&quot;&gt;Wikibook - Lists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;type ResizeArray&amp;lt;&amp;#39;T&amp;gt; = System.Collections.Generic.List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.ResizeArray&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val map : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; oldArray:seq&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; System.Collections.Generic.List&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.ResizeArray.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val oldArray : seq&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val newArray : System.Collections.Generic.List&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;System.Collections.Generic.List.Add(item: &amp;#39;b) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val numbers : System.Collections.Generic.List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;Multiple items&lt;br /&gt;module ResizeArray&lt;br /&gt;&lt;br /&gt;from Main&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type ResizeArray&amp;lt;&amp;#39;T&amp;gt; = System.Collections.Generic.List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.ResizeArray&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;System.Collections.Generic.List.Add(item: int) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val squaredNumbers : System.Collections.Generic.List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.squaredNumbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val mapWithImmutableList : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.mapWithImmutableList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;a list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val mutable acc : &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val i : int&lt;br /&gt;&lt;br /&gt;Full name: Main.i&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val i1 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.i1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val i2 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.i2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val i3 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.i3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val calc : int&lt;br /&gt;&lt;br /&gt;Full name: mutableloopstoimmutability.calc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val loop : i:int -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.loop&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val i : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val loop : i:int -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.loop&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val forLoop : i:int -&amp;gt; stop:int -&amp;gt; f:(int -&amp;gt; unit) -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.forLoop&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val stop : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val f : (int -&amp;gt; unit)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val forLoop : start:int -&amp;gt; stop:int -&amp;gt; f:(int -&amp;gt; unit) -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.forLoop&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val start : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val loop : (int -&amp;gt; unit)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val forLoop : start:int -&amp;gt; stop:int -&amp;gt; f:(int -&amp;gt; int -&amp;gt; int) -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.forLoop&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val f : (int -&amp;gt; int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val loop : (int -&amp;gt; int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val sum : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val nextSum : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val sum : int&lt;br /&gt;&lt;br /&gt;Full name: Main.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val forLoop : start:int -&amp;gt; stop:int -&amp;gt; init:&amp;#39;a -&amp;gt; f:(int -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.forLoop&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val init : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val f : (int -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val loop : (int -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val acc : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val nextAcc : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val listOfNumbers : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.listOfNumbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;Multiple items&lt;br /&gt;val list : int list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val stringofNumbers : string&lt;br /&gt;&lt;br /&gt;Full name: Main.stringofNumbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val x : float&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val y : float&lt;br /&gt;&lt;br /&gt;Full name: Main.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val x : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val numbers1 : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val numbers2 : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val head : int&lt;br /&gt;&lt;br /&gt;Full name: Main.head&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val tail : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.tail&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val head1 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.head1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val tail1 : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.tail1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val head2 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.head2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val tail2 : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.tail2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val head3 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.head3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val tail3 : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.tail3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val fold : f:(&amp;#39;State -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;State) -&amp;gt; acc:&amp;#39;State -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val f : (&amp;#39;State -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val acc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val loop : (&amp;#39;a list -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val remainingList : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val head : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val tail : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val nextAcc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val map : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val acc : &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val rev : list:&amp;#39;a list -&amp;gt; &amp;#39;a list&lt;br /&gt;&lt;br /&gt;Full name: Main.rev&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val acc : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val foldBack : f:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;a list -&amp;gt; acc:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val numbers : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val length : xs:&amp;#39;a list -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.length&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val xs : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val filter : predicate:(&amp;#39;a -&amp;gt; bool) -&amp;gt; xs:&amp;#39;a list -&amp;gt; &amp;#39;a list&lt;br /&gt;&lt;br /&gt;Full name: Main.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val predicate : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val iter : f:(&amp;#39;a -&amp;gt; unit) -&amp;gt; xs:&amp;#39;a list -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.iter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val f : (&amp;#39;a -&amp;gt; unit)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;val acc : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val append : xs:&amp;#39;a list -&amp;gt; ys:&amp;#39;a list -&amp;gt; &amp;#39;a list&lt;br /&gt;&lt;br /&gt;Full name: Main.append&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;val ys : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;val concat : lol:&amp;#39;a list list -&amp;gt; &amp;#39;a list&lt;br /&gt;&lt;br /&gt;Full name: Main.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;val lol : &amp;#39;a list list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;val x : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;val collect : f:(&amp;#39;a -&amp;gt; &amp;#39;b list) -&amp;gt; xs:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.collect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b list)&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding bind</title>
   <link href="https://sidburn.github.io/blog/2016/04/03/understanding-bind"/>
   <updated>2016-04-03T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/04/03/understanding-bind</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;/blog/2016/03/27/understanding-map&quot;&gt;Understanding map&lt;/a&gt; we learned that implementing
a &lt;code&gt;map&lt;/code&gt; function is what we call a &lt;em&gt;Functor&lt;/em&gt;. In &lt;a href=&quot;/blog/2016/03/31/applicative-functors&quot;&gt;Understanding apply&lt;/a&gt;
we extended that idea with the &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; function and we call the result an &lt;em&gt;Applicative Functor&lt;/em&gt;.
The next important function in our toolset is the &lt;code&gt;bind&lt;/code&gt; function.&lt;/p&gt;
&lt;h2&gt;Monads&lt;/h2&gt;
&lt;p&gt;The combination of &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; is what we call a Monad. But currently
I will not consider this as an introduction to Monads at all. If you heard the &lt;em&gt;Monad&lt;/em&gt; term and
search for an introduction to understand what a &lt;em&gt;Monad&lt;/em&gt; is you will not find an answer her. If
you already have some basic understanding about the term than this and my two previous blogs
can help to understand the concept. Otherwise if you just try to understand what a &lt;em&gt;Monad&lt;/em&gt; is
I recommend the following link to understand the problem:
&lt;a href=&quot;http://two-wrongs.com/the-what-are-monads-fallacy&quot;&gt;The what are Monads Fallacy&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;I think it is always good to start with a problem. If we understand a problem first, we usually
have it easier to understand why we are doing something. Currently we have &lt;code&gt;map&lt;/code&gt; to upgrade functions with
one argument, with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; we could upgrade functions with multiple arguments. So
what is &lt;code&gt;bind&lt;/code&gt; supposed to do?&lt;/p&gt;
&lt;p&gt;Up to this point we only upgraded functions that had normal unboxed input and output types. We always
faced functions like &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt;, but never functions like &lt;code&gt;'a -&amp;gt; option&amp;lt;'b&amp;gt;&lt;/code&gt;, &lt;code&gt;'a -&amp;gt; Async&amp;lt;'b&amp;gt;&lt;/code&gt;
or &lt;code&gt;'a -&amp;gt; list&amp;lt;'b&amp;gt;&lt;/code&gt;. But in practice, the latter are quite common.&lt;/p&gt;
&lt;p&gt;A simple example is a function that tries to parse a &lt;code&gt;string&lt;/code&gt; to a &lt;code&gt;float&lt;/code&gt;. Because parsing of
a string to a float could fail we usually expect a return type like &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;. Usually we
create a &lt;code&gt;Double&lt;/code&gt; extension for this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Note: .NET System.Double is &amp;quot;float&amp;quot;   in F# and &amp;quot;double&amp;quot; in C#.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//       .NET System.Single is &amp;quot;float32&amp;quot; in F# and &amp;quot;float&amp;quot;  in C#.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;t&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 6)&quot; onmouseover=&quot;showTip(event, 'fs3', 6)&quot; class=&quot;t&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 7)&quot; onmouseover=&quot;showTip(event, 'fs6', 7)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 8)&quot; onmouseover=&quot;showTip(event, 'fs5', 8)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
        | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs8', 10)&quot; onmouseover=&quot;showTip(event, 'fs8', 10)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 11)&quot; onmouseover=&quot;showTip(event, 'fs9', 11)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 12)&quot; onmouseover=&quot;showTip(event, 'fs8', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have a function &lt;code&gt;Double.tryParse&lt;/code&gt; with the signature.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 13)&quot; onmouseover=&quot;showTip(event, 'fs10', 13)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 14)&quot; onmouseover=&quot;showTip(event, 'fs11', 14)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 15)&quot; onmouseover=&quot;showTip(event, 'fs12', 15)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I will call such functions &lt;em&gt;Monadic functions&lt;/em&gt; from now on. All &lt;em&gt;Monadic functions&lt;/em&gt; expect
normal input arguments, but return a boxed type, like &lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt;, &lt;code&gt;list&amp;lt;'a&amp;gt;&lt;/code&gt;, &lt;code&gt;Async&amp;lt;'a&amp;gt;&lt;/code&gt;
and so on.&lt;/p&gt;
&lt;p&gt;The problem with such functions is that we cannot easily upgrade them like other functions. For example,
let's assume we have a &lt;code&gt;option&amp;lt;string&amp;gt;&lt;/code&gt;, and now we want to pass this value to &lt;code&gt;Double.tryParse&lt;/code&gt;.
As &lt;code&gt;tryParse&lt;/code&gt; only expects &lt;code&gt;string&lt;/code&gt; we could &lt;code&gt;Option.map&lt;/code&gt; &lt;code&gt;tryParse&lt;/code&gt; so it could work with
a &lt;code&gt;option&amp;lt;string&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;map&lt;/code&gt; not only adds a &lt;code&gt;option&lt;/code&gt; &lt;em&gt;layer&lt;/em&gt; to the input, it also adds it to the output. When we
use &lt;code&gt;Option.map&lt;/code&gt; on our &lt;code&gt;Double.tryParse&lt;/code&gt; function, we get a function that looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 16)&quot; onmouseover=&quot;showTip(event, 'fs11', 16)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 17)&quot; onmouseover=&quot;showTip(event, 'fs10', 17)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 18)&quot; onmouseover=&quot;showTip(event, 'fs11', 18)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 19)&quot; onmouseover=&quot;showTip(event, 'fs11', 19)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 20)&quot; onmouseover=&quot;showTip(event, 'fs12', 20)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The problem is that our &lt;em&gt;output&lt;/em&gt; is wrapped two times in the same layer. Now we have a
&lt;em&gt;option containing an option containing a float&lt;/em&gt;. But what we really want is just an &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;.
This is where &lt;code&gt;bind&lt;/code&gt; comes into the play. The purpose of &lt;code&gt;bind&lt;/code&gt; is to only &lt;em&gt;upgrade&lt;/em&gt; the input of a
function because the output of a function already returns an upgraded type. A &lt;code&gt;bind&lt;/code&gt; function thus
always have the &lt;em&gt;type-signature&lt;/em&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 21)&quot; onmouseover=&quot;showTip(event, 'fs11', 21)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 22)&quot; onmouseover=&quot;showTip(event, 'fs11', 22)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 23)&quot; onmouseover=&quot;showTip(event, 'fs11', 23)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 24)&quot; onmouseover=&quot;showTip(event, 'fs13', 24)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;)   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 25)&quot; onmouseover=&quot;showTip(event, 'fs13', 25)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 26)&quot; onmouseover=&quot;showTip(event, 'fs13', 26)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 27)&quot; onmouseover=&quot;showTip(event, 'fs14', 27)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;)  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 28)&quot; onmouseover=&quot;showTip(event, 'fs14', 28)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 29)&quot; onmouseover=&quot;showTip(event, 'fs14', 29)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;code&gt;return&lt;/code&gt; once again&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;bind&lt;/code&gt; function don't stands on it's own. We also need a &lt;code&gt;return&lt;/code&gt; function. But we
already covered this function in &lt;a href=&quot;/blog/2016/03/31/applicative-functors&quot;&gt;Understanding apply&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Implementing &lt;code&gt;bind&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We can implement &lt;code&gt;bind&lt;/code&gt; in two different ways. It is good to know both as depending on which type we
have, sometimes the one or the other can be easier.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
The obvious way. You directly write a &lt;code&gt;bind&lt;/code&gt; function that is similar to &lt;code&gt;map&lt;/code&gt;, but instead
of wrapping the output, you just return the output of the function as-is.
&lt;/li&gt;
&lt;li&gt;
You first write a &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt; or &lt;code&gt;flatten&lt;/code&gt; function (The exact name of such a function
usually depends on the type you have). The idea of such a function is to resolve two
boxed types just into a single box. After this you just &lt;code&gt;map&lt;/code&gt; and then &lt;code&gt;join&lt;/code&gt; the result
to create &lt;code&gt;bind&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;option&lt;/code&gt; type has the advantage that both implementations are easy, so let's look at how we could
implement &lt;code&gt;bind&lt;/code&gt; for &lt;code&gt;Option&lt;/code&gt; in both ways.&lt;/p&gt;
&lt;h3&gt;The direct way&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;direct&lt;/em&gt; way can sometimes be nearly identical to &lt;code&gt;map&lt;/code&gt;. Let's look at the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;
implementation side-by-side.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 30)&quot; onmouseover=&quot;showTip(event, 'fs15', 30)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 31)&quot; onmouseover=&quot;showTip(event, 'fs16', 31)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 32)&quot; onmouseover=&quot;showTip(event, 'fs17', 32)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 33)&quot; onmouseover=&quot;showTip(event, 'fs17', 33)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs7', 34)&quot; onmouseover=&quot;showTip(event, 'fs7', 34)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 35)&quot; onmouseover=&quot;showTip(event, 'fs7', 35)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 36)&quot; onmouseover=&quot;showTip(event, 'fs9', 36)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 37)&quot; onmouseover=&quot;showTip(event, 'fs18', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 38)&quot; onmouseover=&quot;showTip(event, 'fs9', 38)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 39)&quot; onmouseover=&quot;showTip(event, 'fs16', 39)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 40)&quot; onmouseover=&quot;showTip(event, 'fs18', 40)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 41)&quot; onmouseover=&quot;showTip(event, 'fs19', 41)&quot; class=&quot;f&quot;&gt;bindOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 42)&quot; onmouseover=&quot;showTip(event, 'fs20', 42)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 43)&quot; onmouseover=&quot;showTip(event, 'fs17', 43)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 44)&quot; onmouseover=&quot;showTip(event, 'fs17', 44)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs7', 45)&quot; onmouseover=&quot;showTip(event, 'fs7', 45)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 46)&quot; onmouseover=&quot;showTip(event, 'fs7', 46)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 47)&quot; onmouseover=&quot;showTip(event, 'fs9', 47)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 48)&quot; onmouseover=&quot;showTip(event, 'fs18', 48)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 49)&quot; onmouseover=&quot;showTip(event, 'fs20', 49)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 50)&quot; onmouseover=&quot;showTip(event, 'fs18', 50)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, both functions are nearly identical. The only difference is that we just do &lt;code&gt;f x&lt;/code&gt; instead
of &lt;code&gt;Some (f x)&lt;/code&gt;. We don't need to wrap the output in a &lt;code&gt;Some&lt;/code&gt; because our function &lt;code&gt;f&lt;/code&gt; already returns
an &lt;code&gt;option&lt;/code&gt;. So we just return it's output directly.&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;join&lt;/code&gt; way&lt;/h3&gt;
&lt;p&gt;The other way is to first implement a new function that can turn a &lt;code&gt;option&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; just into a
&lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt;. That's also quite easy. We first check our outer-most &lt;code&gt;option&lt;/code&gt;. If it is &lt;code&gt;None&lt;/code&gt;
we just return &lt;code&gt;None&lt;/code&gt;. In the &lt;code&gt;Some&lt;/code&gt; case we have another option that we directly return.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 51)&quot; onmouseover=&quot;showTip(event, 'fs21', 51)&quot; class=&quot;f&quot;&gt;joinOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 52)&quot; onmouseover=&quot;showTip(event, 'fs22', 52)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 53)&quot; onmouseover=&quot;showTip(event, 'fs22', 53)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs7', 54)&quot; onmouseover=&quot;showTip(event, 'fs7', 54)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 55)&quot; onmouseover=&quot;showTip(event, 'fs7', 55)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs9', 56)&quot; onmouseover=&quot;showTip(event, 'fs9', 56)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 57)&quot; onmouseover=&quot;showTip(event, 'fs23', 57)&quot; class=&quot;i&quot;&gt;innerOpt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 58)&quot; onmouseover=&quot;showTip(event, 'fs23', 58)&quot; class=&quot;i&quot;&gt;innerOpt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we create &lt;code&gt;bind&lt;/code&gt; by just using &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; the result.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 59)&quot; onmouseover=&quot;showTip(event, 'fs24', 59)&quot; class=&quot;f&quot;&gt;bindOption2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 60)&quot; onmouseover=&quot;showTip(event, 'fs20', 60)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 61)&quot; onmouseover=&quot;showTip(event, 'fs17', 61)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 62)&quot; onmouseover=&quot;showTip(event, 'fs21', 62)&quot; class=&quot;f&quot;&gt;joinOption&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 63)&quot; onmouseover=&quot;showTip(event, 'fs15', 63)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 64)&quot; onmouseover=&quot;showTip(event, 'fs20', 64)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 65)&quot; onmouseover=&quot;showTip(event, 'fs17', 65)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Simple usage&lt;/h3&gt;
&lt;p&gt;Let's test both functions and compare it with a &lt;code&gt;map&lt;/code&gt; call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 66)&quot; onmouseover=&quot;showTip(event, 'fs25', 66)&quot; class=&quot;i&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 67)&quot; onmouseover=&quot;showTip(event, 'fs9', 67)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abcde&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 68)&quot; onmouseover=&quot;showTip(event, 'fs19', 68)&quot; class=&quot;f&quot;&gt;bindOption&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs3', 69)&quot; onmouseover=&quot;showTip(event, 'fs3', 69)&quot; class=&quot;t&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 70)&quot; onmouseover=&quot;showTip(event, 'fs26', 70)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 71)&quot; onmouseover=&quot;showTip(event, 'fs27', 71)&quot; class=&quot;i&quot;&gt;input2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 72)&quot; onmouseover=&quot;showTip(event, 'fs9', 72)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 73)&quot; onmouseover=&quot;showTip(event, 'fs24', 73)&quot; class=&quot;f&quot;&gt;bindOption2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 74)&quot; onmouseover=&quot;showTip(event, 'fs3', 74)&quot; class=&quot;t&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 75)&quot; onmouseover=&quot;showTip(event, 'fs26', 75)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// Some 100.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 76)&quot; onmouseover=&quot;showTip(event, 'fs28', 76)&quot; class=&quot;i&quot;&gt;input3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 77)&quot; onmouseover=&quot;showTip(event, 'fs9', 77)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 78)&quot; onmouseover=&quot;showTip(event, 'fs15', 78)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs3', 79)&quot; onmouseover=&quot;showTip(event, 'fs3', 79)&quot; class=&quot;t&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 80)&quot; onmouseover=&quot;showTip(event, 'fs26', 80)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// Some (Some 200.0)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we can see from the signature. &lt;code&gt;input1&lt;/code&gt; and &lt;code&gt;input2&lt;/code&gt; are just &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;
instead of &lt;code&gt;option&amp;lt;option&amp;lt;float&amp;gt;&amp;gt;&lt;/code&gt; that a &lt;code&gt;map&lt;/code&gt; will return us.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Option&lt;/code&gt; module already contains &lt;code&gt;Option.map&lt;/code&gt; and &lt;code&gt;Option.bind&lt;/code&gt;, so we don't have to
rewrite those ourselves. As another exercise, let's look at a &lt;code&gt;bind&lt;/code&gt; implementation for &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;bind&lt;/code&gt; for &lt;code&gt;list&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Creating a &lt;code&gt;bind&lt;/code&gt; for a &lt;code&gt;list&lt;/code&gt; is a case where the first-approach is usually really hard. Let's look
at a &lt;code&gt;map&lt;/code&gt; implementation for &lt;code&gt;list&lt;/code&gt; first.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 81)&quot; onmouseover=&quot;showTip(event, 'fs29', 81)&quot; class=&quot;f&quot;&gt;mapList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 82)&quot; onmouseover=&quot;showTip(event, 'fs16', 82)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 83)&quot; onmouseover=&quot;showTip(event, 'fs30', 83)&quot; class=&quot;i&quot;&gt;inputList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 84)&quot; onmouseover=&quot;showTip(event, 'fs31', 84)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 85)&quot; onmouseover=&quot;showTip(event, 'fs18', 85)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 86)&quot; onmouseover=&quot;showTip(event, 'fs32', 86)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 87)&quot; onmouseover=&quot;showTip(event, 'fs16', 87)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 88)&quot; onmouseover=&quot;showTip(event, 'fs18', 88)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 89)&quot; onmouseover=&quot;showTip(event, 'fs32', 89)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs33', 90)&quot; onmouseover=&quot;showTip(event, 'fs33', 90)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 91)&quot; onmouseover=&quot;showTip(event, 'fs34', 91)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 92)&quot; onmouseover=&quot;showTip(event, 'fs31', 92)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 93)&quot; onmouseover=&quot;showTip(event, 'fs30', 93)&quot; class=&quot;i&quot;&gt;inputList&lt;/span&gt; []
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Option.bind&lt;/code&gt; was really easy as we could directly return what the call to &lt;code&gt;f&lt;/code&gt; returned. But for a list
this is not possible. Because in a list we call &lt;code&gt;f&lt;/code&gt; multiple times for the input list, and the output
of those are collected into a new list.&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;f&lt;/code&gt; is a &lt;em&gt;Monadic function&lt;/em&gt; in &lt;code&gt;bind&lt;/code&gt; it means every call to &lt;code&gt;f&lt;/code&gt; will return a list. If
we add a list to another list, we get a list of list as expected &lt;code&gt;list&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt;. If we try to
return a single &lt;code&gt;list&lt;/code&gt; instead, it means we have to loop over the result of &lt;code&gt;f&lt;/code&gt; and add its element
to another list.&lt;/p&gt;
&lt;p&gt;Solving that problem inside of &lt;code&gt;bind&lt;/code&gt; is hard, because &lt;code&gt;list&lt;/code&gt; is an &lt;em&gt;immutable&lt;/em&gt; data-structure. With a
&lt;em&gt;mutable&lt;/em&gt; list (&lt;code&gt;ResizeArray&lt;/code&gt;) this operation would be quite easy, as we just could call &lt;code&gt;f x&lt;/code&gt; that
returns a &lt;code&gt;list&lt;/code&gt; and loop through it and add it to some other list, but with an &lt;em&gt;immutable&lt;/em&gt; list we
cannot just add elements to an existing element.&lt;/p&gt;
&lt;p&gt;When we really want to solve it in one-go we could use a mutable list like &lt;code&gt;ResizeArray&lt;/code&gt;, otherwise
we have to use two nested &lt;code&gt;fold&lt;/code&gt; or &lt;code&gt;foldBack&lt;/code&gt; calls. Instead of nesting it and turning it in a complex
function it is usually better to just extract those operation into it's own function. So we create
a &lt;code&gt;concat&lt;/code&gt; operation first, that can turn a &lt;code&gt;list&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; just into a single list.&lt;/p&gt;
&lt;p&gt;I'm not showing how to implementing &lt;code&gt;concat&lt;/code&gt; for &lt;code&gt;list&lt;/code&gt;, as the focus is &lt;code&gt;bind&lt;/code&gt; not how immutable list
processing works. So for &lt;code&gt;list&lt;/code&gt; we usually would prefer just a &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;concat&lt;/code&gt; implementation for
&lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 94)&quot; onmouseover=&quot;showTip(event, 'fs35', 94)&quot; class=&quot;f&quot;&gt;bindList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 95)&quot; onmouseover=&quot;showTip(event, 'fs36', 95)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 96)&quot; onmouseover=&quot;showTip(event, 'fs37', 96)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 97)&quot; onmouseover=&quot;showTip(event, 'fs33', 97)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 98)&quot; onmouseover=&quot;showTip(event, 'fs38', 98)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 99)&quot; onmouseover=&quot;showTip(event, 'fs36', 99)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 100)&quot; onmouseover=&quot;showTip(event, 'fs37', 100)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 101)&quot; onmouseover=&quot;showTip(event, 'fs33', 101)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 102)&quot; onmouseover=&quot;showTip(event, 'fs39', 102)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you can see. &lt;code&gt;f&lt;/code&gt; in our example now can be a &lt;code&gt;'a -&amp;gt; 'b list&lt;/code&gt; function. So it now produces a whole new list
for every input of our starting list, but we still get a single list, not a list of list back.&lt;/p&gt;
&lt;p&gt;F# also provides an implementation for this function. But it is named &lt;code&gt;List.collect&lt;/code&gt; instead of &lt;code&gt;List.bind&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;An operator for &lt;code&gt;bind&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/2016/03/31/applicative-functors&quot;&gt;Understanding apply&lt;/a&gt; we used &lt;code&gt;&amp;lt;!&amp;gt;&lt;/code&gt; for the &lt;code&gt;map&lt;/code&gt; function.
And &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; for the &lt;code&gt;apply&lt;/code&gt; function. We use &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; as an operator for the &lt;code&gt;bind&lt;/code&gt; function. But on top of it.
If we write it as an operator we swap the arguments. We expects our type &lt;code&gt;option&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt; on the
left-side and the function on the right-side.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs40', 103)&quot; onmouseover=&quot;showTip(event, 'fs40', 103)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 104)&quot; onmouseover=&quot;showTip(event, 'fs20', 104)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 105)&quot; onmouseover=&quot;showTip(event, 'fs41', 105)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 106)&quot; onmouseover=&quot;showTip(event, 'fs42', 106)&quot; class=&quot;f&quot;&gt;bind&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 107)&quot; onmouseover=&quot;showTip(event, 'fs20', 107)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 108)&quot; onmouseover=&quot;showTip(event, 'fs40', 108)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Continuation-passing Style&lt;/h2&gt;
&lt;p&gt;The reason for this change is that we think of &lt;code&gt;bind&lt;/code&gt; as some kind of
&lt;a href=&quot;https://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;Continuation-passing Style&lt;/a&gt; programming.
To understand the change, we have to go back at the signature. Up until now i often described &lt;code&gt;map&lt;/code&gt;
and &lt;code&gt;apply&lt;/code&gt; by the idea to just pass in the first argument. So when we have&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 109)&quot; onmouseover=&quot;showTip(event, 'fs11', 109)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 110)&quot; onmouseover=&quot;showTip(event, 'fs11', 110)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 111)&quot; onmouseover=&quot;showTip(event, 'fs11', 111)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we see it as a function that just &lt;em&gt;upgrades&lt;/em&gt; the input of a function. But we still have a two argument
function here, and the two argument form is how &lt;code&gt;bind&lt;/code&gt; is used most often. If we threat it as
a two-argument function we have something like this:&lt;/p&gt;
&lt;p&gt;We have a &lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt; as an input. And we provide a function &lt;code&gt;'a -&amp;gt; option&amp;lt;'b&amp;gt;&lt;/code&gt;. As we can see, the input
of &lt;code&gt;f&lt;/code&gt; is just &lt;code&gt;'a&lt;/code&gt;. So what we get as the input is the &lt;strong&gt;unwrapped&lt;/strong&gt; &lt;code&gt;'a&lt;/code&gt; that is inside &lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It can help here if we think with piping &lt;code&gt;|&amp;gt;&lt;/code&gt;. The idea of piping is that we can write the next argument
of a function on the left side. So instead of &lt;code&gt;f x&lt;/code&gt; we also can write &lt;code&gt;x |&amp;gt; f&lt;/code&gt;. When we use &lt;code&gt;bind&lt;/code&gt; with
piping we have something like &lt;code&gt;x |&amp;gt; Option.bind f&lt;/code&gt;. We also can rearange the &lt;em&gt;type-signature&lt;/em&gt; to reflect
this style of writing&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 112)&quot; onmouseover=&quot;showTip(event, 'fs11', 112)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 113)&quot; onmouseover=&quot;showTip(event, 'fs11', 113)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 114)&quot; onmouseover=&quot;showTip(event, 'fs11', 114)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we use piping with bind, we get something similar to the above. And probably the order becomes
clearer. We start with a boxed value like &lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt;, then our &lt;code&gt;bind&lt;/code&gt; function somehow extract the
&lt;code&gt;'a&lt;/code&gt; from our &lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt;, this &lt;code&gt;'a&lt;/code&gt; is then passed to the function &lt;code&gt;('a -&amp;gt; option&amp;lt;'b&amp;gt;)&lt;/code&gt;. This function
returns an &lt;code&gt;option&amp;lt;'b&amp;gt;&lt;/code&gt; what is also what &lt;code&gt;bind&lt;/code&gt; will then return!&lt;/p&gt;
&lt;p&gt;But it is important to understand that there is no guarantee that our function will be called at all!
Look again at the implementation of &lt;code&gt;bind&lt;/code&gt; to understand this. &lt;code&gt;bind&lt;/code&gt; checks whether we have &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;Some&lt;/code&gt;.
In the &lt;code&gt;None&lt;/code&gt; case it will just return &lt;code&gt;None&lt;/code&gt; only in the &lt;code&gt;Some&lt;/code&gt; case it will call &lt;code&gt;f x&lt;/code&gt; and execute
our function that we passed to &lt;code&gt;bind&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Not only that, the &lt;em&gt;unwrapping&lt;/em&gt; of the &lt;code&gt;option&lt;/code&gt; is already handled for us by the &lt;code&gt;bind&lt;/code&gt; function. So we
can pass a function &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;bind&lt;/code&gt; that only will be executed if we have &lt;code&gt;Some value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's create an example to understand this idea in more depth. At first we create a function that
prints some text to screen and expect the user to enter a float. We try to parse the input as
&lt;code&gt;float&lt;/code&gt; with our &lt;code&gt;Double.tryParse&lt;/code&gt; function that returns an &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 115)&quot; onmouseover=&quot;showTip(event, 'fs43', 115)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 116)&quot; onmouseover=&quot;showTip(event, 'fs44', 116)&quot; class=&quot;i&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs45', 117)&quot; onmouseover=&quot;showTip(event, 'fs45', 117)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 118)&quot; onmouseover=&quot;showTip(event, 'fs44', 118)&quot; class=&quot;i&quot;&gt;msg&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs46', 119)&quot; onmouseover=&quot;showTip(event, 'fs46', 119)&quot; class=&quot;t&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 120)&quot; onmouseover=&quot;showTip(event, 'fs47', 120)&quot; class=&quot;f&quot;&gt;ReadLine&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 121)&quot; onmouseover=&quot;showTip(event, 'fs3', 121)&quot; class=&quot;t&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 122)&quot; onmouseover=&quot;showTip(event, 'fs26', 122)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we sure could write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 123)&quot; onmouseover=&quot;showTip(event, 'fs48', 123)&quot; class=&quot;i&quot;&gt;someInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 124)&quot; onmouseover=&quot;showTip(event, 'fs43', 124)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Enter a number&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;and &lt;code&gt;someInput&lt;/code&gt; would contain an &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;. We now could use that &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt; with other
functions. We just could &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; all other functions that are not compatible with &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But instead of doing that, let's pass the resulting &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt; directly to &lt;code&gt;bind&lt;/code&gt;. We then
provide a continuation function to &lt;code&gt;bind&lt;/code&gt; that only will be executed if we have &lt;code&gt;Some value&lt;/code&gt;.
The advantage is that our &lt;code&gt;f&lt;/code&gt; function only sees a &lt;code&gt;float&lt;/code&gt;, not a &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;. We now
can do something with that &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's write an example where the user inputs the radius of a circle, and we calculate the
area of that circle.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 125)&quot; onmouseover=&quot;showTip(event, 'fs49', 125)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 126)&quot; onmouseover=&quot;showTip(event, 'fs18', 126)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 127)&quot; onmouseover=&quot;showTip(event, 'fs9', 127)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 128)&quot; onmouseover=&quot;showTip(event, 'fs18', 128)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 129)&quot; onmouseover=&quot;showTip(event, 'fs50', 129)&quot; class=&quot;f&quot;&gt;circleArea&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 130)&quot; onmouseover=&quot;showTip(event, 'fs51', 130)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 131)&quot; onmouseover=&quot;showTip(event, 'fs51', 131)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 132)&quot; onmouseover=&quot;showTip(event, 'fs52', 132)&quot; class=&quot;t&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs53', 133)&quot; onmouseover=&quot;showTip(event, 'fs53', 133)&quot; class=&quot;i&quot;&gt;PI&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 134)&quot; onmouseover=&quot;showTip(event, 'fs54', 134)&quot; class=&quot;i&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs43', 135)&quot; onmouseover=&quot;showTip(event, 'fs43', 135)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Enter radius&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 136)&quot; onmouseover=&quot;showTip(event, 'fs41', 136)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 137)&quot; onmouseover=&quot;showTip(event, 'fs42', 137)&quot; class=&quot;f&quot;&gt;bind&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 138)&quot; onmouseover=&quot;showTip(event, 'fs55', 138)&quot; class=&quot;i&quot;&gt;userInput&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 139)&quot; onmouseover=&quot;showTip(event, 'fs56', 139)&quot; class=&quot;i&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 140)&quot; onmouseover=&quot;showTip(event, 'fs50', 140)&quot; class=&quot;f&quot;&gt;circleArea&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 141)&quot; onmouseover=&quot;showTip(event, 'fs55', 141)&quot; class=&quot;i&quot;&gt;userInput&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 142)&quot; onmouseover=&quot;showTip(event, 'fs49', 142)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 143)&quot; onmouseover=&quot;showTip(event, 'fs56', 143)&quot; class=&quot;i&quot;&gt;area&lt;/span&gt;
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's go through the example step-by-step.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
At first we just create a function &lt;code&gt;circleArea&lt;/code&gt; that calculates the area from a given radius.
For such a function we just expect &lt;code&gt;float&lt;/code&gt; as input. We usually don't expect &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;
or &lt;code&gt;list&amp;lt;float&amp;gt;&lt;/code&gt; as the input.
&lt;/li&gt;
&lt;li&gt;
Then we call &lt;code&gt;getUserInput &quot;Enter radius&quot;&lt;/code&gt;. The user will see &quot;Enter radius: &quot; and he must enter
something. The input will be parsed as a &lt;code&gt;float&lt;/code&gt;. We will either get &lt;code&gt;Some x&lt;/code&gt; back if
the user input was a &lt;code&gt;float&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if the input was not valid.
&lt;/li&gt;
&lt;li&gt;
This option is then directly passed to &lt;code&gt;Option.bind&lt;/code&gt; as the second argument. We use the Pipe &lt;code&gt;|&amp;gt;&lt;/code&gt;
here to bring the &lt;code&gt;option&lt;/code&gt; to the left-side.
&lt;/li&gt;
&lt;li&gt;
The right-side is now a continuation function. If the &lt;code&gt;option&lt;/code&gt; passed to &lt;code&gt;bind&lt;/code&gt; contains &lt;code&gt;Some x&lt;/code&gt;,
that means a valid &lt;code&gt;float&lt;/code&gt;, our continuation function is called and &lt;code&gt;bind&lt;/code&gt; returns the result
of our continuation function. If the input to &lt;code&gt;bind&lt;/code&gt; was &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt; will immediately return &lt;code&gt;None&lt;/code&gt;
without executing the continuation function.
&lt;/li&gt;
&lt;li&gt;
Look at the type of &lt;code&gt;userInput&lt;/code&gt;. It is a &lt;code&gt;float&lt;/code&gt; not an &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;. We have a continuation
function that only will be execute if we have a valid &lt;code&gt;float&lt;/code&gt;. And we can directly work
with a &lt;code&gt;float&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;
In our Continuation function we use the &lt;code&gt;float&lt;/code&gt; to calculate the area of a circle. As
we only have &lt;code&gt;float&lt;/code&gt; not an &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt; we don't have to &lt;code&gt;map&lt;/code&gt; &lt;code&gt;circleArea&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;
As you now can see &lt;code&gt;let area&lt;/code&gt; inside our continuation function is now a normal &lt;code&gt;float&lt;/code&gt;. But
now we want to return &lt;code&gt;area&lt;/code&gt; as the result of our calculation. But &lt;code&gt;bind&lt;/code&gt; must return
an &lt;code&gt;option&lt;/code&gt; value. So how do we do that? We use our &lt;code&gt;retn&lt;/code&gt; (return) function to convert
a normal &lt;code&gt;float&lt;/code&gt; into an &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
Our outer &lt;code&gt;area&lt;/code&gt; is now a &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt; that either is &lt;code&gt;Some&lt;/code&gt; and contains the calculated area
for a circle. Or it is &lt;code&gt;None&lt;/code&gt;, because the user input could not be parsed.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently we don't print the result. So let's print &lt;code&gt;area&lt;/code&gt;. As &lt;code&gt;area&lt;/code&gt; (outside of the
continuation function) is now a &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt; we have to Pattern Match it to see if our computation
was successful or not.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 144)&quot; onmouseover=&quot;showTip(event, 'fs54', 144)&quot; class=&quot;i&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs7', 145)&quot; onmouseover=&quot;showTip(event, 'fs7', 145)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 146)&quot; onmouseover=&quot;showTip(event, 'fs45', 146)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;User Input was not a valid number&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs9', 147)&quot; onmouseover=&quot;showTip(event, 'fs9', 147)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 148)&quot; onmouseover=&quot;showTip(event, 'fs56', 148)&quot; class=&quot;i&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 149)&quot; onmouseover=&quot;showTip(event, 'fs45', 149)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;The area of a circle is &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 150)&quot; onmouseover=&quot;showTip(event, 'fs56', 150)&quot; class=&quot;i&quot;&gt;area&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If the user input was &lt;code&gt;10&lt;/code&gt; for example, we will see &lt;code&gt;The area of a circle is 314.159265&lt;/code&gt;, but if we provide
an invalid input, we just see &lt;code&gt;User Input was not a valid number&lt;/code&gt;. In our example we first had a
&lt;code&gt;option&lt;/code&gt; value and passed it to &lt;code&gt;Option.bind&lt;/code&gt; with &lt;code&gt;|&amp;gt;&lt;/code&gt;. This happens often, that is why we created
&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; previously.&lt;/p&gt;
&lt;p&gt;Let's extend that example. We now ask the user for three inputs. And we will calculate the volume
of a cube.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 151)&quot; onmouseover=&quot;showTip(event, 'fs57', 151)&quot; class=&quot;i&quot;&gt;cubeVolume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs43', 152)&quot; onmouseover=&quot;showTip(event, 'fs43', 152)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length X&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 153)&quot; onmouseover=&quot;showTip(event, 'fs8', 153)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs43', 154)&quot; onmouseover=&quot;showTip(event, 'fs43', 154)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length Y&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 155)&quot; onmouseover=&quot;showTip(event, 'fs58', 155)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs43', 156)&quot; onmouseover=&quot;showTip(event, 'fs43', 156)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length Z&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 157)&quot; onmouseover=&quot;showTip(event, 'fs59', 157)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 158)&quot; onmouseover=&quot;showTip(event, 'fs60', 158)&quot; class=&quot;i&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 159)&quot; onmouseover=&quot;showTip(event, 'fs8', 159)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 160)&quot; onmouseover=&quot;showTip(event, 'fs58', 160)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 161)&quot; onmouseover=&quot;showTip(event, 'fs59', 161)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 162)&quot; onmouseover=&quot;showTip(event, 'fs49', 162)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 163)&quot; onmouseover=&quot;showTip(event, 'fs60', 163)&quot; class=&quot;i&quot;&gt;volume&lt;/span&gt;
    )))

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 164)&quot; onmouseover=&quot;showTip(event, 'fs57', 164)&quot; class=&quot;i&quot;&gt;cubeVolume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs7', 165)&quot; onmouseover=&quot;showTip(event, 'fs7', 165)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 166)&quot; onmouseover=&quot;showTip(event, 'fs45', 166)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Not all inputs were valid&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs9', 167)&quot; onmouseover=&quot;showTip(event, 'fs9', 167)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 168)&quot; onmouseover=&quot;showTip(event, 'fs60', 168)&quot; class=&quot;i&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 169)&quot; onmouseover=&quot;showTip(event, 'fs45', 169)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Volume of cube is: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 170)&quot; onmouseover=&quot;showTip(event, 'fs60', 170)&quot; class=&quot;i&quot;&gt;volume&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we can see now. We ask the user three times to input a number X, Y and Z. If all inputs were valid. We
just calculate the volume with &lt;code&gt;let volume = x * y * z&lt;/code&gt;. The important aspect is that all of our values
are always &lt;code&gt;float&lt;/code&gt; never &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;, because the &lt;code&gt;bind&lt;/code&gt; operation &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; already did the
unwrapping for us.&lt;/p&gt;
&lt;p&gt;And probably it now becomes clear why we named our &lt;em&gt;constructor&lt;/em&gt; &lt;code&gt;return&lt;/code&gt; (retn). Inside of our
continuation functions we never have lifted values. But at the end of our continuation functions we
always must return a lifted value. So &lt;em&gt;lifting&lt;/em&gt; and &lt;em&gt;returning&lt;/em&gt; is always the last statement we do.&lt;/p&gt;
&lt;p&gt;Let's inspect the syntax a little bit deeper. Look at the syntax of a normal &lt;code&gt;let&lt;/code&gt;
definition in F#. Usually a &lt;code&gt;let&lt;/code&gt; definition contains a name, a equal &quot;=&quot; and a expression that
will be executed. Actually just look at the following two lines and just compare them.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length X&amp;quot;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length X&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Do you spot the similarities?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Both definition have an expression &lt;code&gt;getUserInput &quot;Length X&quot;&lt;/code&gt; this expression will be executed.&lt;/li&gt;
&lt;li&gt;In the first example: We only have &lt;code&gt;=&lt;/code&gt; for assignment, and we assign the result to &lt;code&gt;let x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the second example: We have &lt;code&gt;&amp;gt;&amp;gt;= (fun x&lt;/code&gt; as we assign the result of the expression to &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what is the difference between both?&lt;/p&gt;
&lt;p&gt;The first difference is that the statements are just flipped. With &lt;code&gt;let&lt;/code&gt; we have something like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But with our &lt;code&gt;bind&lt;/code&gt; operation we just have&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;expression&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But the more important difference is the result (our variable). In a normal &lt;code&gt;let&lt;/code&gt; definition we
will get &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt;. But with &lt;code&gt;bind&lt;/code&gt;, we just get &lt;code&gt;float&lt;/code&gt;. &lt;code&gt;bind&lt;/code&gt; decides whether our
continuation function should be called or not.&lt;/p&gt;
&lt;h2&gt;Computation Expressions&lt;/h2&gt;
&lt;p&gt;The idea of this kind of continuation-passing style is actually really powerful. So powerful that F#
provides a language construct to let it look like normal code. At first, we just create a class
that contains a &lt;code&gt;Bind&lt;/code&gt; and &lt;code&gt;Return&lt;/code&gt; method that we want to use.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 171)&quot; onmouseover=&quot;showTip(event, 'fs61', 171)&quot; class=&quot;t&quot;&gt;MaybeBuilder&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 172)&quot; onmouseover=&quot;showTip(event, 'fs62', 172)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 173)&quot; onmouseover=&quot;showTip(event, 'fs63', 173)&quot; class=&quot;f&quot;&gt;Bind&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs64', 174)&quot; onmouseover=&quot;showTip(event, 'fs64', 174)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs65', 175)&quot; onmouseover=&quot;showTip(event, 'fs65', 175)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 176)&quot; onmouseover=&quot;showTip(event, 'fs41', 176)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 177)&quot; onmouseover=&quot;showTip(event, 'fs42', 177)&quot; class=&quot;f&quot;&gt;bind&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 178)&quot; onmouseover=&quot;showTip(event, 'fs65', 178)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 179)&quot; onmouseover=&quot;showTip(event, 'fs64', 179)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 180)&quot; onmouseover=&quot;showTip(event, 'fs62', 180)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs66', 181)&quot; onmouseover=&quot;showTip(event, 'fs66', 181)&quot; class=&quot;f&quot;&gt;Return&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs18', 182)&quot; onmouseover=&quot;showTip(event, 'fs18', 182)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 183)&quot; onmouseover=&quot;showTip(event, 'fs9', 183)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 184)&quot; onmouseover=&quot;showTip(event, 'fs18', 184)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 185)&quot; onmouseover=&quot;showTip(event, 'fs67', 185)&quot; class=&quot;i&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 186)&quot; onmouseover=&quot;showTip(event, 'fs61', 186)&quot; class=&quot;t&quot;&gt;MaybeBuilder&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you can see. The &lt;code&gt;Bind&lt;/code&gt; and &lt;code&gt;Return&lt;/code&gt; methods are not special. They are just the functions you already
know! After you created a class you must create an object of this class. That is our &lt;code&gt;maybe&lt;/code&gt;. Now you
can use the following special syntax.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 187)&quot; onmouseover=&quot;showTip(event, 'fs68', 187)&quot; class=&quot;i&quot;&gt;cubeVolume2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 188)&quot; onmouseover=&quot;showTip(event, 'fs67', 188)&quot; class=&quot;i&quot;&gt;maybe&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 189)&quot; onmouseover=&quot;showTip(event, 'fs8', 189)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 190)&quot; onmouseover=&quot;showTip(event, 'fs43', 190)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length X&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 191)&quot; onmouseover=&quot;showTip(event, 'fs58', 191)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 192)&quot; onmouseover=&quot;showTip(event, 'fs43', 192)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length Y&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 193)&quot; onmouseover=&quot;showTip(event, 'fs59', 193)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 194)&quot; onmouseover=&quot;showTip(event, 'fs43', 194)&quot; class=&quot;f&quot;&gt;getUserInput&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Length Z&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs60', 195)&quot; onmouseover=&quot;showTip(event, 'fs60', 195)&quot; class=&quot;i&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 196)&quot; onmouseover=&quot;showTip(event, 'fs8', 196)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 197)&quot; onmouseover=&quot;showTip(event, 'fs58', 197)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 198)&quot; onmouseover=&quot;showTip(event, 'fs59', 198)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 199)&quot; onmouseover=&quot;showTip(event, 'fs60', 199)&quot; class=&quot;i&quot;&gt;volume&lt;/span&gt;
}

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 200)&quot; onmouseover=&quot;showTip(event, 'fs68', 200)&quot; class=&quot;i&quot;&gt;cubeVolume2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs7', 201)&quot; onmouseover=&quot;showTip(event, 'fs7', 201)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 202)&quot; onmouseover=&quot;showTip(event, 'fs45', 202)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;User entered some invalid number&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs9', 203)&quot; onmouseover=&quot;showTip(event, 'fs9', 203)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 204)&quot; onmouseover=&quot;showTip(event, 'fs69', 204)&quot; class=&quot;i&quot;&gt;vol&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 205)&quot; onmouseover=&quot;showTip(event, 'fs45', 205)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Cube volume is &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 206)&quot; onmouseover=&quot;showTip(event, 'fs69', 206)&quot; class=&quot;i&quot;&gt;vol&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, what happens exactly here? Whenever you use &lt;code&gt;let!&lt;/code&gt; &lt;code&gt;Bind&lt;/code&gt; is just called. That means,
if you have &lt;code&gt;option&amp;lt;float&amp;gt;&lt;/code&gt; on the right side. But you use &lt;code&gt;let! x&lt;/code&gt;. Then you just get a &lt;code&gt;float&lt;/code&gt;.
Every code after &lt;code&gt;let!&lt;/code&gt; is automatically converted into a continuation function that is passed to
&lt;code&gt;Bind&lt;/code&gt;. The &lt;code&gt;return&lt;/code&gt; statement (that is only available inside a computation expression) turns
a normal value into a lifted value. In this example it wraps it inside a &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You now can write code as &lt;code&gt;option&lt;/code&gt; doesn't exists at all. Whenever you have a
function that returns an &lt;code&gt;option&lt;/code&gt;, you just must use &lt;code&gt;let!&lt;/code&gt; instead of &lt;code&gt;let&lt;/code&gt;. The &lt;code&gt;let!&lt;/code&gt; call uses
&lt;code&gt;Bind&lt;/code&gt; under the hood. You never need to upgrade functions with &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; as you don't
work with lifted values. You can use all your functions directly.&lt;/p&gt;
&lt;p&gt;But it doesn't mean that we just erased &lt;code&gt;option&lt;/code&gt;. &lt;code&gt;option&lt;/code&gt; is still present, but the handling
of it is done by the &lt;code&gt;bind&lt;/code&gt; function. Whenever we have an expression on the right side that for example
returns a &lt;code&gt;None&lt;/code&gt; then the computation stops at this point. Why? Because our &lt;code&gt;bind&lt;/code&gt; function only calls
the passed in &lt;code&gt;f&lt;/code&gt; function (the continuation) in the &lt;code&gt;Some&lt;/code&gt; case.&lt;/p&gt;
&lt;p&gt;And it overall also means that the result of a &lt;code&gt;maybe { ... }&lt;/code&gt; is always an &lt;code&gt;option&lt;/code&gt;! Because it
is an &lt;code&gt;option&lt;/code&gt; you easily can use functions defined with a &lt;code&gt;maybe { ... }&lt;/code&gt; construct in other
&lt;code&gt;maybe { ... }&lt;/code&gt; constructs.&lt;/p&gt;
&lt;p&gt;On top of it you still get the safety that &lt;code&gt;option&lt;/code&gt; provides you, that means at some point you must
check the value. But it is up to you if you just use a generic check that you implemented in &lt;code&gt;bind&lt;/code&gt;, or
write your own handling.&lt;/p&gt;
&lt;p&gt;What you see here is a basic implementation of the &lt;strong&gt;Maybe Monad&lt;/strong&gt;. And it is the implementation of
the second solution I showed in the &lt;a href=&quot;/blog/2016/03/20/null-is-evil&quot;&gt;null is Evil&lt;/a&gt; post.&lt;/p&gt;
&lt;h2&gt;Defining &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; through &lt;code&gt;bind&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The combination of &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; is really powerful. In
&lt;a href=&quot;/blog/2016/03/31/applicative-functors&quot;&gt;Understanding apply&lt;/a&gt; we already saw that we can
implement &lt;code&gt;map&lt;/code&gt; through &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;. But with &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; we can easily implement
&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// map with bind operator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 207)&quot; onmouseover=&quot;showTip(event, 'fs70', 207)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 208)&quot; onmouseover=&quot;showTip(event, 'fs16', 208)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 209)&quot; onmouseover=&quot;showTip(event, 'fs17', 209)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs17', 210)&quot; onmouseover=&quot;showTip(event, 'fs17', 210)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 211)&quot; onmouseover=&quot;showTip(event, 'fs18', 211)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// unbox option&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 212)&quot; onmouseover=&quot;showTip(event, 'fs49', 212)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 213)&quot; onmouseover=&quot;showTip(event, 'fs16', 213)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 214)&quot; onmouseover=&quot;showTip(event, 'fs18', 214)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)    &lt;span class=&quot;c&quot;&gt;// execute (f x) and box result&lt;/span&gt;
    )

&lt;span class=&quot;c&quot;&gt;// map defined with Computation Expression&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 215)&quot; onmouseover=&quot;showTip(event, 'fs70', 215)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 216)&quot; onmouseover=&quot;showTip(event, 'fs16', 216)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 217)&quot; onmouseover=&quot;showTip(event, 'fs17', 217)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 218)&quot; onmouseover=&quot;showTip(event, 'fs67', 218)&quot; class=&quot;i&quot;&gt;maybe&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 219)&quot; onmouseover=&quot;showTip(event, 'fs18', 219)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 220)&quot; onmouseover=&quot;showTip(event, 'fs17', 220)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// unbox option&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 221)&quot; onmouseover=&quot;showTip(event, 'fs16', 221)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 222)&quot; onmouseover=&quot;showTip(event, 'fs18', 222)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// execute (f x) and box result&lt;/span&gt;
}

&lt;span class=&quot;c&quot;&gt;// Apply with bind operator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 223)&quot; onmouseover=&quot;showTip(event, 'fs71', 223)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 224)&quot; onmouseover=&quot;showTip(event, 'fs72', 224)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 225)&quot; onmouseover=&quot;showTip(event, 'fs73', 225)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs72', 226)&quot; onmouseover=&quot;showTip(event, 'fs72', 226)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 227)&quot; onmouseover=&quot;showTip(event, 'fs16', 227)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// unbox function&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs73', 228)&quot; onmouseover=&quot;showTip(event, 'fs73', 228)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 229)&quot; onmouseover=&quot;showTip(event, 'fs18', 229)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// unbox value&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 230)&quot; onmouseover=&quot;showTip(event, 'fs49', 230)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 231)&quot; onmouseover=&quot;showTip(event, 'fs16', 231)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 232)&quot; onmouseover=&quot;showTip(event, 'fs18', 232)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)    &lt;span class=&quot;c&quot;&gt;// execute (f x) and box result&lt;/span&gt;
    ))

&lt;span class=&quot;c&quot;&gt;// Apply with Computation expression&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 233)&quot; onmouseover=&quot;showTip(event, 'fs71', 233)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 234)&quot; onmouseover=&quot;showTip(event, 'fs72', 234)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 235)&quot; onmouseover=&quot;showTip(event, 'fs73', 235)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 236)&quot; onmouseover=&quot;showTip(event, 'fs67', 236)&quot; class=&quot;i&quot;&gt;maybe&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 237)&quot; onmouseover=&quot;showTip(event, 'fs16', 237)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 238)&quot; onmouseover=&quot;showTip(event, 'fs72', 238)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// unbox function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 239)&quot; onmouseover=&quot;showTip(event, 'fs18', 239)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 240)&quot; onmouseover=&quot;showTip(event, 'fs73', 240)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// unbox value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 241)&quot; onmouseover=&quot;showTip(event, 'fs16', 241)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 242)&quot; onmouseover=&quot;showTip(event, 'fs18', 242)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// execute (f x) and box result&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because of this we always have an &lt;em&gt;Applicative Functor&lt;/em&gt; when we have a &lt;em&gt;Monad&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Kleisli Composition&lt;/h2&gt;
&lt;p&gt;Function composition is the idea to create a new function out of two smaller functions. It
usually works as long we have two function with a matching output and input type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because &lt;code&gt;'b&lt;/code&gt; is the output of anothers function input, we can directly create a new composed
function that goes from &lt;code&gt;'a&lt;/code&gt; to &lt;code&gt;'c&lt;/code&gt; &lt;code&gt;'a -&amp;gt; 'c&lt;/code&gt;. But this doesn't work for &lt;em&gt;Monadic functions&lt;/em&gt;
as they don't have matching input/output.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 243)&quot; onmouseover=&quot;showTip(event, 'fs11', 243)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 244)&quot; onmouseover=&quot;showTip(event, 'fs11', 244)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;These functions cannot be composed because &lt;code&gt;option&amp;lt;'b&amp;gt;&lt;/code&gt; is not the same as &lt;code&gt;'b&lt;/code&gt;. But with our
bind operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; we can easily pass boxed values into function that don't expect them. Because
of that we also can create a compose function that directly compose two &lt;em&gt;Monadic functions&lt;/em&gt;.
We use the operator &lt;code&gt;&amp;gt;=&amp;gt;&lt;/code&gt; for this kind of composition. This kind of composition is also named
&lt;em&gt;Kleisli composition&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;)  &lt;span onmouseout=&quot;hideTip(event, 'fs16', 245)&quot; onmouseover=&quot;showTip(event, 'fs16', 245)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 246)&quot; onmouseover=&quot;showTip(event, 'fs74', 246)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 247)&quot; onmouseover=&quot;showTip(event, 'fs18', 247)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 248)&quot; onmouseover=&quot;showTip(event, 'fs16', 248)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 249)&quot; onmouseover=&quot;showTip(event, 'fs18', 249)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 250)&quot; onmouseover=&quot;showTip(event, 'fs74', 250)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// This is how normal composition is defined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs20', 251)&quot; onmouseover=&quot;showTip(event, 'fs20', 251)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 252)&quot; onmouseover=&quot;showTip(event, 'fs75', 252)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 253)&quot; onmouseover=&quot;showTip(event, 'fs18', 253)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 254)&quot; onmouseover=&quot;showTip(event, 'fs20', 254)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 255)&quot; onmouseover=&quot;showTip(event, 'fs18', 255)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 256)&quot; onmouseover=&quot;showTip(event, 'fs75', 256)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// This is Kleisli composition&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we can compose two &lt;em&gt;Monadic&lt;/em&gt; functions directly.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 257)&quot; onmouseover=&quot;showTip(event, 'fs11', 257)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 258)&quot; onmouseover=&quot;showTip(event, 'fs11', 258)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;the result is a new &lt;em&gt;Monadic function&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 259)&quot; onmouseover=&quot;showTip(event, 'fs11', 259)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Laws&lt;/h2&gt;
&lt;p&gt;We already saw Laws for &lt;em&gt;Functors&lt;/em&gt; and &lt;em&gt;Applicative Functors&lt;/em&gt;. The combination of &lt;code&gt;return&lt;/code&gt;
and &lt;code&gt;bind&lt;/code&gt; (a Monad) also must satisfy three laws. In the following description I use&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 260)&quot; onmouseover=&quot;showTip(event, 'fs76', 260)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 261)&quot; onmouseover=&quot;showTip(event, 'fs3', 261)&quot; class=&quot;t&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 262)&quot; onmouseover=&quot;showTip(event, 'fs26', 262)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// string -&amp;gt; option&amp;lt;float&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 263)&quot; onmouseover=&quot;showTip(event, 'fs77', 263)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 264)&quot; onmouseover=&quot;showTip(event, 'fs8', 264)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 265)&quot; onmouseover=&quot;showTip(event, 'fs49', 265)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 266)&quot; onmouseover=&quot;showTip(event, 'fs8', 266)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// float  -&amp;gt; option&amp;lt;float&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 267)&quot; onmouseover=&quot;showTip(event, 'fs78', 267)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;// string         -- unboxed value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 268)&quot; onmouseover=&quot;showTip(event, 'fs79', 268)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 269)&quot; onmouseover=&quot;showTip(event, 'fs49', 269)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;// option&amp;lt;string&amp;gt; -- a boxed value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But sure, all laws have to work with any function or value combination. But seeing some actual
values makes it easier to understand the laws.&lt;/p&gt;
&lt;h3&gt;1. Law: Left identity&lt;/h3&gt;
&lt;p&gt;When we &lt;code&gt;return&lt;/code&gt; (box) a value and then use &lt;code&gt;bind&lt;/code&gt; (that unbox the value) and pass it to a function.
It is the same as directly passing the value to a function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 270)&quot; onmouseover=&quot;showTip(event, 'fs49', 270)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 271)&quot; onmouseover=&quot;showTip(event, 'fs78', 271)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 272)&quot; onmouseover=&quot;showTip(event, 'fs76', 272)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs76', 273)&quot; onmouseover=&quot;showTip(event, 'fs76', 273)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 274)&quot; onmouseover=&quot;showTip(event, 'fs78', 274)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// (Some 10.0) = (Some 10.0) -&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;2. Law: Right identity&lt;/h3&gt;
&lt;p&gt;Binding a boxed value and returning it, is the same as the boxed value&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs79', 275)&quot; onmouseover=&quot;showTip(event, 'fs79', 275)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 276)&quot; onmouseover=&quot;showTip(event, 'fs49', 276)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs79', 277)&quot; onmouseover=&quot;showTip(event, 'fs79', 277)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;3. Law: Associative&lt;/h3&gt;
&lt;p&gt;Order of composing don't play a role. We can pass a value to &lt;code&gt;f&lt;/code&gt; and the result to &lt;code&gt;g&lt;/code&gt; and
it has to be the same as if we compose &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; first, and pass our value to the composed
function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 278)&quot; onmouseover=&quot;showTip(event, 'fs80', 278)&quot; class=&quot;i&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs79', 279)&quot; onmouseover=&quot;showTip(event, 'fs79', 279)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 280)&quot; onmouseover=&quot;showTip(event, 'fs76', 280)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 281)&quot; onmouseover=&quot;showTip(event, 'fs77', 281)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// Calling f with m then pass result to g&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 282)&quot; onmouseover=&quot;showTip(event, 'fs81', 282)&quot; class=&quot;i&quot;&gt;ay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs79', 283)&quot; onmouseover=&quot;showTip(event, 'fs79', 283)&quot; class=&quot;i&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs76', 284)&quot; onmouseover=&quot;showTip(event, 'fs76', 284)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 285)&quot; onmouseover=&quot;showTip(event, 'fs77', 285)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// Compose f and g first, then pass it m&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs80', 286)&quot; onmouseover=&quot;showTip(event, 'fs80', 286)&quot; class=&quot;i&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 287)&quot; onmouseover=&quot;showTip(event, 'fs81', 287)&quot; class=&quot;i&quot;&gt;ay&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Must be the same&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;retn&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt; we have four general functions that simplifies working
with &lt;em&gt;boxed&lt;/em&gt; types like &lt;code&gt;option&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;Async&lt;/code&gt; and so on. Whenever you create a new type you
should consider implementing those functions too. Here is a quick overview of those
functions and when to use them.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;map&lt;/code&gt;&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we interpret it as a &quot;one-argument&quot; function we can add our boxed type &lt;code&gt;M&lt;/code&gt; to the input and
output of a function.&lt;/p&gt;
&lt;p&gt;Interpreted as a &quot;two-argument&quot; function we can use a boxed value &lt;code&gt;M&amp;lt;'a&amp;gt;&lt;/code&gt; directly with a function
that can work with the wrapped type &lt;code&gt;'a&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;With apply we can work with boxed functions. We get those as a result if we try to &lt;code&gt;map&lt;/code&gt; a function
that has more than one argument. Or we just lift a function with &lt;code&gt;return&lt;/code&gt;. We can view &lt;code&gt;apply&lt;/code&gt; as
&lt;em&gt;Partial Application&lt;/em&gt; for &lt;em&gt;boxed&lt;/em&gt; function. With every call we can provide the next value to a
function that also is a boxed value. In this way we can turn every argument of a function
to a boxed value. A function like &lt;code&gt;int -&amp;gt; string -&amp;gt; float -&amp;gt; int&lt;/code&gt; can thus be turned into&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs82', 288)&quot; onmouseover=&quot;showTip(event, 'fs82', 288)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 289)&quot; onmouseover=&quot;showTip(event, 'fs10', 289)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 290)&quot; onmouseover=&quot;showTip(event, 'fs12', 290)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs82', 291)&quot; onmouseover=&quot;showTip(event, 'fs82', 291)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;code&gt;return&lt;/code&gt; or &lt;code&gt;retn&lt;/code&gt;&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It just boxes a &lt;code&gt;'a&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Interpreted as a one-argument function, we can upgrade a function like &lt;code&gt;map&lt;/code&gt;. The difference is
that we only upgrade the input, because the function we have already return a boxed value.&lt;/p&gt;
&lt;p&gt;Interpreted as a two-argument function, we see it as a form of Continuation passing style. We
often use piping with &lt;code&gt;|&amp;gt;&lt;/code&gt; to get the value to the &lt;em&gt;left-side&lt;/em&gt; and the continuation function on
the &lt;em&gt;right-side&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;On top, we give &lt;code&gt;|&amp;gt; M.bind&lt;/code&gt; it's own operator &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This way we have a boxed value &lt;code&gt;M&amp;lt;'a&amp;gt;&lt;/code&gt;, but our function &lt;code&gt;f&lt;/code&gt; only receives an unboxed &lt;code&gt;'a&lt;/code&gt;. In this way
we can work with unboxed values and also use any function without explicitly box them. Because
we must return &lt;em&gt;boxed&lt;/em&gt; values we usually use &lt;code&gt;return&lt;/code&gt; to return/box an unboxed value inside of &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax of this kind of continuation-passing style can be improved with a &lt;em&gt;Computation Expression&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Implementations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; can be implemented through &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; can be implemented through &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apply&lt;/code&gt; can be implemented through &lt;code&gt;return&lt;/code&gt; and &lt;code&gt;bind&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt; can be implemented through &lt;code&gt;map&lt;/code&gt; and some kind of &lt;code&gt;concat&lt;/code&gt; operation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/posts/elevated-world-2/&quot;&gt;Understanding bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/series/computation-expressions.html&quot;&gt;Computation Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/F_Sharp_Programming/Computation_Expressions&quot;&gt;Wikibooks - Computation Expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;type Double =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : float&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : float&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val Epsilon : float&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val NegativeInfinity : float&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val PositiveInfinity : float&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Double&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;static member Double.tryParse : str:string -&amp;gt; float option&lt;br /&gt;&lt;br /&gt;Full name: Main.tryParse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;Double.TryParse(s: string, result: byref&amp;lt;float&amp;gt;) : bool&lt;br /&gt;Double.TryParse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider, result: byref&amp;lt;float&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val x : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;type &amp;#39;T option = Option&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.option&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = System.Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;Multiple items&lt;br /&gt;type Async&lt;br /&gt;static member AsBeginEnd : computation:(&amp;#39;Arg -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;) -&amp;gt; (&amp;#39;Arg * AsyncCallback * obj -&amp;gt; IAsyncResult) * (IAsyncResult -&amp;gt; &amp;#39;T) * (IAsyncResult -&amp;gt; unit)&lt;br /&gt;static member AwaitEvent : event:IEvent&amp;lt;&amp;#39;Del,&amp;#39;T&amp;gt; * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt; (requires delegate and &amp;#39;Del :&amp;gt; Delegate)&lt;br /&gt;static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member CancelDefaultToken : unit -&amp;gt; unit&lt;br /&gt;static member Catch : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;Choice&amp;lt;&amp;#39;T,exn&amp;gt;&amp;gt;&lt;br /&gt;static member FromBeginEnd : beginAction:(AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg:&amp;#39;Arg1 * beginAction:(&amp;#39;Arg1 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * arg3:&amp;#39;Arg3 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * &amp;#39;Arg3 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromContinuations : callback:((&amp;#39;T -&amp;gt; unit) * (exn -&amp;gt; unit) * (OperationCanceledException -&amp;gt; unit) -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member Ignore : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member OnCancel : interruption:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;IDisposable&amp;gt;&lt;br /&gt;static member Parallel : computations:seq&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T []&amp;gt;&lt;br /&gt;static member RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:CancellationToken -&amp;gt; &amp;#39;T&lt;br /&gt;static member Sleep : millisecondsDueTime:int -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member Start : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&amp;gt; Task&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member StartChild : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartChildAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions -&amp;gt; Async&amp;lt;Task&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartImmediate : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartWithContinuations : computation:Async&amp;lt;&amp;#39;T&amp;gt; * continuation:(&amp;#39;T -&amp;gt; unit) * exceptionContinuation:(exn -&amp;gt; unit) * cancellationContinuation:(OperationCanceledException -&amp;gt; unit) * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member SwitchToContext : syncContext:SynchronizationContext -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToNewThread : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToThreadPool : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member TryCancelled : computation:Async&amp;lt;&amp;#39;T&amp;gt; * compensation:(OperationCanceledException -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member CancellationToken : Async&amp;lt;CancellationToken&amp;gt;&lt;br /&gt;static member DefaultCancellationToken : CancellationToken&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val mapOption : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; opt:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.mapOption&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val opt : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val bindOption : f:(&amp;#39;a -&amp;gt; &amp;#39;b option) -&amp;gt; opt:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.bindOption&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val joinOption : opt:&amp;#39;a option option -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.joinOption&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val opt : &amp;#39;a option option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val innerOpt : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val bindOption2 : f:(&amp;#39;a -&amp;gt; &amp;#39;b option) -&amp;gt; opt:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.bindOption2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val input1 : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.input1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;static member Double.tryParse : str:string -&amp;gt; float option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val input2 : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.input2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val input3 : float option option&lt;br /&gt;&lt;br /&gt;Full name: Main.input3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val mapList : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; inputList:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.mapList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val inputList : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;b list -&amp;gt; &amp;#39;b list)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val xs : &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val foldBack : folder:(&amp;#39;T -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;T list -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val bindList : f:(&amp;#39;a -&amp;gt; &amp;#39;b list) -&amp;gt; xs:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.bindList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b list)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val xs : &amp;#39;a list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val concat : lists:seq&amp;lt;&amp;#39;T list&amp;gt; -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val m : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val bind : binder:(&amp;#39;T -&amp;gt; &amp;#39;U option) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.bind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val getUserInput : msg:string -&amp;gt; float option&lt;br /&gt;&lt;br /&gt;Full name: Main.getUserInput&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val msg : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;type Console =&lt;br /&gt;&amp;#160;&amp;#160;static member BackgroundColor : ConsoleColor with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member Beep : unit -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member BufferHeight : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member BufferWidth : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CapsLock : bool&lt;br /&gt;&amp;#160;&amp;#160;static member Clear : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;static member CursorLeft : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CursorSize : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CursorTop : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CursorVisible : bool with get, set&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Console&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;Console.ReadLine() : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val someInput : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.someInput&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val retn : x:&amp;#39;a -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.retn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val circleArea : r:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.circleArea&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val r : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;type Math =&lt;br /&gt;&amp;#160;&amp;#160;static val PI : float&lt;br /&gt;&amp;#160;&amp;#160;static val E : float&lt;br /&gt;&amp;#160;&amp;#160;static member Abs : value:sbyte -&amp;gt; sbyte + 6 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member Acos : d:float -&amp;gt; float&lt;br /&gt;&amp;#160;&amp;#160;static member Asin : d:float -&amp;gt; float&lt;br /&gt;&amp;#160;&amp;#160;static member Atan : d:float -&amp;gt; float&lt;br /&gt;&amp;#160;&amp;#160;static member Atan2 : y:float * x:float -&amp;gt; float&lt;br /&gt;&amp;#160;&amp;#160;static member BigMul : a:int * b:int -&amp;gt; int64&lt;br /&gt;&amp;#160;&amp;#160;static member Ceiling : d:decimal -&amp;gt; decimal + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member Cos : d:float -&amp;gt; float&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Math&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;field Math.PI = 3.14159265359&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val area : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.area&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val userInput : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val area : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val cubeVolume : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.cubeVolume&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val y : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val z : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val volume : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;Multiple items&lt;br /&gt;type MaybeBuilder =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; MaybeBuilder&lt;br /&gt;&amp;#160;&amp;#160;member Bind : m:&amp;#39;b option * f:(&amp;#39;b -&amp;gt; &amp;#39;c option) -&amp;gt; &amp;#39;c option&lt;br /&gt;&amp;#160;&amp;#160;member Return : x:&amp;#39;a -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.MaybeBuilder&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; MaybeBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val o : MaybeBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;member MaybeBuilder.Bind : m:&amp;#39;b option * f:(&amp;#39;b -&amp;gt; &amp;#39;c option) -&amp;gt; &amp;#39;c option&lt;br /&gt;&lt;br /&gt;Full name: Main.MaybeBuilder.Bind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val m : &amp;#39;b option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val f : (&amp;#39;b -&amp;gt; &amp;#39;c option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;member MaybeBuilder.Return : x:&amp;#39;a -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.MaybeBuilder.Return&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val maybe : MaybeBuilder&lt;br /&gt;&lt;br /&gt;Full name: Main.maybe&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val cubeVolume2 : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.cubeVolume2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val vol : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val map : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; opt:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val apply : fo:(&amp;#39;a -&amp;gt; &amp;#39;b) option -&amp;gt; xo:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.apply&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val fo : (&amp;#39;a -&amp;gt; &amp;#39;b) option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val xo : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val g : (&amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val g : (&amp;#39;b -&amp;gt; &amp;#39;c option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val f : arg00:string -&amp;gt; float option&lt;br /&gt;&lt;br /&gt;Full name: Main.f&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val g : x:float -&amp;gt; float option&lt;br /&gt;&lt;br /&gt;Full name: Main.g&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val x : string&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;val m : string option&lt;br /&gt;&lt;br /&gt;Full name: Main.m&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val ax : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.ax&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val ay : float option&lt;br /&gt;&lt;br /&gt;Full name: Main.ay&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding apply</title>
   <link href="https://sidburn.github.io/blog/2016/03/31/applicative-functors"/>
   <updated>2016-03-31T00:00:00+02:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/31/applicative-functors</id>
   <content type="html">&lt;p&gt;In my previous blog &quot;&lt;a href=&quot;/blog/2016/03/27/understanding-map&quot;&gt;Understanding map&lt;/a&gt;&quot; I
introduced the &lt;code&gt;map&lt;/code&gt; function and described that implementing &lt;code&gt;map&lt;/code&gt; and fulfilling two laws
we get what we call a &lt;em&gt;Functor&lt;/em&gt;. In this Post we discuss the &lt;code&gt;apply&lt;/code&gt; function that
we can view as an extension to the &lt;code&gt;map&lt;/code&gt; function.&lt;/p&gt;
&lt;h2&gt;Problem with &lt;code&gt;map&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;It might be that you have noticed one problem with &lt;code&gt;map&lt;/code&gt;. &lt;code&gt;map&lt;/code&gt; only can work with
one-argument functions! The definition of &lt;code&gt;map&lt;/code&gt; expects a function &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt; as it's
first argument. So we can &lt;strong&gt;upgrade&lt;/strong&gt; one-argument functions but what happens
if we want to upgrade two, three or four argument functions?&lt;/p&gt;
&lt;h2&gt;Some dummy functions&lt;/h2&gt;
&lt;p&gt;Once again we will create some dummy functions with more than one argument to see
how we can work with them.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// int -&amp;gt; int -&amp;gt; int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 5)&quot; onmouseover=&quot;showTip(event, 'fs3', 5)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 6)&quot; onmouseover=&quot;showTip(event, 'fs4', 6)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// int -&amp;gt; string -&amp;gt; string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 7)&quot; onmouseover=&quot;showTip(event, 'fs5', 7)&quot; class=&quot;f&quot;&gt;repeat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 10)&quot; onmouseover=&quot;showTip(event, 'fs8', 10)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 11)&quot; onmouseover=&quot;showTip(event, 'fs9', 11)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 12)&quot; onmouseover=&quot;showTip(event, 'fs10', 12)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 14)&quot; onmouseover=&quot;showTip(event, 'fs7', 14)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Some simple usage of those:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 15)&quot; onmouseover=&quot;showTip(event, 'fs2', 15)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// 21&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs5', 16)&quot; onmouseover=&quot;showTip(event, 'fs5', 16)&quot; class=&quot;f&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;abcabcabc&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Currying again&lt;/h2&gt;
&lt;p&gt;But wait, didn't we previously said that there doesn't really exists functions with more than
one argument? Are not all functions just one argument functions, and that two/three/four... arguments
function are really just functions that return another function? Yes, it is and that is also the
reason why we can pass any function to &lt;code&gt;map&lt;/code&gt;. But probably you will still be irritated. &lt;code&gt;map&lt;/code&gt;
has clearly a signature of &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt;. So how can we pass a &lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt; function to it?
Shouldn't we need a &lt;code&gt;map&lt;/code&gt; function that expects something like &lt;code&gt;'a -&amp;gt; 'b -&amp;gt; 'c&lt;/code&gt; as it's first
arguments? Before we answer that question, actually just let's partial apply one of our function
with a &lt;code&gt;map&lt;/code&gt; function and let's see what we get.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 17)&quot; onmouseover=&quot;showTip(event, 'fs11', 17)&quot; class=&quot;f&quot;&gt;optionMul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 18)&quot; onmouseover=&quot;showTip(event, 'fs12', 18)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 19)&quot; onmouseover=&quot;showTip(event, 'fs13', 19)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 20)&quot; onmouseover=&quot;showTip(event, 'fs2', 20)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we expect the signature of our &lt;code&gt;optionMul&lt;/code&gt; function we now get a new function that looks like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 28)&quot; onmouseover=&quot;showTip(event, 'fs14', 28)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 29)&quot; onmouseover=&quot;showTip(event, 'fs15', 29)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 30)&quot; onmouseover=&quot;showTip(event, 'fs14', 30)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs15', 31)&quot; onmouseover=&quot;showTip(event, 'fs15', 31)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 32)&quot; onmouseover=&quot;showTip(event, 'fs15', 32)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;What happened?&lt;/h2&gt;
&lt;p&gt;So what happened exactly? And why could we pass &lt;code&gt;mul&lt;/code&gt; (&lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt;) anyway to &lt;code&gt;map&lt;/code&gt; that expected
a &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt;? The big answer is, it's all because of currying. As said once before. A definition like
&lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt; can be really interpreted as &lt;code&gt;int -&amp;gt; (int -&amp;gt; int)&lt;/code&gt;. The braces are actually optional
as &lt;code&gt;-&amp;gt;&lt;/code&gt; is right-associative. So what is &lt;code&gt;mul&lt;/code&gt; really? It is a function taking an &lt;code&gt;int&lt;/code&gt;, and returning
&lt;code&gt;int -&amp;gt; int&lt;/code&gt;. The important point is. Functions are also just types!&lt;/p&gt;
&lt;p&gt;And that is why this function also can be passed as a function that expect &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt;.
The generic &lt;code&gt;'a&lt;/code&gt; will be replaced with &lt;code&gt;int&lt;/code&gt;, while &lt;code&gt;'b&lt;/code&gt; will be replaces with &lt;code&gt;int -&amp;gt; int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And probably it now makes sense on why we get our result. Remember that what we get back from &lt;code&gt;map&lt;/code&gt; is
just the input and output wraped with our type. So when we call &lt;code&gt;Option.map&lt;/code&gt; with one argument, we
get a function back with it's input and output wrapped.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 26)&quot; onmouseover=&quot;showTip(event, 'fs14', 26)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 27)&quot; onmouseover=&quot;showTip(event, 'fs14', 27)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So when we pass &lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt; then we pass &lt;code&gt;int&lt;/code&gt; as the type for &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;int -&amp;gt; int&lt;/code&gt; for &lt;code&gt;'b&lt;/code&gt;.
That's why we get back&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 28)&quot; onmouseover=&quot;showTip(event, 'fs14', 28)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 29)&quot; onmouseover=&quot;showTip(event, 'fs15', 29)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 30)&quot; onmouseover=&quot;showTip(event, 'fs14', 30)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs15', 31)&quot; onmouseover=&quot;showTip(event, 'fs15', 31)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 32)&quot; onmouseover=&quot;showTip(event, 'fs15', 32)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;What does &lt;code&gt;option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/code&gt; mean?&lt;/h2&gt;
&lt;p&gt;The question that really starts to beg is. What the hell does &lt;code&gt;option&amp;lt;int -&amp;gt; int&amp;gt;&lt;/code&gt; anyway mean? And how
do we work with such a construct anyway?&lt;/p&gt;
&lt;p&gt;Actually the answer is easy, and it the same way unhelpful. The answer is &lt;code&gt;option&amp;lt;int -&amp;gt; int&amp;gt;&lt;/code&gt; is just an
optional that can contain a function, or not. Just remember what &lt;code&gt;option&lt;/code&gt; is about. A &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt;
means we either have an &lt;code&gt;int&lt;/code&gt; or not. Now we have the same, just for a function!&lt;/p&gt;
&lt;p&gt;Even answering on how you can work with it is easy. The same as with any other option! You have to
&lt;em&gt;Pattern match&lt;/em&gt; it. The only difference is that instead of for example an &lt;code&gt;int&lt;/code&gt; you get a function
that you can execute in the &lt;code&gt;Some&lt;/code&gt; case.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 33)&quot; onmouseover=&quot;showTip(event, 'fs16', 33)&quot; class=&quot;i&quot;&gt;seven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 34)&quot; onmouseover=&quot;showTip(event, 'fs11', 34)&quot; class=&quot;f&quot;&gt;optionMul&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 35)&quot; onmouseover=&quot;showTip(event, 'fs17', 35)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// returns: option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 36)&quot; onmouseover=&quot;showTip(event, 'fs16', 36)&quot; class=&quot;i&quot;&gt;seven&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs18', 37)&quot; onmouseover=&quot;showTip(event, 'fs18', 37)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 38)&quot; onmouseover=&quot;showTip(event, 'fs19', 38)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Nothing to do&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs17', 39)&quot; onmouseover=&quot;showTip(event, 'fs17', 39)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 40)&quot; onmouseover=&quot;showTip(event, 'fs20', 40)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 41)&quot; onmouseover=&quot;showTip(event, 'fs19', 41)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Executing f: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 42)&quot; onmouseover=&quot;showTip(event, 'fs20', 42)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// prints: Executing f: 21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The bigger problem is that all of this question and answers are currently &lt;em&gt;unhelpful&lt;/em&gt; because
their are the wrong question. We really have to start at the beginning and rethink:
&lt;strong&gt;Which result do we expect after upgrading a two-argument function?&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Which result do we expect?&lt;/h2&gt;
&lt;p&gt;Let's rethink the purpose of &lt;code&gt;map&lt;/code&gt;. &lt;code&gt;map&lt;/code&gt; is the idea that we can just &lt;strong&gt;upgrade&lt;/strong&gt; an existing
function and add the &lt;code&gt;option&lt;/code&gt; handling for us. It just turns a&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 44)&quot; onmouseover=&quot;showTip(event, 'fs15', 44)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;into a&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 45)&quot; onmouseover=&quot;showTip(event, 'fs14', 45)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 46)&quot; onmouseover=&quot;showTip(event, 'fs15', 46)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 47)&quot; onmouseover=&quot;showTip(event, 'fs14', 47)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 48)&quot; onmouseover=&quot;showTip(event, 'fs15', 48)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we get a new function that now can work with &lt;code&gt;option&lt;/code&gt;. We just &lt;strong&gt;upgraded&lt;/strong&gt; the input and output
and added a &lt;code&gt;option&lt;/code&gt;. So if we have a function like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 49)&quot; onmouseover=&quot;showTip(event, 'fs15', 49)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 50)&quot; onmouseover=&quot;showTip(event, 'fs15', 50)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 51)&quot; onmouseover=&quot;showTip(event, 'fs15', 51)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;why not just upgrade every element, and turn it into something like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 52)&quot; onmouseover=&quot;showTip(event, 'fs14', 52)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 53)&quot; onmouseover=&quot;showTip(event, 'fs15', 53)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 54)&quot; onmouseover=&quot;showTip(event, 'fs14', 54)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 55)&quot; onmouseover=&quot;showTip(event, 'fs15', 55)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 56)&quot; onmouseover=&quot;showTip(event, 'fs14', 56)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 57)&quot; onmouseover=&quot;showTip(event, 'fs15', 57)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The question is, how can we achieve that? We sure could start writing a &lt;code&gt;map2&lt;/code&gt;, &lt;code&gt;map3&lt;/code&gt; or &lt;code&gt;map4&lt;/code&gt;
function. But those functions would probably end up in being much the same. Not only that, it also
can get harder and harder to write a function that handles three, four or more &lt;code&gt;option&lt;/code&gt; at the
same time. On top of that, it doesn't really feel so much flexible, isn't there some better way
so we can handle functions with arbitrary arguments? Sure there is!&lt;/p&gt;
&lt;h2&gt;Introducing &lt;code&gt;apply&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The solution to our problem is that we just write a function that can handle the output of
our &lt;code&gt;map&lt;/code&gt; function. Let's work with the &lt;code&gt;repeat&lt;/code&gt; function this time, and let's also pass in the
first argument.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 58)&quot; onmouseover=&quot;showTip(event, 'fs21', 58)&quot; class=&quot;i&quot;&gt;optionRepeat3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 59)&quot; onmouseover=&quot;showTip(event, 'fs12', 59)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 60)&quot; onmouseover=&quot;showTip(event, 'fs13', 60)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 61)&quot; onmouseover=&quot;showTip(event, 'fs5', 61)&quot; class=&quot;f&quot;&gt;repeat&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 62)&quot; onmouseover=&quot;showTip(event, 'fs17', 62)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we can see we start with a &lt;code&gt;int -&amp;gt; string -&amp;gt; string&lt;/code&gt; function. But the interesting thing is, we
ended up with &lt;code&gt;option&amp;lt;(string -&amp;gt; string)&amp;gt;&lt;/code&gt;. Where is our &lt;code&gt;int&lt;/code&gt; argument? We already applied
that argument when we called &lt;code&gt;map&lt;/code&gt;. We only need to pass in the remaining arguments.&lt;/p&gt;
&lt;p&gt;In some way you can view &lt;code&gt;Option.map&lt;/code&gt; as &lt;em&gt;Partial Application&lt;/em&gt;. But it does not just &lt;em&gt;Partial Apply&lt;/em&gt;
one value to a function, it additional upgrades the input handling of &lt;code&gt;option&lt;/code&gt; for us. So the only
thing we need to write is a function that can handle a &lt;code&gt;option&amp;lt;(string -&amp;gt; string)&amp;gt;&lt;/code&gt; function. But how
do we handle such a function?&lt;/p&gt;
&lt;p&gt;There are two ways we can handle this construct.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
We write a function that expects the lifted function (&lt;code&gt;option&amp;lt;(string -&amp;gt; string)&amp;gt;&lt;/code&gt;)
and the next argument &lt;code&gt;string&lt;/code&gt;, and we execute our functions inside the &lt;code&gt;option&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Transform the whole &lt;code&gt;option&amp;lt;(string -&amp;gt; string)&amp;gt;&lt;/code&gt; just into &lt;code&gt;option&amp;lt;string&amp;gt; -&amp;gt; option&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So which one seems easier or more useful? The funny answer is, both operations are the same!&lt;/p&gt;
&lt;p&gt;Let's go over the first idea. Should we expect just a &lt;code&gt;string&lt;/code&gt; or an &lt;code&gt;option&amp;lt;string&amp;gt;&lt;/code&gt;? The whole idea
with &lt;code&gt;map&lt;/code&gt; so far was that we can apply &lt;code&gt;option&lt;/code&gt; values to function that don't support them. So
it makes more sense when we expect a &lt;code&gt;option&amp;lt;string&amp;gt;&lt;/code&gt;. If we would expect normal values we
wouldn't need to &lt;code&gt;map&lt;/code&gt; a function in the first place! So what we need to implement is a function
expecting &lt;code&gt;option&amp;lt;(string -&amp;gt; string)&amp;gt;&lt;/code&gt; as the first argument, and &lt;code&gt;option&amp;lt;string&amp;gt;&lt;/code&gt; as the
second argument. What do we return? As we just execute the first argument, we will return
&lt;code&gt;option&amp;lt;string&amp;gt;&lt;/code&gt;. So overall we get&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 70)&quot; onmouseover=&quot;showTip(event, 'fs14', 70)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs8', 71)&quot; onmouseover=&quot;showTip(event, 'fs8', 71)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 72)&quot; onmouseover=&quot;showTip(event, 'fs8', 72)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 73)&quot; onmouseover=&quot;showTip(event, 'fs14', 73)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 74)&quot; onmouseover=&quot;showTip(event, 'fs8', 74)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 75)&quot; onmouseover=&quot;showTip(event, 'fs14', 75)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 76)&quot; onmouseover=&quot;showTip(event, 'fs8', 76)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our second idea was that we somehow transform &lt;code&gt;option&amp;lt;(string -&amp;gt; string)&amp;gt;&lt;/code&gt; (input) to a new function
&lt;code&gt;option&amp;lt;string&amp;gt; -&amp;gt; option&amp;lt;string&amp;gt;&lt;/code&gt; (output). If we write the output just to a whole function signature,
we also get.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 70)&quot; onmouseover=&quot;showTip(event, 'fs14', 70)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs8', 71)&quot; onmouseover=&quot;showTip(event, 'fs8', 71)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 72)&quot; onmouseover=&quot;showTip(event, 'fs8', 72)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 73)&quot; onmouseover=&quot;showTip(event, 'fs14', 73)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 74)&quot; onmouseover=&quot;showTip(event, 'fs8', 74)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 75)&quot; onmouseover=&quot;showTip(event, 'fs14', 75)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 76)&quot; onmouseover=&quot;showTip(event, 'fs8', 76)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What we see here is &quot;Currying&quot; once again. With Currying it not only can be that we can interpret the
same function differently, we also can come up with different ideas, that in the end is the same
with another idea. This kind of idea can sometimes simplifies the implementation.&lt;/p&gt;
&lt;p&gt;For example let's stick with the second idea. We want to transform the input to another function.
But when we write the type-signature of our function that we need to implement, it is just the same
as a two argument function. So we start with&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optionF&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optionStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So what we now have is a function as the first argument &lt;code&gt;option&amp;lt;(string -&amp;gt; string)&amp;gt;&lt;/code&gt; that expects
a &lt;code&gt;string&lt;/code&gt;. And we have a &lt;code&gt;option&amp;lt;string&amp;gt;&lt;/code&gt; as it's second argument. What we now have to do is
unwrap both optionals, and when we have &lt;code&gt;Some function&lt;/code&gt; and &lt;code&gt;Some string&lt;/code&gt; we can execute our
function with our value. Actually, there exists 4 possible combination. So we write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optionF&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optionStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optionF&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;optionStr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs17', 77)&quot; onmouseover=&quot;showTip(event, 'fs17', 77)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs17', 78)&quot; onmouseover=&quot;showTip(event, 'fs17', 78)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs17', 79)&quot; onmouseover=&quot;showTip(event, 'fs17', 79)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs18', 80)&quot; onmouseover=&quot;showTip(event, 'fs18', 80)&quot; class=&quot;i&quot;&gt;None&lt;/span&gt; _   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs18', 81)&quot; onmouseover=&quot;showTip(event, 'fs18', 81)&quot; class=&quot;i&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs17', 82)&quot; onmouseover=&quot;showTip(event, 'fs17', 82)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs18', 83)&quot; onmouseover=&quot;showTip(event, 'fs18', 83)&quot; class=&quot;i&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs18', 84)&quot; onmouseover=&quot;showTip(event, 'fs18', 84)&quot; class=&quot;i&quot;&gt;None&lt;/span&gt; _   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we &lt;em&gt;pattern match&lt;/em&gt; both values at once, in our first case we have a function, and
a string, so we can execute the inner function with our passed in value. We must return
an &lt;code&gt;option&lt;/code&gt; again, so we end up with&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span onmouseout=&quot;hideTip(event, 'fs17', 85)&quot; onmouseover=&quot;showTip(event, 'fs17', 85)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs17', 86)&quot; onmouseover=&quot;showTip(event, 'fs17', 86)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 87)&quot; onmouseover=&quot;showTip(event, 'fs17', 87)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;All other cases are actually the same. What do we do if we don't have a function, or we don't
have a value? Or we don't have both? Well, then we can't execute our function, so all
of the other cases will return &lt;code&gt;None&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 88)&quot; onmouseover=&quot;showTip(event, 'fs22', 88)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 89)&quot; onmouseover=&quot;showTip(event, 'fs23', 89)&quot; class=&quot;i&quot;&gt;optionF&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 90)&quot; onmouseover=&quot;showTip(event, 'fs24', 90)&quot; class=&quot;i&quot;&gt;optionStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 91)&quot; onmouseover=&quot;showTip(event, 'fs23', 91)&quot; class=&quot;i&quot;&gt;optionF&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs24', 92)&quot; onmouseover=&quot;showTip(event, 'fs24', 92)&quot; class=&quot;i&quot;&gt;optionStr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs17', 93)&quot; onmouseover=&quot;showTip(event, 'fs17', 93)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 94)&quot; onmouseover=&quot;showTip(event, 'fs25', 94)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs17', 95)&quot; onmouseover=&quot;showTip(event, 'fs17', 95)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 96)&quot; onmouseover=&quot;showTip(event, 'fs26', 96)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 97)&quot; onmouseover=&quot;showTip(event, 'fs17', 97)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 98)&quot; onmouseover=&quot;showTip(event, 'fs25', 98)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 99)&quot; onmouseover=&quot;showTip(event, 'fs26', 99)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;)
    | &lt;span onmouseout=&quot;hideTip(event, 'fs17', 100)&quot; onmouseover=&quot;showTip(event, 'fs17', 100)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 101)&quot; onmouseover=&quot;showTip(event, 'fs25', 101)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs18', 102)&quot; onmouseover=&quot;showTip(event, 'fs18', 102)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 103)&quot; onmouseover=&quot;showTip(event, 'fs18', 103)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs18', 104)&quot; onmouseover=&quot;showTip(event, 'fs18', 104)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs17', 105)&quot; onmouseover=&quot;showTip(event, 'fs17', 105)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 106)&quot; onmouseover=&quot;showTip(event, 'fs26', 106)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 107)&quot; onmouseover=&quot;showTip(event, 'fs18', 107)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs18', 108)&quot; onmouseover=&quot;showTip(event, 'fs18', 108)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _, &lt;span onmouseout=&quot;hideTip(event, 'fs18', 109)&quot; onmouseover=&quot;showTip(event, 'fs18', 109)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; _   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 110)&quot; onmouseover=&quot;showTip(event, 'fs18', 110)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, now we have written a way we can handle the output of &lt;code&gt;Option.map repeat (Some 3)&lt;/code&gt;. Should we now
write a way to handle &lt;code&gt;Option.map mul (Some 3)&lt;/code&gt;? When we actually look at the type-signature of our
&lt;code&gt;apply&lt;/code&gt; function, it is much more general as we might think. It's type-signature is.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 111)&quot; onmouseover=&quot;showTip(event, 'fs14', 111)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 112)&quot; onmouseover=&quot;showTip(event, 'fs14', 112)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 113)&quot; onmouseover=&quot;showTip(event, 'fs14', 113)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;That's also why I directly named it &lt;code&gt;apply&lt;/code&gt; not &lt;code&gt;applyRepeat&lt;/code&gt;. If you look over the code it makes
sense. Because &lt;code&gt;optionStr&lt;/code&gt; is nowhere used that restricts it to being a &lt;code&gt;string&lt;/code&gt;. We just pass
it as the first argument to the inner function. So our second argument just must be the same
as the input type. It might sense to rename the &lt;code&gt;optionStr&lt;/code&gt; argument just to &lt;code&gt;optionX&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;But probably you might notice another similarity. Here is the signature of &lt;code&gt;map&lt;/code&gt; and our
&lt;code&gt;apply&lt;/code&gt; function side-by-side.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;)         &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 114)&quot; onmouseover=&quot;showTip(event, 'fs14', 114)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 115)&quot; onmouseover=&quot;showTip(event, 'fs14', 115)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs14', 116)&quot; onmouseover=&quot;showTip(event, 'fs14', 116)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 117)&quot; onmouseover=&quot;showTip(event, 'fs14', 117)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 118)&quot; onmouseover=&quot;showTip(event, 'fs14', 118)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In that sense, we can say. &lt;code&gt;apply&lt;/code&gt; does the same as &lt;code&gt;map&lt;/code&gt;. The only difference is that
it already expects a &lt;strong&gt;upgraded&lt;/strong&gt; function instead. But those two functions now works
nicely together.&lt;/p&gt;
&lt;p&gt;Because if we pass a function with more than one argument to &lt;code&gt;map&lt;/code&gt; we get something back that
we can pass to &lt;code&gt;apply&lt;/code&gt;. By calling &lt;code&gt;map&lt;/code&gt; we provided the first &lt;code&gt;option&lt;/code&gt; value. And &lt;code&gt;apply&lt;/code&gt;
expects the next &lt;code&gt;option&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Now let's try to use &lt;code&gt;apply&lt;/code&gt; with our &lt;code&gt;optionMul&lt;/code&gt; function. We first can call &lt;code&gt;OptionMul (Some 7)&lt;/code&gt;
that will return us an &lt;code&gt;option&amp;lt;int -&amp;gt; int&amp;gt;&lt;/code&gt;, the result of this can then be used with &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 119)&quot; onmouseover=&quot;showTip(event, 'fs27', 119)&quot; class=&quot;i&quot;&gt;optionMul2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 120)&quot; onmouseover=&quot;showTip(event, 'fs11', 120)&quot; class=&quot;f&quot;&gt;optionMul&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 121)&quot; onmouseover=&quot;showTip(event, 'fs17', 121)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;)        &lt;span class=&quot;c&quot;&gt;// option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 122)&quot; onmouseover=&quot;showTip(event, 'fs28', 122)&quot; class=&quot;i&quot;&gt;resultMul&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 123)&quot; onmouseover=&quot;showTip(event, 'fs22', 123)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 124)&quot; onmouseover=&quot;showTip(event, 'fs27', 124)&quot; class=&quot;i&quot;&gt;optionMul2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 125)&quot; onmouseover=&quot;showTip(event, 'fs17', 125)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// option&amp;lt;int&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also can write everything in one step, instead of creating the intermediate functions. Not only that,
let's even inline the &lt;code&gt;map&lt;/code&gt; call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 126)&quot; onmouseover=&quot;showTip(event, 'fs29', 126)&quot; class=&quot;i&quot;&gt;resultMul2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 127)&quot; onmouseover=&quot;showTip(event, 'fs22', 127)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs12', 128)&quot; onmouseover=&quot;showTip(event, 'fs12', 128)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 129)&quot; onmouseover=&quot;showTip(event, 'fs13', 129)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 130)&quot; onmouseover=&quot;showTip(event, 'fs2', 130)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 131)&quot; onmouseover=&quot;showTip(event, 'fs17', 131)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;)) (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 132)&quot; onmouseover=&quot;showTip(event, 'fs17', 132)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This doesn't seems very readable, but we will work on that soon. Let's first understand what exactly happens.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;Option.map mul (Some 7)&lt;/code&gt; is first executed. It will &lt;strong&gt;upgrade&lt;/strong&gt; mul and we provide &lt;code&gt;Some 7&lt;/code&gt; as
the first argument to the &lt;code&gt;mul&lt;/code&gt; function. This will return a &lt;code&gt;option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/code&gt; function.
&lt;/li&gt;
&lt;li&gt;
The &lt;code&gt;option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/code&gt; is passed as the first argument to &lt;code&gt;apply&lt;/code&gt;, the second argument to apply
is &lt;code&gt;Some 3&lt;/code&gt;. This will return just an &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Currently we &lt;strong&gt;upgrade&lt;/strong&gt; &lt;code&gt;mul&lt;/code&gt; and execute &lt;code&gt;mul&lt;/code&gt; in one step, because we provide all arguments. But
how can we just &lt;strong&gt;upgrade&lt;/strong&gt; &lt;code&gt;mul&lt;/code&gt; without executing it? Before we do that, let's look in how we can
make the execution more readable.&lt;/p&gt;
&lt;h2&gt;Defining your own Operators&lt;/h2&gt;
&lt;p&gt;In F# we can define our own operators. Operators are basically just two argument function. But instead of
writing &lt;code&gt;f x y&lt;/code&gt; an operator is written between (infix) two arguments &lt;code&gt;x f y&lt;/code&gt;. The value
left of the operator is the first argument, the value right of an operator is the second argument.
So instead of calling &lt;code&gt;Option.map f x&lt;/code&gt; let's create an operator for &lt;code&gt;Option.map&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs25', 133)&quot; onmouseover=&quot;showTip(event, 'fs25', 133)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 134)&quot; onmouseover=&quot;showTip(event, 'fs30', 134)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 135)&quot; onmouseover=&quot;showTip(event, 'fs12', 135)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 136)&quot; onmouseover=&quot;showTip(event, 'fs13', 136)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 137)&quot; onmouseover=&quot;showTip(event, 'fs25', 137)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 138)&quot; onmouseover=&quot;showTip(event, 'fs30', 138)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now can use our first improvement. Instead of &lt;code&gt;Option.map mul (Some 7)&lt;/code&gt; we now can write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 139)&quot; onmouseover=&quot;showTip(event, 'fs17', 139)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our whole line turns now into&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;apply&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 140)&quot; onmouseover=&quot;showTip(event, 'fs17', 140)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;)) (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 141)&quot; onmouseover=&quot;showTip(event, 'fs17', 141)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But once again. Writing &lt;code&gt;apply&lt;/code&gt; in front looks ugly, so let's also create an operator for our
&lt;code&gt;apply&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs31', 142)&quot; onmouseover=&quot;showTip(event, 'fs31', 142)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 143)&quot; onmouseover=&quot;showTip(event, 'fs32', 143)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 144)&quot; onmouseover=&quot;showTip(event, 'fs22', 144)&quot; class=&quot;f&quot;&gt;apply&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 145)&quot; onmouseover=&quot;showTip(event, 'fs31', 145)&quot; class=&quot;i&quot;&gt;fo&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 146)&quot; onmouseover=&quot;showTip(event, 'fs32', 146)&quot; class=&quot;i&quot;&gt;xo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now getting the following line:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 147)&quot; onmouseover=&quot;showTip(event, 'fs2', 147)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 148)&quot; onmouseover=&quot;showTip(event, 'fs17', 148)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 149)&quot; onmouseover=&quot;showTip(event, 'fs17', 149)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The nice thing is now. With &lt;code&gt;&amp;lt;!&amp;gt;&lt;/code&gt; we just can &lt;code&gt;map&lt;/code&gt; a function (left-side) and on the right side
we provide an optional value. In this example &lt;code&gt;mul &amp;lt;!&amp;gt; Some 7&lt;/code&gt; will return &lt;code&gt;option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/code&gt;
and this is the input to &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;, because it stands on it's left-side. And we provide &lt;code&gt;Some 3&lt;/code&gt;
as the next value.&lt;/p&gt;
&lt;p&gt;This is nice because it resembles the normal way how we call a function. Normally we would do&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 150)&quot; onmouseover=&quot;showTip(event, 'fs2', 150)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But what happens if we have &lt;code&gt;optional&lt;/code&gt; values? We just write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 151)&quot; onmouseover=&quot;showTip(event, 'fs2', 151)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 152)&quot; onmouseover=&quot;showTip(event, 'fs17', 152)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 153)&quot; onmouseover=&quot;showTip(event, 'fs17', 153)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Sure, normally you wouldn't wrap the values directly, you just would have variables that contain
optionals. So if you have &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; that are just &lt;code&gt;int&lt;/code&gt; you can do&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But if your &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; contains &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt; instead, you just write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably you will ask, how can we handle functions with three or four arguments. Easy!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;someFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Why does that work? Because once again of currying! If you start with let's say a &lt;code&gt;int -&amp;gt; int -&amp;gt; int -&amp;gt; int&lt;/code&gt;
function, Then after the first &lt;code&gt;map&lt;/code&gt; you get back &lt;code&gt;option&amp;lt;int -&amp;gt; int -&amp;gt; int&amp;gt;&lt;/code&gt;. But as we already learned.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt; is compatible with &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt;. That's the reason why you can pass a &lt;code&gt;option&amp;lt;int -&amp;gt; int -&amp;gt; int&amp;gt;&lt;/code&gt;
also to a function expecting &lt;code&gt;option&amp;lt;'a -&amp;gt; 'b&amp;gt;&lt;/code&gt;. What now happens is that your &lt;code&gt;apply&lt;/code&gt; will now return
a &lt;code&gt;option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/code&gt;. Or in other words. With &lt;code&gt;apply&lt;/code&gt; you &lt;em&gt;Partial Apply&lt;/em&gt; one value after another
to a &lt;strong&gt;wrapped&lt;/strong&gt; function. Whenever you use &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; you just provide the next value of the wrapped
function inside &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But currently, with &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; we map a function and directly pass values to it. What do we do
if we just want to &lt;strong&gt;upgrade&lt;/strong&gt; a function without executing it? With what we have so far, we usually
write some helper functions &lt;code&gt;lift2&lt;/code&gt;, &lt;code&gt;lift3&lt;/code&gt;, &lt;code&gt;lift4&lt;/code&gt; and so on.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 154)&quot; onmouseover=&quot;showTip(event, 'fs33', 154)&quot; class=&quot;f&quot;&gt;lift2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 155)&quot; onmouseover=&quot;showTip(event, 'fs34', 155)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 156)&quot; onmouseover=&quot;showTip(event, 'fs30', 156)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 157)&quot; onmouseover=&quot;showTip(event, 'fs35', 157)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 158)&quot; onmouseover=&quot;showTip(event, 'fs34', 158)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 159)&quot; onmouseover=&quot;showTip(event, 'fs30', 159)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 160)&quot; onmouseover=&quot;showTip(event, 'fs35', 160)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 161)&quot; onmouseover=&quot;showTip(event, 'fs36', 161)&quot; class=&quot;f&quot;&gt;lift3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 162)&quot; onmouseover=&quot;showTip(event, 'fs37', 162)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 163)&quot; onmouseover=&quot;showTip(event, 'fs30', 163)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 164)&quot; onmouseover=&quot;showTip(event, 'fs35', 164)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 165)&quot; onmouseover=&quot;showTip(event, 'fs38', 165)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 166)&quot; onmouseover=&quot;showTip(event, 'fs37', 166)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 167)&quot; onmouseover=&quot;showTip(event, 'fs30', 167)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 168)&quot; onmouseover=&quot;showTip(event, 'fs35', 168)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 169)&quot; onmouseover=&quot;showTip(event, 'fs38', 169)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 170)&quot; onmouseover=&quot;showTip(event, 'fs39', 170)&quot; class=&quot;f&quot;&gt;lift4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 171)&quot; onmouseover=&quot;showTip(event, 'fs40', 171)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 172)&quot; onmouseover=&quot;showTip(event, 'fs30', 172)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 173)&quot; onmouseover=&quot;showTip(event, 'fs35', 173)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 174)&quot; onmouseover=&quot;showTip(event, 'fs38', 174)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 175)&quot; onmouseover=&quot;showTip(event, 'fs41', 175)&quot; class=&quot;i&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 176)&quot; onmouseover=&quot;showTip(event, 'fs40', 176)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 177)&quot; onmouseover=&quot;showTip(event, 'fs30', 177)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 178)&quot; onmouseover=&quot;showTip(event, 'fs35', 178)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 179)&quot; onmouseover=&quot;showTip(event, 'fs38', 179)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 180)&quot; onmouseover=&quot;showTip(event, 'fs41', 180)&quot; class=&quot;i&quot;&gt;w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What we now get are the following functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;)             &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 181)&quot; onmouseover=&quot;showTip(event, 'fs14', 181)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 182)&quot; onmouseover=&quot;showTip(event, 'fs14', 182)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 183)&quot; onmouseover=&quot;showTip(event, 'fs14', 183)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;d&lt;/span&gt;)       &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 184)&quot; onmouseover=&quot;showTip(event, 'fs14', 184)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 185)&quot; onmouseover=&quot;showTip(event, 'fs14', 185)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 186)&quot; onmouseover=&quot;showTip(event, 'fs14', 186)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 187)&quot; onmouseover=&quot;showTip(event, 'fs14', 187)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;e&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 188)&quot; onmouseover=&quot;showTip(event, 'fs14', 188)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 189)&quot; onmouseover=&quot;showTip(event, 'fs14', 189)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 190)&quot; onmouseover=&quot;showTip(event, 'fs14', 190)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 191)&quot; onmouseover=&quot;showTip(event, 'fs14', 191)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 192)&quot; onmouseover=&quot;showTip(event, 'fs14', 192)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Those functions basically do what we first thought of &lt;code&gt;map2&lt;/code&gt;, &lt;code&gt;map3&lt;/code&gt;, &lt;code&gt;map4&lt;/code&gt; and so on. But such functions
are easily implemented with &lt;code&gt;apply&lt;/code&gt; in-place. Once again it helps by looking at those function
with Currying in mind. All of those functions makes more sense if we just &lt;em&gt;Partial Apply&lt;/em&gt; the first
argument. What you see then is that we turn a two, three or four argument function just
into a new function where every argument should be a &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Implementing &lt;code&gt;apply&lt;/code&gt; is more helpful as we can directly &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; any function with arbitrary
arguments, without &lt;em&gt;Partial Applying&lt;/em&gt; functions. And we still can create easily &lt;code&gt;lift2&lt;/code&gt;, &lt;code&gt;lift3&lt;/code&gt; or
&lt;code&gt;lift4&lt;/code&gt; functions to upgrade functions as a whole.&lt;/p&gt;
&lt;p&gt;Some note if it is not obvious. Usually we don't implement a &lt;code&gt;lift1&lt;/code&gt; because that is what &lt;code&gt;map&lt;/code&gt; does!&lt;/p&gt;
&lt;h2&gt;The &lt;code&gt;return&lt;/code&gt; function&lt;/h2&gt;
&lt;p&gt;Currently we always created all &lt;strong&gt;lifted&lt;/strong&gt; values directly. For example if we needed an &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt;
we directly wrote &lt;code&gt;Some 7&lt;/code&gt; to create it. Let's rethink this process. Let's assume we just
have an int like &lt;code&gt;7&lt;/code&gt;, now we want to upgrade the value. &lt;code&gt;Some 7&lt;/code&gt; creates an &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt; but what
do we do if we want a &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;Result&amp;lt;int&amp;gt;&lt;/code&gt; or a &lt;code&gt;Async&amp;lt;int&amp;gt;&lt;/code&gt;? Sure upgrading an &lt;code&gt;int&lt;/code&gt; to
&lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; is still easy &lt;code&gt;[7]&lt;/code&gt;. But instead of doing it manually, why not create some kind
of &lt;em&gt;constructor&lt;/em&gt; that does that for us?&lt;/p&gt;
&lt;p&gt;Based on the context such a function is usually called &lt;code&gt;pure&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;. Even if &lt;code&gt;return&lt;/code&gt; seems
a little bit strange we will pick this one. Later in some other blogs it will become more obvious why
we name it &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But because &lt;code&gt;pure&lt;/code&gt; and &lt;code&gt;return&lt;/code&gt; are both reserved words in F#, we have to slightly
change the name. So we just use &lt;code&gt;retn&lt;/code&gt;. The &lt;em&gt;type-signature&lt;/em&gt; of a &lt;code&gt;retn&lt;/code&gt; function always looks like
this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 193)&quot; onmouseover=&quot;showTip(event, 'fs14', 193)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 194)&quot; onmouseover=&quot;showTip(event, 'fs42', 194)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 195)&quot; onmouseover=&quot;showTip(event, 'fs43', 195)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It is pretty-easy to implement &lt;code&gt;retn&lt;/code&gt; for our option type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 196)&quot; onmouseover=&quot;showTip(event, 'fs44', 196)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 197)&quot; onmouseover=&quot;showTip(event, 'fs45', 197)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 198)&quot; onmouseover=&quot;showTip(event, 'fs17', 198)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 199)&quot; onmouseover=&quot;showTip(event, 'fs45', 199)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Looking at the previous examples we now also could write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 200)&quot; onmouseover=&quot;showTip(event, 'fs2', 200)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 201)&quot; onmouseover=&quot;showTip(event, 'fs44', 201)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 202)&quot; onmouseover=&quot;showTip(event, 'fs44', 202)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is probably not such a big surprise. But once again we should consider that &lt;code&gt;'a&lt;/code&gt; also
could stand for a function. We not only can upgrade values to a type. But also functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs44', 203)&quot; onmouseover=&quot;showTip(event, 'fs44', 203)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 204)&quot; onmouseover=&quot;showTip(event, 'fs2', 204)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So why do we want to do that? Well we could use &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;&amp;lt;!&amp;gt;&lt;/code&gt;. But consider that with &lt;code&gt;map&lt;/code&gt;
we &lt;strong&gt;only&lt;/strong&gt; can upgrade functions. &lt;code&gt;retn&lt;/code&gt; is more basic as it can &lt;strong&gt;upgrade&lt;/strong&gt; every value.
While it seems we don't need &lt;code&gt;retn&lt;/code&gt; for functions, sometimes we are just interested in just
upgrading a function as raw as possible. The difference becomes more obvious when we compare
both operations.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs44', 205)&quot; onmouseover=&quot;showTip(event, 'fs44', 205)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 206)&quot; onmouseover=&quot;showTip(event, 'fs2', 206)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;// option&amp;lt;int -&amp;gt; int -&amp;gt; int&amp;gt;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 207)&quot; onmouseover=&quot;showTip(event, 'fs12', 207)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 208)&quot; onmouseover=&quot;showTip(event, 'fs13', 208)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 209)&quot; onmouseover=&quot;showTip(event, 'fs2', 209)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// option&amp;lt;int&amp;gt; -&amp;gt; option&amp;lt;(int -&amp;gt; int)&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So with &lt;code&gt;retn&lt;/code&gt; we just do the bare minimum to upgrade a value/function. One
interesting aspect is, that we don't need &lt;code&gt;map&lt;/code&gt; at all. In fact. We can create &lt;code&gt;map&lt;/code&gt;
out of &lt;code&gt;retn&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;! As we can see &lt;code&gt;retn mul&lt;/code&gt; returns &lt;code&gt;option&amp;lt;(int -&amp;gt; int -&amp;gt; int)&amp;gt;&lt;/code&gt;
and we already saw how we can work with such values. We just can use &lt;code&gt;apply&lt;/code&gt; to &lt;em&gt;Partial Apply&lt;/em&gt;
the first inner value. So overal we also could just write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs44', 210)&quot; onmouseover=&quot;showTip(event, 'fs44', 210)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 211)&quot; onmouseover=&quot;showTip(event, 'fs2', 211)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 212)&quot; onmouseover=&quot;showTip(event, 'fs44', 212)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 213)&quot; onmouseover=&quot;showTip(event, 'fs44', 213)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It basically means. &lt;code&gt;map&lt;/code&gt; is the same as &lt;code&gt;retn&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; once! We actually could have
implemented &lt;code&gt;map&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 214)&quot; onmouseover=&quot;showTip(event, 'fs46', 214)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 215)&quot; onmouseover=&quot;showTip(event, 'fs25', 215)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 216)&quot; onmouseover=&quot;showTip(event, 'fs30', 216)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 217)&quot; onmouseover=&quot;showTip(event, 'fs44', 217)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 218)&quot; onmouseover=&quot;showTip(event, 'fs25', 218)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 219)&quot; onmouseover=&quot;showTip(event, 'fs30', 219)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;retn&lt;/code&gt; is just such an easy function that usually it doesn't seems like much value. But
actually that is quite the reason why it's so good. At first how easy it is just depends on the
type you have. But yes, &lt;code&gt;retn&lt;/code&gt; is often a very easy implementation. On top of it, it
also can happen that &lt;code&gt;apply&lt;/code&gt; is sometimes easier to implement as &lt;code&gt;map&lt;/code&gt;. So it is quite
good to know different ways to implement the same function.&lt;/p&gt;
&lt;h2&gt;What can we do with all of this?&lt;/h2&gt;
&lt;p&gt;Currently we only have written the Applicative Functor for the &lt;code&gt;option&lt;/code&gt; type. But you can think
of this extension for every type that you usually also can write a &lt;code&gt;map&lt;/code&gt; function for. This
is a general technique not limited to &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what can we do now, with all of this? This is actually a solution of the &lt;code&gt;null&lt;/code&gt; problem
that I described in &lt;a href=&quot;/blog/2016/03/20/null-is-evil&quot;&gt;null is Evil&lt;/a&gt;. The problem with
&lt;code&gt;null&lt;/code&gt; is that everything can be &lt;code&gt;null&lt;/code&gt; and you have to add checks everywhere. Replacing
it with &lt;code&gt;option&lt;/code&gt; has some advantages, as you only have to check for &lt;code&gt;Some|None&lt;/code&gt; if you
also expected a &lt;code&gt;option&lt;/code&gt;. So you only need checking where you expect it. But this can be still
to tedious. Often we want to write code and don't bother with &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;option&lt;/code&gt; at all.
Our &lt;code&gt;mul&lt;/code&gt; and &lt;code&gt;repeat&lt;/code&gt; functions are such examples. We just expect arguments that are
&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;. But what happens if for some reasons you have option values and you still
want to use them with &lt;code&gt;mul&lt;/code&gt; or &lt;code&gt;repeat&lt;/code&gt;? Without the idea of our &lt;em&gt;Applicative Functor&lt;/em&gt;
we either have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unwrap all optionals and do the checking&lt;/li&gt;
&lt;li&gt;Write a &lt;code&gt;mul&lt;/code&gt; function yourself that expects two &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both solutions are very tedious and can become very annoying. Like &lt;code&gt;null&lt;/code&gt; checking is always
annoying. So you end up with either.&lt;/p&gt;
&lt;h3&gt;1. Unwrap all optionals beforehand&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Assume we have two optionals from somewhere else&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 220)&quot; onmouseover=&quot;showTip(event, 'fs47', 220)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 221)&quot; onmouseover=&quot;showTip(event, 'fs17', 221)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 222)&quot; onmouseover=&quot;showTip(event, 'fs48', 222)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 223)&quot; onmouseover=&quot;showTip(event, 'fs17', 223)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 224)&quot; onmouseover=&quot;showTip(event, 'fs47', 224)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs18', 225)&quot; onmouseover=&quot;showTip(event, 'fs18', 225)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 226)&quot; onmouseover=&quot;showTip(event, 'fs19', 226)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;None&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs17', 227)&quot; onmouseover=&quot;showTip(event, 'fs17', 227)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 228)&quot; onmouseover=&quot;showTip(event, 'fs3', 228)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 229)&quot; onmouseover=&quot;showTip(event, 'fs48', 229)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs18', 230)&quot; onmouseover=&quot;showTip(event, 'fs18', 230)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 231)&quot; onmouseover=&quot;showTip(event, 'fs19', 231)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;None&amp;quot;&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs17', 232)&quot; onmouseover=&quot;showTip(event, 'fs17', 232)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 233)&quot; onmouseover=&quot;showTip(event, 'fs4', 233)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Finally we can use `mul`&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs19', 234)&quot; onmouseover=&quot;showTip(event, 'fs19', 234)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Result: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs2', 235)&quot; onmouseover=&quot;showTip(event, 'fs2', 235)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 236)&quot; onmouseover=&quot;showTip(event, 'fs3', 236)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 237)&quot; onmouseover=&quot;showTip(event, 'fs4', 237)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;2. Rewrite a &lt;code&gt;optionMul&lt;/code&gt; function&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 238)&quot; onmouseover=&quot;showTip(event, 'fs49', 238)&quot; class=&quot;f&quot;&gt;optionMul&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 239)&quot; onmouseover=&quot;showTip(event, 'fs50', 239)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 240)&quot; onmouseover=&quot;showTip(event, 'fs51', 240)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 241)&quot; onmouseover=&quot;showTip(event, 'fs50', 241)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs18', 242)&quot; onmouseover=&quot;showTip(event, 'fs18', 242)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 243)&quot; onmouseover=&quot;showTip(event, 'fs18', 243)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs17', 244)&quot; onmouseover=&quot;showTip(event, 'fs17', 244)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 245)&quot; onmouseover=&quot;showTip(event, 'fs3', 245)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 246)&quot; onmouseover=&quot;showTip(event, 'fs51', 246)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs18', 247)&quot; onmouseover=&quot;showTip(event, 'fs18', 247)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 248)&quot; onmouseover=&quot;showTip(event, 'fs18', 248)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs17', 249)&quot; onmouseover=&quot;showTip(event, 'fs17', 249)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 250)&quot; onmouseover=&quot;showTip(event, 'fs4', 250)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 251)&quot; onmouseover=&quot;showTip(event, 'fs17', 251)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 252)&quot; onmouseover=&quot;showTip(event, 'fs3', 252)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 253)&quot; onmouseover=&quot;showTip(event, 'fs4', 253)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Both solutions seems dull. The first solution becomes annoying. Even if we only have to do
add checks for functions/types that are &lt;code&gt;option&lt;/code&gt;. It still is an annoying task mostly
because it is a repetitive task. The second solution is even more worse
as we don't have any code-reuse at all. We just have to write the whole function from scratch
again.&lt;/p&gt;
&lt;p&gt;The bad part is, that such a function contains more &lt;code&gt;option&lt;/code&gt; handling to what it even does.
So with our &lt;em&gt;Applicative Functor&lt;/em&gt; we just can write a normal function, that knows nothing about
&lt;code&gt;option&lt;/code&gt;, and we later just upgrade it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 254)&quot; onmouseover=&quot;showTip(event, 'fs2', 254)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 255)&quot; onmouseover=&quot;showTip(event, 'fs47', 255)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 256)&quot; onmouseover=&quot;showTip(event, 'fs48', 256)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs44', 257)&quot; onmouseover=&quot;showTip(event, 'fs44', 257)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 258)&quot; onmouseover=&quot;showTip(event, 'fs2', 258)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 259)&quot; onmouseover=&quot;showTip(event, 'fs47', 259)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 260)&quot; onmouseover=&quot;showTip(event, 'fs48', 260)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs33', 261)&quot; onmouseover=&quot;showTip(event, 'fs33', 261)&quot; class=&quot;f&quot;&gt;lift2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 262)&quot; onmouseover=&quot;showTip(event, 'fs2', 262)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 263)&quot; onmouseover=&quot;showTip(event, 'fs47', 263)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 264)&quot; onmouseover=&quot;showTip(event, 'fs48', 264)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;All three ways are identical they lift &lt;code&gt;mul&lt;/code&gt; so we can pass &lt;code&gt;option&lt;/code&gt; values as arguments.
Sure at some point in your program you probably want or must check the &lt;code&gt;option&lt;/code&gt;. But it
is up to you where you do it. You can do your whole computation first, and only later check
once if you got &lt;code&gt;Some value&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. Theoretically it means you can write your whole
program, and it only contains a single &lt;code&gt;option&lt;/code&gt; check at the end.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 265)&quot; onmouseover=&quot;showTip(event, 'fs52', 265)&quot; class=&quot;f&quot;&gt;parseInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 266)&quot; onmouseover=&quot;showTip(event, 'fs7', 266)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 267)&quot; onmouseover=&quot;showTip(event, 'fs53', 267)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs54', 268)&quot; onmouseover=&quot;showTip(event, 'fs54', 268)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs55', 269)&quot; onmouseover=&quot;showTip(event, 'fs55', 269)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 270)&quot; onmouseover=&quot;showTip(event, 'fs7', 270)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 271)&quot; onmouseover=&quot;showTip(event, 'fs18', 271)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs3', 272)&quot; onmouseover=&quot;showTip(event, 'fs3', 272)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 273)&quot; onmouseover=&quot;showTip(event, 'fs17', 273)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 274)&quot; onmouseover=&quot;showTip(event, 'fs3', 274)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 275)&quot; onmouseover=&quot;showTip(event, 'fs56', 275)&quot; class=&quot;i&quot;&gt;userInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 276)&quot; onmouseover=&quot;showTip(event, 'fs53', 276)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs57', 277)&quot; onmouseover=&quot;showTip(event, 'fs57', 277)&quot; class=&quot;t&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs58', 278)&quot; onmouseover=&quot;showTip(event, 'fs58', 278)&quot; class=&quot;f&quot;&gt;ReadLine&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 279)&quot; onmouseover=&quot;showTip(event, 'fs52', 279)&quot; class=&quot;f&quot;&gt;parseInt&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 280)&quot; onmouseover=&quot;showTip(event, 'fs59', 280)&quot; class=&quot;i&quot;&gt;multipliedBy3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 281)&quot; onmouseover=&quot;showTip(event, 'fs2', 281)&quot; class=&quot;f&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 282)&quot; onmouseover=&quot;showTip(event, 'fs56', 282)&quot; class=&quot;i&quot;&gt;userInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 283)&quot; onmouseover=&quot;showTip(event, 'fs44', 283)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 284)&quot; onmouseover=&quot;showTip(event, 'fs60', 284)&quot; class=&quot;i&quot;&gt;repeatedAbc&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 285)&quot; onmouseover=&quot;showTip(event, 'fs5', 285)&quot; class=&quot;f&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 286)&quot; onmouseover=&quot;showTip(event, 'fs59', 286)&quot; class=&quot;i&quot;&gt;multipliedBy3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 287)&quot; onmouseover=&quot;showTip(event, 'fs44', 287)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 288)&quot; onmouseover=&quot;showTip(event, 'fs60', 288)&quot; class=&quot;i&quot;&gt;repeatedAbc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs18', 289)&quot; onmouseover=&quot;showTip(event, 'fs18', 289)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 290)&quot; onmouseover=&quot;showTip(event, 'fs19', 290)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error: User Input was not an int&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs17', 291)&quot; onmouseover=&quot;showTip(event, 'fs17', 291)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 292)&quot; onmouseover=&quot;showTip(event, 'fs7', 292)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 293)&quot; onmouseover=&quot;showTip(event, 'fs19', 293)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 294)&quot; onmouseover=&quot;showTip(event, 'fs7', 294)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So if the user input is &quot;3&quot; we will see &lt;code&gt;abcabcabcabcabcabcabcabcabc&lt;/code&gt;. If a user don't provide
an input that can be converted to an &lt;code&gt;int&lt;/code&gt; we will see: &lt;code&gt;Error: User Input was not an int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The whole idea is probably why some people don't see the benefit of &lt;code&gt;option&lt;/code&gt;. Most
people just see: &lt;em&gt;Okay instead of checking for &lt;code&gt;null&lt;/code&gt; I do check for &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;.
Why is that better?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, using &lt;code&gt;option&lt;/code&gt; already provides some benefits, as you can't
forget the checks, but the real advantage is that they are values on it's own, and you
can write such an &lt;em&gt;Applicative Functor&lt;/em&gt; around &lt;code&gt;option&lt;/code&gt; that supports upgrading any function
to the &lt;code&gt;option&lt;/code&gt; world and do all the checking for you. That's the real benefit of using &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Applicative Functor Laws&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/2016/03/27/understanding-map&quot;&gt;Understanding map&lt;/a&gt; we already came across
two laws that &lt;code&gt;map&lt;/code&gt; should satisfy. As we now introduced two new functions &lt;code&gt;return&lt;/code&gt; (retn)
and &lt;code&gt;apply&lt;/code&gt; there also exists some laws they have to satisfy until we can call it a
&lt;em&gt;Applicative Functor&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;1. Rule: Identity&lt;/h3&gt;
&lt;p&gt;This basically refers to the first law of a functor. We said that mapping over the &lt;code&gt;id&lt;/code&gt;
function should not change the value. Because &lt;code&gt;map&lt;/code&gt; can be implemented in terms of
&lt;code&gt;return&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; the same law must be hold.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 295)&quot; onmouseover=&quot;showTip(event, 'fs17', 295)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 296)&quot; onmouseover=&quot;showTip(event, 'fs61', 296)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// comparing must be true -- here it will be (Some 10)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;2. Rule: Order of &lt;strong&gt;upgrading&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It shouldn't matter if we first calculate &lt;code&gt;f x&lt;/code&gt; and then &lt;code&gt;retn&lt;/code&gt;. Or if we &lt;code&gt;retn&lt;/code&gt; &lt;code&gt;f&lt;/code&gt;
and &lt;code&gt;x&lt;/code&gt; separately, and then do the calculation&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;mul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Both must be the same -- here it will be (Some 21)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;3. Rule: Partial Applying&lt;/h3&gt;
&lt;p&gt;That one probably needs some more explanation. Usually we can &lt;em&gt;Partial Apply&lt;/em&gt; a function
by just omitting values. For example &lt;code&gt;repeat 3&lt;/code&gt;. But what is if you want to &lt;em&gt;Partial Apply&lt;/em&gt;
the second argument? Here are two solutions in how we can write it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;repeatAbc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;repeatAbc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So after that we can just call &lt;code&gt;repeatAbc 3&lt;/code&gt;. The thing is we expect the same results regardless
if we Partial Apply the first or second argument first. As long the arguments are the same,
the result should be the same. The same rule must hold when we additionally lift &lt;code&gt;repeat&lt;/code&gt; to an optional.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 297)&quot; onmouseover=&quot;showTip(event, 'fs62', 297)&quot; class=&quot;i&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 298)&quot; onmouseover=&quot;showTip(event, 'fs44', 298)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 299)&quot; onmouseover=&quot;showTip(event, 'fs5', 299)&quot; class=&quot;f&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 300)&quot; onmouseover=&quot;showTip(event, 'fs17', 300)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs63', 301)&quot; onmouseover=&quot;showTip(event, 'fs63', 301)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 302)&quot; onmouseover=&quot;showTip(event, 'fs62', 302)&quot; class=&quot;i&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 303)&quot; onmouseover=&quot;showTip(event, 'fs44', 303)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 304)&quot; onmouseover=&quot;showTip(event, 'fs64', 304)&quot; class=&quot;i&quot;&gt;ay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 305)&quot; onmouseover=&quot;showTip(event, 'fs44', 305)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 306)&quot; onmouseover=&quot;showTip(event, 'fs3', 306)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 307)&quot; onmouseover=&quot;showTip(event, 'fs5', 307)&quot; class=&quot;f&quot;&gt;repeat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 308)&quot; onmouseover=&quot;showTip(event, 'fs3', 308)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs65', 309)&quot; onmouseover=&quot;showTip(event, 'fs65', 309)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 310)&quot; onmouseover=&quot;showTip(event, 'fs64', 310)&quot; class=&quot;i&quot;&gt;ay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 311)&quot; onmouseover=&quot;showTip(event, 'fs44', 311)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs63', 312)&quot; onmouseover=&quot;showTip(event, 'fs63', 312)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 313)&quot; onmouseover=&quot;showTip(event, 'fs65', 313)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Both must be the same -- Here it will be -- Some &amp;quot;abcabcabc&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;4.Rule: Composition&lt;/h3&gt;
&lt;p&gt;This rule comes from normal function composition. Let's say we have two functions. One adds &quot;1&quot;
to a value, another one adds &quot;2&quot; to a value. Function Composition says that it doesn't matter
if you execute the first function on a value, and then the second function on the returned
value. Or of you first compose both function and give it the value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 314)&quot; onmouseover=&quot;showTip(event, 'fs66', 314)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 315)&quot; onmouseover=&quot;showTip(event, 'fs3', 315)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 316)&quot; onmouseover=&quot;showTip(event, 'fs3', 316)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 317)&quot; onmouseover=&quot;showTip(event, 'fs67', 317)&quot; class=&quot;f&quot;&gt;add2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 318)&quot; onmouseover=&quot;showTip(event, 'fs3', 318)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 319)&quot; onmouseover=&quot;showTip(event, 'fs3', 319)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// First executing add1, and pass the result to add2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 320)&quot; onmouseover=&quot;showTip(event, 'fs68', 320)&quot; class=&quot;i&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 321)&quot; onmouseover=&quot;showTip(event, 'fs67', 321)&quot; class=&quot;f&quot;&gt;add2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 322)&quot; onmouseover=&quot;showTip(event, 'fs66', 322)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)       &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// First compose add1 and add2 then provide the value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 323)&quot; onmouseover=&quot;showTip(event, 'fs69', 323)&quot; class=&quot;i&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 324)&quot; onmouseover=&quot;showTip(event, 'fs66', 324)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 325)&quot; onmouseover=&quot;showTip(event, 'fs67', 325)&quot; class=&quot;f&quot;&gt;add2&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs68', 326)&quot; onmouseover=&quot;showTip(event, 'fs68', 326)&quot; class=&quot;i&quot;&gt;nx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 327)&quot; onmouseover=&quot;showTip(event, 'fs69', 327)&quot; class=&quot;i&quot;&gt;ny&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Both must be the same&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This makes sense as composing is just executing two functions in sequence and passing the return
value from the first function to the next function. But those law must still hold true if we
lift/box our functions into another type like &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One note first. Operators are really just functions with two arguments. And they can be lifted too!
Normally we write an operator infix (between two arguments). But we also can write it like a normal
function if we add braces around the operator. Thus both following lines are the same.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The second style of writing can be used to lift an operator. With &lt;code&gt;retn (&amp;gt;&amp;gt;)&lt;/code&gt; we can upgrade &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;.
Normally &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; would take two functions as arguments, and returns the new composed function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;c&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we use &lt;code&gt;retn&lt;/code&gt; on it, we just can &lt;code&gt;apply&lt;/code&gt; our arguments that now also can be
&lt;code&gt;option&amp;lt;'a -&amp;gt; 'b&amp;gt;&lt;/code&gt;. Instead of &lt;code&gt;retn (&amp;gt;&amp;gt;)&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; twice we also could use &lt;code&gt;lift2&lt;/code&gt;
so we would get a compose function that looks like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 328)&quot; onmouseover=&quot;showTip(event, 'fs14', 328)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 329)&quot; onmouseover=&quot;showTip(event, 'fs14', 329)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 330)&quot; onmouseover=&quot;showTip(event, 'fs14', 330)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;c&amp;#39;&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;With that in mind, our forth rule says, that we also must ensure that composed lifted
functions still behaves the same, as if we just execute both functions directly in sequence.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 331)&quot; onmouseover=&quot;showTip(event, 'fs70', 331)&quot; class=&quot;i&quot;&gt;oadd1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 332)&quot; onmouseover=&quot;showTip(event, 'fs44', 332)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 333)&quot; onmouseover=&quot;showTip(event, 'fs3', 333)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 334)&quot; onmouseover=&quot;showTip(event, 'fs3', 334)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 335)&quot; onmouseover=&quot;showTip(event, 'fs71', 335)&quot; class=&quot;i&quot;&gt;oadd2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 336)&quot; onmouseover=&quot;showTip(event, 'fs44', 336)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 337)&quot; onmouseover=&quot;showTip(event, 'fs3', 337)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 338)&quot; onmouseover=&quot;showTip(event, 'fs3', 338)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// First executing oadd1, and pass the result to oadd2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 339)&quot; onmouseover=&quot;showTip(event, 'fs72', 339)&quot; class=&quot;i&quot;&gt;ox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 340)&quot; onmouseover=&quot;showTip(event, 'fs71', 340)&quot; class=&quot;i&quot;&gt;oadd2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs70', 341)&quot; onmouseover=&quot;showTip(event, 'fs70', 341)&quot; class=&quot;i&quot;&gt;oadd1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 342)&quot; onmouseover=&quot;showTip(event, 'fs44', 342)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 6&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// First compose oadd1 and oadd2 into a new function, then provide the value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 343)&quot; onmouseover=&quot;showTip(event, 'fs73', 343)&quot; class=&quot;i&quot;&gt;oy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs44', 344)&quot; onmouseover=&quot;showTip(event, 'fs44', 344)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 345)&quot; onmouseover=&quot;showTip(event, 'fs70', 345)&quot; class=&quot;i&quot;&gt;oadd1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 346)&quot; onmouseover=&quot;showTip(event, 'fs71', 346)&quot; class=&quot;i&quot;&gt;oadd2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 347)&quot; onmouseover=&quot;showTip(event, 'fs44', 347)&quot; class=&quot;f&quot;&gt;retn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 6&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs72', 348)&quot; onmouseover=&quot;showTip(event, 'fs72', 348)&quot; class=&quot;i&quot;&gt;ox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 349)&quot; onmouseover=&quot;showTip(event, 'fs73', 349)&quot; class=&quot;i&quot;&gt;oy&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Both must be the same&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We started with &lt;code&gt;map&lt;/code&gt; as a general function to &lt;em&gt;upgrade/lift/box&lt;/em&gt; normal functions into
some other types. But &lt;code&gt;map&lt;/code&gt; only handles one argument functions in a way we would expect.
But because we have currying, and there only exists one argument functions anyway, we still
could pass functions with &lt;em&gt;more than one-argument&lt;/em&gt; to our &lt;code&gt;map&lt;/code&gt; function. But instead of
a value, we get a lifted function back instead. To handle lifted functions we came up
with a &lt;code&gt;apply&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;As we later saw, we basically don't need &lt;code&gt;map&lt;/code&gt;. We always can create &lt;code&gt;map&lt;/code&gt; in terms of using
&lt;code&gt;retn&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; once. With our &lt;em&gt;Applicative Functor&lt;/em&gt; in-place we now can &lt;em&gt;upgrade/lift/box&lt;/em&gt;
function with arbitrary arguments. We also can easily create &lt;code&gt;lift2&lt;/code&gt;, &lt;code&gt;lift3&lt;/code&gt;, ... functions.&lt;/p&gt;
&lt;p&gt;With user defined operators like &lt;code&gt;&amp;lt;!&amp;gt;&lt;/code&gt; for &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; for &lt;code&gt;apply&lt;/code&gt; we also can easily
&lt;em&gt;upgrade/lift/box&lt;/em&gt; functions inline, without the need to save the intermediate functions.&lt;/p&gt;
&lt;p&gt;In this introduction we only saw the usuage with the &lt;code&gt;option&lt;/code&gt; type. But in general this
idea works also for other types. While the technique how to implement an &lt;em&gt;Applicative Functor&lt;/em&gt;
is the same. The meaning of it changes between types. Currently with &lt;code&gt;option&lt;/code&gt; we basically
have written a solution to the &lt;a href=&quot;/blog/2016/03/20/null-is-evil&quot;&gt;null is Evil&lt;/a&gt; problem.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/posts/elevated-world/&quot;&gt;Understanding map and apply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.davesquared.net/2015/07/apply-pattern.html&quot;&gt;The Apply Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val mul : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.mul&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val repeat : count:int -&amp;gt; str:string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.repeat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val count : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;module String&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val replicate : count:int -&amp;gt; str:string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val optionMul : (int option -&amp;gt; (int -&amp;gt; int) option)&lt;br /&gt;&lt;br /&gt;Full name: Main.optionMul&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;type &amp;#39;T option = Option&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.option&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val seven : (int -&amp;gt; int) option&lt;br /&gt;&lt;br /&gt;Full name: Main.seven&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val f : (int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val optionRepeat3 : (string -&amp;gt; string) option&lt;br /&gt;&lt;br /&gt;Full name: Main.optionRepeat3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val apply : optionF:(&amp;#39;a -&amp;gt; &amp;#39;b) option -&amp;gt; optionStr:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.apply&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val optionF : (&amp;#39;a -&amp;gt; &amp;#39;b) option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val optionStr : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val str : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val optionMul2 : (int -&amp;gt; int) option&lt;br /&gt;&lt;br /&gt;Full name: Main.optionMul2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val resultMul : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.resultMul&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val resultMul2 : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.resultMul2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val x : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val fo : (&amp;#39;a -&amp;gt; &amp;#39;b) option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val xo : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val lift2 : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;a option -&amp;gt; y:&amp;#39;b option -&amp;gt; &amp;#39;c option&lt;br /&gt;&lt;br /&gt;Full name: Main.lift2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val y : &amp;#39;b option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val lift3 : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d) -&amp;gt; x:&amp;#39;a option -&amp;gt; y:&amp;#39;b option -&amp;gt; z:&amp;#39;c option -&amp;gt; &amp;#39;d option&lt;br /&gt;&lt;br /&gt;Full name: Main.lift3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val z : &amp;#39;c option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val lift4 : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d -&amp;gt; &amp;#39;e) -&amp;gt; x:&amp;#39;a option -&amp;gt; y:&amp;#39;b option -&amp;gt; z:&amp;#39;c option -&amp;gt; w:&amp;#39;d option -&amp;gt; &amp;#39;e option&lt;br /&gt;&lt;br /&gt;Full name: Main.lift4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d -&amp;gt; &amp;#39;e)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val w : &amp;#39;d option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;Multiple items&lt;br /&gt;type Async&lt;br /&gt;static member AsBeginEnd : computation:(&amp;#39;Arg -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;) -&amp;gt; (&amp;#39;Arg * AsyncCallback * obj -&amp;gt; IAsyncResult) * (IAsyncResult -&amp;gt; &amp;#39;T) * (IAsyncResult -&amp;gt; unit)&lt;br /&gt;static member AwaitEvent : event:IEvent&amp;lt;&amp;#39;Del,&amp;#39;T&amp;gt; * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt; (requires delegate and &amp;#39;Del :&amp;gt; Delegate)&lt;br /&gt;static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member CancelDefaultToken : unit -&amp;gt; unit&lt;br /&gt;static member Catch : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;Choice&amp;lt;&amp;#39;T,exn&amp;gt;&amp;gt;&lt;br /&gt;static member FromBeginEnd : beginAction:(AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg:&amp;#39;Arg1 * beginAction:(&amp;#39;Arg1 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * arg3:&amp;#39;Arg3 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * &amp;#39;Arg3 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromContinuations : callback:((&amp;#39;T -&amp;gt; unit) * (exn -&amp;gt; unit) * (OperationCanceledException -&amp;gt; unit) -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member Ignore : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member OnCancel : interruption:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;IDisposable&amp;gt;&lt;br /&gt;static member Parallel : computations:seq&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T []&amp;gt;&lt;br /&gt;static member RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:CancellationToken -&amp;gt; &amp;#39;T&lt;br /&gt;static member Sleep : millisecondsDueTime:int -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member Start : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&amp;gt; Task&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member StartChild : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartChildAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions -&amp;gt; Async&amp;lt;Task&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartImmediate : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartWithContinuations : computation:Async&amp;lt;&amp;#39;T&amp;gt; * continuation:(&amp;#39;T -&amp;gt; unit) * exceptionContinuation:(exn -&amp;gt; unit) * cancellationContinuation:(OperationCanceledException -&amp;gt; unit) * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member SwitchToContext : syncContext:SynchronizationContext -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToNewThread : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToThreadPool : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member TryCancelled : computation:Async&amp;lt;&amp;#39;T&amp;gt; * compensation:(OperationCanceledException -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member CancellationToken : Async&amp;lt;CancellationToken&amp;gt;&lt;br /&gt;static member DefaultCancellationToken : CancellationToken&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val retn : x:&amp;#39;a -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.retn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val mapOption : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.mapOption&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val x : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val y : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val optionMul : x:int option -&amp;gt; y:int option -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.optionMul&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val x : int option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val y : int option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val parseInt : str:string -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.parseInt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;System.Int32.TryParse(s: string, result: byref&amp;lt;int&amp;gt;) : bool&lt;br /&gt;System.Int32.TryParse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider, result: byref&amp;lt;int&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val userInput : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.userInput&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;type Console =&lt;br /&gt;&amp;#160;&amp;#160;static member BackgroundColor : ConsoleColor with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member Beep : unit -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member BufferHeight : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member BufferWidth : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CapsLock : bool&lt;br /&gt;&amp;#160;&amp;#160;static member Clear : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;static member CursorLeft : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CursorSize : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CursorTop : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;static member CursorVisible : bool with get, set&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Console&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;System.Console.ReadLine() : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val multipliedBy3 : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.multipliedBy3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val repeatedAbc : string option&lt;br /&gt;&lt;br /&gt;Full name: Main.repeatedAbc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val id : x:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.id&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val ax : (string -&amp;gt; string) option&lt;br /&gt;&lt;br /&gt;Full name: Main.ax&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val x : string option&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val ay : (int -&amp;gt; string) option&lt;br /&gt;&lt;br /&gt;Full name: Main.ay&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val y : string option&lt;br /&gt;&lt;br /&gt;Full name: Main.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val add1 : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val add2 : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val nx : int&lt;br /&gt;&lt;br /&gt;Full name: Main.nx&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val ny : int&lt;br /&gt;&lt;br /&gt;Full name: Main.ny&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val oadd1 : (int -&amp;gt; int) option&lt;br /&gt;&lt;br /&gt;Full name: Main.oadd1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val oadd2 : (int -&amp;gt; int) option&lt;br /&gt;&lt;br /&gt;Full name: Main.oadd2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val ox : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.ox&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val oy : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.oy&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding map</title>
   <link href="https://sidburn.github.io/blog/2016/03/27/understanding-map"/>
   <updated>2016-03-27T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/27/understanding-map</id>
   <content type="html">&lt;p&gt;One important function in functional programming is the &lt;code&gt;map&lt;/code&gt; function. When I learned F# I must
admit that I had some problems first, understanding it. The problem was, I already knew the &lt;code&gt;map&lt;/code&gt;
function from dozens of other languages. Or to say it correctly, I mostly learned a wrong explanation
of &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The typical explanation I'm talking about often goes something like this: &lt;code&gt;map&lt;/code&gt; takes a function and
a &lt;code&gt;list&lt;/code&gt;. It applies the function to every element in the list, and returns a new &lt;code&gt;list&lt;/code&gt;.
You will often see examples like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// F#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 6)&quot; onmouseover=&quot;showTip(event, 'fs5', 6)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]

&lt;span class=&quot;c&quot;&gt;// C#&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;var&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 7)&quot; onmouseover=&quot;showTip(event, 'fs2', 7)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Range&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Select&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Select is `map`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// JavaScript&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;var&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 8)&quot; onmouseover=&quot;showTip(event, 'fs2', 8)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) { &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; })
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;All examples start with some kind of array collection that contains the numbers from 1 to 5.
And all of them take a function multiplying the number by two. All of the examples will result in a
new collection containing &lt;code&gt;[2;4;6;8;10]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While this explanation of &lt;code&gt;map&lt;/code&gt; is &lt;em&gt;right&lt;/em&gt; for &lt;code&gt;List.map&lt;/code&gt;, this is &lt;em&gt;not a right&lt;/em&gt; explanation of &lt;code&gt;map&lt;/code&gt; in general.
The problem starts when you encounter a functional language, because besides a &lt;code&gt;List.map&lt;/code&gt; you will also encounter
things like &lt;code&gt;String.map&lt;/code&gt; or &lt;code&gt;Option.map&lt;/code&gt;. On top you will also often find the advice that you should provide
a &lt;code&gt;map&lt;/code&gt; function for every type you create (if possible). When you have a &lt;code&gt;Result&lt;/code&gt; type you should
also provide a &lt;code&gt;Result.map&lt;/code&gt;. Also a &lt;code&gt;Async.map&lt;/code&gt; is a good idea. So if you only knew &lt;code&gt;map&lt;/code&gt; from the idea of
going through a collection you will probably suffer to understand what &lt;code&gt;map&lt;/code&gt; is about. If you try to implement
&lt;code&gt;map&lt;/code&gt; for yourself, you will probably even wonder what &lt;code&gt;map&lt;/code&gt; anyway should do for an arbitrary type? What is
for example the purpose of &lt;code&gt;Async.map&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;To explain what &lt;code&gt;map&lt;/code&gt; really is about, let's forget about what you already know and start from scratch again.&lt;/p&gt;
&lt;h2&gt;Some functions&lt;/h2&gt;
&lt;p&gt;Before we look at &lt;code&gt;map&lt;/code&gt;, let's create some simple functions. These functions will be used throughout the article.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Squares a number: int -&amp;gt; int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 9)&quot; onmouseover=&quot;showTip(event, 'fs6', 9)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 10)&quot; onmouseover=&quot;showTip(event, 'fs5', 10)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 11)&quot; onmouseover=&quot;showTip(event, 'fs5', 11)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 12)&quot; onmouseover=&quot;showTip(event, 'fs5', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Add 10 to every number: int -&amp;gt; int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 14)&quot; onmouseover=&quot;showTip(event, 'fs5', 14)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 15)&quot; onmouseover=&quot;showTip(event, 'fs5', 15)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Returns the length of a string: string -&amp;gt; int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 16)&quot; onmouseover=&quot;showTip(event, 'fs8', 16)&quot; class=&quot;f&quot;&gt;length&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs9', 17)&quot; onmouseover=&quot;showTip(event, 'fs9', 17)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 18)&quot; onmouseover=&quot;showTip(event, 'fs10', 18)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 20)&quot; onmouseover=&quot;showTip(event, 'fs11', 20)&quot; class=&quot;i&quot;&gt;Length&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;List.map&lt;/h2&gt;
&lt;p&gt;We now assume that we don't have most of the functions from the &lt;code&gt;List&lt;/code&gt; module. Especially not &lt;code&gt;List.map&lt;/code&gt;. Sooner
or later you will encounter one problem. With our &lt;code&gt;square&lt;/code&gt; function we can square an &lt;code&gt;int&lt;/code&gt;. But our &lt;code&gt;square&lt;/code&gt;
doesn't work at all with a &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what do you do if you want to apply &lt;code&gt;square&lt;/code&gt; to every &lt;code&gt;int&lt;/code&gt; &lt;strong&gt;inside&lt;/strong&gt; a &lt;code&gt;list&lt;/code&gt;? You sure start looping
over the list, and because we are immutable, we build a new list. As for easiness I write very imperative
code with a loop, without recursion or &lt;code&gt;fold&lt;/code&gt; or &lt;code&gt;foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 21)&quot; onmouseover=&quot;showTip(event, 'fs12', 21)&quot; class=&quot;f&quot;&gt;squareList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 23)&quot; onmouseover=&quot;showTip(event, 'fs14', 23)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 24)&quot; onmouseover=&quot;showTip(event, 'fs5', 24)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 25)&quot; onmouseover=&quot;showTip(event, 'fs13', 25)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 26)&quot; onmouseover=&quot;showTip(event, 'fs15', 26)&quot; class=&quot;i&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 27)&quot; onmouseover=&quot;showTip(event, 'fs6', 27)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 28)&quot; onmouseover=&quot;showTip(event, 'fs5', 28)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs14', 29)&quot; onmouseover=&quot;showTip(event, 'fs14', 29)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 30)&quot; onmouseover=&quot;showTip(event, 'fs15', 30)&quot; class=&quot;i&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs3', 32)&quot; onmouseover=&quot;showTip(event, 'fs3', 32)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 33)&quot; onmouseover=&quot;showTip(event, 'fs16', 33)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 34)&quot; onmouseover=&quot;showTip(event, 'fs14', 34)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So what we now have is a &lt;code&gt;squareList&lt;/code&gt; function, this function now takes a &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; as input and returns
a new &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt;. Our &lt;code&gt;squareList&lt;/code&gt; function basically does the same thing as &lt;code&gt;square&lt;/code&gt;, but instead of
&lt;code&gt;int -&amp;gt; int&lt;/code&gt; we have &lt;strong&gt;upgraded&lt;/strong&gt; it somehow to work with &lt;code&gt;list&amp;lt;int&amp;gt; -&amp;gt; list&amp;lt;int&amp;gt;&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;A final note is the &lt;code&gt;List.rev&lt;/code&gt; at the end, if it is unclear why we need it. &lt;code&gt;x :: xs&lt;/code&gt; creates a new list,
but it &lt;code&gt;prepends&lt;/code&gt; elements. We actually cannot add elements to the end. So when we loop over a list like
&lt;code&gt;[1;2;3;4;5]&lt;/code&gt; we will first &lt;code&gt;square&lt;/code&gt; 1 and add it to an empty list resulting in &lt;code&gt;[1]&lt;/code&gt;. Then we &lt;code&gt;square&lt;/code&gt;
2 and the result is added to &lt;code&gt;[1]&lt;/code&gt; yielding in &lt;code&gt;[4;1]&lt;/code&gt; and so on. That's why we have to reverse the list
at the end when we are done!&lt;/p&gt;
&lt;p&gt;Some time later we are faced with the problem that we also want to use our &lt;code&gt;add10&lt;/code&gt; function on a &lt;code&gt;list&lt;/code&gt;
so we also write a new function for this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 35)&quot; onmouseover=&quot;showTip(event, 'fs17', 35)&quot; class=&quot;f&quot;&gt;add10List&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 36)&quot; onmouseover=&quot;showTip(event, 'fs13', 36)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 37)&quot; onmouseover=&quot;showTip(event, 'fs14', 37)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 38)&quot; onmouseover=&quot;showTip(event, 'fs5', 38)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 39)&quot; onmouseover=&quot;showTip(event, 'fs13', 39)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 40)&quot; onmouseover=&quot;showTip(event, 'fs15', 40)&quot; class=&quot;i&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 41)&quot; onmouseover=&quot;showTip(event, 'fs7', 41)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 42)&quot; onmouseover=&quot;showTip(event, 'fs5', 42)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs14', 43)&quot; onmouseover=&quot;showTip(event, 'fs14', 43)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 44)&quot; onmouseover=&quot;showTip(event, 'fs15', 44)&quot; class=&quot;i&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 45)&quot; onmouseover=&quot;showTip(event, 'fs14', 45)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs3', 46)&quot; onmouseover=&quot;showTip(event, 'fs3', 46)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 47)&quot; onmouseover=&quot;showTip(event, 'fs16', 47)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 48)&quot; onmouseover=&quot;showTip(event, 'fs14', 48)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Besides that the code is anyway not really nice or functional to begin with, the big problem is that we basically
have written two completely identical functions! The only difference between those two functions is line 4.
The only thing that is different is the function we call to compute &lt;code&gt;res&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because we like DRY (Don't Repeat Yourself) we do what functional programmers always tell
&lt;em&gt;Parametrize all the things&lt;/em&gt;. So instead of directly calling our function, we just expect that the
concrete function to execute for every element is just passed as an argument. Or simply we &lt;em&gt;Abstract&lt;/em&gt; those
two functions. &lt;em&gt;Abstracting&lt;/em&gt; always means that we put the things that are the same into one function, everything that
is different will be expected as an argument. So what we finally end up with, is our own &lt;code&gt;map&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 49)&quot; onmouseover=&quot;showTip(event, 'fs18', 49)&quot; class=&quot;f&quot;&gt;mapList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 50)&quot; onmouseover=&quot;showTip(event, 'fs19', 50)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 51)&quot; onmouseover=&quot;showTip(event, 'fs20', 51)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 52)&quot; onmouseover=&quot;showTip(event, 'fs21', 52)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 53)&quot; onmouseover=&quot;showTip(event, 'fs22', 53)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 54)&quot; onmouseover=&quot;showTip(event, 'fs20', 54)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 55)&quot; onmouseover=&quot;showTip(event, 'fs23', 55)&quot; class=&quot;i&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 56)&quot; onmouseover=&quot;showTip(event, 'fs19', 56)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 57)&quot; onmouseover=&quot;showTip(event, 'fs22', 57)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs21', 58)&quot; onmouseover=&quot;showTip(event, 'fs21', 58)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 59)&quot; onmouseover=&quot;showTip(event, 'fs23', 59)&quot; class=&quot;i&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 60)&quot; onmouseover=&quot;showTip(event, 'fs21', 60)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs3', 61)&quot; onmouseover=&quot;showTip(event, 'fs3', 61)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 62)&quot; onmouseover=&quot;showTip(event, 'fs16', 62)&quot; class=&quot;f&quot;&gt;rev&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 63)&quot; onmouseover=&quot;showTip(event, 'fs21', 63)&quot; class=&quot;v&quot;&gt;results&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now can use &lt;code&gt;mapList&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 64)&quot; onmouseover=&quot;showTip(event, 'fs24', 64)&quot; class=&quot;i&quot;&gt;listOfsquared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 65)&quot; onmouseover=&quot;showTip(event, 'fs18', 65)&quot; class=&quot;f&quot;&gt;mapList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 66)&quot; onmouseover=&quot;showTip(event, 'fs6', 66)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;4;9]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 67)&quot; onmouseover=&quot;showTip(event, 'fs25', 67)&quot; class=&quot;i&quot;&gt;listOfAdd10&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 68)&quot; onmouseover=&quot;showTip(event, 'fs18', 68)&quot; class=&quot;f&quot;&gt;mapList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 69)&quot; onmouseover=&quot;showTip(event, 'fs7', 69)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;  [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [11;12;13]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Currently it doesn't seems like a big difference to other introductions, but let's reconsider what lead to
the idea of creating a &lt;code&gt;map&lt;/code&gt; function. The idea was. We have a function &lt;code&gt;int -&amp;gt; int&lt;/code&gt;. A &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; contains
&lt;code&gt;int&lt;/code&gt; so we could use &lt;code&gt;square&lt;/code&gt; or &lt;code&gt;add10&lt;/code&gt; on every element. But in order to apply our function to every
element we have to handle the &lt;code&gt;list&lt;/code&gt;, and we need to loop through them. Because this process is the same
for every function, we abstract the looping away in it's own function named &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before we go even deeper in why this is different from other explanation. Let's first look at the signature
of our &lt;code&gt;mapList&lt;/code&gt; function, and let's just remember the signature.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 70)&quot; onmouseover=&quot;showTip(event, 'fs26', 70)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 71)&quot; onmouseover=&quot;showTip(event, 'fs26', 71)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Option.map&lt;/h2&gt;
&lt;p&gt;Suddenly later when we are programming, we face a new problem. We encounter a &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt; value. &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt;
contains an &lt;code&gt;int&lt;/code&gt;. So because it contains an int, we also could use our &lt;code&gt;square&lt;/code&gt; function on the &lt;strong&gt;inner&lt;/strong&gt; value.
But sure, now we have to handle &lt;code&gt;option&lt;/code&gt;. So what do we do? We can sure unwrap it, and in case of a &lt;code&gt;Some&lt;/code&gt; we apply our
function to it. But what do we do in a case of &lt;code&gt;None&lt;/code&gt;? Returning some kind of &lt;em&gt;default&lt;/em&gt; int doesn't seem to
make sense or like a good idea. So what we will instead do, we just create a new function that will return
an &lt;code&gt;option&lt;/code&gt; again. In the case of &lt;code&gt;None&lt;/code&gt; we just return &lt;code&gt;None&lt;/code&gt; and do nothing.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 72)&quot; onmouseover=&quot;showTip(event, 'fs27', 72)&quot; class=&quot;f&quot;&gt;squareOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 73)&quot; onmouseover=&quot;showTip(event, 'fs28', 73)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 74)&quot; onmouseover=&quot;showTip(event, 'fs28', 74)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs29', 75)&quot; onmouseover=&quot;showTip(event, 'fs29', 75)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 76)&quot; onmouseover=&quot;showTip(event, 'fs29', 76)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs30', 77)&quot; onmouseover=&quot;showTip(event, 'fs30', 77)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 78)&quot; onmouseover=&quot;showTip(event, 'fs31', 78)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 79)&quot; onmouseover=&quot;showTip(event, 'fs30', 79)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 80)&quot; onmouseover=&quot;showTip(event, 'fs6', 80)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 81)&quot; onmouseover=&quot;showTip(event, 'fs31', 81)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Like &lt;code&gt;squareList&lt;/code&gt; previously we now created a &lt;code&gt;squareOption&lt;/code&gt;. It is already interesting to see some common
between all those function. &lt;code&gt;square&lt;/code&gt; could simply square an &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;squareList&lt;/code&gt; could square a &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt;
and now &lt;code&gt;squareOption&lt;/code&gt; can square an &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt;. Let's go further and let's implement &lt;code&gt;add10Option&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 82)&quot; onmouseover=&quot;showTip(event, 'fs32', 82)&quot; class=&quot;f&quot;&gt;add10Option&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 83)&quot; onmouseover=&quot;showTip(event, 'fs28', 83)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 84)&quot; onmouseover=&quot;showTip(event, 'fs28', 84)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs29', 85)&quot; onmouseover=&quot;showTip(event, 'fs29', 85)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 86)&quot; onmouseover=&quot;showTip(event, 'fs29', 86)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs30', 87)&quot; onmouseover=&quot;showTip(event, 'fs30', 87)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 88)&quot; onmouseover=&quot;showTip(event, 'fs31', 88)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 89)&quot; onmouseover=&quot;showTip(event, 'fs30', 89)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 90)&quot; onmouseover=&quot;showTip(event, 'fs7', 90)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 91)&quot; onmouseover=&quot;showTip(event, 'fs31', 91)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once again we can see the code duplication. So instead of checking again and again for every &lt;code&gt;option&lt;/code&gt;
if it is &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;Some&lt;/code&gt; and only in the &lt;code&gt;Some&lt;/code&gt; case call a function we starting to abstract it!
Instead of calling our function directly, we once again expect it to be passed as an argument. We will
call this abstract function &lt;code&gt;mapOption&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 92)&quot; onmouseover=&quot;showTip(event, 'fs33', 92)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 93)&quot; onmouseover=&quot;showTip(event, 'fs19', 93)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 94)&quot; onmouseover=&quot;showTip(event, 'fs34', 94)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 95)&quot; onmouseover=&quot;showTip(event, 'fs34', 95)&quot; class=&quot;i&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs29', 96)&quot; onmouseover=&quot;showTip(event, 'fs29', 96)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 97)&quot; onmouseover=&quot;showTip(event, 'fs29', 97)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs30', 98)&quot; onmouseover=&quot;showTip(event, 'fs30', 98)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 99)&quot; onmouseover=&quot;showTip(event, 'fs35', 99)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 100)&quot; onmouseover=&quot;showTip(event, 'fs30', 100)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs19', 101)&quot; onmouseover=&quot;showTip(event, 'fs19', 101)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 102)&quot; onmouseover=&quot;showTip(event, 'fs35', 102)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now can use &lt;code&gt;mapOption&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 103)&quot; onmouseover=&quot;showTip(event, 'fs36', 103)&quot; class=&quot;i&quot;&gt;OptionSquare1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 104)&quot; onmouseover=&quot;showTip(event, 'fs33', 104)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 105)&quot; onmouseover=&quot;showTip(event, 'fs6', 105)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs30', 106)&quot; onmouseover=&quot;showTip(event, 'fs30', 106)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 25&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 107)&quot; onmouseover=&quot;showTip(event, 'fs37', 107)&quot; class=&quot;i&quot;&gt;OptionSquare2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 108)&quot; onmouseover=&quot;showTip(event, 'fs33', 108)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 109)&quot; onmouseover=&quot;showTip(event, 'fs6', 109)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 110)&quot; onmouseover=&quot;showTip(event, 'fs29', 110)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 111)&quot; onmouseover=&quot;showTip(event, 'fs38', 111)&quot; class=&quot;i&quot;&gt;OptionAdd10_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 112)&quot; onmouseover=&quot;showTip(event, 'fs33', 112)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 113)&quot; onmouseover=&quot;showTip(event, 'fs7', 113)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;  (&lt;span onmouseout=&quot;hideTip(event, 'fs30', 114)&quot; onmouseover=&quot;showTip(event, 'fs30', 114)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 15&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 115)&quot; onmouseover=&quot;showTip(event, 'fs39', 115)&quot; class=&quot;i&quot;&gt;OptionAdd10_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 116)&quot; onmouseover=&quot;showTip(event, 'fs33', 116)&quot; class=&quot;f&quot;&gt;mapOption&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 117)&quot; onmouseover=&quot;showTip(event, 'fs7', 117)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs29', 118)&quot; onmouseover=&quot;showTip(event, 'fs29', 118)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's once again look at the type signature of our &lt;code&gt;mapOption&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 119)&quot; onmouseover=&quot;showTip(event, 'fs40', 119)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 120)&quot; onmouseover=&quot;showTip(event, 'fs41', 120)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 121)&quot; onmouseover=&quot;showTip(event, 'fs40', 121)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 122)&quot; onmouseover=&quot;showTip(event, 'fs41', 122)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Does this already look familiar?&lt;/p&gt;
&lt;h2&gt;The commonalities between &lt;code&gt;List.map&lt;/code&gt; and &lt;code&gt;Option.map&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now let's reconsider with what we started. We started with functions like &lt;code&gt;square&lt;/code&gt; and &lt;code&gt;add10&lt;/code&gt;.
But those function only could work with &lt;code&gt;int&lt;/code&gt;. But while we were programming we faced values like
&lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; or &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt;. To use our functions on those values, we somehow have to &lt;strong&gt;unwrap&lt;/strong&gt;
the values. Apply our function to the inner type &lt;code&gt;int&lt;/code&gt;, and wrap it up again. &lt;strong&gt;unwraping&lt;/strong&gt; is
different for every type. For &lt;code&gt;list&lt;/code&gt; it means we loop through a list. For an &lt;code&gt;option&lt;/code&gt; it means
we have to check whether it is &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. But we still can think of it as some kind of an
&lt;strong&gt;unwrap&lt;/strong&gt; function. Because what we do is, at some point in our function we turn an &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; or
an &lt;code&gt;option&amp;lt;int&amp;gt;&lt;/code&gt; just to in &lt;code&gt;int&lt;/code&gt;, so we can use the &lt;code&gt;int&lt;/code&gt; with our &lt;code&gt;square&lt;/code&gt; or &lt;code&gt;add10&lt;/code&gt; function.
But after applying our function we still return the type of what we started. When we started with
a &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; we still have to return a &lt;code&gt;list&lt;/code&gt; again. When we started with an &lt;code&gt;option&lt;/code&gt; we still
return an &lt;code&gt;option&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;But this is a repetitive task, as this kind of &lt;strong&gt;unwraping&lt;/strong&gt; and &lt;strong&gt;re-wraping&lt;/strong&gt; is always the same.
It doesn't matter which type we have inside &lt;code&gt;list&amp;lt;&amp;gt;&lt;/code&gt; or &lt;code&gt;option&lt;/code&gt;. And it also doesn't matter
which function we use.&lt;/p&gt;
&lt;p&gt;That's why we abstract those idea of &lt;strong&gt;unwrapping&lt;/strong&gt;, &lt;strong&gt;applying a function&lt;/strong&gt;, &lt;strong&gt;re-wrap&lt;/strong&gt; into it's
own function and name it &lt;code&gt;map&lt;/code&gt;. To understand this process further let's look again at the type
signatures of our &lt;code&gt;mapList&lt;/code&gt; and &lt;code&gt;mapOption&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 123)&quot; onmouseover=&quot;showTip(event, 'fs26', 123)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 124)&quot; onmouseover=&quot;showTip(event, 'fs26', 124)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 125)&quot; onmouseover=&quot;showTip(event, 'fs40', 125)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 126)&quot; onmouseover=&quot;showTip(event, 'fs41', 126)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 127)&quot; onmouseover=&quot;showTip(event, 'fs40', 127)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 128)&quot; onmouseover=&quot;showTip(event, 'fs41', 128)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This &lt;em&gt;type-signature&lt;/em&gt; is the essence of a &lt;code&gt;map&lt;/code&gt; function. Every &lt;code&gt;map&lt;/code&gt; function has to look like this.
The only part that changes is the &lt;em&gt;wrapping-type&lt;/em&gt;. So at this point you could probably already assume
how a &lt;code&gt;map&lt;/code&gt; function for &lt;code&gt;Result&lt;/code&gt;, &lt;code&gt;Async&lt;/code&gt; or &lt;code&gt;Whatever&lt;/code&gt; should look like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 129)&quot; onmouseover=&quot;showTip(event, 'fs42', 129)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 130)&quot; onmouseover=&quot;showTip(event, 'fs42', 130)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Whatever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Whatever&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Currying and Partial Application&lt;/h2&gt;
&lt;p&gt;At this point it is important to talk about Currying. Currying is the idea that there only
exists functions with &lt;strong&gt;one-argument&lt;/strong&gt; and they &lt;strong&gt;always&lt;/strong&gt; have to return a value. F# is such
a language and does currying automatically.&lt;/p&gt;
&lt;p&gt;That is also the very reason why you see multiple &lt;code&gt;-&amp;gt;&lt;/code&gt; inside a function signature. &lt;code&gt;-&amp;gt;&lt;/code&gt; is
basically the symbol for a function. On it's left-side is the input of the function, on the right
side is the output. When we look at a signature like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 131)&quot; onmouseover=&quot;showTip(event, 'fs10', 131)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 132)&quot; onmouseover=&quot;showTip(event, 'fs41', 132)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 133)&quot; onmouseover=&quot;showTip(event, 'fs43', 133)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We often say it has two arguments, a &lt;code&gt;string&lt;/code&gt; and a &lt;code&gt;int&lt;/code&gt; and it returns a &lt;code&gt;float&lt;/code&gt;. But this isn't
quite correct. What we really have is a function that only has one argument a &lt;code&gt;string&lt;/code&gt; and it will
return a &lt;code&gt;int -&amp;gt; float&lt;/code&gt;, or in other words. A new function! That is also the reason why functional
languages don't use braces as arguments, it just uses a space. Something like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 134)&quot; onmouseover=&quot;showTip(event, 'fs3', 134)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 135)&quot; onmouseover=&quot;showTip(event, 'fs4', 135)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 136)&quot; onmouseover=&quot;showTip(event, 'fs2', 136)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;really means. Execute &lt;code&gt;List.map f&lt;/code&gt; this returns a new function, and we immediately pass &lt;code&gt;xs&lt;/code&gt; to
that new function. That's also the reason why we can add braces around the function and the &lt;em&gt;first&lt;/em&gt;
argument without changing the meaning.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 137)&quot; onmouseover=&quot;showTip(event, 'fs3', 137)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 138)&quot; onmouseover=&quot;showTip(event, 'fs4', 138)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs2', 139)&quot; onmouseover=&quot;showTip(event, 'fs2', 139)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Not only that, we also can extract it, and save the &lt;em&gt;intermediate function&lt;/em&gt; as a new value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 140)&quot; onmouseover=&quot;showTip(event, 'fs3', 140)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 141)&quot; onmouseover=&quot;showTip(event, 'fs4', 141)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;ys&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newF&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 142)&quot; onmouseover=&quot;showTip(event, 'fs2', 142)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The idea to not pass all needed values is what we call &lt;em&gt;Partial Application&lt;/em&gt;. The interesting
stuff about all of this is, that with this idea, we can come up with different interpretation
of the same function. And this kind of interpretation is what we can apply to &lt;code&gt;map&lt;/code&gt;. Actually we
can view &lt;code&gt;map&lt;/code&gt; as a single argument function, or as a two argument functions. Both have some
different meaning. When we interpret &lt;code&gt;map&lt;/code&gt; as a single argument function, we now have something like
this&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;center&quot;&gt;&lt;p&gt;Function&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;p&gt;Input&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;p&gt;Output&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;List.map&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;'a -&amp;gt; 'b&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;list&lt;'a&gt; -&amp;gt; list&lt;'b&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;Option.map&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;'a -&amp;gt; 'b&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;option&lt;'a&gt; -&amp;gt; option&lt;'b&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;Result.map&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;'a -&amp;gt; 'b&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;Result&lt;'a&gt; -&amp;gt; Result&lt;'b&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;Async.map&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;'a -&amp;gt; 'b&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;Async&lt;'a&gt; -&amp;gt; Async&lt;'b&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;Whatever.map&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;'a -&amp;gt; 'b&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;Whatever&lt;'a&gt; -&amp;gt; Whatever&lt;'b&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It basically means we can think of &lt;code&gt;map&lt;/code&gt; of some kind of function that can &lt;strong&gt;upgrade&lt;/strong&gt; a function.
If we pass a &lt;code&gt;int -&amp;gt; string&lt;/code&gt; function for example to &lt;code&gt;List.map&lt;/code&gt; we get a &lt;code&gt;list&amp;lt;int&amp;gt; -&amp;gt; list&amp;lt;string&amp;gt;&lt;/code&gt;
function back! If we pass the same function to &lt;code&gt;Async.map&lt;/code&gt; we get a &lt;code&gt;Async&amp;lt;int&amp;gt; -&amp;gt; Async&amp;lt;string&amp;gt;&lt;/code&gt;
function back.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;map&lt;/code&gt; is a way to upgrade both sides (input and output) and add a layer to both sides. There are
two reason on why this concept is important.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Code-Reuse. If a type supports &lt;code&gt;map&lt;/code&gt;, you just can upgrade a function to work with this type.&lt;/li&gt;
&lt;li&gt;In your own functions, you don't need to care about the layer itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Code Reuse&lt;/h2&gt;
&lt;p&gt;So let's look again at our starting functions and just use them with the already built-in &lt;code&gt;List.map&lt;/code&gt;
and &lt;code&gt;Option.map&lt;/code&gt; functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 143)&quot; onmouseover=&quot;showTip(event, 'fs44', 143)&quot; class=&quot;f&quot;&gt;squareL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 144)&quot; onmouseover=&quot;showTip(event, 'fs3', 144)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 145)&quot; onmouseover=&quot;showTip(event, 'fs4', 145)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 146)&quot; onmouseover=&quot;showTip(event, 'fs6', 146)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 147)&quot; onmouseover=&quot;showTip(event, 'fs45', 147)&quot; class=&quot;f&quot;&gt;add10L&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 148)&quot; onmouseover=&quot;showTip(event, 'fs3', 148)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 149)&quot; onmouseover=&quot;showTip(event, 'fs4', 149)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 150)&quot; onmouseover=&quot;showTip(event, 'fs7', 150)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 151)&quot; onmouseover=&quot;showTip(event, 'fs46', 151)&quot; class=&quot;f&quot;&gt;lengthL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 152)&quot; onmouseover=&quot;showTip(event, 'fs3', 152)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 153)&quot; onmouseover=&quot;showTip(event, 'fs4', 153)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 154)&quot; onmouseover=&quot;showTip(event, 'fs8', 154)&quot; class=&quot;f&quot;&gt;length&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 155)&quot; onmouseover=&quot;showTip(event, 'fs47', 155)&quot; class=&quot;f&quot;&gt;squareO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 156)&quot; onmouseover=&quot;showTip(event, 'fs48', 156)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 157)&quot; onmouseover=&quot;showTip(event, 'fs49', 157)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 158)&quot; onmouseover=&quot;showTip(event, 'fs6', 158)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 159)&quot; onmouseover=&quot;showTip(event, 'fs50', 159)&quot; class=&quot;f&quot;&gt;add10O&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 160)&quot; onmouseover=&quot;showTip(event, 'fs48', 160)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 161)&quot; onmouseover=&quot;showTip(event, 'fs49', 161)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 162)&quot; onmouseover=&quot;showTip(event, 'fs7', 162)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 163)&quot; onmouseover=&quot;showTip(event, 'fs51', 163)&quot; class=&quot;f&quot;&gt;lengthO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 164)&quot; onmouseover=&quot;showTip(event, 'fs48', 164)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 165)&quot; onmouseover=&quot;showTip(event, 'fs49', 165)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 166)&quot; onmouseover=&quot;showTip(event, 'fs8', 166)&quot; class=&quot;f&quot;&gt;length&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we just can reuse our three functions. We never have to write special functions that loops
through a list. Or that handles &lt;code&gt;option&lt;/code&gt;, &lt;code&gt;Async&lt;/code&gt;, &lt;code&gt;Result&lt;/code&gt;, we just can &lt;strong&gt;upgrade&lt;/strong&gt; any
function we already have written.&lt;/p&gt;
&lt;h2&gt;You don't need to care for the layers&lt;/h2&gt;
&lt;p&gt;This is probably the biggest advantage, as you don't have to care for the &lt;em&gt;layers&lt;/em&gt;. You want
to convert a list of &lt;code&gt;int&lt;/code&gt; to a list of &lt;code&gt;string&lt;/code&gt;. Just write a function that does &lt;code&gt;int -&amp;gt; string&lt;/code&gt;
no List handling, no looping, no recursion. Use &lt;code&gt;List.map&lt;/code&gt; and you are done.&lt;/p&gt;
&lt;p&gt;And the big advantage. You also can use that function with &lt;code&gt;Option.map&lt;/code&gt; to turn it into a function
that works on a &lt;code&gt;option&lt;/code&gt; type. If you pass it to &lt;code&gt;Async.map&lt;/code&gt; you get a function that can work
on an asynchronous value. You don't need to write code for looping through a list, do pattern
match an option, or write code to handle asynchronicity.&lt;/p&gt;
&lt;p&gt;All of this is done for you by the &lt;code&gt;map&lt;/code&gt; function!&lt;/p&gt;
&lt;h2&gt;Async.map&lt;/h2&gt;
&lt;p&gt;Currently F# don't have a built-in &lt;code&gt;Async.map&lt;/code&gt; function. So let's create the &lt;code&gt;map&lt;/code&gt; function
for &lt;code&gt;Async&lt;/code&gt; ourselves.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 167)&quot; onmouseover=&quot;showTip(event, 'fs42', 167)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 168)&quot; onmouseover=&quot;showTip(event, 'fs52', 168)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 169)&quot; onmouseover=&quot;showTip(event, 'fs19', 169)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 170)&quot; onmouseover=&quot;showTip(event, 'fs53', 170)&quot; class=&quot;i&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 171)&quot; onmouseover=&quot;showTip(event, 'fs54', 171)&quot; class=&quot;i&quot;&gt;async&lt;/span&gt; {
        &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 172)&quot; onmouseover=&quot;showTip(event, 'fs22', 172)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 173)&quot; onmouseover=&quot;showTip(event, 'fs53', 173)&quot; class=&quot;i&quot;&gt;op&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 174)&quot; onmouseover=&quot;showTip(event, 'fs55', 174)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 175)&quot; onmouseover=&quot;showTip(event, 'fs19', 175)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 176)&quot; onmouseover=&quot;showTip(event, 'fs22', 176)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 177)&quot; onmouseover=&quot;showTip(event, 'fs55', 177)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So how do we now that we have to implement it in this way? Because that is what the &lt;em&gt;type-signature&lt;/em&gt;
is telling us. We have to write a function with the signature&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 178)&quot; onmouseover=&quot;showTip(event, 'fs42', 178)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 179)&quot; onmouseover=&quot;showTip(event, 'fs42', 179)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
That means a function with two arguments. The first arguments is a &lt;em&gt;function&lt;/em&gt; &lt;code&gt;'a -&amp;gt; 'b&lt;/code&gt;, the second
is an &lt;code&gt;Async&amp;lt;'a&amp;gt;&lt;/code&gt;, and we have to return an &lt;code&gt;Async&amp;lt;'b&amp;gt;&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Because we have to return an &lt;code&gt;Async&lt;/code&gt; we start with &lt;code&gt;async { ... }&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
Now &lt;code&gt;op&lt;/code&gt; is an &lt;code&gt;Async&amp;lt;'a&amp;gt;&lt;/code&gt;, with &lt;code&gt;let! x = op&lt;/code&gt; we run the the async operation.
This will &lt;strong&gt;unwrap&lt;/strong&gt; our &lt;code&gt;Async&amp;lt;'a&amp;gt;&lt;/code&gt; and just returns an &lt;code&gt;'a&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;We can pass that &lt;code&gt;'a&lt;/code&gt; to our function &lt;code&gt;f&lt;/code&gt; that converts &lt;code&gt;'a&lt;/code&gt; to an &lt;code&gt;'b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Once we have a &lt;code&gt;'b&lt;/code&gt; we &lt;code&gt;return&lt;/code&gt; it. &lt;code&gt;return&lt;/code&gt; basically wraps the &lt;code&gt;'b&lt;/code&gt; and adds the &lt;code&gt;Async&amp;lt;&amp;gt;&lt;/code&gt; layer.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Stacking Layers&lt;/h2&gt;
&lt;p&gt;The interesting idea is now. We are not restricted to adding a single layer. We can add as much layer
we want and stack them. For example we could have &lt;code&gt;option&lt;/code&gt; values that are wrapped inside a &lt;code&gt;list&lt;/code&gt; returned
by an &lt;code&gt;Async&lt;/code&gt; operation.&lt;/p&gt;
&lt;p&gt;To be more concrete. Let's assume we have some kind of async operation that downloads from a website
(The Async layer). This tries to Parse a table on a website that contains numbers (The List Layer).
But because parsing could fail, for example a table entry is not a number, we wrap it in a &lt;code&gt;Option&lt;/code&gt;
(The Optional Layer).&lt;/p&gt;
&lt;p&gt;Let's write a &lt;em&gt;mock&lt;/em&gt; function that returns this kind of data.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 180)&quot; onmouseover=&quot;showTip(event, 'fs56', 180)&quot; class=&quot;i&quot;&gt;downloadPage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 181)&quot; onmouseover=&quot;showTip(event, 'fs54', 181)&quot; class=&quot;i&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;c&quot;&gt;// Simulating Download, wait 1 second&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 182)&quot; onmouseover=&quot;showTip(event, 'fs57', 182)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs58', 183)&quot; onmouseover=&quot;showTip(event, 'fs58', 183)&quot; class=&quot;f&quot;&gt;Sleep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// A list of optionals list&amp;lt;option&amp;lt;int&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 184)&quot; onmouseover=&quot;showTip(event, 'fs59', 184)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs30', 185)&quot; onmouseover=&quot;showTip(event, 'fs30', 185)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 186)&quot; onmouseover=&quot;showTip(event, 'fs30', 186)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 187)&quot; onmouseover=&quot;showTip(event, 'fs29', 187)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 188)&quot; onmouseover=&quot;showTip(event, 'fs30', 188)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 189)&quot; onmouseover=&quot;showTip(event, 'fs29', 189)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 190)&quot; onmouseover=&quot;showTip(event, 'fs29', 190)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 191)&quot; onmouseover=&quot;showTip(event, 'fs30', 191)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;]
    &lt;span class=&quot;c&quot;&gt;// return it: This adds async&amp;lt;&amp;gt; layer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 192)&quot; onmouseover=&quot;showTip(event, 'fs59', 192)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What we now have is a &lt;code&gt;Async&amp;lt;list&amp;lt;option&amp;lt;int&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. Puh looks complicated! So what do we now
if we want to square the &lt;code&gt;int&lt;/code&gt; inside our &lt;code&gt;Async&amp;lt;List&amp;lt;Option&amp;lt;...&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; construct? We just add
one layer after another to &lt;code&gt;square&lt;/code&gt;. At first, we do a &lt;code&gt;Option.map&lt;/code&gt; on &lt;code&gt;square&lt;/code&gt;. The result
of this is a function that we pass to &lt;code&gt;List.map&lt;/code&gt; that adds the &lt;code&gt;List&lt;/code&gt; layer. And once again
the &lt;code&gt;Async.map&lt;/code&gt; finally adds the &lt;code&gt;Async&lt;/code&gt; layer.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 193)&quot; onmouseover=&quot;showTip(event, 'fs60', 193)&quot; class=&quot;f&quot;&gt;squaring&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 194)&quot; onmouseover=&quot;showTip(event, 'fs57', 194)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 195)&quot; onmouseover=&quot;showTip(event, 'fs52', 195)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 196)&quot; onmouseover=&quot;showTip(event, 'fs3', 196)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 197)&quot; onmouseover=&quot;showTip(event, 'fs4', 197)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs48', 198)&quot; onmouseover=&quot;showTip(event, 'fs48', 198)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 199)&quot; onmouseover=&quot;showTip(event, 'fs49', 199)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 200)&quot; onmouseover=&quot;showTip(event, 'fs6', 200)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have &lt;code&gt;squaring&lt;/code&gt; that has the following signature&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 201)&quot; onmouseover=&quot;showTip(event, 'fs42', 201)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 202)&quot; onmouseover=&quot;showTip(event, 'fs3', 202)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 203)&quot; onmouseover=&quot;showTip(event, 'fs48', 203)&quot; class=&quot;i&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 204)&quot; onmouseover=&quot;showTip(event, 'fs41', 204)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 205)&quot; onmouseover=&quot;showTip(event, 'fs42', 205)&quot; class=&quot;i&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 206)&quot; onmouseover=&quot;showTip(event, 'fs3', 206)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 207)&quot; onmouseover=&quot;showTip(event, 'fs48', 207)&quot; class=&quot;i&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 208)&quot; onmouseover=&quot;showTip(event, 'fs41', 208)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can now do&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 209)&quot; onmouseover=&quot;showTip(event, 'fs61', 209)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 210)&quot; onmouseover=&quot;showTip(event, 'fs57', 210)&quot; class=&quot;t&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs62', 211)&quot; onmouseover=&quot;showTip(event, 'fs62', 211)&quot; class=&quot;f&quot;&gt;RunSynchronously&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs60', 212)&quot; onmouseover=&quot;showTip(event, 'fs60', 212)&quot; class=&quot;f&quot;&gt;squaring&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 213)&quot; onmouseover=&quot;showTip(event, 'fs56', 213)&quot; class=&quot;i&quot;&gt;downloadPage&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And &lt;code&gt;data&lt;/code&gt; will be &lt;code&gt;[Some 1; Some 4; None; Some 9; None; None; Some 100]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;All &lt;code&gt;Option&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Async&lt;/code&gt; handling was handled for us. We just &lt;strong&gt;upgraded&lt;/strong&gt;
&lt;code&gt;square&lt;/code&gt; with the different &lt;code&gt;map&lt;/code&gt; functions until it matches our needed signature.&lt;/p&gt;
&lt;p&gt;Let's assume we wouldn't have &lt;code&gt;Async.map&lt;/code&gt;, &lt;code&gt;List.map&lt;/code&gt;, &lt;code&gt;Option.map&lt;/code&gt;. We would have needed
to write it like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 214)&quot; onmouseover=&quot;showTip(event, 'fs63', 214)&quot; class=&quot;f&quot;&gt;squaring&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 215)&quot; onmouseover=&quot;showTip(event, 'fs64', 215)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 216)&quot; onmouseover=&quot;showTip(event, 'fs54', 216)&quot; class=&quot;i&quot;&gt;async&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 217)&quot; onmouseover=&quot;showTip(event, 'fs65', 217)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 218)&quot; onmouseover=&quot;showTip(event, 'fs64', 218)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 219)&quot; onmouseover=&quot;showTip(event, 'fs66', 219)&quot; class=&quot;i&quot;&gt;squared&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 220)&quot; onmouseover=&quot;showTip(event, 'fs67', 220)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 221)&quot; onmouseover=&quot;showTip(event, 'fs65', 221)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 222)&quot; onmouseover=&quot;showTip(event, 'fs67', 222)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs29', 223)&quot; onmouseover=&quot;showTip(event, 'fs29', 223)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 224)&quot; onmouseover=&quot;showTip(event, 'fs29', 224)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs30', 225)&quot; onmouseover=&quot;showTip(event, 'fs30', 225)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 226)&quot; onmouseover=&quot;showTip(event, 'fs31', 226)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 227)&quot; onmouseover=&quot;showTip(event, 'fs30', 227)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 228)&quot; onmouseover=&quot;showTip(event, 'fs6', 228)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 229)&quot; onmouseover=&quot;showTip(event, 'fs31', 229)&quot; class=&quot;i&quot;&gt;value&lt;/span&gt;)
    ]
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;squared&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Functors&lt;/h2&gt;
&lt;p&gt;Whenever we have a type with a &lt;code&gt;map&lt;/code&gt; function we call it a &lt;em&gt;Functor&lt;/em&gt; if the implementation
of &lt;code&gt;map&lt;/code&gt; satisfies two laws. Those two laws ensures that &lt;code&gt;map&lt;/code&gt; is predictable and don't do
additional stuff we didn't expect.&lt;/p&gt;
&lt;h3&gt;1. Law: Mapping &lt;code&gt;id&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The first rule says that mapping over the &lt;code&gt;id&lt;/code&gt; function must not change the input. The &lt;code&gt;id&lt;/code&gt;
function is just a function that returns its input as-is&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 230)&quot; onmouseover=&quot;showTip(event, 'fs68', 230)&quot; class=&quot;i&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So when we write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 231)&quot; onmouseover=&quot;showTip(event, 'fs69', 231)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 232)&quot; onmouseover=&quot;showTip(event, 'fs3', 232)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 233)&quot; onmouseover=&quot;showTip(event, 'fs4', 233)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 234)&quot; onmouseover=&quot;showTip(event, 'fs68', 234)&quot; class=&quot;f&quot;&gt;id&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Then &lt;code&gt;xs&lt;/code&gt; still must be &lt;code&gt;[1;2;3;4;5]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;2. Law: Function composition&lt;/h3&gt;
&lt;p&gt;The second rule says that composing two functions and then mapping, should be the same
as mapping over both functions separately.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// 1 solution: compose two functions, and then map&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 235)&quot; onmouseover=&quot;showTip(event, 'fs70', 235)&quot; class=&quot;f&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 236)&quot; onmouseover=&quot;showTip(event, 'fs6', 236)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 237)&quot; onmouseover=&quot;showTip(event, 'fs7', 237)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 238)&quot; onmouseover=&quot;showTip(event, 'fs71', 238)&quot; class=&quot;i&quot;&gt;cxs&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 239)&quot; onmouseover=&quot;showTip(event, 'fs3', 239)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 240)&quot; onmouseover=&quot;showTip(event, 'fs4', 240)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 241)&quot; onmouseover=&quot;showTip(event, 'fs70', 241)&quot; class=&quot;f&quot;&gt;comp&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]

&lt;span class=&quot;c&quot;&gt;// 2 solution: mapping it two times&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 242)&quot; onmouseover=&quot;showTip(event, 'fs72', 242)&quot; class=&quot;i&quot;&gt;sxs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 243)&quot; onmouseover=&quot;showTip(event, 'fs3', 243)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 244)&quot; onmouseover=&quot;showTip(event, 'fs4', 244)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 245)&quot; onmouseover=&quot;showTip(event, 'fs6', 245)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 246)&quot; onmouseover=&quot;showTip(event, 'fs3', 246)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 247)&quot; onmouseover=&quot;showTip(event, 'fs4', 247)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 248)&quot; onmouseover=&quot;showTip(event, 'fs7', 248)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs71', 249)&quot; onmouseover=&quot;showTip(event, 'fs71', 249)&quot; class=&quot;i&quot;&gt;cxs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 250)&quot; onmouseover=&quot;showTip(event, 'fs72', 250)&quot; class=&quot;i&quot;&gt;sxs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// must be the same&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It shouldn't matter if we go through the list take one element and then do &lt;code&gt;square&lt;/code&gt; and &lt;code&gt;add10&lt;/code&gt;
in one-step. Or if we go trough our list two times and do it in two separately steps. Both
&lt;code&gt;cxs&lt;/code&gt; and &lt;code&gt;sxs&lt;/code&gt; have to return the same result &lt;code&gt;[11;14;19;26;35]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;List.map&lt;/code&gt; satisfies both laws, we say that &lt;code&gt;List&lt;/code&gt; is a &lt;em&gt;functor&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I hope it is now clear why &lt;code&gt;map&lt;/code&gt; is such an important function. Implementing a &lt;code&gt;map&lt;/code&gt; function
just means you can &lt;strong&gt;upgrade&lt;/strong&gt; already available functions. It opens up a lot of
code reuse as you don't have to write special glue code that handles your type/layer.&lt;/p&gt;
&lt;p&gt;It also can make writing new functions easier, as you don't have to care about a layer.
If you find yourself writing a function that has a list as its input and a list as its output
then you are &lt;em&gt;probably&lt;/em&gt; doing something wrong! The same goes for every other type.&lt;/p&gt;
&lt;p&gt;Not only is it easier to just write a function that don't contain any list/looping/recursion
logic. Such a function is even more reusable.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/posts/elevated-world/&quot;&gt;Understanding map and apply&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val xs : int list&lt;br /&gt;&lt;br /&gt;Full name: understandingmap.xs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val square : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.square&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val add10 : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val length : str:string -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.length&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;property System.String.Length: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val squareList : xs:seq&amp;lt;int&amp;gt; -&amp;gt; int list&lt;br /&gt;&lt;br /&gt;Full name: Main.squareList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val xs : seq&amp;lt;int&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val mutable results : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val res : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val rev : list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.rev&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val add10List : xs:seq&amp;lt;int&amp;gt; -&amp;gt; int list&lt;br /&gt;&lt;br /&gt;Full name: Main.add10List&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val mapList : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; xs:seq&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.mapList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val xs : seq&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val mutable results : &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val mapping : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val listOfsquared : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.listOfsquared&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val listOfAdd10 : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.listOfAdd10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val squareOption : opt:int option -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.squareOption&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val opt : int option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val value : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val add10Option : opt:int option -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.add10Option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val mapOption : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; opt:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.mapOption&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val opt : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val value : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val OptionSquare1 : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.OptionSquare1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val OptionSquare2 : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.OptionSquare2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val OptionAdd10_1 : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.OptionAdd10_1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val OptionAdd10_2 : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.OptionAdd10_2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;type &amp;#39;T option = Option&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.option&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;Multiple items&lt;br /&gt;type Async&lt;br /&gt;static member AsBeginEnd : computation:(&amp;#39;Arg -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;) -&amp;gt; (&amp;#39;Arg * AsyncCallback * obj -&amp;gt; IAsyncResult) * (IAsyncResult -&amp;gt; &amp;#39;T) * (IAsyncResult -&amp;gt; unit)&lt;br /&gt;static member AwaitEvent : event:IEvent&amp;lt;&amp;#39;Del,&amp;#39;T&amp;gt; * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt; (requires delegate and &amp;#39;Del :&amp;gt; Delegate)&lt;br /&gt;static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member CancelDefaultToken : unit -&amp;gt; unit&lt;br /&gt;static member Catch : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;Choice&amp;lt;&amp;#39;T,exn&amp;gt;&amp;gt;&lt;br /&gt;static member FromBeginEnd : beginAction:(AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg:&amp;#39;Arg1 * beginAction:(&amp;#39;Arg1 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * arg3:&amp;#39;Arg3 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * &amp;#39;Arg3 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromContinuations : callback:((&amp;#39;T -&amp;gt; unit) * (exn -&amp;gt; unit) * (OperationCanceledException -&amp;gt; unit) -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member Ignore : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member OnCancel : interruption:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;IDisposable&amp;gt;&lt;br /&gt;static member Parallel : computations:seq&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T []&amp;gt;&lt;br /&gt;static member RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:CancellationToken -&amp;gt; &amp;#39;T&lt;br /&gt;static member Sleep : millisecondsDueTime:int -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member Start : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&amp;gt; Task&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member StartChild : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartChildAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions -&amp;gt; Async&amp;lt;Task&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartImmediate : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartWithContinuations : computation:Async&amp;lt;&amp;#39;T&amp;gt; * continuation:(&amp;#39;T -&amp;gt; unit) * exceptionContinuation:(exn -&amp;gt; unit) * cancellationContinuation:(OperationCanceledException -&amp;gt; unit) * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member SwitchToContext : syncContext:SynchronizationContext -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToNewThread : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToThreadPool : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member TryCancelled : computation:Async&amp;lt;&amp;#39;T&amp;gt; * compensation:(OperationCanceledException -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member CancellationToken : Async&amp;lt;CancellationToken&amp;gt;&lt;br /&gt;static member DefaultCancellationToken : CancellationToken&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = System.Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val squareL : (int list -&amp;gt; int list)&lt;br /&gt;&lt;br /&gt;Full name: Main.squareL&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val add10L : (int list -&amp;gt; int list)&lt;br /&gt;&lt;br /&gt;Full name: Main.add10L&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val lengthL : (string list -&amp;gt; int list)&lt;br /&gt;&lt;br /&gt;Full name: Main.lengthL&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val squareO : (int option -&amp;gt; int option)&lt;br /&gt;&lt;br /&gt;Full name: Main.squareO&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val add10O : (int option -&amp;gt; int option)&lt;br /&gt;&lt;br /&gt;Full name: Main.add10O&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val lengthO : (string option -&amp;gt; int option)&lt;br /&gt;&lt;br /&gt;Full name: Main.lengthO&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val map : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; op:Async&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Async.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val op : Async&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val async : AsyncBuilder&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.async&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val value : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val downloadPage : Async&amp;lt;int option list&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.downloadPage&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;Multiple items&lt;br /&gt;module Async&lt;br /&gt;&lt;br /&gt;from Main&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&lt;br /&gt;static member AsBeginEnd : computation:(&amp;#39;Arg -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;) -&amp;gt; (&amp;#39;Arg * AsyncCallback * obj -&amp;gt; IAsyncResult) * (IAsyncResult -&amp;gt; &amp;#39;T) * (IAsyncResult -&amp;gt; unit)&lt;br /&gt;static member AwaitEvent : event:IEvent&amp;lt;&amp;#39;Del,&amp;#39;T&amp;gt; * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt; (requires delegate and &amp;#39;Del :&amp;gt; Delegate)&lt;br /&gt;static member AwaitIAsyncResult : iar:IAsyncResult * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member AwaitTask : task:Task&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member AwaitWaitHandle : waitHandle:WaitHandle * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;bool&amp;gt;&lt;br /&gt;static member CancelDefaultToken : unit -&amp;gt; unit&lt;br /&gt;static member Catch : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;Choice&amp;lt;&amp;#39;T,exn&amp;gt;&amp;gt;&lt;br /&gt;static member FromBeginEnd : beginAction:(AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg:&amp;#39;Arg1 * beginAction:(&amp;#39;Arg1 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromBeginEnd : arg1:&amp;#39;Arg1 * arg2:&amp;#39;Arg2 * arg3:&amp;#39;Arg3 * beginAction:(&amp;#39;Arg1 * &amp;#39;Arg2 * &amp;#39;Arg3 * AsyncCallback * obj -&amp;gt; IAsyncResult) * endAction:(IAsyncResult -&amp;gt; &amp;#39;T) * ?cancelAction:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member FromContinuations : callback:((&amp;#39;T -&amp;gt; unit) * (exn -&amp;gt; unit) * (OperationCanceledException -&amp;gt; unit) -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member Ignore : computation:Async&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member OnCancel : interruption:(unit -&amp;gt; unit) -&amp;gt; Async&amp;lt;IDisposable&amp;gt;&lt;br /&gt;static member Parallel : computations:seq&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;&amp;#39;T []&amp;gt;&lt;br /&gt;static member RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:CancellationToken -&amp;gt; &amp;#39;T&lt;br /&gt;static member Sleep : millisecondsDueTime:int -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member Start : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions * ?cancellationToken:CancellationToken -&amp;gt; Task&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member StartChild : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?millisecondsTimeout:int -&amp;gt; Async&amp;lt;Async&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartChildAsTask : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?taskCreationOptions:TaskCreationOptions -&amp;gt; Async&amp;lt;Task&amp;lt;&amp;#39;T&amp;gt;&amp;gt;&lt;br /&gt;static member StartImmediate : computation:Async&amp;lt;unit&amp;gt; * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member StartWithContinuations : computation:Async&amp;lt;&amp;#39;T&amp;gt; * continuation:(&amp;#39;T -&amp;gt; unit) * exceptionContinuation:(exn -&amp;gt; unit) * cancellationContinuation:(OperationCanceledException -&amp;gt; unit) * ?cancellationToken:CancellationToken -&amp;gt; unit&lt;br /&gt;static member SwitchToContext : syncContext:SynchronizationContext -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToNewThread : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member SwitchToThreadPool : unit -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;br /&gt;static member TryCancelled : computation:Async&amp;lt;&amp;#39;T&amp;gt; * compensation:(OperationCanceledException -&amp;gt; unit) -&amp;gt; Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;static member CancellationToken : Async&amp;lt;CancellationToken&amp;gt;&lt;br /&gt;static member DefaultCancellationToken : CancellationToken&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Async&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Control.Async&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;static member Async.Sleep : millisecondsDueTime:int -&amp;gt; Async&amp;lt;unit&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val numbers : int option list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val squaring : (Async&amp;lt;int option list&amp;gt; -&amp;gt; Async&amp;lt;int option list&amp;gt;)&lt;br /&gt;&lt;br /&gt;Full name: Main.squaring&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val data : int option list&lt;br /&gt;&lt;br /&gt;Full name: Main.data&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;static member Async.RunSynchronously : computation:Async&amp;lt;&amp;#39;T&amp;gt; * ?timeout:int * ?cancellationToken:System.Threading.CancellationToken -&amp;gt; &amp;#39;T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val squaring&amp;#39; : input:Async&amp;lt;#seq&amp;lt;int option&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;int option list&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.squaring&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val input : Async&amp;lt;#seq&amp;lt;int option&amp;gt;&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val data : #seq&amp;lt;int option&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val squared : int option list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val x : int option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val id : x:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.id&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val xs : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.xs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val comp : (int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.comp&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val cxs : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.cxs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val sxs : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.sxs&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Exceptions are Evil</title>
   <link href="https://sidburn.github.io/blog/2016/03/25/exceptions-are-evil"/>
   <updated>2016-03-25T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/25/exceptions-are-evil</id>
   <content type="html">&lt;p&gt;Most people today agree that &lt;code&gt;null&lt;/code&gt; is evil, and they try to get rid of them. One technique that
most people prefer is to throw an exception in the case of an error, or if we cannot return a valid
value from a function. The problem is, exceptions are not any kind better than &lt;code&gt;null&lt;/code&gt;, and
they don't solve any problem that &lt;code&gt;null&lt;/code&gt; introduced.&lt;/p&gt;
&lt;p&gt;In my previous post &lt;a href=&quot;/blog/2016/03/20/null-is-evil&quot;&gt;null is Evil&lt;/a&gt; i mentioned seven
problems that &lt;code&gt;null&lt;/code&gt; introduced. So let's look if &lt;em&gt;exceptions&lt;/em&gt; solve one of those problems.&lt;/p&gt;
&lt;h2&gt;1. You cannot see if a function throws an exception&lt;/h2&gt;
&lt;p&gt;When you look at the type signature of any function, you just see something like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;PersonId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Person&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The same way that you cannot see that &lt;code&gt;null&lt;/code&gt; could be returned. The same way you don't know
if an exception could be thrown or not.&lt;/p&gt;
&lt;h2&gt;2. We are not forced to try/catch&lt;/h2&gt;
&lt;p&gt;You are not forced to add any kind of &lt;code&gt;try/catch&lt;/code&gt;, the same way you are not forced to add
a &lt;code&gt;null&lt;/code&gt; check. If you forgot to add your &lt;code&gt;null&lt;/code&gt; checks, you end up getting &lt;code&gt;NullReferenceException&lt;/code&gt;.
If you forgot to adding &lt;code&gt;try/catch&lt;/code&gt; you end up with &lt;code&gt;XYZException&lt;/code&gt;. Replacing a &lt;code&gt;NullReferenceException&lt;/code&gt;
just with another kind of &lt;code&gt;Exception&lt;/code&gt; isn't anyway better.&lt;/p&gt;
&lt;h2&gt;3. Every function could throw an Exception&lt;/h2&gt;
&lt;p&gt;The big problem of 1. and 2. combined is that you defensively start to check all return values
from a function if it contains &lt;code&gt;null&lt;/code&gt;. And you also have to check every argument if it contains
&lt;code&gt;null&lt;/code&gt;. This leads to numerous &lt;code&gt;null&lt;/code&gt; checking throughout your code. But why do you add those
checks in the first place? Because you want to prevent &lt;code&gt;NullReferenceException&lt;/code&gt;. So how is a
function that sometimes returns &lt;code&gt;null&lt;/code&gt; that can lead to a &lt;code&gt;NullReferenceException&lt;/code&gt; anyhow better
as a function that sometimes throws &lt;code&gt;XYZException&lt;/code&gt; directly?&lt;/p&gt;
&lt;p&gt;Not only does it not solve the problem at all. You still have to add your checkings. But instead of
&lt;code&gt;null&lt;/code&gt; checks throughout your code. You wrap your code in &lt;code&gt;try/catch&lt;/code&gt; blocks. Why is checking for
null bad&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;SomeFunction&lt;/span&gt;()
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Some code if everything was right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Error condition on null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;and suddenly wrapping your code in a &lt;code&gt;try/catch&lt;/code&gt; anyhow better?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;SomeFunction&lt;/span&gt;()
    &lt;span class=&quot;c&quot;&gt;// Some code if everything was right&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs1', 1)&quot; onmouseover=&quot;showTip(event, 'fs1', 1)&quot; class=&quot;i&quot;&gt;exn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Error condition on Exception&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;4. We cannot skip the checking&lt;/h2&gt;
&lt;p&gt;Probably you would assume that exceptions solve it, but actually, they don't really provide an improvement.
Sure, you don't have to wrap a try/catch block around your code. Exactly the same as you don't have
to write an explicit &lt;code&gt;null&lt;/code&gt; check. So what happens in both cases?&lt;/p&gt;
&lt;p&gt;In both cases an exception is thrown either a &lt;code&gt;NullReferenceException&lt;/code&gt; or probably you throw some other kind of
&lt;code&gt;Exception&lt;/code&gt;. Yes, you can catch your &lt;code&gt;Exception&lt;/code&gt; further up the stack. The same way as you can catch
a &lt;code&gt;NullReferenceException&lt;/code&gt; further up the stack. There is no difference at all here.&lt;/p&gt;
&lt;p&gt;But overall, this was not meant with &lt;em&gt;skipping&lt;/em&gt;. The idea of &lt;em&gt;skipping&lt;/em&gt; was that you can do the null check
at some later point where it makes sense. That doesn't mean only &quot;further up the stack&quot;. The idea is that you
pass the whole error as a value around, as you can do with &lt;code&gt;Optional&lt;/code&gt;, and additional you are forced
to check the condition of your &lt;code&gt;Optional&lt;/code&gt; at compile-time.&lt;/p&gt;
&lt;h2&gt;5. and 6. We can pass functions/objects that throws exception around&lt;/h2&gt;
&lt;p&gt;At default you don't pass &lt;code&gt;Exception&lt;/code&gt; types as values around. You wrap your code in a &lt;code&gt;try/catch&lt;/code&gt; and that's
it. You also cannot implicitly pass an &lt;code&gt;Exception&lt;/code&gt; as a valid value to a function that expects a &lt;code&gt;Person&lt;/code&gt;. With
&lt;code&gt;null&lt;/code&gt; you can do that, that's why we have to also add &lt;code&gt;null&lt;/code&gt; checks for function arguments.&lt;/p&gt;
&lt;p&gt;So it seems we are not affected if we throw exceptions. But that is wrong. An object itself contains &lt;em&gt;methods&lt;/em&gt;.
And every method on an object could throw an exception.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;null&lt;/code&gt; you have to check every argument if it is &lt;code&gt;null&lt;/code&gt;. With &lt;em&gt;exceptions&lt;/em&gt; you have to additional add
try/catch blocks if you call a method on an object. Because you pass objects around, and objects have &lt;em&gt;methods&lt;/em&gt;
that could throw exceptions when invoked. You end up with the same problem.&lt;/p&gt;
&lt;h2&gt;7. Happy Path Coding&lt;/h2&gt;
&lt;p&gt;It seems &lt;em&gt;Exceptions&lt;/em&gt; solve the problem of Happy-Path coding. But it really does not. Yes, you are not forced to add
a &lt;code&gt;try/catch&lt;/code&gt; around every function directly. You just can use one &lt;code&gt;try/catch&lt;/code&gt; around the whole code and catch
&lt;strong&gt;any exception&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Absolutely, and the thing is. &lt;strong&gt;Any exception&lt;/strong&gt; also includes &lt;code&gt;NullReferenceException&lt;/code&gt;. So if you like to have
&lt;em&gt;exceptions&lt;/em&gt;. No problem, just return &lt;code&gt;null&lt;/code&gt; from your functions and don't add any &lt;code&gt;null&lt;/code&gt; checks.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;It seems many people forget about why &lt;code&gt;null&lt;/code&gt; is bad. &lt;code&gt;null&lt;/code&gt; is bad because &lt;strong&gt;they throw exceptions&lt;/strong&gt; when
you try to use them. So using &lt;em&gt;exceptions&lt;/em&gt; instead of using &lt;code&gt;null&lt;/code&gt; makes nothing better at all. The reason
why we add all those &lt;code&gt;null&lt;/code&gt; checks is to &lt;strong&gt;prevent exceptions&lt;/strong&gt; to happen. So how can we get rid of that problem
if we choose to directly throw exceptions?&lt;/p&gt;
&lt;p&gt;We can't. Throwing &lt;em&gt;exceptions&lt;/em&gt; as a solution of getting rid of &lt;em&gt;null&lt;/em&gt; is just a Pyrrhic victory. Not only that.
Exceptions in general share the same problems as &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what is the alternative? My Post about &lt;a href=&quot;/blog/2016/03/20/null-is-evil&quot;&gt;null is Evil&lt;/a&gt; contains solution
of getting rid of &lt;code&gt;null&lt;/code&gt;. The thing is, the same solutions also works for &lt;em&gt;Exceptions&lt;/em&gt;!&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/rop/&quot;&gt;Railway Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ploeh.dk/2016/03/21/composition-with-an-either-computation-expression/&quot;&gt;Composition with an Either computation expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.leifbattermann.de/2016/04/09/functional-error-handling-in-fsharp-by-example/&quot;&gt;Functional Error Handling in F# by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.joelonsoftware.com/2003/10/13/13/&quot;&gt;Joel on Software - Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;type exn = System.Exception&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.exn&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Higher-kinded Polymorphism: What is it, why you want it</title>
   <link href="https://sidburn.github.io/blog/2016/03/24/higher-kinded-polymorphism"/>
   <updated>2016-03-24T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/24/higher-kinded-polymorphism</id>
   <content type="html">&lt;p&gt;One aspect of a programming language that is often noted as important is the idea of &lt;em&gt;Polymorphism&lt;/em&gt;.
But there doesn't exists just one type of polymorphism. In functional languages &lt;em&gt;Parametric
Polymorphism&lt;/em&gt; (aka Generics) is often used. Haskell was the first language that introduced
&quot;Higher-kinded polymorphism&quot;. Sadly, F# don't support this kind of polymorphism directly. Actually it
only has partial support for it. So let's look in what it is, and why you want it.&lt;/p&gt;
&lt;h2&gt;Polymorphism&lt;/h2&gt;
&lt;p&gt;Before we go deeper let's recap what polymorphism is about. Polymorphism is the idea
that you can write code that looks the same. But it can do different things depending on the
concrete type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we see here, we have a polymorphic &lt;code&gt;+&lt;/code&gt;. Depending on it's type, it does different things.
It either can add two &lt;code&gt;int&lt;/code&gt; or add two &lt;code&gt;string&lt;/code&gt;. It is important to note that the types itself
still remain the same. &lt;code&gt;+&lt;/code&gt; is polymorphic because it can be used with different types, but every
type can have it's own implementation.&lt;/p&gt;
&lt;p&gt;This idea is important because it can greatly help to make code readable. Let's assume we wouldn't
be able to write a polymorphic &lt;code&gt;+&lt;/code&gt;, so &lt;code&gt;+&lt;/code&gt; always can only operate on a concrete predefined type.
If that would be true, we actually would need different &lt;code&gt;+&lt;/code&gt; operators for every type. For example
OCaml doesn't support this kind of polymorphism, so OCaml has two different types for adding
&lt;code&gt;int&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;ocaml&quot;&gt;let x = a + b  // int
let y = a +. b // float
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;So if you want to add a &lt;code&gt;string&lt;/code&gt; you need yet again another operator/function. So Polymorphism can
greatly help, because we can create the general concept of &lt;em&gt;add two things&lt;/em&gt;. And we can use this
operation with different types.&lt;/p&gt;
&lt;h2&gt;Higher-kinded polymorphism&lt;/h2&gt;
&lt;p&gt;Now let's assume we want to write a function that just adds two &lt;code&gt;int&lt;/code&gt; together. We could just write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 7)&quot; onmouseover=&quot;showTip(event, 'fs5', 7)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we inspect the type-signature of this function, we get &lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt;. The reason for this
is that the type-inference system of the F# compiler defaults to &lt;code&gt;int&lt;/code&gt;. But actually the type
can change if we use &lt;code&gt;add&lt;/code&gt; with a different type. For example if we write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 10)&quot; onmouseover=&quot;showTip(event, 'fs8', 10)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 11)&quot; onmouseover=&quot;showTip(event, 'fs9', 11)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 12)&quot; onmouseover=&quot;showTip(event, 'fs8', 12)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 13)&quot; onmouseover=&quot;showTip(event, 'fs9', 13)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 14)&quot; onmouseover=&quot;showTip(event, 'fs10', 14)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 15)&quot; onmouseover=&quot;showTip(event, 'fs7', 15)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have &lt;code&gt;add&lt;/code&gt; with the signature &lt;code&gt;float -&amp;gt; float -&amp;gt; float&lt;/code&gt;. But it is still important to note that
&lt;code&gt;add&lt;/code&gt; now only can work with float. Using it like these&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 16)&quot; onmouseover=&quot;showTip(event, 'fs7', 16)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 17)&quot; onmouseover=&quot;showTip(event, 'fs8', 17)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 18)&quot; onmouseover=&quot;showTip(event, 'fs9', 18)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 19)&quot; onmouseover=&quot;showTip(event, 'fs8', 19)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 20)&quot; onmouseover=&quot;showTip(event, 'fs9', 20)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 21)&quot; onmouseover=&quot;showTip(event, 'fs11', 21)&quot; class=&quot;i&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 22)&quot; onmouseover=&quot;showTip(event, 'fs7', 22)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 23)&quot; onmouseover=&quot;showTip(event, 'fs12', 23)&quot; class=&quot;i&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 24)&quot; onmouseover=&quot;showTip(event, 'fs7', 24)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;will create errors at line 3 saying that &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt; was expected to be of type &lt;code&gt;float&lt;/code&gt;
but we provided &lt;code&gt;int&lt;/code&gt; as a value.&lt;/p&gt;
&lt;p&gt;The problem we have is that &lt;code&gt;add&lt;/code&gt; itself is not polymorphic at all. But let's consider, why do we have
that behaviour anyway? The only thing we do is add two things together, adding two things together is
polymorphic, so doesn't make it sense that &lt;code&gt;add&lt;/code&gt; also should be polymorphic? Well yes, it makes sense,
but this is not what F# does by default. At default it tries to get concrete types or also generic
types. But it cannot automatically create Polymorphic functions that accepts all types that can be
added (+), for instance.&lt;/p&gt;
&lt;p&gt;But as said before, F# supports this kind of stuff partly. Indeed we can fix this problem
very easily with the &lt;code&gt;inline&lt;/code&gt; keyword.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 25)&quot; onmouseover=&quot;showTip(event, 'fs13', 25)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 26)&quot; onmouseover=&quot;showTip(event, 'fs14', 26)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 27)&quot; onmouseover=&quot;showTip(event, 'fs15', 27)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 28)&quot; onmouseover=&quot;showTip(event, 'fs14', 28)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 29)&quot; onmouseover=&quot;showTip(event, 'fs15', 29)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 30)&quot; onmouseover=&quot;showTip(event, 'fs16', 30)&quot; class=&quot;i&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 31)&quot; onmouseover=&quot;showTip(event, 'fs13', 31)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 32)&quot; onmouseover=&quot;showTip(event, 'fs17', 32)&quot; class=&quot;i&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 33)&quot; onmouseover=&quot;showTip(event, 'fs13', 33)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now all compiler errors are gone. Let's look at the type-signature of &lt;code&gt;add&lt;/code&gt; again.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What we now have is a function that can take two generic values. But not any kind of generics. Both
generics must support the &lt;code&gt;+&lt;/code&gt; operation. It is also important to look at the return types. &lt;code&gt;r1&lt;/code&gt; is
of type &lt;code&gt;float&lt;/code&gt; while &lt;code&gt;r2&lt;/code&gt; is of type &lt;code&gt;int&lt;/code&gt;. If you come from a C# background it could probably be that
you are not impressed, but actually such kind of function is not possible to write in C#. In C# you
always have to provide explicit arguments, and you have to write two version of &lt;code&gt;Add&lt;/code&gt; if the return
type should remain the same.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;float&lt;/span&gt; x, &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt; y) {
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Actually you cannot write it with a generic type like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;T&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 34)&quot; onmouseover=&quot;showTip(event, 'fs2', 34)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;i&quot;&gt;T&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 35)&quot; onmouseover=&quot;showTip(event, 'fs3', 35)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) {
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 36)&quot; onmouseover=&quot;showTip(event, 'fs2', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 37)&quot; onmouseover=&quot;showTip(event, 'fs3', 37)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The problem with this code is. You cannot add two generic variables! What you really need is the ability
to say: Allow any type that supports the &lt;code&gt;+&lt;/code&gt; operation.&lt;/p&gt;
&lt;p&gt;Probably you will say: Okay but i don't need to write the &lt;code&gt;int&lt;/code&gt; version. As &lt;code&gt;int&lt;/code&gt; can implicitly convert
to &lt;code&gt;float&lt;/code&gt;, so the &lt;code&gt;float&lt;/code&gt; version also works with &lt;code&gt;int&lt;/code&gt;. That might be right, but it is not the same,
your return type will also be &lt;code&gt;float&lt;/code&gt; not &lt;code&gt;int&lt;/code&gt; anymore. We could argue with &lt;em&gt;floating-point inaccuracy&lt;/em&gt;
on why it is not the same, but there is a better way to show the difference. What do you do if your type
supports &lt;code&gt;+&lt;/code&gt; but don't support a conversion to &lt;code&gt;float&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Let's assume we have the following &lt;code&gt;Vector3&lt;/code&gt; type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 94)&quot; onmouseover=&quot;showTip(event, 'fs20', 94)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 95)&quot; onmouseover=&quot;showTip(event, 'fs20', 95)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 96)&quot; onmouseover=&quot;showTip(event, 'fs20', 96)&quot; class=&quot;i&quot;&gt;float&lt;/span&gt;} &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 97)&quot; onmouseover=&quot;showTip(event, 'fs2', 97)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 98)&quot; onmouseover=&quot;showTip(event, 'fs3', 98)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 99)&quot; onmouseover=&quot;showTip(event, 'fs2', 99)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 100)&quot; onmouseover=&quot;showTip(event, 'fs3', 100)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;z&lt;/span&gt;}
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;)    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;create&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;X&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Y&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Z&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have our own &lt;code&gt;Vector3&lt;/code&gt; and implemented &lt;code&gt;+&lt;/code&gt; for it. The big advantage is now, that
our &lt;code&gt;Vector3&lt;/code&gt; also can be used with our polymorphic &lt;code&gt;add&lt;/code&gt; function written in F#. But in C#
you must create a new &lt;code&gt;Add&lt;/code&gt; function instead, because we cannot convert a &lt;code&gt;Vector3&lt;/code&gt; to a &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 101)&quot; onmouseover=&quot;showTip(event, 'fs33', 101)&quot; class=&quot;i&quot;&gt;vec1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 102)&quot; onmouseover=&quot;showTip(event, 'fs18', 102)&quot; class=&quot;t&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 103)&quot; onmouseover=&quot;showTip(event, 'fs27', 103)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 104)&quot; onmouseover=&quot;showTip(event, 'fs34', 104)&quot; class=&quot;i&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 105)&quot; onmouseover=&quot;showTip(event, 'fs18', 105)&quot; class=&quot;t&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 106)&quot; onmouseover=&quot;showTip(event, 'fs27', 106)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 107)&quot; onmouseover=&quot;showTip(event, 'fs35', 107)&quot; class=&quot;i&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 108)&quot; onmouseover=&quot;showTip(event, 'fs13', 108)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 109)&quot; onmouseover=&quot;showTip(event, 'fs33', 109)&quot; class=&quot;i&quot;&gt;vec1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 110)&quot; onmouseover=&quot;showTip(event, 'fs34', 110)&quot; class=&quot;i&quot;&gt;vec2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now &lt;code&gt;vec3&lt;/code&gt; will also be of type &lt;code&gt;Vector3&lt;/code&gt; containing &lt;code&gt;{X = 3.0; Y = 3.0; Z = 3.0;}&lt;/code&gt;. But probably
now you will say. Okay, but our &lt;code&gt;add&lt;/code&gt; function is some kind of silly. We also could use &lt;code&gt;+&lt;/code&gt; directly
and we wouldn't have the problem at all. So let's create a more advanced function that does a little
bit more. Let's create an &lt;code&gt;average&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;To start, let's create a non-polymorphic &lt;code&gt;average&lt;/code&gt; function that expects a &lt;code&gt;float list&lt;/code&gt; as input, and
returns the average.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 111)&quot; onmouseover=&quot;showTip(event, 'fs36', 111)&quot; class=&quot;f&quot;&gt;averageFloat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 112)&quot; onmouseover=&quot;showTip(event, 'fs37', 112)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 113)&quot; onmouseover=&quot;showTip(event, 'fs38', 113)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// The amount of values we have&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 114)&quot; onmouseover=&quot;showTip(event, 'fs39', 114)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Zero for `float`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 115)&quot; onmouseover=&quot;showTip(event, 'fs8', 115)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 116)&quot; onmouseover=&quot;showTip(event, 'fs37', 116)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs39', 117)&quot; onmouseover=&quot;showTip(event, 'fs39', 117)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 118)&quot; onmouseover=&quot;showTip(event, 'fs39', 118)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 119)&quot; onmouseover=&quot;showTip(event, 'fs8', 119)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// Add for `float`&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs38', 120)&quot; onmouseover=&quot;showTip(event, 'fs38', 120)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 121)&quot; onmouseover=&quot;showTip(event, 'fs38', 121)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 122)&quot; onmouseover=&quot;showTip(event, 'fs39', 122)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 123)&quot; onmouseover=&quot;showTip(event, 'fs20', 123)&quot; class=&quot;f&quot;&gt;float&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 124)&quot; onmouseover=&quot;showTip(event, 'fs38', 124)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// Divide by int for `float`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 125)&quot; onmouseover=&quot;showTip(event, 'fs40', 125)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 126)&quot; onmouseover=&quot;showTip(event, 'fs36', 126)&quot; class=&quot;f&quot;&gt;averageFloat&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 50.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Sure, we also could solve it more functional with recursion and immutable state, but this is not
the point of the post!&lt;/p&gt;
&lt;p&gt;So, the question is, how can we made it more polymorphic? Just adding &lt;code&gt;inline&lt;/code&gt; will not help in that
case and made it automatically polymorphic. The problem is already the third line. We write
&lt;code&gt;let mutable sum = 0.0&lt;/code&gt;. Or in other words, we create explicitly a &lt;code&gt;float&lt;/code&gt; at that point. Another
problem is the last line &lt;code&gt;sum / (float amount)&lt;/code&gt;. As here we convert &lt;code&gt;amount&lt;/code&gt; an &lt;code&gt;int&lt;/code&gt; to a &lt;code&gt;float&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get this function polymorphic, we need three polymorphic behaviours that every type could implement
on their own. We need.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A polymorphic &lt;em&gt;get zero&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A polymorphic &lt;em&gt;+&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A polymorphic &lt;em&gt;divide something by an int&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Luckily all three interfaces are already part of the F# language, and we have helper functions for those
operations. A truly polymorphic &lt;code&gt;average&lt;/code&gt; would then look like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 127)&quot; onmouseover=&quot;showTip(event, 'fs41', 127)&quot; class=&quot;f&quot;&gt;average&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs42', 128)&quot; onmouseover=&quot;showTip(event, 'fs42', 128)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 129)&quot; onmouseover=&quot;showTip(event, 'fs43', 129)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 130)&quot; onmouseover=&quot;showTip(event, 'fs38', 130)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 131)&quot; onmouseover=&quot;showTip(event, 'fs44', 131)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 132)&quot; onmouseover=&quot;showTip(event, 'fs31', 132)&quot; class=&quot;t&quot;&gt;LanguagePrimitives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 133)&quot; onmouseover=&quot;showTip(event, 'fs45', 133)&quot; class=&quot;i&quot;&gt;GenericZero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 134)&quot; onmouseover=&quot;showTip(event, 'fs46', 134)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 135)&quot; onmouseover=&quot;showTip(event, 'fs42', 135)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs44', 136)&quot; onmouseover=&quot;showTip(event, 'fs44', 136)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 137)&quot; onmouseover=&quot;showTip(event, 'fs44', 137)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 138)&quot; onmouseover=&quot;showTip(event, 'fs46', 138)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs38', 139)&quot; onmouseover=&quot;showTip(event, 'fs38', 139)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 140)&quot; onmouseover=&quot;showTip(event, 'fs38', 140)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs31', 141)&quot; onmouseover=&quot;showTip(event, 'fs31', 141)&quot; class=&quot;t&quot;&gt;LanguagePrimitives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 142)&quot; onmouseover=&quot;showTip(event, 'fs32', 142)&quot; class=&quot;f&quot;&gt;DivideByInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 143)&quot; onmouseover=&quot;showTip(event, 'fs44', 143)&quot; class=&quot;v&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 144)&quot; onmouseover=&quot;showTip(event, 'fs38', 144)&quot; class=&quot;v&quot;&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To use our &lt;code&gt;Vector3&lt;/code&gt; type with &lt;code&gt;average&lt;/code&gt; we have to add the remaining polymorphic &lt;code&gt;Zero&lt;/code&gt; and
&lt;code&gt;DivideByInt&lt;/code&gt; members.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 38)&quot; onmouseover=&quot;showTip(event, 'fs18', 38)&quot; class=&quot;t&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span onmouseout=&quot;hideTip(event, 'fs19', 39)&quot; onmouseover=&quot;showTip(event, 'fs19', 39)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 40)&quot; onmouseover=&quot;showTip(event, 'fs20', 40)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 41)&quot; onmouseover=&quot;showTip(event, 'fs21', 41)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 42)&quot; onmouseover=&quot;showTip(event, 'fs20', 42)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 43)&quot; onmouseover=&quot;showTip(event, 'fs22', 43)&quot; class=&quot;i&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 44)&quot; onmouseover=&quot;showTip(event, 'fs20', 44)&quot; class=&quot;t&quot;&gt;float&lt;/span&gt;} &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 45)&quot; onmouseover=&quot;showTip(event, 'fs23', 45)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 46)&quot; onmouseover=&quot;showTip(event, 'fs8', 46)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 47)&quot; onmouseover=&quot;showTip(event, 'fs9', 47)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 48)&quot; onmouseover=&quot;showTip(event, 'fs24', 48)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span onmouseout=&quot;hideTip(event, 'fs19', 49)&quot; onmouseover=&quot;showTip(event, 'fs19', 49)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 50)&quot; onmouseover=&quot;showTip(event, 'fs8', 50)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 51)&quot; onmouseover=&quot;showTip(event, 'fs21', 51)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 52)&quot; onmouseover=&quot;showTip(event, 'fs9', 52)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 53)&quot; onmouseover=&quot;showTip(event, 'fs22', 53)&quot; class=&quot;i&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 54)&quot; onmouseover=&quot;showTip(event, 'fs24', 54)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;}
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 55)&quot; onmouseover=&quot;showTip(event, 'fs25', 55)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs26', 56)&quot; onmouseover=&quot;showTip(event, 'fs26', 56)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;)    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 57)&quot; onmouseover=&quot;showTip(event, 'fs18', 57)&quot; class=&quot;t&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 58)&quot; onmouseover=&quot;showTip(event, 'fs27', 58)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 59)&quot; onmouseover=&quot;showTip(event, 'fs25', 59)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs19', 60)&quot; onmouseover=&quot;showTip(event, 'fs19', 60)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 61)&quot; onmouseover=&quot;showTip(event, 'fs26', 61)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs19', 62)&quot; onmouseover=&quot;showTip(event, 'fs19', 62)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 63)&quot; onmouseover=&quot;showTip(event, 'fs25', 63)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs21', 64)&quot; onmouseover=&quot;showTip(event, 'fs21', 64)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 65)&quot; onmouseover=&quot;showTip(event, 'fs26', 65)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs21', 66)&quot; onmouseover=&quot;showTip(event, 'fs21', 66)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 67)&quot; onmouseover=&quot;showTip(event, 'fs25', 67)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs22', 68)&quot; onmouseover=&quot;showTip(event, 'fs22', 68)&quot; class=&quot;i&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 69)&quot; onmouseover=&quot;showTip(event, 'fs26', 69)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs22', 70)&quot; onmouseover=&quot;showTip(event, 'fs22', 70)&quot; class=&quot;i&quot;&gt;Z&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 71)&quot; onmouseover=&quot;showTip(event, 'fs28', 71)&quot; class=&quot;i&quot;&gt;Zero&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 72)&quot; onmouseover=&quot;showTip(event, 'fs18', 72)&quot; class=&quot;t&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 73)&quot; onmouseover=&quot;showTip(event, 'fs27', 73)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 74)&quot; onmouseover=&quot;showTip(event, 'fs29', 74)&quot; class=&quot;f&quot;&gt;DivideByInt&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs25', 75)&quot; onmouseover=&quot;showTip(event, 'fs25', 75)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs30', 76)&quot; onmouseover=&quot;showTip(event, 'fs30', 76)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs18', 77)&quot; onmouseover=&quot;showTip(event, 'fs18', 77)&quot; class=&quot;t&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 78)&quot; onmouseover=&quot;showTip(event, 'fs27', 78)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt;
            (&lt;span onmouseout=&quot;hideTip(event, 'fs31', 79)&quot; onmouseover=&quot;showTip(event, 'fs31', 79)&quot; class=&quot;t&quot;&gt;LanguagePrimitives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 80)&quot; onmouseover=&quot;showTip(event, 'fs32', 80)&quot; class=&quot;f&quot;&gt;DivideByInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 81)&quot; onmouseover=&quot;showTip(event, 'fs25', 81)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs19', 82)&quot; onmouseover=&quot;showTip(event, 'fs19', 82)&quot; class=&quot;i&quot;&gt;X&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 83)&quot; onmouseover=&quot;showTip(event, 'fs30', 83)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;)
            (&lt;span onmouseout=&quot;hideTip(event, 'fs31', 84)&quot; onmouseover=&quot;showTip(event, 'fs31', 84)&quot; class=&quot;t&quot;&gt;LanguagePrimitives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 85)&quot; onmouseover=&quot;showTip(event, 'fs32', 85)&quot; class=&quot;f&quot;&gt;DivideByInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 86)&quot; onmouseover=&quot;showTip(event, 'fs25', 86)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs21', 87)&quot; onmouseover=&quot;showTip(event, 'fs21', 87)&quot; class=&quot;i&quot;&gt;Y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 88)&quot; onmouseover=&quot;showTip(event, 'fs30', 88)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;)
            (&lt;span onmouseout=&quot;hideTip(event, 'fs31', 89)&quot; onmouseover=&quot;showTip(event, 'fs31', 89)&quot; class=&quot;t&quot;&gt;LanguagePrimitives&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 90)&quot; onmouseover=&quot;showTip(event, 'fs32', 90)&quot; class=&quot;f&quot;&gt;DivideByInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 91)&quot; onmouseover=&quot;showTip(event, 'fs25', 91)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs22', 92)&quot; onmouseover=&quot;showTip(event, 'fs22', 92)&quot; class=&quot;i&quot;&gt;Z&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 93)&quot; onmouseover=&quot;showTip(event, 'fs30', 93)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;average&lt;/code&gt; is a truly polymorphic function because it can calculate the average of a list
of any type that supports &lt;code&gt;Zero&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;DivideByInt&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 145)&quot; onmouseover=&quot;showTip(event, 'fs47', 145)&quot; class=&quot;i&quot;&gt;floatAverage&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 146)&quot; onmouseover=&quot;showTip(event, 'fs41', 146)&quot; class=&quot;f&quot;&gt;average&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;99.0&lt;/span&gt;]            &lt;span class=&quot;c&quot;&gt;// 50.5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 147)&quot; onmouseover=&quot;showTip(event, 'fs48', 147)&quot; class=&quot;i&quot;&gt;vectorAverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 148)&quot; onmouseover=&quot;showTip(event, 'fs41', 148)&quot; class=&quot;f&quot;&gt;average&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs33', 149)&quot; onmouseover=&quot;showTip(event, 'fs33', 149)&quot; class=&quot;i&quot;&gt;vec1&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 150)&quot; onmouseover=&quot;showTip(event, 'fs34', 150)&quot; class=&quot;i&quot;&gt;vec2&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 151)&quot; onmouseover=&quot;showTip(event, 'fs35', 151)&quot; class=&quot;i&quot;&gt;vec3&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 152)&quot; onmouseover=&quot;showTip(event, 'fs35', 152)&quot; class=&quot;i&quot;&gt;vec3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// {X=2.25;Y=2.25;Z=2.25}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The big advantage is that we only need to write a single &lt;code&gt;average&lt;/code&gt; function that can work with
different types. We don't have to create multiple &lt;code&gt;average&lt;/code&gt; function each for there own type.
If &lt;code&gt;average&lt;/code&gt; itself only uses polymorphic functions, then it means &lt;code&gt;average&lt;/code&gt; itself also could
be polymorphic.&lt;/p&gt;
&lt;p&gt;But this also means that whenever we create a new type with the correct implementations, we
actually can get a lot of functions for free. Every type that we create that supports &lt;code&gt;+&lt;/code&gt;,
&lt;code&gt;Zero&lt;/code&gt; and a &lt;code&gt;DivideByInt&lt;/code&gt; automatically gets an &lt;code&gt;average&lt;/code&gt; function for free!&lt;/p&gt;
&lt;p&gt;Or in other words. Higher-kinded polymorphism is about code reuse. By just implementing the
right &lt;em&gt;glue-functions&lt;/em&gt; it can be that you get hundreds of already pre-defined functions!&lt;/p&gt;
&lt;p&gt;As an example you probably heard that &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; are very powerful functions,
and just with &lt;code&gt;fold&lt;/code&gt; you can implement a lot of other functions like &lt;code&gt;List.filter&lt;/code&gt;,
&lt;code&gt;List.collect&lt;/code&gt;, &lt;code&gt;List.map&lt;/code&gt; and so on. This is interesting as it means, you could theoretically
provide a single polymorphic &lt;code&gt;filter&lt;/code&gt; function, and it would work with all types that
implements a &lt;code&gt;fold&lt;/code&gt; function. The same is true for all other functions that could be
implemented through &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This basically would mean you never have to implement dozens of functions that you see in
the &lt;code&gt;List&lt;/code&gt; module. You just need to implement &lt;code&gt;fold&lt;/code&gt; and you would get dozens of functions
for free. But currently this is not how it is implemented in F# or how it works. Instead
we have &lt;code&gt;List.filter&lt;/code&gt;, &lt;code&gt;Array.filter&lt;/code&gt;, &lt;code&gt;Map.filter&lt;/code&gt;, &lt;code&gt;Set.filter&lt;/code&gt;, &lt;code&gt;Seq.filter&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;Or in other words, every type just implements its own &lt;code&gt;filter&lt;/code&gt; function, instead that we have
a single implementation of &lt;code&gt;filter&lt;/code&gt; that could be used polymorphic across all types. That
also means that if you create your own types you have to implement &lt;code&gt;filter&lt;/code&gt; and all
of the other functions by yourself. But with higher-kinded polymorphism you just need
to implement &lt;code&gt;fold&lt;/code&gt; for your type, and you would get hundreds of functions for free.&lt;/p&gt;
&lt;p&gt;So the big advantage of &quot;higher-kinded polymorphism&quot; is that you get a ton of code reuse.&lt;/p&gt;
&lt;h2&gt;Can we solve it with interfaces?&lt;/h2&gt;
&lt;p&gt;Probably you will ask: &lt;em&gt;Can we not solve it with an interfaces&lt;/em&gt;? The answer is no. You can achieve
something similar, but not the same. Actually there already exists a solution for the &lt;code&gt;fold&lt;/code&gt;
example solved with interfaces. It is the &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fold&lt;/code&gt; itself is basically just a way to loop over a data-structure. The &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; interface
provides the same logic. Once you implement the &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; interface that is just a single
method &lt;code&gt;GetEnumerator&lt;/code&gt; you also get all of the LINQ Methods for free like &lt;code&gt;Select&lt;/code&gt;, &lt;code&gt;Where&lt;/code&gt;,
&lt;code&gt;Aggregate&lt;/code&gt; and so on. In F# you get the functionality of the &lt;code&gt;Seq&lt;/code&gt; module. So what is the
difference?&lt;/p&gt;
&lt;p&gt;The difference is that your type changes from whatever you had to &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; (C#) &lt;code&gt;Seq&amp;lt;T&amp;gt;&lt;/code&gt; (F#).
If you have a &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; (C#) and you use &lt;code&gt;Select&lt;/code&gt; on it, then you get an &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; back.
Or in other words, you loose your original type. If you want to go back to a &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; you have
to convert your &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; back to an &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;T[]&lt;/code&gt;, &lt;code&gt;Dictionary&amp;lt;K,V&amp;gt;&lt;/code&gt; or with whatever you
wanted/started. But with Higher-kinded polymorphism instead you would not only get all
of the additional functions for free, your type also would still remain the same.&lt;/p&gt;
&lt;p&gt;This means for example if you use a &lt;code&gt;Set&lt;/code&gt; you just can &lt;code&gt;filter&lt;/code&gt; it, and directly afterwards you
can use special &lt;code&gt;Set&lt;/code&gt; methods only available on &lt;code&gt;Set&lt;/code&gt; like &lt;code&gt;Set.intersect&lt;/code&gt;, &lt;code&gt;Set.isSubset&lt;/code&gt; and others.
If you started with an &lt;code&gt;Array&lt;/code&gt; you can use &lt;code&gt;Array.blit&lt;/code&gt;, &lt;code&gt;Array.fill&lt;/code&gt; and other &lt;code&gt;Array&lt;/code&gt; specific
functions and so on.&lt;/p&gt;
&lt;p&gt;Actually it is even hard to say that you get any kind of code reuse with an interface. Sure you
can provide methods that turn something into your &lt;code&gt;IFace&lt;/code&gt; interface. If you have functions that
only expects &lt;code&gt;IFace&lt;/code&gt; objects you now can use all of them.&lt;/p&gt;
&lt;p&gt;But that isn't really so special. Sure, after i converted something to a &lt;code&gt;List&lt;/code&gt; i also can use all
of the &lt;code&gt;List&lt;/code&gt; functions inside the &lt;code&gt;List&lt;/code&gt; module, what a surprise!&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;F# doesn't support higher-kinded polymorphism directly. It has the features to create this kind
of code with re-usability. You also don't need to implement the &lt;code&gt;average&lt;/code&gt; function, as F# already
has &lt;code&gt;List.average&lt;/code&gt; that is polymorphic in the way I showed here. But overall the language itself
was not build up with this feature in-mind, and it also don't make it easy to create polymorphic
functions in that way.&lt;/p&gt;
&lt;p&gt;But it is a really important concept, and I think programing languages should try to focus
more on this kind of polymorphic behaviour. If you are aware of this feature, probably you see the
chance of creating your own polymorphic functions and you gain a lot more code reuse.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://withouttheloop.com/articles/2014-10-21-fsharp-adhoc-polymorphism/&quot;&gt;Ad-hoc Polymorphism in F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.2mas.xyz/constraints-in-fsharp/&quot;&gt;Constraints in F#&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val x : int&lt;br /&gt;&lt;br /&gt;Full name: higherkindedpolymorphism.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val y : string&lt;br /&gt;&lt;br /&gt;Full name: higherkindedpolymorphism.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: higherkindedpolymorphism.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val add : x:float -&amp;gt; y:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: higherkindedpolymorphism.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val x : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val y : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val result : float&lt;br /&gt;&lt;br /&gt;Full name: higherkindedpolymorphism.result&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val r1 : float&lt;br /&gt;&lt;br /&gt;Full name: higherkindedpolymorphism.r1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val r2 : float&lt;br /&gt;&lt;br /&gt;Full name: higherkindedpolymorphism.r2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val add : x:&amp;#39;a -&amp;gt; y:&amp;#39;b -&amp;gt; &amp;#39;c (requires member ( + ))&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val x : &amp;#39;a (requires member ( + ))&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val y : &amp;#39;b (requires member ( + ))&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val r1 : float&lt;br /&gt;&lt;br /&gt;Full name: Main.r1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val r2 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.r2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;type Vector3 =&lt;br /&gt;&amp;#160;&amp;#160;{X: float;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Y: float;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Z: float;}&lt;br /&gt;&amp;#160;&amp;#160;static member DivideByInt : a:Vector3 * b:int -&amp;gt; Vector3&lt;br /&gt;&amp;#160;&amp;#160;static member create : x:float -&amp;gt; y:float -&amp;gt; z:float -&amp;gt; Vector3&lt;br /&gt;&amp;#160;&amp;#160;static member Zero : Vector3&lt;br /&gt;&amp;#160;&amp;#160;static member ( + ) : a:Vector3 * b:Vector3 -&amp;gt; Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.Vector3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;Vector3.X: float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = System.Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;Vector3.Y: float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;Vector3.Z: float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;static member Vector3.create : x:float -&amp;gt; y:float -&amp;gt; z:float -&amp;gt; Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.Vector3.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val z : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val a : Vector3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val b : Vector3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;static member Vector3.create : x:float -&amp;gt; y:float -&amp;gt; z:float -&amp;gt; Vector3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;static member Vector3.Zero : Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.Vector3.Zero&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;static member Vector3.DivideByInt : a:Vector3 * b:int -&amp;gt; Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.Vector3.DivideByInt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val b : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;module LanguagePrimitives&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val DivideByInt : x:&amp;#39;T -&amp;gt; y:int -&amp;gt; &amp;#39;T (requires member DivideByInt)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val vec1 : Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.vec1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val vec2 : Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.vec2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val vec3 : Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.vec3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val averageFloat : xs:seq&amp;lt;float&amp;gt; -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.averageFloat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val xs : seq&amp;lt;float&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val mutable amount : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val mutable sum : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val x : float&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val average : xs:&amp;#39;a list -&amp;gt; &amp;#39;a (requires member get_Zero and member ( + ) and member DivideByInt)&lt;br /&gt;&lt;br /&gt;Full name: Main.average&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val xs : &amp;#39;a list (requires member get_Zero and member ( + ) and member DivideByInt)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val mutable sum : &amp;#39;a (requires member get_Zero and member ( + ) and member DivideByInt)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val GenericZero&amp;lt;&amp;#39;T (requires member get_Zero)&amp;gt; : &amp;#39;T (requires member get_Zero)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.LanguagePrimitives.GenericZero&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val x : &amp;#39;a (requires member get_Zero and member ( + ) and member DivideByInt)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val floatAverage : float&lt;br /&gt;&lt;br /&gt;Full name: Main.floatAverage&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val vectorAverage : Vector3&lt;br /&gt;&lt;br /&gt;Full name: Main.vectorAverage&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>null is Evil</title>
   <link href="https://sidburn.github.io/blog/2016/03/20/null-is-evil"/>
   <updated>2016-03-20T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/20/null-is-evil</id>
   <content type="html">&lt;p&gt;Tony Hoare once said: &lt;em&gt;I call it my billion-dollar mistake. It was the invention of the null
reference in 1965.&lt;/em&gt; So, why did he added &quot;null&quot; in the first place? Why was it such a big
mistake. And if it is such a big mistake, what are the alternatives?&lt;/p&gt;
&lt;h2&gt;The purpose of null&lt;/h2&gt;
&lt;p&gt;To understand why it was a mistake, let's look why it was even added in the first place. Let's
assume we have a simple function expecting a &lt;code&gt;PersonId&lt;/code&gt; that returns a &lt;code&gt;Person&lt;/code&gt; object. We would
have a function with the following function signature.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;PersonId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Person&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Implementing such a function means, we always have to return a &lt;code&gt;Person&lt;/code&gt;. But what happens if we
are not able to return a &lt;code&gt;Person&lt;/code&gt;? What should we return instead? And there can be a multitude of
reasons why that could be the case. A database could not contain a &lt;code&gt;Person&lt;/code&gt; with your provided
&lt;code&gt;PersonId&lt;/code&gt;. Also an error could have happened while trying to retrieve data. So overall we have
two kinds of problems that could happen.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The passed in value was invalid, or in other words, there doesn't exists a &lt;code&gt;Person&lt;/code&gt; for the provided input&lt;/li&gt;
&lt;li&gt;Some kind of error happened that prevents us returning a &lt;code&gt;Person&lt;/code&gt; object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So how do we solve that problem? Hoare's answer was the invention of the &lt;em&gt;null-reference&lt;/em&gt;. A
&lt;em&gt;null-reference&lt;/em&gt; is compatible with any other type. So instead of returning a &lt;code&gt;Person&lt;/code&gt; we just
could return a &lt;code&gt;null&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;Our client code calling our function just need to check whether it is &lt;code&gt;null&lt;/code&gt; or not. As easy as
this sound, this easiness is exactly what leads to numerous errors and problems.&lt;/p&gt;
&lt;p&gt;As a first note. Some people will probably tell, that for &lt;em&gt;errors&lt;/em&gt; we should throw an exception
instead. Actually I leave the discussion for &lt;em&gt;exception&lt;/em&gt; for another blog post. The important thing
is more that you could return a &lt;code&gt;null&lt;/code&gt; in the error case. Some functions/libraries do that, and
there is no way you can prevent that. You just have to deal with it, whether you like it or not.&lt;/p&gt;
&lt;h2&gt;The problems with null&lt;/h2&gt;
&lt;p&gt;Now that we understand why we have null. Let's create a list of problems that the implementation
of &lt;em&gt;null&lt;/em&gt; causes.&lt;/p&gt;
&lt;p&gt;The first problem is, we cannot see if a function could return &lt;code&gt;null&lt;/code&gt; or not. We could just
have written code like this (C#)&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Person.FetchById(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
Console.WriteLine(&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;s&quot;&gt;&quot;Name of Person is {0}&quot;&lt;/span&gt;, person.Name));
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The problem is that &lt;code&gt;Person.FetchById()&lt;/code&gt; sometimes returns a &lt;em&gt;null-reference&lt;/em&gt;. But we could use
it just like a valid &lt;code&gt;Person&lt;/code&gt;. But using it just like that, means that sometimes our code will throw a
&lt;code&gt;NullReferenceException&lt;/code&gt;. Because sometimes, we don't have a &lt;code&gt;Person&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be safe, we have to explicitly check if &lt;code&gt;Person.FetchById()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; or not. This results in
code like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Person.FetchById(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( person &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; ) {
    Console.WriteLine(&lt;span class=&quot;s&quot;&gt;&quot;No Person with ID 10&quot;&lt;/span&gt;);
}
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; {
    Console.WriteLine(&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;s&quot;&gt;&quot;Name of Person is {0}&quot;&lt;/span&gt;, person.Name));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The big problem is that we cannot see from a function type signature that it could return &lt;code&gt;null&lt;/code&gt; or
not. That means, we have to check &lt;strong&gt;every&lt;/strong&gt; function call in our system explicitly because it could
potentially return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This explicit checking of &lt;code&gt;null&lt;/code&gt; for every function is sure bother some. So what do we do? Sure, we don't
do that checking on every function. We only check those function that we know they could return a &lt;code&gt;null&lt;/code&gt;.
Or in other words. We probably rely on &lt;em&gt;documentation&lt;/em&gt;. Because we all know that &lt;em&gt;documentation&lt;/em&gt; is always
correct, never has mistakes, and everyone who writes documentation always adds the information if
a function call could return &lt;code&gt;null&lt;/code&gt; or not. And sure, we as programmers always re-check the whole documentation
for every Class, Method or Function once we updated a library to ensure that the behaviour of all functions
still remains the same!&lt;/p&gt;
&lt;p&gt;Jokes aside, sure we don't do that. Not doing that doesn't mean we are bad programmers. The problem is
that doing such kind of things is just silly. Instead of us humans, the language/compiler should do
such kinds of checks for us. We cannot solve the problem with &lt;em&gt;documentation&lt;/em&gt;. The burden of checking
should be leveraged to the language/compiler instead of us humans. Sure we humans are those who have
to program what happens at some places if we have a &lt;code&gt;null&lt;/code&gt; or not. But our language should notify us
at compile-time where we have forgotten such checks. We only should add those check where it is really
needed, and the language should notify us where we have forgotten them.&lt;/p&gt;
&lt;p&gt;But we don't even have covered all problems yet! We also can pass &lt;code&gt;null&lt;/code&gt; to other functions. We can
do that because &lt;code&gt;null&lt;/code&gt; is technically just a value. So we also could do stuff like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Person.FetchById(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
DoSomethingWithPerson(person);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;It basically means, we not only have to check &lt;code&gt;null&lt;/code&gt; from every function that we call. We also have to
add &lt;code&gt;null&lt;/code&gt; checks to every function we write, because someone could provide us a &lt;code&gt;null&lt;/code&gt; value even
if we don't want them. Not doing the checking can actually lead to the problem that somewhere
else, probably even in code we don't have written, we get a &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And the last problem is a so called &lt;em&gt;Happy path-coding&lt;/em&gt;. Usually we mean it negative that someone
just writes code for the &lt;em&gt;Happy-Path&lt;/em&gt; expecting that everything works correctly. And as soon there
is some problem, our program blows up and crashes. This leads to very buggy programs. So what we
actually really want is sure we want to code like &quot;Happ-Path&quot;, we want to cover as much possible
errors as possible. But we don't want to include some kind of checking and validation throughout
our whole code, nearly at every line, after every function call.&lt;/p&gt;
&lt;p&gt;Usually what we want is just write code as if there are no errors (Happy-Path). And only at the end of a
chain we want to check if some-kind of error happened, or probably at selected points inside our chain.
So ideally we want that we are forced to check, but only at specific places where we explicitly want it.
But &lt;code&gt;null&lt;/code&gt; doesn't provide that. We sure can leave the checks, but then our program will be buggy. As a
result we often add so much &lt;code&gt;null&lt;/code&gt; checks that our language also could have forced us to write them always
and otherwise return a error. It probably seems impossible how we can get both. Forcing us to check
and gain the safeness to not forget it anywhere, but still only doing the checks when we really want it.&lt;/p&gt;
&lt;p&gt;So as a summary, we have the following problems with &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We cannot see if a function returns &lt;code&gt;null&lt;/code&gt; or not&lt;/li&gt;
&lt;li&gt;We are not forced to add &lt;code&gt;null&lt;/code&gt; checks, this can lead to &lt;code&gt;NullReferenceException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Because every function could return &lt;code&gt;null&lt;/code&gt; we also have to check every function&lt;/li&gt;
&lt;li&gt;We cannot &lt;em&gt;skip&lt;/em&gt; the checking and do it at some later point&lt;/li&gt;
&lt;li&gt;
We can pass &lt;code&gt;null&lt;/code&gt; as valid values. And because we are not forced to check for &lt;code&gt;null&lt;/code&gt;, this
can throw &lt;code&gt;NullReferenceException&lt;/code&gt; at some other places.
&lt;/li&gt;
&lt;li&gt;We also have to check every function argument for &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It destroys &lt;em&gt;Happy Path-coding&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Optionals&lt;/h2&gt;
&lt;p&gt;Actually retro-fixing &lt;em&gt;null&lt;/em&gt; in a language is nearly impossible. There exists often some kind of &lt;em&gt;hack-ish&lt;/em&gt;
ways on how to fix it. But it usually feels not natural, or it doesn't fix all problems. So let's look at
F# that does not support &lt;code&gt;null&lt;/code&gt; &lt;em&gt;directly&lt;/em&gt;. So how do we write a functions that sometimes can return an
absence of a value?&lt;/p&gt;
&lt;p&gt;The answer is, it is not possible. We actually cannot write a function that sometimes returns &lt;code&gt;Person&lt;/code&gt;
or not. What we really have to do is return another type instead. What we really need to return is an
&lt;code&gt;Option&lt;/code&gt; instead. An &lt;code&gt;Option&lt;/code&gt; is just a data-type on its own. But an Option can either be &lt;code&gt;Some value&lt;/code&gt;
or &lt;code&gt;None&lt;/code&gt;. You can compare it to a &lt;code&gt;bool&lt;/code&gt; that is either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. The only difference is that in
the case of &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;Some&lt;/code&gt; it can carry an additional value with it. Option is already part of F#
but you could easily define it yourself like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;i&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Or to say it otherwise. It is just a &lt;em&gt;generic&lt;/em&gt; type. That either could be &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;Some 'a&lt;/code&gt;. With this
kind of idea we now can create types like &lt;code&gt;Option&amp;lt;int&amp;gt;&lt;/code&gt;, &lt;code&gt;Option&amp;lt;Person&amp;gt;&lt;/code&gt;, &lt;code&gt;Option&amp;lt;Foo&amp;gt;&lt;/code&gt;, ... and so on.
There is also an alternative style for writing a generic type &lt;code&gt;int person&lt;/code&gt;, &lt;code&gt;Person option&lt;/code&gt;, &lt;code&gt;Foo option&lt;/code&gt;.
We will use this style, because this is also the style how it is often shown by the IDE (like Visual Studio).
Also note that the &lt;code&gt;Option&lt;/code&gt; type itself defined in F# uses a small letter &lt;code&gt;option&lt;/code&gt; instead of &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what we really have is not a function &lt;code&gt;PersonId -&amp;gt; Person&lt;/code&gt; we really have:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;PersonId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Person&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Or in other words. A function taking a &lt;code&gt;PersonId&lt;/code&gt; that returns an &lt;code&gt;option&lt;/code&gt; that either can
contain a &lt;code&gt;Person&lt;/code&gt; or don't contain anything. The first improvement is now that we can see
clearly which functions can return a value or not. We don't have to rely on documentation
anymore. Code itself is the best documentation at all! So lets assume we want to
print the Name of a person, what do we have to write now?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;fetchById&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs3', 16)&quot; onmouseover=&quot;showTip(event, 'fs3', 16)&quot; class=&quot;i&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 17)&quot; onmouseover=&quot;showTip(event, 'fs6', 17)&quot; class=&quot;i&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;No Person with Id 10&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs4', 18)&quot; onmouseover=&quot;showTip(event, 'fs4', 18)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 19)&quot; onmouseover=&quot;showTip(event, 'fs6', 19)&quot; class=&quot;i&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Name of Person is %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At first, this doesn't look like an improvement over the &lt;code&gt;if&lt;/code&gt; checking. We still have to check for
either &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. So why is that better?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
The important point is, not every function returns an &lt;code&gt;option&lt;/code&gt;. You only have to add this check if
a function returns an optional.
&lt;/li&gt;
&lt;li&gt;You are &lt;em&gt;forced&lt;/em&gt; by the language at &lt;em&gt;compile-time&lt;/em&gt; to add the checks if a function returns an &lt;code&gt;option&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You cannot write code like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;fetchById&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs6', 10)&quot; onmouseover=&quot;showTip(event, 'fs6', 10)&quot; class=&quot;i&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Name of person is %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This will give you a &lt;em&gt;compile-time error&lt;/em&gt;. Because &lt;code&gt;person&lt;/code&gt; is of type &lt;code&gt;option&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; don't
contain a field &lt;code&gt;Name&lt;/code&gt;. It basically means, you cannot create &lt;code&gt;NullReferenceException&lt;/code&gt; because you cannot
forget to add the checking. And you only have to really check those functions that could return an option.&lt;/p&gt;
&lt;p&gt;Actually that eliminates all problems we have, but let's go over the problems once more to describe
why they are eliminated.&lt;/p&gt;
&lt;h3&gt;1: We can identify functions returning &lt;em&gt;Nothing&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;It is just part of the function signature.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 11)&quot; onmouseover=&quot;showTip(event, 'fs7', 11)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 12)&quot; onmouseover=&quot;showTip(event, 'fs7', 12)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 13)&quot; onmouseover=&quot;showTip(event, 'fs5', 13)&quot; class=&quot;i&quot;&gt;option&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;it can return an &lt;code&gt;int&lt;/code&gt; or not&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 14)&quot; onmouseover=&quot;showTip(event, 'fs7', 14)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 15)&quot; onmouseover=&quot;showTip(event, 'fs7', 15)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This will always return an &lt;code&gt;int&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;2: We must check&lt;/h3&gt;
&lt;p&gt;We cannot access a value directly. &lt;code&gt;option&lt;/code&gt; is a type on its own. If we want to get the inner value
we have to &lt;em&gt;Pattern Match&lt;/em&gt; against an optional.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;fetchById&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs3', 16)&quot; onmouseover=&quot;showTip(event, 'fs3', 16)&quot; class=&quot;i&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 17)&quot; onmouseover=&quot;showTip(event, 'fs6', 17)&quot; class=&quot;i&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;No Person with Id 10&amp;quot;&lt;/span&gt;
| &lt;span onmouseout=&quot;hideTip(event, 'fs4', 18)&quot; onmouseover=&quot;showTip(event, 'fs4', 18)&quot; class=&quot;i&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 19)&quot; onmouseover=&quot;showTip(event, 'fs6', 19)&quot; class=&quot;i&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Name of Person is %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Runtime &lt;code&gt;NullReferenceException&lt;/code&gt; are not possible anymore&lt;/p&gt;
&lt;h3&gt;3: Not every function returns &lt;code&gt;option&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;That means we only need to &lt;em&gt;Pattern Match&lt;/em&gt; those function that return an &lt;code&gt;option&lt;/code&gt;. Functions
that don't return &lt;code&gt;option&lt;/code&gt; also cannot be Pattern Matched! If we would Pattern Match against
a value that is not an &lt;code&gt;option&lt;/code&gt; we get an error. Once again, everything happens already at
compile-time. That means you can see the error already in your IDE.&lt;/p&gt;
&lt;h3&gt;4: We can skip the checking&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;option&lt;/code&gt; is just a type like any other. That means you can return an option from your function.
But you also can pass &lt;code&gt;option&lt;/code&gt; as a value around. The important thing is, you only need to do
the checking once you also need the value inside of the &lt;code&gt;option&lt;/code&gt;. But note that you cannot pass
a &lt;code&gt;int option&lt;/code&gt; to a function expecting a &lt;code&gt;int&lt;/code&gt;. Both are different types. If a function expects
&lt;code&gt;int&lt;/code&gt; you must unwrap the value inside the &lt;code&gt;option&lt;/code&gt;. Well that isn't quite correct, because
you can automate this process, but we will look later at this in more detail.&lt;/p&gt;
&lt;h3&gt;5 and 6: Passing &lt;code&gt;option&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We can pass &lt;code&gt;option&lt;/code&gt; as a valid value. But only to those function that expects a &lt;code&gt;option&lt;/code&gt;. We
cannot implicitly pass it. And a function expecting an &lt;code&gt;option&lt;/code&gt; as a value also must &lt;em&gt;Pattern Match&lt;/em&gt;
the argument.&lt;/p&gt;
&lt;p&gt;So it cannot happen that values sometimes are &lt;code&gt;option&lt;/code&gt; or not. Either they are, and we must check. Or
we don't have to check at all.&lt;/p&gt;
&lt;h2&gt;Happy Path-Coding&lt;/h2&gt;
&lt;p&gt;Happy Path-Coding needs some further explanations. Previously i said that F# don't support &lt;code&gt;null&lt;/code&gt;
but this isn't quite right. F# runs on the .NET platform, and the runtime supports the concept
of &lt;code&gt;null&lt;/code&gt;. From F# we can call any code that was written for example in C#. So we have to add
&lt;code&gt;null&lt;/code&gt; checks for data-types, functions and so on that where not directly written in F#.&lt;/p&gt;
&lt;p&gt;To deal with functions that returns &lt;code&gt;null&lt;/code&gt; we often write wrappers and turn the result into an &lt;code&gt;option&lt;/code&gt;.
For example the &lt;code&gt;Int32.TryParse&lt;/code&gt; function is a good candidate to show the idea.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 23)&quot; onmouseover=&quot;showTip(event, 'fs11', 23)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs12', 24)&quot; onmouseover=&quot;showTip(event, 'fs12', 24)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 25)&quot; onmouseover=&quot;showTip(event, 'fs13', 25)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 26)&quot; onmouseover=&quot;showTip(event, 'fs8', 26)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 27)&quot; onmouseover=&quot;showTip(event, 'fs14', 27)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 28)&quot; onmouseover=&quot;showTip(event, 'fs12', 28)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 29)&quot; onmouseover=&quot;showTip(event, 'fs3', 29)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs15', 30)&quot; onmouseover=&quot;showTip(event, 'fs15', 30)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 31)&quot; onmouseover=&quot;showTip(event, 'fs4', 31)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 32)&quot; onmouseover=&quot;showTip(event, 'fs15', 32)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now created a &lt;code&gt;tryParse&lt;/code&gt; function. When we look at the signature we see &lt;code&gt;string -&amp;gt; int option&lt;/code&gt;. Or
in other words. A function that can return an &lt;code&gt;int&lt;/code&gt; or not. Let's assume we now parse three strings.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 33)&quot; onmouseover=&quot;showTip(event, 'fs16', 33)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 34)&quot; onmouseover=&quot;showTip(event, 'fs11', 34)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 35)&quot; onmouseover=&quot;showTip(event, 'fs17', 35)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 36)&quot; onmouseover=&quot;showTip(event, 'fs11', 36)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 37)&quot; onmouseover=&quot;showTip(event, 'fs18', 37)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 38)&quot; onmouseover=&quot;showTip(event, 'fs11', 38)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;30&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;and now we want to add them together. Ideally in a &lt;em&gt;Happy-Path&lt;/em&gt; coding we could directly write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But the problem is that &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; are &lt;code&gt;int optional&lt;/code&gt;. So we cannot add &lt;code&gt;optional&lt;/code&gt; values.
We first have to unwrap them. And it makes sense that we cannot do it. What for example should the
the result be if some of the parsing failed? Should it just add those that where valid? Should
the whole &lt;em&gt;computation&lt;/em&gt; be aborted as soon one was invalid? Let's stick for the last one. As soon
one is invalid, the whole computation should be invalid. Or in our case now. We now have to &lt;em&gt;Pattern
Match&lt;/em&gt; every variable, check if it is &lt;code&gt;Some value&lt;/code&gt;. If true, we check the next variable, if &lt;code&gt;None&lt;/code&gt;
the whole computations returns &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 39)&quot; onmouseover=&quot;showTip(event, 'fs19', 39)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 40)&quot; onmouseover=&quot;showTip(event, 'fs16', 40)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs3', 41)&quot; onmouseover=&quot;showTip(event, 'fs3', 41)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 42)&quot; onmouseover=&quot;showTip(event, 'fs3', 42)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs4', 43)&quot; onmouseover=&quot;showTip(event, 'fs4', 43)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 44)&quot; onmouseover=&quot;showTip(event, 'fs20', 44)&quot; class=&quot;i&quot;&gt;extractedX&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 45)&quot; onmouseover=&quot;showTip(event, 'fs17', 45)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs3', 46)&quot; onmouseover=&quot;showTip(event, 'fs3', 46)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 47)&quot; onmouseover=&quot;showTip(event, 'fs3', 47)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs4', 48)&quot; onmouseover=&quot;showTip(event, 'fs4', 48)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 49)&quot; onmouseover=&quot;showTip(event, 'fs21', 49)&quot; class=&quot;i&quot;&gt;extractedY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 50)&quot; onmouseover=&quot;showTip(event, 'fs18', 50)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs3', 51)&quot; onmouseover=&quot;showTip(event, 'fs3', 51)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 52)&quot; onmouseover=&quot;showTip(event, 'fs3', 52)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs4', 53)&quot; onmouseover=&quot;showTip(event, 'fs4', 53)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 54)&quot; onmouseover=&quot;showTip(event, 'fs22', 54)&quot; class=&quot;i&quot;&gt;extractedZ&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 55)&quot; onmouseover=&quot;showTip(event, 'fs4', 55)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 56)&quot; onmouseover=&quot;showTip(event, 'fs20', 56)&quot; class=&quot;i&quot;&gt;extractedX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 57)&quot; onmouseover=&quot;showTip(event, 'fs21', 57)&quot; class=&quot;i&quot;&gt;extractedY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 58)&quot; onmouseover=&quot;showTip(event, 'fs22', 58)&quot; class=&quot;i&quot;&gt;extractedZ&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Man, that is some ugly code! We have the benefit that we are forced to check, we cannot have
&lt;code&gt;NullReferenceException&lt;/code&gt; and all of the other benefits. Also &lt;code&gt;result&lt;/code&gt; is now an &lt;code&gt;int option&lt;/code&gt;. And
it makes sense. As soon one of &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; or &lt;code&gt;z&lt;/code&gt; was not a valid &lt;code&gt;int&lt;/code&gt;, also &lt;code&gt;return&lt;/code&gt; would be &lt;code&gt;None&lt;/code&gt;.
But it seems we have lost any kind of our &lt;em&gt;Happy-Path&lt;/em&gt; coding. Because now we have to check every value
directly. Isn't there some way to be as close to &lt;code&gt;let result = x + y + z&lt;/code&gt;, so if every value was &lt;code&gt;Some&lt;/code&gt;
it does it calculation, and otherwise it just returns &lt;code&gt;None&lt;/code&gt;? So instead of checking every value directly
we just want to work with the values as they would be normal non-optional values? But as soon one value
is &lt;code&gt;None&lt;/code&gt; just everything is &lt;code&gt;None&lt;/code&gt;? The answer is. Yes, there is a way to achieve that!&lt;/p&gt;
&lt;p&gt;But at this point i will not show how to build the solution for yourself. And actually there even exists
two solutions to solve it. Either way through a so called &lt;em&gt;Applicative Functor&lt;/em&gt; or the &lt;em&gt;Maybe Monad&lt;/em&gt;.
So let's look how both solution would look like.&lt;/p&gt;
&lt;h3&gt;Applicative Functor&lt;/h3&gt;
&lt;p&gt;The approach with an &lt;em&gt;applicative functor&lt;/em&gt; works that we can &lt;em&gt;upgrade&lt;/em&gt; any kind of functions. Let's
first create a function that added our three variables together.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 104)&quot; onmouseover=&quot;showTip(event, 'fs38', 104)&quot; class=&quot;f&quot;&gt;addThree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 105)&quot; onmouseover=&quot;showTip(event, 'fs39', 105)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 106)&quot; onmouseover=&quot;showTip(event, 'fs40', 106)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 107)&quot; onmouseover=&quot;showTip(event, 'fs41', 107)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 108)&quot; onmouseover=&quot;showTip(event, 'fs39', 108)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 109)&quot; onmouseover=&quot;showTip(event, 'fs40', 109)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 110)&quot; onmouseover=&quot;showTip(event, 'fs41', 110)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we have a function with the function signature&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 111)&quot; onmouseover=&quot;showTip(event, 'fs7', 111)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 112)&quot; onmouseover=&quot;showTip(event, 'fs7', 112)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 113)&quot; onmouseover=&quot;showTip(event, 'fs7', 113)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 114)&quot; onmouseover=&quot;showTip(event, 'fs7', 114)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Or in other words, a function taking three &lt;code&gt;int&lt;/code&gt; as an argument, and returning an &lt;code&gt;int&lt;/code&gt;. But as learned
so far we could not just call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;addThree&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because or &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; are &lt;code&gt;int optional&lt;/code&gt;. So with an &lt;em&gt;Applicative Functor&lt;/em&gt; we could &lt;em&gt;upgrade&lt;/em&gt; our
&lt;em&gt;addThree&lt;/em&gt; function. So we could do something like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 115)&quot; onmouseover=&quot;showTip(event, 'fs42', 115)&quot; class=&quot;f&quot;&gt;addThreeOptionals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 116)&quot; onmouseover=&quot;showTip(event, 'fs43', 116)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 117)&quot; onmouseover=&quot;showTip(event, 'fs32', 117)&quot; class=&quot;f&quot;&gt;lift3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 118)&quot; onmouseover=&quot;showTip(event, 'fs38', 118)&quot; class=&quot;f&quot;&gt;addThree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we have a function &lt;code&gt;Option.lift3&lt;/code&gt;. We can pass any three argument function to it and what we get
back is a new three argument function that now could be &lt;code&gt;optional&lt;/code&gt;. When we expect the signature
of our &lt;code&gt;addThreeOptionals&lt;/code&gt; function (You can hover over &lt;code&gt;addThreeOptionals&lt;/code&gt; if you don't know yet)
we now see &lt;code&gt;addThreeOptionals&lt;/code&gt; has the following signature.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 119)&quot; onmouseover=&quot;showTip(event, 'fs7', 119)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 120)&quot; onmouseover=&quot;showTip(event, 'fs7', 120)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 121)&quot; onmouseover=&quot;showTip(event, 'fs7', 121)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 122)&quot; onmouseover=&quot;showTip(event, 'fs7', 122)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;optional&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Or in other words. We now have a function taking three arguments, sum then only when all of them
are &lt;code&gt;Some&lt;/code&gt;, and returning another &lt;code&gt;int optional&lt;/code&gt; as a result. What we now can do is just write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 123)&quot; onmouseover=&quot;showTip(event, 'fs44', 123)&quot; class=&quot;i&quot;&gt;resultWithA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 124)&quot; onmouseover=&quot;showTip(event, 'fs42', 124)&quot; class=&quot;f&quot;&gt;addThreeOptionals&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 125)&quot; onmouseover=&quot;showTip(event, 'fs16', 125)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 126)&quot; onmouseover=&quot;showTip(event, 'fs17', 126)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 127)&quot; onmouseover=&quot;showTip(event, 'fs18', 127)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But as soon as we have an optional in it, we just get a &lt;code&gt;None&lt;/code&gt; overall back.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 128)&quot; onmouseover=&quot;showTip(event, 'fs45', 128)&quot; class=&quot;i&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 129)&quot; onmouseover=&quot;showTip(event, 'fs11', 129)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hallo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 130)&quot; onmouseover=&quot;showTip(event, 'fs46', 130)&quot; class=&quot;i&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 131)&quot; onmouseover=&quot;showTip(event, 'fs42', 131)&quot; class=&quot;f&quot;&gt;addThreeOptionals&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 132)&quot; onmouseover=&quot;showTip(event, 'fs16', 132)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 133)&quot; onmouseover=&quot;showTip(event, 'fs17', 133)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 134)&quot; onmouseover=&quot;showTip(event, 'fs45', 134)&quot; class=&quot;i&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we are not forced to create an intermediate function like &lt;code&gt;addThreeOptionals&lt;/code&gt;. We also could
have written.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 135)&quot; onmouseover=&quot;showTip(event, 'fs47', 135)&quot; class=&quot;i&quot;&gt;bx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 136)&quot; onmouseover=&quot;showTip(event, 'fs43', 136)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 137)&quot; onmouseover=&quot;showTip(event, 'fs32', 137)&quot; class=&quot;f&quot;&gt;lift3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 138)&quot; onmouseover=&quot;showTip(event, 'fs38', 138)&quot; class=&quot;f&quot;&gt;addThree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 139)&quot; onmouseover=&quot;showTip(event, 'fs16', 139)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 140)&quot; onmouseover=&quot;showTip(event, 'fs17', 140)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 141)&quot; onmouseover=&quot;showTip(event, 'fs18', 141)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It just means, you can just write any kind of function, and you never have to care if they are &lt;code&gt;option&lt;/code&gt;
or not. You always can assume that you have a valid value. If your function should also be able to work
with &lt;code&gt;optional&lt;/code&gt;, you just pass your function to &lt;code&gt;Option.lift1&lt;/code&gt;, &lt;code&gt;Option.lift2&lt;/code&gt;, &lt;code&gt;Option.lift3&lt;/code&gt; and so
on to &lt;em&gt;upgrade&lt;/em&gt; your function. So you just can stay on the Happy-Path as long as you wish!&lt;/p&gt;
&lt;p&gt;But all of your functions will return &lt;code&gt;option&lt;/code&gt; now. So at some point in your application you have
to check whether your computation was successful or not. But it is up to you where you do it or
where it makes sense to check it. So instead of checking &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; directly, you just can work
with the values, directly add them but if you want to print the result of your &lt;code&gt;addThreeOptionals&lt;/code&gt;
function. You have to Pattern Match.&lt;/p&gt;
&lt;h3&gt;Maybe Monad&lt;/h3&gt;
&lt;p&gt;Another solution is the so called &lt;em&gt;Maybe Monad&lt;/em&gt;. F# supports a feature named &lt;em&gt;Computation Expression&lt;/em&gt;
that are syntactic sugar for this kind of computations. Let's just look how our code could look like
with a &lt;em&gt;Maybe Monad&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 158)&quot; onmouseover=&quot;showTip(event, 'fs56', 158)&quot; class=&quot;i&quot;&gt;resultWithMaybeA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 159)&quot; onmouseover=&quot;showTip(event, 'fs55', 159)&quot; class=&quot;i&quot;&gt;maybe&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 160)&quot; onmouseover=&quot;showTip(event, 'fs15', 160)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 161)&quot; onmouseover=&quot;showTip(event, 'fs11', 161)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 162)&quot; onmouseover=&quot;showTip(event, 'fs57', 162)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 163)&quot; onmouseover=&quot;showTip(event, 'fs11', 163)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 164)&quot; onmouseover=&quot;showTip(event, 'fs58', 164)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 165)&quot; onmouseover=&quot;showTip(event, 'fs11', 165)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;30&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 166)&quot; onmouseover=&quot;showTip(event, 'fs15', 166)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 167)&quot; onmouseover=&quot;showTip(event, 'fs57', 167)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 168)&quot; onmouseover=&quot;showTip(event, 'fs58', 168)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you see, we just can wrap our code inside a &lt;code&gt;maybe { ... }&lt;/code&gt;. What you now see is a special
syntax only available in a &lt;em&gt;Computation Expression&lt;/em&gt;. You can write &lt;code&gt;let!&lt;/code&gt; instead of just &lt;code&gt;let&lt;/code&gt;.
A &lt;code&gt;let!&lt;/code&gt; basically does the &lt;em&gt;unwrapping&lt;/em&gt; of a value for you.&lt;/p&gt;
&lt;p&gt;Remember that &lt;code&gt;tryParse&lt;/code&gt; actually returned an &lt;code&gt;int option&lt;/code&gt;. But if you hover over &lt;code&gt;x&lt;/code&gt; it is
just an &lt;code&gt;int&lt;/code&gt;. &lt;code&gt;let!&lt;/code&gt; basically can turn a &lt;code&gt;int option&lt;/code&gt; to an ordinary &lt;code&gt;int&lt;/code&gt; for you. So you
can work with the result of &lt;code&gt;tryParse&lt;/code&gt; just as if it is a normal value. But
overall &lt;code&gt;resultWithMaybeA&lt;/code&gt; is still an &lt;code&gt;int optional&lt;/code&gt;. In those case it will be &lt;code&gt;Some 60&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you would have written.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 169)&quot; onmouseover=&quot;showTip(event, 'fs59', 169)&quot; class=&quot;i&quot;&gt;resultWithMaybeB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 170)&quot; onmouseover=&quot;showTip(event, 'fs55', 170)&quot; class=&quot;i&quot;&gt;maybe&lt;/span&gt; {
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 171)&quot; onmouseover=&quot;showTip(event, 'fs15', 171)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 172)&quot; onmouseover=&quot;showTip(event, 'fs11', 172)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 173)&quot; onmouseover=&quot;showTip(event, 'fs57', 173)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 174)&quot; onmouseover=&quot;showTip(event, 'fs11', 174)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hallo&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let!&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 175)&quot; onmouseover=&quot;showTip(event, 'fs58', 175)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 176)&quot; onmouseover=&quot;showTip(event, 'fs11', 176)&quot; class=&quot;f&quot;&gt;tryParse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;30&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 177)&quot; onmouseover=&quot;showTip(event, 'fs15', 177)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 178)&quot; onmouseover=&quot;showTip(event, 'fs57', 178)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 179)&quot; onmouseover=&quot;showTip(event, 'fs58', 179)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;resultWithMaybeB&lt;/code&gt; would be &lt;code&gt;None&lt;/code&gt;. This is because &lt;code&gt;tryParse &quot;hallo&quot;&lt;/code&gt; would result in &lt;code&gt;None&lt;/code&gt;. And this
will abort the &lt;code&gt;maybe&lt;/code&gt; construct at this point, and it would overall just return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt; is evil, because you have to add a lot of checking to get it right, a language like C# don't
support you in trying to find all places where you forgot or have to add checking to get a correct
program.&lt;/p&gt;
&lt;p&gt;Optionals solve the problem as you already get forced to check for &lt;code&gt;None&lt;/code&gt; at compile-time. And
you only need to do it at places where an Optional could be returned. With the idea of
an &lt;em&gt;Applicative Functor&lt;/em&gt; or the &lt;em&gt;Maybe Monad&lt;/em&gt; you can still write code at places where you don't
want to add explicit checking, without losing the benefits of optionals.&lt;/p&gt;
&lt;p&gt;In some future blogs I will show you in more detail how &lt;em&gt;Applicative Functors&lt;/em&gt; and the &lt;em&gt;Maybe Monad&lt;/em&gt;
works. So you can build your own constructs !&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.ploeh.dk/2015/11/13/null-has-no-type-but-maybe-has/&quot;&gt;Null has no type, but Maybe has&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/posts/the-option-type/&quot;&gt;The Option Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/F_Sharp_Programming/Option_Types&quot;&gt;Wikibook - Option Type&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;type &amp;#39;T option = Option&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.option&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;type Int32 = System.Int32&lt;br /&gt;&lt;br /&gt;Full name: Main.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val tryParse : str:string -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.tryParse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;System.Int32.TryParse(s: string, result: byref&amp;lt;int&amp;gt;) : bool&lt;br /&gt;System.Int32.TryParse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider, result: byref&amp;lt;int&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val x : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val y : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val z : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.z&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val result : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.result&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val extractedX : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val extractedY : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val extractedZ : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val apply : xf:(&amp;#39;a -&amp;gt; &amp;#39;b) option -&amp;gt; xx:&amp;#39;a option -&amp;gt; &amp;#39;b option&lt;br /&gt;&lt;br /&gt;Full name: Main.Option.apply&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val xf : (&amp;#39;a -&amp;gt; &amp;#39;b) option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val xx : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val lift2 : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;a option -&amp;gt; y:&amp;#39;b option -&amp;gt; &amp;#39;c option&lt;br /&gt;&lt;br /&gt;Full name: Main.Option.lift2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val x : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val y : &amp;#39;b option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val lift3 : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d) -&amp;gt; x:&amp;#39;a option -&amp;gt; y:&amp;#39;b option -&amp;gt; z:&amp;#39;c option -&amp;gt; &amp;#39;d option&lt;br /&gt;&lt;br /&gt;Full name: Main.Option.lift3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val z : &amp;#39;c option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val lift4 : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d -&amp;gt; &amp;#39;e) -&amp;gt; x:&amp;#39;a option -&amp;gt; y:&amp;#39;b option -&amp;gt; z:&amp;#39;c option -&amp;gt; w:&amp;#39;d option -&amp;gt; &amp;#39;e option&lt;br /&gt;&lt;br /&gt;Full name: Main.Option.lift4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c -&amp;gt; &amp;#39;d -&amp;gt; &amp;#39;e)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val w : &amp;#39;d option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val addThree : a:int -&amp;gt; b:int -&amp;gt; c:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.addThree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val a : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val b : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val c : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val addThreeOptionals : (int option -&amp;gt; int option -&amp;gt; int option -&amp;gt; int option)&lt;br /&gt;&lt;br /&gt;Full name: Main.addThreeOptionals&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;Multiple items&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Main&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val resultWithA : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.resultWithA&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val w : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.w&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val ax : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.ax&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val bx : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.bx&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;Multiple items&lt;br /&gt;type MaybeBuilder =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; MaybeBuilder&lt;br /&gt;&amp;#160;&amp;#160;member Bind : m:&amp;#39;b option * f:(&amp;#39;b -&amp;gt; &amp;#39;c option) -&amp;gt; &amp;#39;c option&lt;br /&gt;&amp;#160;&amp;#160;member Return : x:&amp;#39;a -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.MaybeBuilder&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; MaybeBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val o : MaybeBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;member MaybeBuilder.Bind : m:&amp;#39;b option * f:(&amp;#39;b -&amp;gt; &amp;#39;c option) -&amp;gt; &amp;#39;c option&lt;br /&gt;&lt;br /&gt;Full name: Main.MaybeBuilder.Bind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val m : &amp;#39;b option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val f : (&amp;#39;b -&amp;gt; &amp;#39;c option)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val bind : binder:(&amp;#39;T -&amp;gt; &amp;#39;U option) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.bind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;member MaybeBuilder.Return : x:&amp;#39;a -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.MaybeBuilder.Return&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val maybe : MaybeBuilder&lt;br /&gt;&lt;br /&gt;Full name: Main.maybe&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val resultWithMaybeA : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.resultWithMaybeA&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val z : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val resultWithMaybeB : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.resultWithMaybeB&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Understanding Immutability and Pure Functions (for OOP)</title>
   <link href="https://sidburn.github.io/blog/2016/03/14/immutability-and-pure-functions"/>
   <updated>2016-03-14T00:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/14/immutability-and-pure-functions</id>
   <content type="html">&lt;p&gt;One important concept in functional programming is immutability. But also in
object-oriented programming immutability and so called &lt;em&gt;immutable objects&lt;/em&gt; getting
more attention. The problem that I see especially from object-oriented programmers
are really bad explanations. A lot of explanation I had see described it like this:
&lt;em&gt;Just create a class and make all fields readonly (final or const) and
you have an immutable object&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Explanations like these are &lt;strong&gt;horrible&lt;/strong&gt;. Such explanations are so simplified that I
would even call them &lt;em&gt;wrong&lt;/em&gt;. So why are they so horrible? Because they don't really
explain anything at all. A programmer new to this concept will just immediately
think: &lt;em&gt;Uhm, but I want to change things! I want to add data to an array, I want to
modify things. I want to do some kind of calculations. I don't want to have static non
changing things. Immutability sounds not practical at all!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So let's see what immutability really means.&lt;/p&gt;
&lt;h2&gt;Immutability in a Nutshell&lt;/h2&gt;
&lt;p&gt;A much more useful explanation is to say that &lt;em&gt;immutability&lt;/em&gt; is not about &lt;em&gt;forbidding change&lt;/em&gt;
at all. Instead &lt;em&gt;immutability&lt;/em&gt; is more on &lt;strong&gt;how&lt;/strong&gt; to &lt;em&gt;handle change&lt;/em&gt;. Immutability
is not about forbidding some kind of operations. You still can add an element to
an array, the difference is that you just do it differently.&lt;/p&gt;
&lt;p&gt;In an mutable world you would directly add your element to an array. In an immutable
world you create a new array with your added element instead. The key concept is to
understand that instead of modifying something you create something &lt;em&gt;new&lt;/em&gt; with your
change applied.&lt;/p&gt;
&lt;p&gt;Once you understand it is more about creating &lt;em&gt;new&lt;/em&gt; things with your changes applied,
the question that arise is more: &lt;em&gt;Why should that be better?&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;About OO&lt;/h2&gt;
&lt;p&gt;Before we go into all kinds of explanations we first have to address OO programming. At first,
talking about immutability and OO at the same time is actually a bad idea. The problem is
that immutability doesn't really fit in the OO world. Because of that we should first focus
on immutability and how it works in a functional language. This will be several magnitudes
easier. Once we understand it there, we go back to the OO world and look how everything
fits in the OO world.&lt;/p&gt;
&lt;p&gt;So why does &lt;em&gt;immutability&lt;/em&gt; not directly fit in the OO world? Because &lt;em&gt;immutability&lt;/em&gt; is solely
about data-structures. &lt;em&gt;Immutability&lt;/em&gt; is the core idea that data cannot be changed. Functions
take &lt;em&gt;immutable data&lt;/em&gt; and they return &lt;em&gt;immutable data&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that in object-orientation you usually don't create data-structures. You
encapsulate and hide data instead. Data-access is often even viewed as &lt;em&gt;bad&lt;/em&gt;. Often you got told
to create methods instead of providing access to data. This and other things are the reason
why it is hard to &lt;em&gt;get&lt;/em&gt; the concept of immutability especially as an OO programmer. We will later
talk about this problem in more depth. For the moment we will put objects aside.&lt;/p&gt;
&lt;h2&gt;Immutability is about data&lt;/h2&gt;
&lt;p&gt;So Immutability really means that data itself cannot be changed. But as stated previously, instead
of modifying data itself we call functions that then can return new immutable data. Let's look at
some immutable data-structures.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;int&lt;/code&gt; is immutable&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 5)&quot; onmouseover=&quot;showTip(event, 'fs2', 5)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 6)&quot; onmouseover=&quot;showTip(event, 'fs3', 6)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You actually should be familiar with this because it even feels natural that &lt;code&gt;int&lt;/code&gt; is immutable. You
have a lot of operations like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and some more in the &lt;code&gt;Math&lt;/code&gt; class. All of those
operations take some number, do some kind of operation with it and return something new instead.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; stays the same, instead &lt;code&gt;+&lt;/code&gt; takes two arguments, and produces a new result. We can actually
treat &lt;code&gt;+&lt;/code&gt; just as a function that takes two &lt;code&gt;int&lt;/code&gt; and produces a whole new &lt;code&gt;int&lt;/code&gt;. As a result
we get &lt;code&gt;z&lt;/code&gt; that is &lt;code&gt;15&lt;/code&gt;. We wouldn't expect that &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; also get modified at all.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;string&lt;/code&gt; is immutable&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;int&lt;/code&gt; to get the feeling of the concept is easy, but it is sometimes hard how this concept
works with more complex types. Additional &lt;code&gt;int&lt;/code&gt; is in most languages some kind of special &lt;em&gt;primitive&lt;/em&gt;
type or a so called &lt;em&gt;value type&lt;/em&gt;. So we threat them anyway as some kind of &lt;em&gt;special&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So let's look at &lt;code&gt;string&lt;/code&gt;. &lt;code&gt;string&lt;/code&gt; is usually a &lt;em&gt;reference type&lt;/em&gt; in most languages like any
other class. But at least in Java or C#, they are still immutable.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 7)&quot; onmouseover=&quot;showTip(event, 'fs5', 7)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 10)&quot; onmouseover=&quot;showTip(event, 'fs5', 10)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 11)&quot; onmouseover=&quot;showTip(event, 'fs6', 11)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;foobar&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 12)&quot; onmouseover=&quot;showTip(event, 'fs8', 12)&quot; class=&quot;i&quot;&gt;foo1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 13)&quot; onmouseover=&quot;showTip(event, 'fs9', 13)&quot; class=&quot;i&quot;&gt;foo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 14)&quot; onmouseover=&quot;showTip(event, 'fs8', 14)&quot; class=&quot;i&quot;&gt;foo1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 15)&quot; onmouseover=&quot;showTip(event, 'fs10', 15)&quot; class=&quot;f&quot;&gt;Replace&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 16)&quot; onmouseover=&quot;showTip(event, 'fs11', 16)&quot; class=&quot;i&quot;&gt;foo&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 17)&quot; onmouseover=&quot;showTip(event, 'fs9', 17)&quot; class=&quot;i&quot;&gt;foo2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 18)&quot; onmouseover=&quot;showTip(event, 'fs12', 18)&quot; class=&quot;f&quot;&gt;Remove&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In this examples we even already see a little bit of OO, because we call methods that &lt;code&gt;string&lt;/code&gt; provides.
But looking at the examples we still see that also &lt;code&gt;string&lt;/code&gt; behaves much like &lt;code&gt;int&lt;/code&gt;. If we add
two strings together we don't modify a string. Instead we create a whole new string instead.&lt;/p&gt;
&lt;p&gt;We can observe the same with our method calls. Calling &lt;code&gt;foo1.Replace('1', '2')&lt;/code&gt; doesn't change &lt;code&gt;foo1&lt;/code&gt;
instead we get a new string back with our change applied.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;list&lt;/code&gt; is immutable&lt;/h3&gt;
&lt;p&gt;So let's look into a more advanced immutable data-type a &lt;code&gt;list&lt;/code&gt; in F#. (This is not
&lt;code&gt;System.Collections.Generic.List&amp;lt;T&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 19)&quot; onmouseover=&quot;showTip(event, 'fs13', 19)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Usually we want operation for List, for example we want to add elements. In F# we could write something
like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 20)&quot; onmouseover=&quot;showTip(event, 'fs14', 20)&quot; class=&quot;i&quot;&gt;data2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 21)&quot; onmouseover=&quot;showTip(event, 'fs13', 21)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the same spirit like &lt;code&gt;+&lt;/code&gt; we have &lt;code&gt;::&lt;/code&gt; for adding an element to the top of a list. But instead
of modifying the list itself, we get a new list back. It is now important to note that now we have
two lists. &lt;code&gt;data&lt;/code&gt; now contains &lt;code&gt;[1;2;3;4;5]&lt;/code&gt; and &lt;code&gt;data2&lt;/code&gt; contains &lt;code&gt;[0;1;2;3;4;5]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From the examples so far we actually can see a &lt;em&gt;pattern&lt;/em&gt;. All of our functions take some arguments.
But they always &lt;em&gt;return&lt;/em&gt; us something new with our wanted modification applied. That alone means
we can often identify mutation by looking at the function signature. Functions without a return
value that just return &lt;em&gt;unit&lt;/em&gt; or similar &lt;em&gt;void&lt;/em&gt; in C# &lt;em&gt;often&lt;/em&gt; mutate data. This alone is
not a proof, but a very high indicator.&lt;/p&gt;
&lt;p&gt;So, let's assume we want to do some more real-world stuff with our list. Let's assume we want to multiply
each element in an &lt;code&gt;int list&lt;/code&gt;. Usually in imperative languages like C# you can see something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; i&amp;lt;array.Count&lt;span class=&quot;n&quot;&gt;-1&lt;/span&gt;; i+&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) {
    array[i] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; array[i] &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;but in an immutable world we would create a whole new list with our change applied. Instead of
direct looping we use functions instead. So for example we have &lt;code&gt;List.map&lt;/code&gt; that does this kind of
operation for us.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 23)&quot; onmouseover=&quot;showTip(event, 'fs14', 23)&quot; class=&quot;i&quot;&gt;data2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 24)&quot; onmouseover=&quot;showTip(event, 'fs15', 24)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 25)&quot; onmouseover=&quot;showTip(event, 'fs16', 25)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 26)&quot; onmouseover=&quot;showTip(event, 'fs17', 26)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 27)&quot; onmouseover=&quot;showTip(event, 'fs17', 27)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs13', 28)&quot; onmouseover=&quot;showTip(event, 'fs13', 28)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;After executing we once again have two lists. &lt;code&gt;data&lt;/code&gt; that still contains &lt;code&gt;[1;2;3;4;5]&lt;/code&gt; and
&lt;code&gt;data2&lt;/code&gt; that now contains &lt;code&gt;[2;4;6;8;10]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Records are immutable&lt;/h3&gt;
&lt;p&gt;Let's create another more advanced example. Let's create a &lt;code&gt;Person&lt;/code&gt; type that represents a Person
in a database.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 32)&quot; onmouseover=&quot;showTip(event, 'fs21', 32)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs22', 33)&quot; onmouseover=&quot;showTip(event, 'fs22', 33)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;       &lt;span onmouseout=&quot;hideTip(event, 'fs23', 34)&quot; onmouseover=&quot;showTip(event, 'fs23', 34)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs24', 35)&quot; onmouseover=&quot;showTip(event, 'fs24', 35)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs25', 36)&quot; onmouseover=&quot;showTip(event, 'fs25', 36)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs26', 37)&quot; onmouseover=&quot;showTip(event, 'fs26', 37)&quot; class=&quot;i&quot;&gt;Birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 38)&quot; onmouseover=&quot;showTip(event, 'fs18', 38)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs27', 39)&quot; onmouseover=&quot;showTip(event, 'fs27', 39)&quot; class=&quot;i&quot;&gt;Likes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs25', 40)&quot; onmouseover=&quot;showTip(event, 'fs25', 40)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 41)&quot; onmouseover=&quot;showTip(event, 'fs28', 41)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now could create a Person like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 42)&quot; onmouseover=&quot;showTip(event, 'fs29', 42)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;Id&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David Raab&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 43)&quot; onmouseover=&quot;showTip(event, 'fs18', 43)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;02&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;Likes&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;Pizza&amp;quot;&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is a record in F#, and like all other data-types it is also &lt;em&gt;immutable&lt;/em&gt; by default.
So now let's assume we want to change some parts.I like &quot;dark chocolate&quot; and &quot;tea&quot; so
let's add them. Because we cannot change our data, we have to create a new record instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 44)&quot; onmouseover=&quot;showTip(event, 'fs30', 44)&quot; class=&quot;i&quot;&gt;me2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;Id&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 45)&quot; onmouseover=&quot;showTip(event, 'fs29', 45)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs22', 46)&quot; onmouseover=&quot;showTip(event, 'fs22', 46)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 47)&quot; onmouseover=&quot;showTip(event, 'fs29', 47)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 48)&quot; onmouseover=&quot;showTip(event, 'fs24', 48)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 49)&quot; onmouseover=&quot;showTip(event, 'fs29', 49)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 50)&quot; onmouseover=&quot;showTip(event, 'fs26', 50)&quot; class=&quot;i&quot;&gt;Birthday&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Likes&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dark Chocolate&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 51)&quot; onmouseover=&quot;showTip(event, 'fs29', 51)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 52)&quot; onmouseover=&quot;showTip(event, 'fs27', 52)&quot; class=&quot;i&quot;&gt;Likes&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What we now have are two separate variables. &lt;code&gt;me&lt;/code&gt; still represents&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;{
    &lt;span class=&quot;i&quot;&gt;Id&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David Raab&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;19.02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;00&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Likes&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;Pizza&amp;quot;&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;while &lt;code&gt;me2&lt;/code&gt; represents&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;{
    &lt;span class=&quot;i&quot;&gt;Id&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David Raab&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Birthday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;19.02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;00&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Likes&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dark Chocolate&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;Pizza&amp;quot;&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Such a &lt;em&gt;copy &amp;amp; update&lt;/em&gt; operation for records is quite common so F# provides a built-in
language construct for it. We also could have written.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;me2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Likes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dark Chocolate&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Likes&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So &lt;em&gt;immutability&lt;/em&gt; is about data that cannot be changed. But when we want to change something
we usually call a function that can create something new for us. Let's actually simplify
our example even more. Let's create a &lt;code&gt;addLike&lt;/code&gt; function instead of using the &lt;code&gt;copy &amp;amp; update&lt;/code&gt;
mechanism all over our code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 53)&quot; onmouseover=&quot;showTip(event, 'fs31', 53)&quot; class=&quot;f&quot;&gt;addLike&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 54)&quot; onmouseover=&quot;showTip(event, 'fs32', 54)&quot; class=&quot;i&quot;&gt;likes&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 55)&quot; onmouseover=&quot;showTip(event, 'fs33', 55)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span onmouseout=&quot;hideTip(event, 'fs33', 56)&quot; onmouseover=&quot;showTip(event, 'fs33', 56)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Likes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 57)&quot; onmouseover=&quot;showTip(event, 'fs32', 57)&quot; class=&quot;i&quot;&gt;likes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 58)&quot; onmouseover=&quot;showTip(event, 'fs33', 58)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 59)&quot; onmouseover=&quot;showTip(event, 'fs27', 59)&quot; class=&quot;i&quot;&gt;Likes&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What we now have is a function that takes two arguments. A &lt;code&gt;string&lt;/code&gt; &lt;code&gt;likes&lt;/code&gt; that we want to add
and a &lt;code&gt;Person&lt;/code&gt; record as its second argument. The function will then return a &lt;em&gt;new&lt;/em&gt; &lt;code&gt;Person&lt;/code&gt;
record. Now we also could add our Elements by using &lt;code&gt;addLike&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 60)&quot; onmouseover=&quot;showTip(event, 'fs30', 60)&quot; class=&quot;i&quot;&gt;me2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 61)&quot; onmouseover=&quot;showTip(event, 'fs31', 61)&quot; class=&quot;f&quot;&gt;addLike&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dark Chocolate&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 62)&quot; onmouseover=&quot;showTip(event, 'fs29', 62)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 63)&quot; onmouseover=&quot;showTip(event, 'fs34', 63)&quot; class=&quot;i&quot;&gt;me3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 64)&quot; onmouseover=&quot;showTip(event, 'fs31', 64)&quot; class=&quot;f&quot;&gt;addLike&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 65)&quot; onmouseover=&quot;showTip(event, 'fs30', 65)&quot; class=&quot;i&quot;&gt;me2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In this example we call &lt;code&gt;addLike&lt;/code&gt; with &lt;code&gt;Dark Chocolate&lt;/code&gt; and &lt;code&gt;me&lt;/code&gt;. And we get a new &lt;code&gt;Person&lt;/code&gt; back
with our change applied. Then we use &lt;code&gt;addLike&lt;/code&gt; on &lt;code&gt;me2&lt;/code&gt; to create our final &lt;code&gt;me3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It can feel a little awkward to create a lot of intermediate variables, but we can get rid of them
by chaining functions with &lt;code&gt;|&amp;gt;&lt;/code&gt;. So we also could have written it like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 66)&quot; onmouseover=&quot;showTip(event, 'fs30', 66)&quot; class=&quot;i&quot;&gt;me2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs29', 67)&quot; onmouseover=&quot;showTip(event, 'fs29', 67)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 68)&quot; onmouseover=&quot;showTip(event, 'fs31', 68)&quot; class=&quot;f&quot;&gt;addLike&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dark Chocolate&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 69)&quot; onmouseover=&quot;showTip(event, 'fs31', 69)&quot; class=&quot;f&quot;&gt;addLike&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tea&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Here &lt;code&gt;me&lt;/code&gt; is &lt;em&gt;piped-into&lt;/em&gt; &lt;code&gt;addLike &quot;Dark Chocolate&quot;&lt;/code&gt;. This will result in a new &lt;code&gt;Person&lt;/code&gt; record
that then is once again &lt;em&gt;piped-into&lt;/em&gt; &lt;code&gt;addLike &quot;Tea&quot;&lt;/code&gt;. In object-oriented programming we could
achieve something similar if we have a &lt;code&gt;Person&lt;/code&gt; class with a method &lt;code&gt;AddLike&lt;/code&gt; that returns a
new &lt;code&gt;Person&lt;/code&gt; object, instead of modifying some &lt;code&gt;private&lt;/code&gt; fields. in C# this would result into
something like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; me&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    me
    .AddLike(&lt;span class=&quot;s&quot;&gt;&quot;Dark Chocolate&quot;&lt;/span&gt;)
    .AddLike(&lt;span class=&quot;s&quot;&gt;&quot;Tea&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This is similar to &lt;a href=&quot;https://en.wikipedia.org/wiki/Fluent_interface&quot;&gt;Fluent Interfaces&lt;/a&gt;.
But the important point is that &lt;code&gt;me&lt;/code&gt; as an object don't get modified. &lt;code&gt;AddLike&lt;/code&gt; would return
a whole new &lt;code&gt;Person&lt;/code&gt; object with your operation applied. Because it is once again a &lt;code&gt;Person&lt;/code&gt;
you can chain methods. You also can get a &lt;em&gt;fluent-interface&lt;/em&gt; by just returning &lt;em&gt;this&lt;/em&gt; after
each modification. It would look the same. But in the end &lt;code&gt;me&lt;/code&gt; and &lt;code&gt;me2&lt;/code&gt; would be references
to the same object, and &lt;code&gt;me&lt;/code&gt; would be changed.&lt;/p&gt;
&lt;h2&gt;Pure functions&lt;/h2&gt;
&lt;p&gt;In a &lt;em&gt;functional-only&lt;/em&gt; language we could probably stop at this point. &lt;em&gt;Data&lt;/em&gt; and &lt;em&gt;functions&lt;/em&gt;
are clearly separated, immutability is only about &lt;em&gt;data&lt;/em&gt; that does not change. The big problem
arises if a language also supports classes. Because a class is about &lt;em&gt;hiding data&lt;/em&gt;
and additionally contains &lt;em&gt;functions&lt;/em&gt;, it introduces a lot of complexity. To understand
the reason of this complexity, we first need to talk about &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;impure&lt;/em&gt; functions on
its own.&lt;/p&gt;
&lt;h3&gt;Side-effects&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Pure&lt;/em&gt; functions are only those functions that don't have any kind of side-effects. So
what exactly is a &lt;em&gt;side-effect&lt;/em&gt;? A simple explanation would be: &lt;em&gt;A function only can
depend on its input&lt;/em&gt;. Calling a function with the same input, &lt;em&gt;always&lt;/em&gt; has to produce the
same output. No matter how often, or at what time you call it. We can view &lt;code&gt;+&lt;/code&gt; as a pure function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;No matter how often or at what time we execute the above statement, &lt;code&gt;x&lt;/code&gt; should always be &lt;code&gt;8&lt;/code&gt;.
If at some point it is &lt;em&gt;possible&lt;/em&gt; that it could return something different, we would have
an &lt;em&gt;impure&lt;/em&gt; function.&lt;/p&gt;
&lt;p&gt;In this example it seems even natural that we don't want any &lt;em&gt;impure&lt;/em&gt; function. A &lt;code&gt;3 + 5&lt;/code&gt;
that sometimes could return something different sounds horrible. But the truth is, we
often face &lt;em&gt;impure&lt;/em&gt; functions and we usually also want them. Examples of &lt;em&gt;impure&lt;/em&gt; functions are.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Getting a random number&lt;/li&gt;
&lt;li&gt;Getting the current system time&lt;/li&gt;
&lt;li&gt;Getting the user input&lt;/li&gt;
&lt;li&gt;Reading data from a file&lt;/li&gt;
&lt;li&gt;Reading data from a network&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To deeper understand why they are impure. Which arguments would a function have that returns
a random number? Usually we would say: &lt;em&gt;Such a function don't need any input&lt;/em&gt;. And that is a problem.
It means, whenever we call a function with no input. It always have to return the same output.
So it just means, we cannot return &lt;em&gt;random numbers&lt;/em&gt;, because otherwise that statement wouldn't be
true. That's is also true for the other functions. We cannot for example implement a
&lt;code&gt;readFile &quot;file.txt&quot;&lt;/code&gt; function that returns the content of &lt;code&gt;&quot;file.txt&quot;&lt;/code&gt;. Because that content
could change every time. And whenever the content of the file changes. &lt;code&gt;readFile &quot;file.txt&quot;&lt;/code&gt; would
return something different.&lt;/p&gt;
&lt;p&gt;But currently we only only know half of the truth. Because a &lt;em&gt;function&lt;/em&gt; still can be impure even
following the above rule. There is even a second rule that a &lt;em&gt;pure function&lt;/em&gt; have to fulfil:
&lt;em&gt;We always can replace a pure function call with the value it produces, without that it yields any
change to the program&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That means. Whenever we see &lt;code&gt;3 + 5&lt;/code&gt;, we also could replace that calculations with &lt;code&gt;8&lt;/code&gt;. Or if
we see &lt;code&gt;readFile &quot;file.txt&quot;&lt;/code&gt; we could replace all calls to &lt;code&gt;readFile &quot;file.txt&quot;&lt;/code&gt; by the value
that the first function call would produce. This also explains better why a &lt;code&gt;readFile &quot;file.txt&quot;&lt;/code&gt;
would be impure. If we call &lt;code&gt;readFile&lt;/code&gt; and some time later once again, we would assume that it
returns the new current state of the file. It also could yield an error if the function in the
mean time was deleted. The point is, we expect that the function can return something
different every time we call it.&lt;/p&gt;
&lt;p&gt;But this kind of description also eliminates some additional behaviour.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We cannot print something to a console&lt;/li&gt;
&lt;li&gt;We cannot write to a file/database&lt;/li&gt;
&lt;li&gt;We cannot send data over network&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's assume we have &lt;code&gt;someFunction 5&lt;/code&gt; that always will return &lt;code&gt;10&lt;/code&gt; but also prints something
to the console. We couldn't replace all calls to &lt;code&gt;someFunction 5&lt;/code&gt; just with &lt;code&gt;10&lt;/code&gt; because otherwise
we lose all log statements in our console.&lt;/p&gt;
&lt;p&gt;Thinking over it, we could ask the question. Can we even write any useful program without
side-effects? The answer is no. That is the reason why Erik Meijer often say:
&lt;em&gt;We all love side-effects&lt;/em&gt;. But that doesn't mean we want side-effects happenning all
over our code in every function. If a statement like &lt;code&gt;3 + 5&lt;/code&gt; could yield &lt;code&gt;10&lt;/code&gt; that would
probably drive a lot of people crazy, me too. We want side-effects but we somehow want to
control them. We want to minimize side-effects as much as possible.&lt;/p&gt;
&lt;p&gt;So how do we do that? We first assume that impure functions do as little as possible and have
nearly no logic at all, second we just assume that they return some immutable data! Those
immutable data then can be used/transformed and so on by pure functions.&lt;/p&gt;
&lt;h3&gt;(Im)mutability and (im)pure functions&lt;/h3&gt;
&lt;p&gt;One interesting aspect is that both concepts are completely orthogonal. That means, we can have
any combination of those. We can have pure functions that take mutable or immutable data, and return
mutable or immutable data. And we can have impure functions that take and return mutable or immutable
data. The thing is, mutability or immutability doesn't change whether a function is pure or not. This
is important to understand that both concepts don't relate to each other. Let's for example look
again at the above impure functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A random number generator returns an immutable int/float&lt;/li&gt;
&lt;li&gt;A function returning the current time can return an immutable &lt;code&gt;DateTime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A function that returns the user input returns an immutable string&lt;/li&gt;
&lt;li&gt;Reading a file or from a socket can also return an immutable string&lt;/li&gt;
&lt;li&gt;A function that prints something to the console takes an immutable string&lt;/li&gt;
&lt;li&gt;Sending/Serialization of data over network can take an immutable data-structure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point, I cannot stress further how important it is to understand that immutability
is all about data, not about functions or behaviour. We will see later why this is so important!&lt;/p&gt;
&lt;h3&gt;Pure functions with side-effects&lt;/h3&gt;
&lt;p&gt;The last important point is that we can have pure-functions even if they have some kind of
side-effects. A typical example of this is a function that has internal caching with a mutable
variable.&lt;/p&gt;
&lt;p&gt;We could come to the conclusion that this is an impure function as another variable as a
side-effects gets changed. But actually, such a function fulfil all rules we have above. Even
the fact that it mutates some variable. It doesn't really matter, as such a function will still
always return the exact same results to its input. And we always also could replace the function
call with its output.&lt;/p&gt;
&lt;p&gt;This is important because people all to often try to look at implementations, but the implementation
itself shouldn't matter at all. The only thing that should matter is how a function behaves. If
a function behaves like a pure function it is a pure function. The same is also true for
mutability. A lot of people try hard to get rid of mutability, sometimes that can lead to
bad performance or in general can make the code harder to understand. For example it is also
fine to have a function with internal mutable state. As long as that function behaves like a pure
function and even gets/returns immutable data, it is absolutely fine to have mutable local variables.&lt;/p&gt;
&lt;p&gt;I would even state that this is a big advantage of F#! For example a lot
of the functions from the &lt;code&gt;List&lt;/code&gt; module turn a List into a mutable array, do some work on it, and
turn it back into an immutable list. And overall we don't care that it does that. As long as we
use a function and it behaves like a pure function returning immutable data, we are fine with it.&lt;/p&gt;
&lt;h2&gt;Benefits of Immutability&lt;/h2&gt;
&lt;p&gt;To shorten the example. Let's assume everything is mutable and a &lt;em&gt;reference-type&lt;/em&gt; and it also
applies to numbers. Saying that, lets look at the following code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;someFunction&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What value is &lt;code&gt;y&lt;/code&gt; now? The answer is, we don't know! &lt;code&gt;someFunction&lt;/code&gt; could have changed &lt;code&gt;x&lt;/code&gt; to
some other value without that we are aware of it. So after our function did run, we cannot
know what &lt;code&gt;x&lt;/code&gt; is, so we don't know what &lt;code&gt;y&lt;/code&gt; is. But what does that overall mean?&lt;/p&gt;
&lt;p&gt;Usually we are told that functions, or also classes, methods should be treated as &lt;em&gt;block-boxes&lt;/em&gt;.
So we should never have to look at how something is implemented. But the thing is, as long we
have mutable data, that concept cannot work. Because as long we have mutable data it means that
a function could do more as documented. We actually can never be sure that &lt;code&gt;x&lt;/code&gt; don't get changed
until we look at how &lt;code&gt;someFunction&lt;/code&gt; is implemented. Lets look at another problem.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;someFunction&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;isValid&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So what is the problem here? We are actually accessing &lt;code&gt;value.isValid&lt;/code&gt; when it is &lt;code&gt;true&lt;/code&gt;
we enter the code. Once again we have &lt;code&gt;someFunction&lt;/code&gt; using &lt;code&gt;value&lt;/code&gt;. But wait, why do we now
re-check &lt;code&gt;value.isValid&lt;/code&gt;? It could &lt;em&gt;probably&lt;/em&gt; be that the programmer in charge was drunk, but
wait, can we be sure that the &lt;code&gt;value.isValid&lt;/code&gt; is still true? In fact, as long as we have
mutability the answer is &lt;em&gt;no&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The problem is we don't see the scope of our variables. It could be that our
&lt;code&gt;someFunction&lt;/code&gt; also has access to our &lt;code&gt;value&lt;/code&gt; and modifies it. This sounds like a
horrible programming-style but it is not so uncommon as you think. Did you ever had an
array of objects, and returned an object from this array? If &lt;em&gt;yes&lt;/em&gt;, you are open to such kind
of errors. Because you have two functions that still can access the same object used at
multiple places. And in fact we don't even need an array. Looking at object-oriented languages
like C# nearly &lt;em&gt;everything&lt;/em&gt; is actually a reference-type. &lt;em&gt;Objects&lt;/em&gt; itself never get copied,
only references are copied, and the only thing you pass around are references. This
also means every function could hold a reference to some data and directly change
those whenever it wants!&lt;/p&gt;
&lt;p&gt;So shortly, we cannot know if &lt;code&gt;value&lt;/code&gt; still contains the same data. It already could have changed
multiple times. This kind of possibility even raises with &lt;em&gt;multi-threaded&lt;/em&gt; code. And
I'm not talking about &lt;em&gt;thread-safety&lt;/em&gt; or &lt;em&gt;race-conditions&lt;/em&gt; here. &lt;code&gt;value&lt;/code&gt; could be thread-safe
and still changed in the mean time. The thing is, mutability basically makes any kind of code
hard or nearly completely unpredictable.&lt;/p&gt;
&lt;p&gt;The problem is, this kind of problem grows the bigger our program becomes. Multi-threading
also increase that kind of problems by several magnitudes. And this is the overall problem.
With more code we anyway face problems of designing and maintaining programs. Mutability
just can create hard to track errors. It can become insanely hard to reason about some
kind of code if at every blink of an eye every value can be changed at any time. Immutability
overall can make code easier to read and maintain.&lt;/p&gt;
&lt;p&gt;We also can gain other benefits out of it, like easy do/undo systems, backtracking in recursive
functions for free, and a lot of other stuff.&lt;/p&gt;
&lt;h2&gt;Disadvantages of Immutability&lt;/h2&gt;
&lt;p&gt;Nothing in the world really just have only benefits. Everything in the world has its advantages and
its disadvantages. So what are the disadvantages of immutability?&lt;/p&gt;
&lt;p&gt;Mainly it is performance.
Some people think that &lt;em&gt;copying&lt;/em&gt; is the often problem or &lt;em&gt;memory&lt;/em&gt;, but that isn't true. For example
let's look at the list example. A lot of people assume that by adding an element to a list a whole
list itself has to be copied. But that isn't true at all. For example adding an element to the top
is an &lt;em&gt;O(1)&lt;/em&gt; operation. It only can be made so efficient &lt;em&gt;because&lt;/em&gt; of immutability. An immutable list
is really just a data-structure that contains an element and a reference to another list.&lt;/p&gt;
&lt;p&gt;That's why adding/removing from the top is efficient, instead of adding/removing at the end like
many people knew it from types like &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; in C#. The only reason why you could safely reference
another list is because of immutability. With mutable data this wouldn't be possible as
a list can change. So sharing data with immutable data is very safe. That's also the reason
why you probably hear often that immutability works better with multi-threaded system. Or
functional languages have advantages with multi-threaded systems. It is because immutable data
are preferred and used in such languages.&lt;/p&gt;
&lt;p&gt;But it doesn't change that there sometimes exists a problem where this is still a bottleneck
or the culprit to performance problems. The problem with immutable-data is that you have to build
them incrementally. A List with 1 Million elements is really build just as&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; []
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;or in other words. a lot of copy and create options. Sure a compiler or a runtime could have
some optimization. F# probably have them for lists, but that overall doesn't change that
immutability can sometimes lead to such problems. That is also the very reason why we have
a &lt;code&gt;StringBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also a &lt;code&gt;String&lt;/code&gt; is immutable but concatenating a lot of strings can create a lot of garbage
throw-away objects. A &lt;code&gt;StringBuilder&lt;/code&gt; can actually close that bridge. A &lt;code&gt;StringBuilder&lt;/code&gt; uses
a mutable string, and once you are done, you can get an immutable &lt;code&gt;string&lt;/code&gt; back.&lt;/p&gt;
&lt;p&gt;Other problems can arise that some problems or algorithms can be hard to implement with
immutability. I just want to point again at what was said for &lt;em&gt;pure&lt;/em&gt; functions. If you encounter
such problems you always can convert some kind of data to some kind of mutable data. Do your
operation, and convert it back to a immutable data-type.&lt;/p&gt;
&lt;p&gt;So it is still important to understand that not everything is shiny and automatically better.
Immutability can sometime have it's own problems, but there exists solutions for it.&lt;/p&gt;
&lt;h2&gt;Immutability and OO&lt;/h2&gt;
&lt;p&gt;Finally, we now have every knowledge to talk about immutability in object-oriented programming
and why it is so damn hard. First, let's reconsider what an object is.&lt;/p&gt;
&lt;p&gt;The fundamental thing
of object-oriented programming is to hide data and instead provide methods that do
some stuff. We even have rules like &lt;em&gt;Law-of-Demeter&lt;/em&gt; or &lt;em&gt;Tell don't ask&lt;/em&gt; that express it.
An object is not about asking it form some data, we usually just call a method to
tell it that it should &lt;em&gt;do&lt;/em&gt; something.&lt;/p&gt;
&lt;p&gt;Or in other words. Objects are just collection of functions. And here starts the problem. We
actually learned that immutability has nothing to-do with functions at all! Immutability is
about data not functions! Functions sure can be &lt;em&gt;pure&lt;/em&gt; or &lt;em&gt;impure&lt;/em&gt; but once again, we also
learned that it doesn't matter at all for immutability. In fact we even consider it as good
if we have side-effects that returns immutable data. That is how to solve the problem of
side-effects. But just having data is usually discouraged in OO. OO has even it's own term
for it. It is named the &lt;em&gt;Anemic Domain Model&lt;/em&gt; to express if we have classes that just contains
data.&lt;/p&gt;
&lt;p&gt;So, if object-oriented programming don't try to use data explicitly, if we only have objects
that provides us functions (methods) to call. How on earth can we even talk about
&lt;em&gt;immutable objects&lt;/em&gt;? What should that thing even be? Does it even makes sense to talk
about &lt;em&gt;immutable objects&lt;/em&gt;? If we only provide methods, doesn't it make more sense to talk
about &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;impure objects&lt;/em&gt; instead?&lt;/p&gt;
&lt;p&gt;To better see the problem, let's look at at the Random class.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 70)&quot; onmouseover=&quot;showTip(event, 'fs35', 70)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 71)&quot; onmouseover=&quot;showTip(event, 'fs19', 71)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 72)&quot; onmouseover=&quot;showTip(event, 'fs36', 72)&quot; class=&quot;t&quot;&gt;Random&lt;/span&gt;()
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 73)&quot; onmouseover=&quot;showTip(event, 'fs37', 73)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 74)&quot; onmouseover=&quot;showTip(event, 'fs35', 74)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 75)&quot; onmouseover=&quot;showTip(event, 'fs38', 75)&quot; class=&quot;f&quot;&gt;Next&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Do we consider &lt;code&gt;rng&lt;/code&gt; to be immutable or not? Let's look what we have. Besides the usual
method inherited from &lt;code&gt;object&lt;/code&gt; we only have three additional methods. &lt;code&gt;Next&lt;/code&gt;, &lt;code&gt;NextDouble&lt;/code&gt; and
&lt;code&gt;NextBytes&lt;/code&gt;. &lt;code&gt;rng&lt;/code&gt; don't have any data or additional properties. We can call &lt;code&gt;Next&lt;/code&gt; and
we get an immutable &lt;code&gt;int&lt;/code&gt; back. Besides that we cannot see any difference at all that &lt;code&gt;rng&lt;/code&gt;
itself changed at all! From the outside it looks like an immutable object!&lt;/p&gt;
&lt;p&gt;Sure we have knowledge on how a random class works. Usually we have an internal private field
that holds the last generated number, with this the next number will be created when we call
&lt;code&gt;Next&lt;/code&gt;. But the point is, we cannot see that. Theoretically the implementation could also
use no mutable field at all. It could just use the current time to generate a random number
instead. So that &lt;code&gt;Next&lt;/code&gt; is impure, but don't have any mutable field.&lt;/p&gt;
&lt;p&gt;From the outside the only thing we could say is that &lt;code&gt;Random&lt;/code&gt; has three &lt;em&gt;impure&lt;/em&gt; functions.
And the object itself looks like immutable. We cannot see that any changes at all happens!&lt;/p&gt;
&lt;p&gt;So do we consider &lt;code&gt;Random&lt;/code&gt; immutable or not? Actually if you really expect an answer, there
isn't really one. Sure we could look at the implementation of it, but that is really bad,
we shouldn't needed to look at some kind of implementation to determine if something is immutable
or not. And as already explained above, it is anyway not a good idea. We should view something
as immutable or pure by looking at how it behaves, not how it is implemented.&lt;/p&gt;
&lt;p&gt;So, now we are in a dilemma, how do we solve it? One thing we could do is to broaden the view of
what an immutable object is. So we only consider something as immutable only if it has pure
functions. As soon as we have one impure function on an object, we have to think that there
exists a possibility that a private property could be modified.&lt;/p&gt;
&lt;p&gt;Let's look at another example that I saw some time ago. Someone provided a class like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 76)&quot; onmouseover=&quot;showTip(event, 'fs39', 76)&quot; class=&quot;t&quot;&gt;MutableSite&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs40', 77)&quot; onmouseover=&quot;showTip(event, 'fs40', 77)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 78)&quot; onmouseover=&quot;showTip(event, 'fs25', 78)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Url&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 79)&quot; onmouseover=&quot;showTip(event, 'fs40', 79)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;v&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;get&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs41', 80)&quot; onmouseover=&quot;showTip(event, 'fs41', 80)&quot; class=&quot;i&quot;&gt;set&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 81)&quot; onmouseover=&quot;showTip(event, 'fs42', 81)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs43', 82)&quot; onmouseover=&quot;showTip(event, 'fs43', 82)&quot; class=&quot;f&quot;&gt;Download&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 83)&quot; onmouseover=&quot;showTip(event, 'fs44', 83)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 84)&quot; onmouseover=&quot;showTip(event, 'fs19', 84)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 85)&quot; onmouseover=&quot;showTip(event, 'fs45', 85)&quot; class=&quot;i&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 86)&quot; onmouseover=&quot;showTip(event, 'fs46', 86)&quot; class=&quot;t&quot;&gt;WebClient&lt;/span&gt;()
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 87)&quot; onmouseover=&quot;showTip(event, 'fs47', 87)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 88)&quot; onmouseover=&quot;showTip(event, 'fs44', 88)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 89)&quot; onmouseover=&quot;showTip(event, 'fs48', 89)&quot; class=&quot;f&quot;&gt;DownloadString&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs42', 90)&quot; onmouseover=&quot;showTip(event, 'fs42', 90)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 91)&quot; onmouseover=&quot;showTip(event, 'fs49', 91)&quot; class=&quot;i&quot;&gt;Url&lt;/span&gt;)
        &lt;span onmouseout=&quot;hideTip(event, 'fs42', 92)&quot; onmouseover=&quot;showTip(event, 'fs42', 92)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs50', 93)&quot; onmouseover=&quot;showTip(event, 'fs50', 93)&quot; class=&quot;i&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 94)&quot; onmouseover=&quot;showTip(event, 'fs47', 94)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, we have obviously a mutable object, right? We have an mutable &lt;code&gt;Text&lt;/code&gt;. To fetch the current
site we call &lt;code&gt;Download&lt;/code&gt; that mutates &lt;code&gt;Text&lt;/code&gt;. So let's look how that person made it immutable.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 95)&quot; onmouseover=&quot;showTip(event, 'fs51', 95)&quot; class=&quot;t&quot;&gt;ImmutableSite&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs40', 96)&quot; onmouseover=&quot;showTip(event, 'fs40', 96)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 97)&quot; onmouseover=&quot;showTip(event, 'fs25', 97)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 98)&quot; onmouseover=&quot;showTip(event, 'fs40', 98)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 99)&quot; onmouseover=&quot;showTip(event, 'fs52', 99)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs53', 100)&quot; onmouseover=&quot;showTip(event, 'fs53', 100)&quot; class=&quot;f&quot;&gt;Text&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 101)&quot; onmouseover=&quot;showTip(event, 'fs44', 101)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 102)&quot; onmouseover=&quot;showTip(event, 'fs19', 102)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 103)&quot; onmouseover=&quot;showTip(event, 'fs45', 103)&quot; class=&quot;i&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 104)&quot; onmouseover=&quot;showTip(event, 'fs46', 104)&quot; class=&quot;t&quot;&gt;WebClient&lt;/span&gt;()
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 105)&quot; onmouseover=&quot;showTip(event, 'fs47', 105)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 106)&quot; onmouseover=&quot;showTip(event, 'fs44', 106)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 107)&quot; onmouseover=&quot;showTip(event, 'fs48', 107)&quot; class=&quot;f&quot;&gt;DownloadString&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs52', 108)&quot; onmouseover=&quot;showTip(event, 'fs52', 108)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs54', 109)&quot; onmouseover=&quot;showTip(event, 'fs54', 109)&quot; class=&quot;i&quot;&gt;Url&lt;/span&gt;)
        &lt;span onmouseout=&quot;hideTip(event, 'fs47', 110)&quot; onmouseover=&quot;showTip(event, 'fs47', 110)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, he just eliminated the &lt;code&gt;Text&lt;/code&gt; field. Instead he created a &lt;code&gt;Text&lt;/code&gt; method that would
directly download the site and return the content. Obviously he thought that now he
had an immutable class. And actually that things is just silly. Both version don't
differ at all!&lt;/p&gt;
&lt;p&gt;What is the difference between a &lt;code&gt;Text&lt;/code&gt; field that always can return another string after
we called &lt;code&gt;Download&lt;/code&gt;, or a &lt;code&gt;Text&lt;/code&gt; method that directly return a new string whenever
we call the method? There is no difference at all between both version. The problem
is that &lt;code&gt;Text&lt;/code&gt; always can return something different. If it
is either a mutable field or an impure method doesn't matter at all! Actually it even could
also just be a property that could do this kind of stuff, so it doesn't even look any different
to a normal mutable field instead of a method call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 111)&quot; onmouseover=&quot;showTip(event, 'fs55', 111)&quot; class=&quot;t&quot;&gt;SiteWithProperty&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs40', 112)&quot; onmouseover=&quot;showTip(event, 'fs40', 112)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 113)&quot; onmouseover=&quot;showTip(event, 'fs25', 113)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 114)&quot; onmouseover=&quot;showTip(event, 'fs56', 114)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs57', 115)&quot; onmouseover=&quot;showTip(event, 'fs57', 115)&quot; class=&quot;i&quot;&gt;Url&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 116)&quot; onmouseover=&quot;showTip(event, 'fs40', 116)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 117)&quot; onmouseover=&quot;showTip(event, 'fs56', 117)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs58', 118)&quot; onmouseover=&quot;showTip(event, 'fs58', 118)&quot; class=&quot;i&quot;&gt;Text&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;get&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 119)&quot; onmouseover=&quot;showTip(event, 'fs44', 119)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 120)&quot; onmouseover=&quot;showTip(event, 'fs19', 120)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 121)&quot; onmouseover=&quot;showTip(event, 'fs45', 121)&quot; class=&quot;i&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 122)&quot; onmouseover=&quot;showTip(event, 'fs46', 122)&quot; class=&quot;t&quot;&gt;WebClient&lt;/span&gt;()
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 123)&quot; onmouseover=&quot;showTip(event, 'fs47', 123)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 124)&quot; onmouseover=&quot;showTip(event, 'fs44', 124)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 125)&quot; onmouseover=&quot;showTip(event, 'fs48', 125)&quot; class=&quot;f&quot;&gt;DownloadString&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs56', 126)&quot; onmouseover=&quot;showTip(event, 'fs56', 126)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs59', 127)&quot; onmouseover=&quot;showTip(event, 'fs59', 127)&quot; class=&quot;i&quot;&gt;Url&lt;/span&gt;)
            &lt;span onmouseout=&quot;hideTip(event, 'fs47', 128)&quot; onmouseover=&quot;showTip(event, 'fs47', 128)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The thing is, he thought he made any improvement just because he eliminated a mutable field,
but actually that change don't matter at all. Whether you
have a &lt;code&gt;Text&lt;/code&gt; field that can change, a &lt;code&gt;Text&lt;/code&gt; property that changes, or a &lt;code&gt;Text&lt;/code&gt; method,
in the end, &lt;code&gt;Text&lt;/code&gt; always can return something different if you try to access it. So it
improves nothing at all. We don't get any &lt;em&gt;benefits&lt;/em&gt; at all that we should get
by imposing immutability.&lt;/p&gt;
&lt;p&gt;This example just shows how hard it is to reason about immutable objects. The problem is
the combination of functions and data in one container like a class. And there is even another
problem. Actually it is just fine to have &lt;em&gt;impure functions&lt;/em&gt; that return immutable data. But
how do we do that if we consider &lt;em&gt;impure functions&lt;/em&gt; on an object as bad?&lt;/p&gt;
&lt;p&gt;Actually in functional programming we don't have that problem at all. As every function stands on
its own. Sure we group them in Modules, but it doesn't mean a function is part of some kind
of structure. We can reason about every function separately. We can have pure and impure functions.
And none of those changes the fact that we have immutable data. But in a class you combine
functions with some kind of data in one container, the result is that we have to view an object
as mutable as soon as it provides an impure method. The reason is that it behaves exactly
like a mutable field would do.&lt;/p&gt;
&lt;p&gt;So how do we create our impure functions in object-oriented programming? As we learned,
we just need them to do anything useful. Just eliminating all kind of impure functions
doesn't help us to solve any problems. The only way out of it is if you write static methods
for impure functions. In this way you can separate impure functions from pure functions
and an object could be considered as pure/immutable as long it only has pure methods.
So let's consider how a good immutable object should look like.&lt;/p&gt;
&lt;h2&gt;How to Design immutable objects&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
An immutable class don't have &lt;em&gt;hidden&lt;/em&gt; (&lt;code&gt;private&lt;/code&gt;) fields. &lt;code&gt;private&lt;/code&gt; in the sense of hidden fields
not exposed to the user. Sure a class can have &lt;code&gt;private&lt;/code&gt; fields for its data. But a class always
have to provide access to the data through a &lt;em&gt;readonly getter&lt;/em&gt;. If you have &lt;em&gt;hidden&lt;/em&gt; fields not
exposed to the user, we cannot be sure that an object is &lt;em&gt;immutable&lt;/em&gt; at all.
&lt;/li&gt;
&lt;li&gt;
A class should only contain &lt;em&gt;pure functions&lt;/em&gt; (methods). We don't knew if an impure function
modifies probably some hidden field or not. And it also doesn't matter. As soon we have a method
that can return something different on every call we also cannot view it as &lt;em&gt;immutable&lt;/em&gt;. If
a field got changed alongside it or not doesn't matter at all. We judge &lt;em&gt;immutability&lt;/em&gt; on how
it behaves, not in how it is implemented. Because functions and data are mixed together in a class.
We have to view every &lt;em&gt;impure method&lt;/em&gt; as a violation against &lt;em&gt;immutability&lt;/em&gt;.
&lt;/li&gt;
&lt;li&gt;
All &lt;em&gt;impure&lt;/em&gt; functions should be static methods on a class, or extracted into it's own class.
Let's look at &lt;code&gt;DateTime&lt;/code&gt; as an example. For example we have &lt;code&gt;DateTime.Now&lt;/code&gt; or &lt;code&gt;DateTime.Today&lt;/code&gt;. Those
are impure properties as they always return a different &lt;code&gt;DateTime&lt;/code&gt; whenever we call it. But once we
have a &lt;code&gt;DateTime&lt;/code&gt; object we only have &lt;em&gt;pure methods&lt;/em&gt; operating on it. All data are accessible
through getters. All methods are &lt;em&gt;pure&lt;/em&gt;.
&lt;/li&gt;
&lt;li&gt;
As we learned at the beginning, immutability is not about forbidding change, so an immutable
objects should have a lot of methods that gives us easy ways to create new objects with our needed
modification. If you don't provide them, it will probably painful to work with your objects. You
can look again at &lt;code&gt;DateTime&lt;/code&gt;. We have rich ways like &lt;code&gt;Add&lt;/code&gt;, &lt;code&gt;AddDays&lt;/code&gt;, &lt;code&gt;AddHours&lt;/code&gt;, &lt;code&gt;AddMinutes&lt;/code&gt; to
create new DateTime objects. All of those methods return a new &lt;code&gt;DateTime&lt;/code&gt; instead of mutating a field.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So let's reconsider the &lt;code&gt;Site&lt;/code&gt; class above. How should an immutable &lt;code&gt;Site&lt;/code&gt; class looks like?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;SiteImmutable&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 129)&quot; onmouseover=&quot;showTip(event, 'fs25', 129)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;i&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 130)&quot; onmouseover=&quot;showTip(event, 'fs25', 130)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;, &lt;span class=&quot;i&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs23', 131)&quot; onmouseover=&quot;showTip(event, 'fs23', 131)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Url&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;content&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Download&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 132)&quot; onmouseover=&quot;showTip(event, 'fs25', 132)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;wc&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 133)&quot; onmouseover=&quot;showTip(event, 'fs19', 133)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 134)&quot; onmouseover=&quot;showTip(event, 'fs45', 134)&quot; class=&quot;i&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 135)&quot; onmouseover=&quot;showTip(event, 'fs46', 135)&quot; class=&quot;i&quot;&gt;WebClient&lt;/span&gt;()
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;DownloadString&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;url&lt;/span&gt;)
        &lt;span class=&quot;i&quot;&gt;SiteImmutable&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;url&lt;/span&gt;, &lt;span class=&quot;i&quot;&gt;content&lt;/span&gt;, &lt;span class=&quot;i&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Length&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So what we really have is a class with our immutable fields. Our member fields
cannot be changed later as they are immutable. Our class constructor has to be pure, the
same as all methods. The creation of our immutable object is handled by a &lt;em&gt;static impure method&lt;/em&gt;
&lt;code&gt;let site = SiteImmutable.Download(&quot;http://example.org&quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let's for example consider we later want an &lt;code&gt;Update&lt;/code&gt; method, so we can re-fetch the &lt;code&gt;content&lt;/code&gt; of a
&lt;code&gt;site&lt;/code&gt;. Instead of providing an &lt;em&gt;impure&lt;/em&gt; &lt;code&gt;Update&lt;/code&gt; method we have to provide an &lt;em&gt;impure static method&lt;/em&gt;
that does this for us.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 136)&quot; onmouseover=&quot;showTip(event, 'fs60', 136)&quot; class=&quot;t&quot;&gt;SiteImmutable&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs40', 137)&quot; onmouseover=&quot;showTip(event, 'fs40', 137)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 138)&quot; onmouseover=&quot;showTip(event, 'fs25', 138)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs47', 139)&quot; onmouseover=&quot;showTip(event, 'fs47', 139)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 140)&quot; onmouseover=&quot;showTip(event, 'fs25', 140)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs61', 141)&quot; onmouseover=&quot;showTip(event, 'fs61', 141)&quot; class=&quot;i&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs23', 142)&quot; onmouseover=&quot;showTip(event, 'fs23', 142)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Url&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 143)&quot; onmouseover=&quot;showTip(event, 'fs40', 143)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 144)&quot; onmouseover=&quot;showTip(event, 'fs47', 144)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Size&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 145)&quot; onmouseover=&quot;showTip(event, 'fs61', 145)&quot; class=&quot;i&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 146)&quot; onmouseover=&quot;showTip(event, 'fs62', 146)&quot; class=&quot;f&quot;&gt;Download&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs40', 147)&quot; onmouseover=&quot;showTip(event, 'fs40', 147)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 148)&quot; onmouseover=&quot;showTip(event, 'fs25', 148)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 149)&quot; onmouseover=&quot;showTip(event, 'fs44', 149)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 150)&quot; onmouseover=&quot;showTip(event, 'fs19', 150)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 151)&quot; onmouseover=&quot;showTip(event, 'fs45', 151)&quot; class=&quot;i&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 152)&quot; onmouseover=&quot;showTip(event, 'fs46', 152)&quot; class=&quot;t&quot;&gt;WebClient&lt;/span&gt;()
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 153)&quot; onmouseover=&quot;showTip(event, 'fs47', 153)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 154)&quot; onmouseover=&quot;showTip(event, 'fs44', 154)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 155)&quot; onmouseover=&quot;showTip(event, 'fs48', 155)&quot; class=&quot;f&quot;&gt;DownloadString&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs40', 156)&quot; onmouseover=&quot;showTip(event, 'fs40', 156)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;)
        &lt;span onmouseout=&quot;hideTip(event, 'fs60', 157)&quot; onmouseover=&quot;showTip(event, 'fs60', 157)&quot; class=&quot;t&quot;&gt;SiteImmutable&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs40', 158)&quot; onmouseover=&quot;showTip(event, 'fs40', 158)&quot; class=&quot;i&quot;&gt;url&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs47', 159)&quot; onmouseover=&quot;showTip(event, 'fs47', 159)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs47', 160)&quot; onmouseover=&quot;showTip(event, 'fs47', 160)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 161)&quot; onmouseover=&quot;showTip(event, 'fs63', 161)&quot; class=&quot;i&quot;&gt;Length&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 162)&quot; onmouseover=&quot;showTip(event, 'fs64', 162)&quot; class=&quot;f&quot;&gt;Update&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs65', 163)&quot; onmouseover=&quot;showTip(event, 'fs65', 163)&quot; class=&quot;i&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs60', 164)&quot; onmouseover=&quot;showTip(event, 'fs60', 164)&quot; class=&quot;t&quot;&gt;SiteImmutable&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 165)&quot; onmouseover=&quot;showTip(event, 'fs44', 165)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 166)&quot; onmouseover=&quot;showTip(event, 'fs19', 166)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 167)&quot; onmouseover=&quot;showTip(event, 'fs45', 167)&quot; class=&quot;i&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 168)&quot; onmouseover=&quot;showTip(event, 'fs46', 168)&quot; class=&quot;t&quot;&gt;WebClient&lt;/span&gt;()
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 169)&quot; onmouseover=&quot;showTip(event, 'fs47', 169)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 170)&quot; onmouseover=&quot;showTip(event, 'fs44', 170)&quot; class=&quot;i&quot;&gt;wc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 171)&quot; onmouseover=&quot;showTip(event, 'fs48', 171)&quot; class=&quot;f&quot;&gt;DownloadString&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs65', 172)&quot; onmouseover=&quot;showTip(event, 'fs65', 172)&quot; class=&quot;i&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs66', 173)&quot; onmouseover=&quot;showTip(event, 'fs66', 173)&quot; class=&quot;i&quot;&gt;Url&lt;/span&gt;)
        &lt;span onmouseout=&quot;hideTip(event, 'fs60', 174)&quot; onmouseover=&quot;showTip(event, 'fs60', 174)&quot; class=&quot;t&quot;&gt;SiteImmutable&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs65', 175)&quot; onmouseover=&quot;showTip(event, 'fs65', 175)&quot; class=&quot;i&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs66', 176)&quot; onmouseover=&quot;showTip(event, 'fs66', 176)&quot; class=&quot;i&quot;&gt;Url&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs47', 177)&quot; onmouseover=&quot;showTip(event, 'fs47', 177)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs47', 178)&quot; onmouseover=&quot;showTip(event, 'fs47', 178)&quot; class=&quot;i&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 179)&quot; onmouseover=&quot;showTip(event, 'fs63', 179)&quot; class=&quot;i&quot;&gt;Length&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So if a user wants to update the content of an object he can do something like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 180)&quot; onmouseover=&quot;showTip(event, 'fs67', 180)&quot; class=&quot;i&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 181)&quot; onmouseover=&quot;showTip(event, 'fs60', 181)&quot; class=&quot;t&quot;&gt;SiteImmutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs68', 182)&quot; onmouseover=&quot;showTip(event, 'fs68', 182)&quot; class=&quot;f&quot;&gt;Download&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;http://example.org&amp;quot;&lt;/span&gt;);
&lt;span class=&quot;c&quot;&gt;// Later...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 183)&quot; onmouseover=&quot;showTip(event, 'fs69', 183)&quot; class=&quot;i&quot;&gt;updatedSite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 184)&quot; onmouseover=&quot;showTip(event, 'fs60', 184)&quot; class=&quot;t&quot;&gt;SiteImmutable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs70', 185)&quot; onmouseover=&quot;showTip(event, 'fs70', 185)&quot; class=&quot;f&quot;&gt;Update&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs67', 186)&quot; onmouseover=&quot;showTip(event, 'fs67', 186)&quot; class=&quot;i&quot;&gt;site&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Immutability itself is actually an easy concept. The problem starts when we don't separate
data and functions clearly from each other like OO programming does it. To really embrace
immutability in OOP you have to forget a lot of stuff you were taught that should be good. Create
pure data-objects as much as possible. Don't implement &lt;em&gt;impure&lt;/em&gt; methods on such data-objects.
Instead create &lt;em&gt;impure static methods&lt;/em&gt;. Those should be as small as possible with as
little logic possible. They should return an immutable data-objects as soon as possible.&lt;/p&gt;
&lt;p&gt;A good place for &lt;em&gt;impure functions&lt;/em&gt; are &lt;em&gt;static methods&lt;/em&gt; or either create special
&lt;em&gt;impure/mutable&lt;/em&gt; objects instead. But don't try to implement a lot of logic for them,
provide methods to convert an mutable object to an immutable object. &lt;code&gt;StringBuilder&lt;/code&gt;
is a good example for an mutable object that fixes the performance problems for creating
complex strings. Once you are done you convert a &lt;code&gt;StringBuilder&lt;/code&gt; instance to an
immutable &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://two-wrongs.com/the-case-for-controlled-side-effects&quot;&gt;The Case for Controlled Side Effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/posts/is-your-language-unreasonable/&quot;&gt;Is your language unreasonable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/wesdyer/2007/03/01/immutability-purity-and-referential-transparency/&quot;&gt;Immutability, Purity, and Referential Transparency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536&quot;&gt;So You Want to be a Functional Programmer (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val x : int&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val y : int&lt;br /&gt;&lt;br /&gt;Full name: Main.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val z : int&lt;br /&gt;&lt;br /&gt;Full name: Main.z&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val a : string&lt;br /&gt;&lt;br /&gt;Full name: Main.a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val b : string&lt;br /&gt;&lt;br /&gt;Full name: Main.b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val c : string&lt;br /&gt;&lt;br /&gt;Full name: Main.c&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val foo1 : string&lt;br /&gt;&lt;br /&gt;Full name: Main.foo1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val foo2 : string&lt;br /&gt;&lt;br /&gt;Full name: Main.foo2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;System.String.Replace(oldValue: string, newValue: string) : string&lt;br /&gt;System.String.Replace(oldChar: char, newChar: char) : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val foo : string&lt;br /&gt;&lt;br /&gt;Full name: Main.foo&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;System.String.Remove(startIndex: int) : string&lt;br /&gt;System.String.Remove(startIndex: int, count: int) : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val data : int list&lt;br /&gt;&lt;br /&gt;Full name: immutabilityandpurefunctions.data&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val data2 : int list&lt;br /&gt;&lt;br /&gt;Full name: immutabilityandpurefunctions.data2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;type DateTime = System.DateTime&lt;br /&gt;&lt;br /&gt;Full name: Main.DateTime&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;Multiple items&lt;br /&gt;type DateTime =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;new : ticks:int64 -&amp;gt; DateTime + 10 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Add : value:TimeSpan -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddDays : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddHours : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMilliseconds : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMinutes : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMonths : months:int -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddSeconds : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddTicks : value:int64 -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddYears : value:int -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.DateTime&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.DateTime()&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(ticks: int64) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(ticks: int64, kind: System.DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, calendar: System.Globalization.Calendar) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, kind: System.DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, calendar: System.Globalization.Calendar) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, kind: System.DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;type Person =&lt;br /&gt;&amp;#160;&amp;#160;{Id: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Birthday: DateTime;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Likes: string list;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;Person.Id: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;Person.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;Person.Birthday: DateTime&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;Person.Likes: string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val me : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.me&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val me2 : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.me2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val addLike : likes:string -&amp;gt; person:Person -&amp;gt; Person&lt;br /&gt;&lt;br /&gt;Full name: Main.addLike&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val likes : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val person : Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val me3 : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.me3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val rng : System.Random&lt;br /&gt;&lt;br /&gt;Full name: Main.rng&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;Multiple items&lt;br /&gt;type Random =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Random + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Next : unit -&amp;gt; int + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member NextBytes : buffer:byte[] -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member NextDouble : unit -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: System.Random&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Random() : unit&lt;br /&gt;System.Random(Seed: int) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val random : int&lt;br /&gt;&lt;br /&gt;Full name: Main.random&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;System.Random.Next() : int&lt;br /&gt;System.Random.Next(maxValue: int) : int&lt;br /&gt;System.Random.Next(minValue: int, maxValue: int) : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;Multiple items&lt;br /&gt;type MutableSite =&lt;br /&gt;&amp;#160;&amp;#160;new : url:string -&amp;gt; MutableSite&lt;br /&gt;&amp;#160;&amp;#160;member Download : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Text : string&lt;br /&gt;&amp;#160;&amp;#160;member Url : string&lt;br /&gt;&amp;#160;&amp;#160;member Text : string with set&lt;br /&gt;&lt;br /&gt;Full name: Main.MutableSite&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : url:string -&amp;gt; MutableSite&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val url : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val set : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val this : MutableSite&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;member MutableSite.Download : unit -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.MutableSite.Download&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val wc : System.Net.WebClient&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;namespace System.Net&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;Multiple items&lt;br /&gt;type WebClient =&lt;br /&gt;&amp;#160;&amp;#160;inherit Component&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; WebClient&lt;br /&gt;&amp;#160;&amp;#160;member BaseAddress : string with get, set&lt;br /&gt;&amp;#160;&amp;#160;member CachePolicy : RequestCachePolicy with get, set&lt;br /&gt;&amp;#160;&amp;#160;member CancelAsync : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Credentials : ICredentials with get, set&lt;br /&gt;&amp;#160;&amp;#160;member DownloadData : address:string -&amp;gt; byte[] + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadDataAsync : address:Uri -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadFile : address:string * fileName:string -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadFileAsync : address:Uri * fileName:string -&amp;gt; unit + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member DownloadString : address:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Net.WebClient&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Net.WebClient() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val content : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;System.Net.WebClient.DownloadString(address: System.Uri) : string&lt;br /&gt;System.Net.WebClient.DownloadString(address: string) : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;property MutableSite.Url: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;property MutableSite.Text: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;Multiple items&lt;br /&gt;type ImmutableSite =&lt;br /&gt;&amp;#160;&amp;#160;new : url:string -&amp;gt; ImmutableSite&lt;br /&gt;&amp;#160;&amp;#160;member Text : unit -&amp;gt; string&lt;br /&gt;&amp;#160;&amp;#160;member Url : string&lt;br /&gt;&lt;br /&gt;Full name: Main.ImmutableSite&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : url:string -&amp;gt; ImmutableSite&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val this : ImmutableSite&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;member ImmutableSite.Text : unit -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.ImmutableSite.Text&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;property ImmutableSite.Url: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;Multiple items&lt;br /&gt;type SiteWithProperty =&lt;br /&gt;&amp;#160;&amp;#160;new : url:string -&amp;gt; SiteWithProperty&lt;br /&gt;&amp;#160;&amp;#160;member Text : string&lt;br /&gt;&amp;#160;&amp;#160;member Url : string&lt;br /&gt;&lt;br /&gt;Full name: Main.SiteWithProperty&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : url:string -&amp;gt; SiteWithProperty&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val this : SiteWithProperty&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;member SiteWithProperty.Url : string&lt;br /&gt;&lt;br /&gt;Full name: Main.SiteWithProperty.Url&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;member SiteWithProperty.Text : string&lt;br /&gt;&lt;br /&gt;Full name: Main.SiteWithProperty.Text&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;property SiteWithProperty.Url: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;Multiple items&lt;br /&gt;type SiteImmutable =&lt;br /&gt;&amp;#160;&amp;#160;new : url:string * content:string * size:int -&amp;gt; SiteImmutable&lt;br /&gt;&amp;#160;&amp;#160;member Content : string&lt;br /&gt;&amp;#160;&amp;#160;member Size : int&lt;br /&gt;&amp;#160;&amp;#160;member Url : string&lt;br /&gt;&amp;#160;&amp;#160;static member Download : url:string -&amp;gt; SiteImmutable&lt;br /&gt;&amp;#160;&amp;#160;static member Update : site:SiteImmutable -&amp;gt; SiteImmutable&lt;br /&gt;&lt;br /&gt;Full name: Main.SiteImmutable&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : url:string * content:string * size:int -&amp;gt; SiteImmutable&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val size : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;static member SiteImmutable.Download : url:string -&amp;gt; SiteImmutable&lt;br /&gt;&lt;br /&gt;Full name: Main.SiteImmutable.Download&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;property System.String.Length: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;static member SiteImmutable.Update : site:SiteImmutable -&amp;gt; SiteImmutable&lt;br /&gt;&lt;br /&gt;Full name: Main.SiteImmutable.Update&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val site : SiteImmutable&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;property SiteImmutable.Url: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val site : SiteImmutable&lt;br /&gt;&lt;br /&gt;Full name: Main.site&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;static member SiteImmutable.Download : url:string -&amp;gt; SiteImmutable&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val updatedSite : SiteImmutable&lt;br /&gt;&lt;br /&gt;Full name: Main.updatedSite&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;static member SiteImmutable.Update : site:SiteImmutable -&amp;gt; SiteImmutable&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to F#</title>
   <link href="https://sidburn.github.io/blog/2016/03/10/introduction-in-fsharp"/>
   <updated>2016-03-10T01:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/10/introduction-in-fsharp</id>
   <content type="html">&lt;p&gt;When I remember the first time I looked at functional(-first) languages like F#, ML, Haskell and others.
The typical reaction that I had, and I always see from other people is: This is unreadable, it
must be hard to read, it feels complicated and hard.&lt;/p&gt;
&lt;p&gt;After spending some time in F# I cannot agree to that at all anymore. Often the syntax
itself is easier (for example compared to C#), shorter and in my opinion more readable.
The problem is more over that most functional languages shares a syntax that is completely
different compared to languages like C, C++, C#, Java, JavaScript and other more mainstream
languages. The problem is more that it is just unfamiliar.&lt;/p&gt;
&lt;p&gt;In this post I want you to give a quick overview over the most common and important concepts.
With this overview it should be easy to understand the most basic part to read
and understand functional code.&lt;/p&gt;
&lt;p&gt;For better understanding I will provide some C# to F# code examples.&lt;/p&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;h3&gt;Definition C#&lt;/h3&gt;
&lt;p&gt;Variables are an important concept, in C# you can define variables in two ways. First with an
explicit type. You can optionally initialize it with a value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;    num  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;33&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt; name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;
Person person;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The second way is to use the &lt;code&gt;var&lt;/code&gt; keyword. It uses &lt;em&gt;type-inference&lt;/em&gt; to automatically determine the
type of a variable. You are also forced to specify a value in this way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; num    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;33&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; name   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Definition in F#&lt;/h3&gt;
&lt;p&gt;In F# we usually only use the second form of definition. But instead of &lt;code&gt;var&lt;/code&gt; we write &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 13)&quot; onmouseover=&quot;showTip(event, 'fs11', 13)&quot; class=&quot;i&quot;&gt;num&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 14)&quot; onmouseover=&quot;showTip(event, 'fs12', 14)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 15)&quot; onmouseover=&quot;showTip(event, 'fs13', 15)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 16)&quot; onmouseover=&quot;showTip(event, 'fs8', 16)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We already can see some important differences.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Semicolons are not needed to end/separate commands.&lt;/li&gt;
&lt;li&gt;We don't have to specify &lt;code&gt;new&lt;/code&gt; to create an object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We still can add &lt;em&gt;type-annotations&lt;/em&gt; if we want.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 17)&quot; onmouseover=&quot;showTip(event, 'fs11', 17)&quot; class=&quot;i&quot;&gt;num&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 18)&quot; onmouseover=&quot;showTip(event, 'fs14', 18)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 19)&quot; onmouseover=&quot;showTip(event, 'fs12', 19)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 20)&quot; onmouseover=&quot;showTip(event, 'fs15', 20)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 21)&quot; onmouseover=&quot;showTip(event, 'fs13', 21)&quot; class=&quot;i&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 22)&quot; onmouseover=&quot;showTip(event, 'fs8', 22)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 23)&quot; onmouseover=&quot;showTip(event, 'fs8', 23)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;(Im)mutability&lt;/h2&gt;
&lt;h3&gt;(Im)mutability in C#&lt;/h3&gt;
&lt;p&gt;One important difference is that every variable in C# is &lt;em&gt;mutable&lt;/em&gt; by default. This
means you can change a variable at any time you want&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;num    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;66&lt;/span&gt;;
name  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; World!&quot;&lt;/span&gt;;
person &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In C# you otherwise only can create immutable class fields with the &lt;code&gt;readonly&lt;/code&gt; keyword.
You cannot create immutable &lt;em&gt;local-variables&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;(Im)mutability in F#&lt;/h3&gt;
&lt;p&gt;In F# on the other hand, everything is immutable by default. You cannot change a variable by default.
If you want to create a mutable variable you have to mark a variable as &lt;code&gt;mutable&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 24)&quot; onmouseover=&quot;showTip(event, 'fs16', 24)&quot; class=&quot;v&quot;&gt;num&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 25)&quot; onmouseover=&quot;showTip(event, 'fs17', 25)&quot; class=&quot;v&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 26)&quot; onmouseover=&quot;showTip(event, 'fs18', 26)&quot; class=&quot;v&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 27)&quot; onmouseover=&quot;showTip(event, 'fs8', 27)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You change the content of a variable with &lt;code&gt;&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;. Equal is only used to specify or comparison.
There is no operator like &lt;code&gt;+=&lt;/code&gt; in F#. F# doesn't try to make mutability convenient.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 28)&quot; onmouseover=&quot;showTip(event, 'fs16', 28)&quot; class=&quot;v&quot;&gt;num&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;66&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs17', 29)&quot; onmouseover=&quot;showTip(event, 'fs17', 29)&quot; class=&quot;v&quot;&gt;name&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 30)&quot; onmouseover=&quot;showTip(event, 'fs17', 30)&quot; class=&quot;v&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; World!&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs18', 31)&quot; onmouseover=&quot;showTip(event, 'fs18', 31)&quot; class=&quot;v&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 32)&quot; onmouseover=&quot;showTip(event, 'fs8', 32)&quot; class=&quot;t&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Functions / Static Methods&lt;/h2&gt;
&lt;h3&gt;Definition in C#&lt;/h3&gt;
&lt;p&gt;In C# you define &lt;em&gt;static methods&lt;/em&gt; as part of a &lt;em&gt;class&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; MyOperations {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Definition in F#&lt;/h3&gt;
&lt;p&gt;In F# you put functions inside modules.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MyOperations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 33)&quot; onmouseover=&quot;showTip(event, 'fs19', 33)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 34)&quot; onmouseover=&quot;showTip(event, 'fs20', 34)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 35)&quot; onmouseover=&quot;showTip(event, 'fs21', 35)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 36)&quot; onmouseover=&quot;showTip(event, 'fs20', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 37)&quot; onmouseover=&quot;showTip(event, 'fs21', 37)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can see once again some important differences.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You also use &lt;code&gt;let&lt;/code&gt; for the definition of a function&lt;/li&gt;
&lt;li&gt;Arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; will just be separated by spaces instead of &lt;code&gt;(x, y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Type-inference&lt;/em&gt; also works for functions.&lt;/li&gt;
&lt;li&gt;There doesn't exists a &lt;code&gt;return&lt;/code&gt; keyword. The last &lt;em&gt;expression&lt;/em&gt; is automatically returned as a value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You also can add explicit &lt;em&gt;type-annotations&lt;/em&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 38)&quot; onmouseover=&quot;showTip(event, 'fs22', 38)&quot; class=&quot;i&quot;&gt;MyOperations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 39)&quot; onmouseover=&quot;showTip(event, 'fs14', 39)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 40)&quot; onmouseover=&quot;showTip(event, 'fs14', 40)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Calling functions in C#&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; MyOperations.Add(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Calling functions in F#&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 42)&quot; onmouseover=&quot;showTip(event, 'fs23', 42)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 43)&quot; onmouseover=&quot;showTip(event, 'fs22', 43)&quot; class=&quot;t&quot;&gt;MyOperations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs19', 44)&quot; onmouseover=&quot;showTip(event, 'fs19', 44)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The only difference is that you don't use braces and commas to separate the arguments. You
just provide the arguments as-is.&lt;/p&gt;
&lt;h2&gt;Generics&lt;/h2&gt;
&lt;p&gt;One important concept that you will see more often in F# (compared to C#) is the usage of generics.
Because &lt;em&gt;type-inference&lt;/em&gt; also works with functions. F# often automatically generalize a function
with generic arguments, instead of specific-types. And overall generics are more important in
functional languages.&lt;/p&gt;
&lt;h3&gt;Generics in C#&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; T SomeFunction&amp;lt;T&amp;gt;(T input) {
    &lt;span class=&quot;c&quot;&gt;// Some code&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;Generics in F#&lt;/h3&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 45)&quot; onmouseover=&quot;showTip(event, 'fs24', 45)&quot; class=&quot;f&quot;&gt;someFunction&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 46)&quot; onmouseover=&quot;showTip(event, 'fs25', 46)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Generics in F# are just annotated like normal types. The only difference is that all of them start
with an apostrophe. Instead of &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;TIn&lt;/code&gt;, &lt;code&gt;TOut&lt;/code&gt; and so on, as often used in C#, in F# they will
be just letters &lt;code&gt;'a&lt;/code&gt;, &lt;code&gt;'b&lt;/code&gt;, &lt;code&gt;'c&lt;/code&gt; ...&lt;/p&gt;
&lt;p&gt;As stated previously. You also don't need to annotate generics. If you have written a generic function,
F# will automatically infer a generic type for you. So overall you also could just write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 47)&quot; onmouseover=&quot;showTip(event, 'fs26', 47)&quot; class=&quot;f&quot;&gt;someFunction&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 48)&quot; onmouseover=&quot;showTip(event, 'fs27', 48)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Data-Types&lt;/h2&gt;
&lt;p&gt;Other than object-oriented languages the key concept of &lt;em&gt;functional programming&lt;/em&gt; is a separation
between &lt;em&gt;data&lt;/em&gt; and &lt;em&gt;behaviour&lt;/em&gt;. In &lt;em&gt;OO&lt;/em&gt; programming we use &lt;em&gt;classes&lt;/em&gt;. Classes can contain
public/private fields to save data, and provide methods for working with this data.&lt;/p&gt;
&lt;p&gt;In a &lt;em&gt;functional-language&lt;/em&gt; instead we usually define our data-types as separate immutable data.
We then provide (pure) functions that gets immutable data as input, and generate some new data
as output. Because working with data is so important, a functional language offers more than just
classes to define data-types. Besides classes we can use &lt;em&gt;tuples&lt;/em&gt;, &lt;em&gt;records&lt;/em&gt; and
&lt;em&gt;discriminated unions&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Tuples in C#&lt;/h3&gt;
&lt;p&gt;Tuples are also present in C#. There already exists as a &lt;code&gt;Tuple&lt;/code&gt; class. But working with them
is not so convenient as in F#. Anyway let's quickly look at how you use them.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; position &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Tuple.Create(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;c&quot;&gt;// The type is: Tuple&amp;lt;int,int,int&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; position.Item&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; y &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; position.Item&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; z &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; position.Item&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Tuples are a good way for intermediate types. If you easily want to pass some values as
&lt;em&gt;one unit&lt;/em&gt; to a function. But more often they are used as a result. So you can easily return
multiple different values from a function.&lt;/p&gt;
&lt;h3&gt;Tuples in F#&lt;/h3&gt;
&lt;p&gt;Working with Tuples is much easier in F#&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 49)&quot; onmouseover=&quot;showTip(event, 'fs28', 49)&quot; class=&quot;i&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// The type is: int * int * int&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 50)&quot; onmouseover=&quot;showTip(event, 'fs29', 50)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs30', 51)&quot; onmouseover=&quot;showTip(event, 'fs30', 51)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 52)&quot; onmouseover=&quot;showTip(event, 'fs31', 52)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 53)&quot; onmouseover=&quot;showTip(event, 'fs28', 53)&quot; class=&quot;i&quot;&gt;position&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You create Tuples just by separating values with a comma. You can extract a Tuple with
a &lt;code&gt;let&lt;/code&gt; definition. This way you can easily create a function that return multiple data
at once. Tuples don't must contain the same types.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 54)&quot; onmouseover=&quot;showTip(event, 'fs32', 54)&quot; class=&quot;f&quot;&gt;someFunction&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 55)&quot; onmouseover=&quot;showTip(event, 'fs20', 55)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 56)&quot; onmouseover=&quot;showTip(event, 'fs20', 56)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs20', 57)&quot; onmouseover=&quot;showTip(event, 'fs20', 57)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This function for example returns a Tuple with two elements. The input itself, and the input
multiplied by Two.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 58)&quot; onmouseover=&quot;showTip(event, 'fs33', 58)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 59)&quot; onmouseover=&quot;showTip(event, 'fs32', 59)&quot; class=&quot;f&quot;&gt;someFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 60)&quot; onmouseover=&quot;showTip(event, 'fs29', 60)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs30', 61)&quot; onmouseover=&quot;showTip(event, 'fs30', 61)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 62)&quot; onmouseover=&quot;showTip(event, 'fs33', 62)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also can write it in one line&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 63)&quot; onmouseover=&quot;showTip(event, 'fs29', 63)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs30', 64)&quot; onmouseover=&quot;showTip(event, 'fs30', 64)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 65)&quot; onmouseover=&quot;showTip(event, 'fs32', 65)&quot; class=&quot;f&quot;&gt;someFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Other than C#, tuples have its own type signature. Instead of a Generic Class like &lt;code&gt;Tuple&amp;lt;int,int,int&amp;gt;&lt;/code&gt;
a tuple is built into the language itself. They will be represented as &lt;code&gt;int * int * int&lt;/code&gt; as a type.
&lt;code&gt;int * float * string * Person&lt;/code&gt; would be a four element tuple (quadruple) that contains an &lt;code&gt;int&lt;/code&gt; a &lt;code&gt;float&lt;/code&gt;
a &lt;code&gt;string&lt;/code&gt; and a &lt;code&gt;Person&lt;/code&gt; in that &lt;strong&gt;exact&lt;/strong&gt; order.&lt;/p&gt;
&lt;h3&gt;Records in F#&lt;/h3&gt;
&lt;p&gt;Working with tuples is good for intermediate function, for example if you create Pipelines like you
see them with LINQ in C#. They are also good for grouping two or three elements, but as soon you have
have more elements, they are unhandy to work with. An alternative to this is a Record type. If
you know JavaScript you can compare them just to an object. Or a hash in Perl. The only difference
is that they are static typed. So you must define a type beforehand.&lt;/p&gt;
&lt;p&gt;Records are planned as a feature in C# 7.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 66)&quot; onmouseover=&quot;showTip(event, 'fs34', 66)&quot; class=&quot;t&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs35', 67)&quot; onmouseover=&quot;showTip(event, 'fs35', 67)&quot; class=&quot;i&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;        &lt;span onmouseout=&quot;hideTip(event, 'fs14', 68)&quot; onmouseover=&quot;showTip(event, 'fs14', 68)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs36', 69)&quot; onmouseover=&quot;showTip(event, 'fs36', 69)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 70)&quot; onmouseover=&quot;showTip(event, 'fs15', 70)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs37', 71)&quot; onmouseover=&quot;showTip(event, 'fs37', 71)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs15', 72)&quot; onmouseover=&quot;showTip(event, 'fs15', 72)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs38', 73)&quot; onmouseover=&quot;showTip(event, 'fs38', 73)&quot; class=&quot;i&quot;&gt;Born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs2', 74)&quot; onmouseover=&quot;showTip(event, 'fs2', 74)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;
}

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 75)&quot; onmouseover=&quot;showTip(event, 'fs39', 75)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;Id&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;David&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Rab&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Born&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 76)&quot; onmouseover=&quot;showTip(event, 'fs2', 76)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1983&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;02&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19&lt;/span&gt;)
}

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 77)&quot; onmouseover=&quot;showTip(event, 'fs40', 77)&quot; class=&quot;i&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 78)&quot; onmouseover=&quot;showTip(event, 'fs2', 78)&quot; class=&quot;t&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 79)&quot; onmouseover=&quot;showTip(event, 'fs41', 79)&quot; class=&quot;i&quot;&gt;Today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 80)&quot; onmouseover=&quot;showTip(event, 'fs42', 80)&quot; class=&quot;i&quot;&gt;Year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 81)&quot; onmouseover=&quot;showTip(event, 'fs39', 81)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 82)&quot; onmouseover=&quot;showTip(event, 'fs38', 82)&quot; class=&quot;i&quot;&gt;Born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 83)&quot; onmouseover=&quot;showTip(event, 'fs42', 83)&quot; class=&quot;i&quot;&gt;Year&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs43', 84)&quot; onmouseover=&quot;showTip(event, 'fs43', 84)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is currently &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; years old&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 85)&quot; onmouseover=&quot;showTip(event, 'fs39', 85)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 86)&quot; onmouseover=&quot;showTip(event, 'fs36', 86)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 87)&quot; onmouseover=&quot;showTip(event, 'fs39', 87)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs37', 88)&quot; onmouseover=&quot;showTip(event, 'fs37', 88)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 89)&quot; onmouseover=&quot;showTip(event, 'fs40', 89)&quot; class=&quot;i&quot;&gt;age&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 90)&quot; onmouseover=&quot;showTip(event, 'fs44', 90)&quot; class=&quot;i&quot;&gt;newMe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span onmouseout=&quot;hideTip(event, 'fs39', 91)&quot; onmouseover=&quot;showTip(event, 'fs39', 91)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Raab&amp;quot;&lt;/span&gt;}
&lt;span onmouseout=&quot;hideTip(event, 'fs43', 92)&quot; onmouseover=&quot;showTip(event, 'fs43', 92)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is currently &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; years old&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 93)&quot; onmouseover=&quot;showTip(event, 'fs39', 93)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 94)&quot; onmouseover=&quot;showTip(event, 'fs36', 94)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs39', 95)&quot; onmouseover=&quot;showTip(event, 'fs39', 95)&quot; class=&quot;i&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs37', 96)&quot; onmouseover=&quot;showTip(event, 'fs37', 96)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs40', 97)&quot; onmouseover=&quot;showTip(event, 'fs40', 97)&quot; class=&quot;i&quot;&gt;age&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs43', 98)&quot; onmouseover=&quot;showTip(event, 'fs43', 98)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is currently &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; years old&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 99)&quot; onmouseover=&quot;showTip(event, 'fs44', 99)&quot; class=&quot;i&quot;&gt;newMe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 100)&quot; onmouseover=&quot;showTip(event, 'fs36', 100)&quot; class=&quot;i&quot;&gt;FirstName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 101)&quot; onmouseover=&quot;showTip(event, 'fs44', 101)&quot; class=&quot;i&quot;&gt;newMe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs37', 102)&quot; onmouseover=&quot;showTip(event, 'fs37', 102)&quot; class=&quot;i&quot;&gt;LastName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 103)&quot; onmouseover=&quot;showTip(event, 'fs40', 103)&quot; class=&quot;i&quot;&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This code will produce the output:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;David Rab is currently 33 years old
David Rab is currently 33 years old
David Raab is currently 33 years old
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Defining a Record needs explicit type annotations. Creating
a Record is pretty easy. You just use the &lt;code&gt;{ ... }&lt;/code&gt; syntax. This is nearly identical to JavaScript.
As &lt;em&gt;functional-languages&lt;/em&gt; prefer &lt;em&gt;immutability&lt;/em&gt; a Record type itself is also &lt;em&gt;immutable&lt;/em&gt; by default.
It also has default equality and comparison implementations.&lt;/p&gt;
&lt;p&gt;There exists a special &lt;em&gt;copy and update&lt;/em&gt; operation. It is &lt;code&gt;{record with newField = newValue }&lt;/code&gt;. You
also can set multiple fields at once. As seen in the example. This creates a new record and doesn't
modify the old record.&lt;/p&gt;
&lt;p&gt;You can access member of a record with a dot. Records also can be deeply nested, so
you can create hierarchical data-structures.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 104)&quot; onmouseover=&quot;showTip(event, 'fs45', 104)&quot; class=&quot;t&quot;&gt;Attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs46', 105)&quot; onmouseover=&quot;showTip(event, 'fs46', 105)&quot; class=&quot;i&quot;&gt;Strength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs14', 106)&quot; onmouseover=&quot;showTip(event, 'fs14', 106)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs47', 107)&quot; onmouseover=&quot;showTip(event, 'fs47', 107)&quot; class=&quot;i&quot;&gt;Dexterity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs14', 108)&quot; onmouseover=&quot;showTip(event, 'fs14', 108)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs48', 109)&quot; onmouseover=&quot;showTip(event, 'fs48', 109)&quot; class=&quot;i&quot;&gt;Intelligence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 110)&quot; onmouseover=&quot;showTip(event, 'fs14', 110)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs49', 111)&quot; onmouseover=&quot;showTip(event, 'fs49', 111)&quot; class=&quot;i&quot;&gt;Vitality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;     &lt;span onmouseout=&quot;hideTip(event, 'fs14', 112)&quot; onmouseover=&quot;showTip(event, 'fs14', 112)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
}

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 113)&quot; onmouseover=&quot;showTip(event, 'fs50', 113)&quot; class=&quot;t&quot;&gt;CaharacterSheet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs51', 114)&quot; onmouseover=&quot;showTip(event, 'fs51', 114)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs15', 115)&quot; onmouseover=&quot;showTip(event, 'fs15', 115)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs52', 116)&quot; onmouseover=&quot;showTip(event, 'fs52', 116)&quot; class=&quot;i&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 117)&quot; onmouseover=&quot;showTip(event, 'fs45', 117)&quot; class=&quot;t&quot;&gt;Attributes&lt;/span&gt;
}

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 118)&quot; onmouseover=&quot;showTip(event, 'fs53', 118)&quot; class=&quot;i&quot;&gt;warrior&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Conan&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;Attribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    {
        &lt;span class=&quot;i&quot;&gt;Strength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Dexterity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Intelligence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Vitality&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;
    }
}

&lt;span onmouseout=&quot;hideTip(event, 'fs43', 119)&quot; onmouseover=&quot;showTip(event, 'fs43', 119)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; was a Warrior with Strength of &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 120)&quot; onmouseover=&quot;showTip(event, 'fs53', 120)&quot; class=&quot;i&quot;&gt;warrior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs51', 121)&quot; onmouseover=&quot;showTip(event, 'fs51', 121)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 122)&quot; onmouseover=&quot;showTip(event, 'fs53', 122)&quot; class=&quot;i&quot;&gt;warrior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 123)&quot; onmouseover=&quot;showTip(event, 'fs52', 123)&quot; class=&quot;i&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 124)&quot; onmouseover=&quot;showTip(event, 'fs46', 124)&quot; class=&quot;i&quot;&gt;Strength&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h3&gt;Discriminated Unions in F#&lt;/h3&gt;
&lt;p&gt;A Discriminated Union (DU) also doesn't currently exists in C#, but they are also planed as a feature for C# 7.
A DU is important as they provide a &lt;em&gt;OR&lt;/em&gt; type. When you look at classes, tuples or records all of them are
basically &lt;em&gt;AND&lt;/em&gt; types. All of those types group some data-together, but you always have all of them
at the same time. But what happens if you want to express some kind of &lt;em&gt;Either A or B&lt;/em&gt;? The closest
thing you can get are &lt;em&gt;enums&lt;/em&gt; in C#, but &lt;em&gt;enums&lt;/em&gt; cannot contain additional values for each case.&lt;/p&gt;
&lt;p&gt;DU are important, because if a language supports both kinds, we also say that it has an
&lt;em&gt;Algebraic type-system&lt;/em&gt;. Let's assume we have a shopping system, and we want to express that a
user can pay with different methods.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Cash&lt;/strong&gt; -- No additional data needed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PayPal&lt;/strong&gt; -- We need the email address&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CreditCard&lt;/strong&gt; -- We need the credit card number&lt;/li&gt;
&lt;/ol&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 125)&quot; onmouseover=&quot;showTip(event, 'fs54', 125)&quot; class=&quot;t&quot;&gt;Payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs55', 126)&quot; onmouseover=&quot;showTip(event, 'fs55', 126)&quot; class=&quot;p&quot;&gt;Cash&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs56', 127)&quot; onmouseover=&quot;showTip(event, 'fs56', 127)&quot; class=&quot;p&quot;&gt;PayPal&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 128)&quot; onmouseover=&quot;showTip(event, 'fs15', 128)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs57', 129)&quot; onmouseover=&quot;showTip(event, 'fs57', 129)&quot; class=&quot;p&quot;&gt;CreditCard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 130)&quot; onmouseover=&quot;showTip(event, 'fs15', 130)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 131)&quot; onmouseover=&quot;showTip(event, 'fs58', 131)&quot; class=&quot;f&quot;&gt;inform&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 132)&quot; onmouseover=&quot;showTip(event, 'fs59', 132)&quot; class=&quot;i&quot;&gt;payment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 133)&quot; onmouseover=&quot;showTip(event, 'fs59', 133)&quot; class=&quot;i&quot;&gt;payment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs55', 134)&quot; onmouseover=&quot;showTip(event, 'fs55', 134)&quot; class=&quot;p&quot;&gt;Cash&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 135)&quot; onmouseover=&quot;showTip(event, 'fs43', 135)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;User payed cash&amp;quot;&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs56', 136)&quot; onmouseover=&quot;showTip(event, 'fs56', 136)&quot; class=&quot;p&quot;&gt;PayPal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 137)&quot; onmouseover=&quot;showTip(event, 'fs60', 137)&quot; class=&quot;i&quot;&gt;email&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 138)&quot; onmouseover=&quot;showTip(event, 'fs43', 138)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;User payed with PayPal. Email: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 139)&quot; onmouseover=&quot;showTip(event, 'fs60', 139)&quot; class=&quot;i&quot;&gt;email&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs57', 140)&quot; onmouseover=&quot;showTip(event, 'fs57', 140)&quot; class=&quot;p&quot;&gt;CreditCard&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 141)&quot; onmouseover=&quot;showTip(event, 'fs61', 141)&quot; class=&quot;i&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 142)&quot; onmouseover=&quot;showTip(event, 'fs43', 142)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;User payed with CC. No: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 143)&quot; onmouseover=&quot;showTip(event, 'fs61', 143)&quot; class=&quot;i&quot;&gt;no&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs58', 144)&quot; onmouseover=&quot;showTip(event, 'fs58', 144)&quot; class=&quot;f&quot;&gt;inform&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 145)&quot; onmouseover=&quot;showTip(event, 'fs55', 145)&quot; class=&quot;p&quot;&gt;Cash&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs58', 146)&quot; onmouseover=&quot;showTip(event, 'fs58', 146)&quot; class=&quot;f&quot;&gt;inform&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs56', 147)&quot; onmouseover=&quot;showTip(event, 'fs56', 147)&quot; class=&quot;p&quot;&gt;PayPal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo@example.com&amp;quot;&lt;/span&gt;)
&lt;span onmouseout=&quot;hideTip(event, 'fs58', 148)&quot; onmouseover=&quot;showTip(event, 'fs58', 148)&quot; class=&quot;f&quot;&gt;inform&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs57', 149)&quot; onmouseover=&quot;showTip(event, 'fs57', 149)&quot; class=&quot;p&quot;&gt;CreditCard&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;123456789&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The above code will produce an output like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;User payed cash
User payed with PayPal. Email: foo@example.com
User payed with CC. No: 123456789
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Here &lt;code&gt;inform&lt;/code&gt; is a function with one argument &lt;code&gt;payment&lt;/code&gt;. Still note that we don't need any kind of
&lt;em&gt;type-annotation&lt;/em&gt;. We use &lt;em&gt;pattern matching&lt;/em&gt; on payment. Just the fact that we use &lt;code&gt;Cash&lt;/code&gt;, &lt;code&gt;PayPal&lt;/code&gt;
and &lt;code&gt;CreditCard&lt;/code&gt; the F# Compiler can automatically infer that the argument has to be of type &lt;code&gt;Payment&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pattern matching&lt;/em&gt; is a kind of &lt;em&gt;switch&lt;/em&gt; statement but more powerful, because it not only matches on
the different cases, you also can extract the additional values that are carried within each case.&lt;/p&gt;
&lt;p&gt;Also note the syntax &lt;code&gt;inform (PayPal &quot;foo@example.com&quot;)&lt;/code&gt; We need the braces here not for invocations.
We need them for grouping. This is probably one source of confusion for people coming from C-style
languages. If we wouldn't use the braces and write something like &lt;code&gt;inform PayPal &quot;foo@example.com&quot;&lt;/code&gt;
we would try to invoke the &lt;code&gt;inform&lt;/code&gt; function with two arguments. The first argument would be &lt;code&gt;PayPal&lt;/code&gt;
and the second argument would be &lt;code&gt;&quot;foo@exmaple.com&quot;&lt;/code&gt;. That would fail because &lt;code&gt;inform&lt;/code&gt; is not a two
argument function. We first need to create a value. That is just done with &lt;code&gt;PayPal &quot;foo@example.com&quot;&lt;/code&gt;
and we want the result to pass to our function. That is why we need to add braces around our call.&lt;/p&gt;
&lt;p&gt;This is comparable to just simple maths. &lt;code&gt;3 + 4 * 5&lt;/code&gt; would yield in &lt;code&gt;23&lt;/code&gt;. If we otherwise write
&lt;code&gt;(3 + 4) * 5&lt;/code&gt; we would get &lt;code&gt;35&lt;/code&gt;. Braces are just grouping constructs! This becomes more important
if we have something like these.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;someFunction&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;z&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This would be a Function call with two arguments. The first argument is the result of &lt;code&gt;Foo x&lt;/code&gt;, the
second argument would be the Result of &lt;code&gt;Bar z&lt;/code&gt;. Coming from a C-style language people often try to read it as&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;someFunction(Foo x)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;as a single function invocation with one argument, and they see a trailing &lt;code&gt;(Bar z)&lt;/code&gt; and they don't know
what it stands for. Actually converting such a function call to C# would result in something like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;someFunction(&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Foo(x), &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Bar(z));
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The big advantage of Discriminated Unions is that each case can contain objects, tuples, records or
other discriminated unions as values. It even can contain itself as an element. In this way you
can easily build recursive data-structures.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 150)&quot; onmouseover=&quot;showTip(event, 'fs62', 150)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs63', 151)&quot; onmouseover=&quot;showTip(event, 'fs63', 151)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs64', 152)&quot; onmouseover=&quot;showTip(event, 'fs64', 152)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 153)&quot; onmouseover=&quot;showTip(event, 'fs15', 153)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs65', 154)&quot; onmouseover=&quot;showTip(event, 'fs65', 154)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 155)&quot; onmouseover=&quot;showTip(event, 'fs15', 155)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs66', 156)&quot; onmouseover=&quot;showTip(event, 'fs66', 156)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 157)&quot; onmouseover=&quot;showTip(event, 'fs15', 157)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs67', 158)&quot; onmouseover=&quot;showTip(event, 'fs67', 158)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 159)&quot; onmouseover=&quot;showTip(event, 'fs62', 159)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 160)&quot; onmouseover=&quot;showTip(event, 'fs68', 160)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 161)&quot; onmouseover=&quot;showTip(event, 'fs69', 161)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs67', 162)&quot; onmouseover=&quot;showTip(event, 'fs67', 162)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
        &lt;span onmouseout=&quot;hideTip(event, 'fs64', 163)&quot; onmouseover=&quot;showTip(event, 'fs64', 163)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 164)&quot; onmouseover=&quot;showTip(event, 'fs65', 164)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 165)&quot; onmouseover=&quot;showTip(event, 'fs63', 165)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs64', 166)&quot; onmouseover=&quot;showTip(event, 'fs64', 166)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;InlineCode of&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 167)&quot; onmouseover=&quot;showTip(event, 'fs66', 167)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;let sum x y = x + y&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 168)&quot; onmouseover=&quot;showTip(event, 'fs63', 168)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs67', 169)&quot; onmouseover=&quot;showTip(event, 'fs67', 169)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
            &lt;span onmouseout=&quot;hideTip(event, 'fs64', 170)&quot; onmouseover=&quot;showTip(event, 'fs64', 170)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This is the end&amp;quot;&lt;/span&gt;
        ]
    ]

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 171)&quot; onmouseover=&quot;showTip(event, 'fs70', 171)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 172)&quot; onmouseover=&quot;showTip(event, 'fs71', 172)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs72', 173)&quot; onmouseover=&quot;showTip(event, 'fs72', 173)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 174)&quot; onmouseover=&quot;showTip(event, 'fs5', 174)&quot; class=&quot;t&quot;&gt;StringBuilder&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 175)&quot; onmouseover=&quot;showTip(event, 'fs71', 175)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs63', 176)&quot; onmouseover=&quot;showTip(event, 'fs63', 176)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 177)&quot; onmouseover=&quot;showTip(event, 'fs72', 177)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs73', 178)&quot; onmouseover=&quot;showTip(event, 'fs73', 178)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 179)&quot; onmouseover=&quot;showTip(event, 'fs74', 179)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs64', 180)&quot; onmouseover=&quot;showTip(event, 'fs64', 180)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs75', 181)&quot; onmouseover=&quot;showTip(event, 'fs75', 181)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 182)&quot; onmouseover=&quot;showTip(event, 'fs72', 182)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs73', 183)&quot; onmouseover=&quot;showTip(event, 'fs73', 183)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs75', 184)&quot; onmouseover=&quot;showTip(event, 'fs75', 184)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 185)&quot; onmouseover=&quot;showTip(event, 'fs74', 185)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs65', 186)&quot; onmouseover=&quot;showTip(event, 'fs65', 186)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span onmouseout=&quot;hideTip(event, 'fs75', 187)&quot; onmouseover=&quot;showTip(event, 'fs75', 187)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 188)&quot; onmouseover=&quot;showTip(event, 'fs72', 188)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs76', 189)&quot; onmouseover=&quot;showTip(event, 'fs76', 189)&quot; class=&quot;f&quot;&gt;AppendFormat&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;strong&amp;gt;{0}&amp;lt;/strong&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs75', 190)&quot; onmouseover=&quot;showTip(event, 'fs75', 190)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 191)&quot; onmouseover=&quot;showTip(event, 'fs74', 191)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs66', 192)&quot; onmouseover=&quot;showTip(event, 'fs66', 192)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 193)&quot; onmouseover=&quot;showTip(event, 'fs77', 193)&quot; class=&quot;i&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 194)&quot; onmouseover=&quot;showTip(event, 'fs72', 194)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs76', 195)&quot; onmouseover=&quot;showTip(event, 'fs76', 195)&quot; class=&quot;f&quot;&gt;AppendFormat&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;code&amp;gt;{0}&amp;lt;/code&amp;gt;&amp;quot;&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs77', 196)&quot; onmouseover=&quot;showTip(event, 'fs77', 196)&quot; class=&quot;i&quot;&gt;code&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 197)&quot; onmouseover=&quot;showTip(event, 'fs74', 197)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs67', 198)&quot; onmouseover=&quot;showTip(event, 'fs67', 198)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs78', 199)&quot; onmouseover=&quot;showTip(event, 'fs78', 199)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs72', 200)&quot; onmouseover=&quot;showTip(event, 'fs72', 200)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs73', 201)&quot; onmouseover=&quot;showTip(event, 'fs73', 201)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 202)&quot; onmouseover=&quot;showTip(event, 'fs74', 202)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 203)&quot; onmouseover=&quot;showTip(event, 'fs79', 203)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 204)&quot; onmouseover=&quot;showTip(event, 'fs78', 204)&quot; class=&quot;i&quot;&gt;markdown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs70', 205)&quot; onmouseover=&quot;showTip(event, 'fs70', 205)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 206)&quot; onmouseover=&quot;showTip(event, 'fs79', 206)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 207)&quot; onmouseover=&quot;showTip(event, 'fs72', 207)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 208)&quot; onmouseover=&quot;showTip(event, 'fs74', 208)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs72', 209)&quot; onmouseover=&quot;showTip(event, 'fs72', 209)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs73', 210)&quot; onmouseover=&quot;showTip(event, 'fs73', 210)&quot; class=&quot;f&quot;&gt;Append&lt;/span&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 211)&quot; onmouseover=&quot;showTip(event, 'fs74', 211)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 212)&quot; onmouseover=&quot;showTip(event, 'fs80', 212)&quot; class=&quot;i&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 213)&quot; onmouseover=&quot;showTip(event, 'fs5', 213)&quot; class=&quot;t&quot;&gt;StringBuilder&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs70', 214)&quot; onmouseover=&quot;showTip(event, 'fs70', 214)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 215)&quot; onmouseover=&quot;showTip(event, 'fs69', 215)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 216)&quot; onmouseover=&quot;showTip(event, 'fs80', 216)&quot; class=&quot;i&quot;&gt;html&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs43', 217)&quot; onmouseover=&quot;showTip(event, 'fs43', 217)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs80', 218)&quot; onmouseover=&quot;showTip(event, 'fs80', 218)&quot; class=&quot;i&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs81', 219)&quot; onmouseover=&quot;showTip(event, 'fs81', 219)&quot; class=&quot;f&quot;&gt;ToString&lt;/span&gt;())
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Running the above code will produce us the following output&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;&amp;lt;p&amp;gt;Hello&amp;lt;strong&amp;gt;World!&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;InlineCode of&amp;lt;code&amp;gt;let sum x y = x + y&amp;lt;/code&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;p&amp;gt;This is the end&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;So we can easily create hierarchical data-structures, and with Pattern Matching we can easily write recursive
function to traverse them.&lt;/p&gt;
&lt;h3&gt;List in F#&lt;/h3&gt;
&lt;p&gt;The example above already introduced lists. Otherwise a list in F# is different to the C# &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; type.
In C# you create a mutable &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; object and you can directly &lt;code&gt;Add&lt;/code&gt; items to. In F# on the other hand you
create lists just with the syntax &lt;code&gt;[ ... ]&lt;/code&gt; (Like in JavaScript). Otherwise elements get separated by &lt;code&gt;;&lt;/code&gt;
instead of &lt;code&gt;,&lt;/code&gt;. This is often a source of confusion, because both styles are allowed but they mean something
different.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 220)&quot; onmouseover=&quot;showTip(event, 'fs82', 220)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is a List of &lt;code&gt;int&lt;/code&gt;. And it contains four elements.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 221)&quot; onmouseover=&quot;showTip(event, 'fs83', 221)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is a List of a Tuple &lt;code&gt;int * int * int * int&lt;/code&gt; and it contains a single element. Remember &lt;code&gt;,&lt;/code&gt; is
for creating Tuples!&lt;/p&gt;
&lt;p&gt;Additional lists in F# are also immutable. They also provide default implementations of equality, comparison
and so on. If you want to add elements to a list you have to create a new list. This can be easily done with
&lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 222)&quot; onmouseover=&quot;showTip(event, 'fs82', 222)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 223)&quot; onmouseover=&quot;showTip(event, 'fs84', 223)&quot; class=&quot;i&quot;&gt;oneMore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 224)&quot; onmouseover=&quot;showTip(event, 'fs82', 224)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;oneMore&lt;/code&gt; is now&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;note that &lt;code&gt;data&lt;/code&gt; is unchanged and is still a four element list. The way how lists are build (&lt;em&gt;immutable&lt;/em&gt;
and as &lt;em&gt;linked-list&lt;/em&gt;) means adding and removing from the beginning is an efficient operation &lt;em&gt;O(1)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are various functions inside the &lt;code&gt;List&lt;/code&gt; module to transform lists itself. With &lt;code&gt;[|1;2;3|]&lt;/code&gt;
we also can create &lt;em&gt;mutable fixed-size array&lt;/em&gt;. There also exists a &lt;code&gt;Array&lt;/code&gt; Module with nearly the same
functions as in the &lt;code&gt;List&lt;/code&gt; module.&lt;/p&gt;
&lt;h2&gt;Composition and Piping&lt;/h2&gt;
&lt;p&gt;The last concepts we look at in our introduction is the concept of &lt;em&gt;Composition&lt;/em&gt; and &lt;em&gt;Piping&lt;/em&gt;. Both
are very important in functional languages, as more complex logic is achieved by composing of functions.
Compose ability is actually pretty easy. Let's assume we have a function that takes an &lt;code&gt;int&lt;/code&gt; as its input
and a &lt;code&gt;string&lt;/code&gt; as its output. In C# we would usually define such a &lt;em&gt;method interface&lt;/em&gt; in that way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt; SomeMethod(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;This could be for example part of an &lt;code&gt;interface&lt;/code&gt; definition in C#. In F# we would define such an interface
just as&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 225)&quot; onmouseover=&quot;showTip(event, 'fs14', 225)&quot; class=&quot;f&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 226)&quot; onmouseover=&quot;showTip(event, 'fs15', 226)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This definition means. A function that has an &lt;code&gt;int&lt;/code&gt; as an input, and will return a &lt;code&gt;string&lt;/code&gt;. Note that
we don't specify a function name. Every function itself is actually an interface of its own. Something
like this also exists in C#. Usually expressed as either &lt;code&gt;Action&lt;/code&gt; or &lt;code&gt;Func&lt;/code&gt;. We also could have written.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;Func&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In C# &lt;code&gt;Action&lt;/code&gt; and &lt;code&gt;Func&lt;/code&gt; types are usually used in Methods if we want to expect a function as an argument.
In C# you need &lt;code&gt;Action&lt;/code&gt; to describe function with a &lt;code&gt;void&lt;/code&gt; return value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 227)&quot; onmouseover=&quot;showTip(event, 'fs14', 227)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs15', 228)&quot; onmouseover=&quot;showTip(event, 'fs15', 228)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs15', 229)&quot; onmouseover=&quot;showTip(event, 'fs15', 229)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;SomeFunction&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs14', 230)&quot; onmouseover=&quot;showTip(event, 'fs14', 230)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And Action means&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 231)&quot; onmouseover=&quot;showTip(event, 'fs14', 231)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs15', 232)&quot; onmouseover=&quot;showTip(event, 'fs15', 232)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;SomeFunction&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs14', 233)&quot; onmouseover=&quot;showTip(event, 'fs14', 233)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs15', 234)&quot; onmouseover=&quot;showTip(event, 'fs15', 234)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In F# we just have a sepcial type named &lt;code&gt;unit&lt;/code&gt; to express &lt;em&gt;Nothing&lt;/em&gt;. So we can write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 235)&quot; onmouseover=&quot;showTip(event, 'fs14', 235)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 236)&quot; onmouseover=&quot;showTip(event, 'fs15', 236)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs14', 237)&quot; onmouseover=&quot;showTip(event, 'fs14', 237)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 238)&quot; onmouseover=&quot;showTip(event, 'fs85', 238)&quot; class=&quot;i&quot;&gt;unit&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs14', 239)&quot; onmouseover=&quot;showTip(event, 'fs14', 239)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 240)&quot; onmouseover=&quot;showTip(event, 'fs15', 240)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 241)&quot; onmouseover=&quot;showTip(event, 'fs85', 241)&quot; class=&quot;i&quot;&gt;unit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The Last line can be read as. A function with two arguments &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; and it will
return &lt;code&gt;unit&lt;/code&gt; (Nothing).&lt;/p&gt;
&lt;p&gt;Now let's assume we have two functions with the following signatures&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 242)&quot; onmouseover=&quot;showTip(event, 'fs15', 242)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 243)&quot; onmouseover=&quot;showTip(event, 'fs14', 243)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 244)&quot; onmouseover=&quot;showTip(event, 'fs68', 244)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs14', 245)&quot; onmouseover=&quot;showTip(event, 'fs14', 245)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 246)&quot; onmouseover=&quot;showTip(event, 'fs68', 246)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 247)&quot; onmouseover=&quot;showTip(event, 'fs14', 247)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we have a function that has a &lt;code&gt;string&lt;/code&gt; as it's input, and a &lt;code&gt;int list&lt;/code&gt; (List of int) as its
output. Our second functions takes a &lt;code&gt;int list&lt;/code&gt; as its input, and will produce just a &lt;code&gt;int&lt;/code&gt;
as its output. Looking at those signatures we now can compose them. Even if we don't now what
those functions do. We just know that the output of the first function can be directly given
as the input of the second function.&lt;/p&gt;
&lt;p&gt;We can directly create a function with a &lt;code&gt;string&lt;/code&gt; input returning an &lt;code&gt;int&lt;/code&gt;.
This kind of idea is what we name &lt;em&gt;composing&lt;/em&gt;. In F# we have a special operator for this
kind of composition. The &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;But let's work step by step to it. Let's assume we have a &lt;code&gt;parseInts&lt;/code&gt; function
that takes a string, splits a string on ',' and parses every number as an &lt;code&gt;int&lt;/code&gt;
and returns &lt;code&gt;int list&lt;/code&gt;. The signature would be &lt;code&gt;string -&amp;gt; int list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We then have another function &lt;code&gt;sumList&lt;/code&gt; that just takes a &lt;code&gt;int list&lt;/code&gt; and sums all
numbers together returning an &lt;code&gt;int&lt;/code&gt;. We could use those two functions like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 274)&quot; onmouseover=&quot;showTip(event, 'fs101', 274)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 275)&quot; onmouseover=&quot;showTip(event, 'fs91', 275)&quot; class=&quot;f&quot;&gt;parseInts&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 276)&quot; onmouseover=&quot;showTip(event, 'fs102', 276)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 277)&quot; onmouseover=&quot;showTip(event, 'fs98', 277)&quot; class=&quot;f&quot;&gt;sumList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 278)&quot; onmouseover=&quot;showTip(event, 'fs101', 278)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also could create a new function that combines these two steps into a new function&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs103', 279)&quot; onmouseover=&quot;showTip(event, 'fs103', 279)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 280)&quot; onmouseover=&quot;showTip(event, 'fs104', 280)&quot; class=&quot;i&quot;&gt;stringList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 281)&quot; onmouseover=&quot;showTip(event, 'fs105', 281)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 282)&quot; onmouseover=&quot;showTip(event, 'fs91', 282)&quot; class=&quot;f&quot;&gt;parseInts&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 283)&quot; onmouseover=&quot;showTip(event, 'fs104', 283)&quot; class=&quot;i&quot;&gt;stringList&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs106', 284)&quot; onmouseover=&quot;showTip(event, 'fs106', 284)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 285)&quot; onmouseover=&quot;showTip(event, 'fs98', 285)&quot; class=&quot;f&quot;&gt;sumList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 286)&quot; onmouseover=&quot;showTip(event, 'fs105', 286)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs106', 287)&quot; onmouseover=&quot;showTip(event, 'fs106', 287)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now have a function &lt;code&gt;strToSum&lt;/code&gt; that goes directly from &lt;code&gt;string -&amp;gt; int&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But these kind of operation is actually pretty generic. As this kind of composing works for
any kind of function with any kind of type. In general we can say. When we have two functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we can compose those two into a new function&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So let's write a &lt;code&gt;compose&lt;/code&gt; function that does that kind of stuff for us.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 288)&quot; onmouseover=&quot;showTip(event, 'fs107', 288)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs108', 289)&quot; onmouseover=&quot;showTip(event, 'fs108', 289)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs109', 290)&quot; onmouseover=&quot;showTip(event, 'fs109', 290)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 291)&quot; onmouseover=&quot;showTip(event, 'fs110', 291)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs109', 292)&quot; onmouseover=&quot;showTip(event, 'fs109', 292)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs108', 293)&quot; onmouseover=&quot;showTip(event, 'fs108', 293)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 294)&quot; onmouseover=&quot;showTip(event, 'fs110', 294)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So let's look at the implementation. We have a function &lt;code&gt;compose&lt;/code&gt; with three arguments. &lt;code&gt;f&lt;/code&gt;
is expected to be a function. The same is true for &lt;code&gt;g&lt;/code&gt;. &lt;code&gt;x&lt;/code&gt; is just some kind of value. What we
first do is&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;meaning we will call our &lt;code&gt;f&lt;/code&gt; function with the &lt;code&gt;x&lt;/code&gt; value. The Result of that is passed to the &lt;code&gt;g&lt;/code&gt;
function. The result of the &lt;code&gt;g&lt;/code&gt; function is then returned as a value. We also could have written it
like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs111', 295)&quot; onmouseover=&quot;showTip(event, 'fs111', 295)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs111', 296)&quot; onmouseover=&quot;showTip(event, 'fs111', 296)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The F# compiler automatically infers that &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; are functions.
Just by using it like &lt;code&gt;f x&lt;/code&gt; or &lt;code&gt;g y&lt;/code&gt; the compiler knows that &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; must be
functions with a single argument.&lt;/p&gt;
&lt;p&gt;But what kind of types do we have here? The answer is, they are generic. When we look at the type
signature that the compiler created for us, it looks some kind of scary first. We have.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;compose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's go over it step-by-step&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;center&quot;&gt;&lt;p&gt;Argument&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;p&gt;Signature&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Meaning&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;f&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;('a -&amp;gt; 'b)&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;A function that goes from 'a to 'b&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;g&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;('b -&amp;gt; 'c)&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;A function that goes from 'b to 'c&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;x&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;'a&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;A value of type 'a&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;p&gt;'c&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;It will return 'c&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Just by looking at the types we can examine what the function does. We have &lt;code&gt;'a&lt;/code&gt; as a value and two
functions. And we need to return a &lt;code&gt;'c&lt;/code&gt;. So how do we get a &lt;code&gt;'c&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;At first the only thing that function can do is pass the &lt;code&gt;x&lt;/code&gt; value (a &lt;code&gt;'a&lt;/code&gt;) into the &lt;code&gt;f&lt;/code&gt; function. That will
return a &lt;code&gt;'b&lt;/code&gt; value. After we have a &lt;code&gt;'b&lt;/code&gt; value it only can pass that value into the &lt;code&gt;g&lt;/code&gt; function.
Finally this returns a &lt;code&gt;'c&lt;/code&gt; that the &lt;code&gt;compose&lt;/code&gt; function then returns.&lt;/p&gt;
&lt;p&gt;We now could use &lt;code&gt;compose&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 297)&quot; onmouseover=&quot;showTip(event, 'fs102', 297)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 298)&quot; onmouseover=&quot;showTip(event, 'fs107', 298)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 299)&quot; onmouseover=&quot;showTip(event, 'fs91', 299)&quot; class=&quot;f&quot;&gt;parseInts&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 300)&quot; onmouseover=&quot;showTip(event, 'fs98', 300)&quot; class=&quot;f&quot;&gt;sumList&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Here we now call &lt;code&gt;compose&lt;/code&gt; with three arguments. We provide the &lt;code&gt;parseInts&lt;/code&gt; function itself as a value.
We then provide the &lt;code&gt;sumList&lt;/code&gt; function as a the second argument. And our third argument is our &lt;code&gt;&quot;1,2,3,4,5&quot;&lt;/code&gt;
string.&lt;/p&gt;
&lt;p&gt;The last thing we can do now. F# supports &lt;em&gt;omitting&lt;/em&gt; arguments from a function call. If you &lt;em&gt;omit&lt;/em&gt; a value, you
get a function back with the remaining arguments. Currently our &lt;code&gt;compose&lt;/code&gt; function is a three arguments
function. So what happens if we just provide the first two functions as arguments? We get a function back
that is still waiting for the last third argument.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 301)&quot; onmouseover=&quot;showTip(event, 'fs112', 301)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 302)&quot; onmouseover=&quot;showTip(event, 'fs107', 302)&quot; class=&quot;f&quot;&gt;compose&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 303)&quot; onmouseover=&quot;showTip(event, 'fs91', 303)&quot; class=&quot;f&quot;&gt;parseInts&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 304)&quot; onmouseover=&quot;showTip(event, 'fs98', 304)&quot; class=&quot;f&quot;&gt;sumList&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs113', 305)&quot; onmouseover=&quot;showTip(event, 'fs113', 305)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 306)&quot; onmouseover=&quot;showTip(event, 'fs112', 306)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This kind of composing is so common that we have a special operator &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; for this. So all we really need to
do is put &amp;gt;&amp;gt; between two functions, and we get a new function back! So what we are doing is&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs15', 307)&quot; onmouseover=&quot;showTip(event, 'fs15', 307)&quot; class=&quot;i&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 308)&quot; onmouseover=&quot;showTip(event, 'fs14', 308)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 309)&quot; onmouseover=&quot;showTip(event, 'fs68', 309)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs14', 310)&quot; onmouseover=&quot;showTip(event, 'fs14', 310)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 311)&quot; onmouseover=&quot;showTip(event, 'fs68', 311)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 312)&quot; onmouseover=&quot;showTip(event, 'fs14', 312)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;and we just get a &lt;code&gt;string -&amp;gt; int&lt;/code&gt; back.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 313)&quot; onmouseover=&quot;showTip(event, 'fs112', 313)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 314)&quot; onmouseover=&quot;showTip(event, 'fs91', 314)&quot; class=&quot;f&quot;&gt;parseInts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 315)&quot; onmouseover=&quot;showTip(event, 'fs98', 315)&quot; class=&quot;f&quot;&gt;sumList&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs113', 316)&quot; onmouseover=&quot;showTip(event, 'fs113', 316)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 317)&quot; onmouseover=&quot;showTip(event, 'fs112', 317)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we can easily create new functions out of smaller functions. This is the essence of &lt;em&gt;functional programming&lt;/em&gt;.
We have &lt;em&gt;immutable data-types&lt;/em&gt; that gets transformed from one type to another. And we compose functions
together to create new functions. Note that we also could create such a &lt;code&gt;compose&lt;/code&gt; function in C#.
But because of a lack of some features in C#, such a function is less practical as it seems.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; Func&amp;lt;A, C&amp;gt; Compose&amp;lt;A, B, C&amp;gt;(Func&amp;lt;A, B&amp;gt; f, Func&amp;lt;B, C&amp;gt; g) {
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; input &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; g(f(input));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;But it is can help to understand what &lt;em&gt;composition&lt;/em&gt; means.&lt;/p&gt;
&lt;p&gt;The remaining part is now &lt;em&gt;Piping&lt;/em&gt; that is used more often in F#. Piping can be compared with Linux/Bash
Pipes. For example in Bash you can do stuff like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;cat file.txt | grep &quot;foo&quot; | sort
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;It basically means that it prints out the file &lt;em&gt;file.txt&lt;/em&gt; line by line. The output is passed into &lt;code&gt;grep &quot;foo&quot;&lt;/code&gt;
that only shows the line that contains a &lt;code&gt;foo&lt;/code&gt;. And that output is finally sorted by &lt;code&gt;sort&lt;/code&gt;. F# has the operator
&lt;code&gt;|&amp;gt;&lt;/code&gt; to provide such a functionality. &lt;code&gt;|&amp;gt;&lt;/code&gt; just means, pass the value on the left to the function on the right.
So instead of&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs112', 318)&quot; onmouseover=&quot;showTip(event, 'fs112', 318)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also could write&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1,2,3,4,5&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 319)&quot; onmouseover=&quot;showTip(event, 'fs112', 319)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Having this kind of Piping means we also could have written &lt;code&gt;strToSum&lt;/code&gt; like this&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs114', 320)&quot; onmouseover=&quot;showTip(event, 'fs114', 320)&quot; class=&quot;f&quot;&gt;strToStum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs115', 321)&quot; onmouseover=&quot;showTip(event, 'fs115', 321)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs115', 322)&quot; onmouseover=&quot;showTip(event, 'fs115', 322)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 323)&quot; onmouseover=&quot;showTip(event, 'fs91', 323)&quot; class=&quot;f&quot;&gt;parseInts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 324)&quot; onmouseover=&quot;showTip(event, 'fs98', 324)&quot; class=&quot;f&quot;&gt;sumList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 325)&quot; onmouseover=&quot;showTip(event, 'fs112', 325)&quot; class=&quot;f&quot;&gt;strToSum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs91', 326)&quot; onmouseover=&quot;showTip(event, 'fs91', 326)&quot; class=&quot;f&quot;&gt;parseInts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 327)&quot; onmouseover=&quot;showTip(event, 'fs98', 327)&quot; class=&quot;f&quot;&gt;sumList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Both styles means the same. In the &lt;code&gt;|&amp;gt;&lt;/code&gt; we just provide the input argument explcitily. &lt;code&gt;x |&amp;gt; parseInts |&amp;gt; sumList&lt;/code&gt;
also can be read as. Take argument &lt;code&gt;x&lt;/code&gt; and pass it to the &lt;code&gt;parseInts&lt;/code&gt; function. The result of &lt;code&gt;parseInts&lt;/code&gt; is then
passed into the &lt;code&gt;sumList&lt;/code&gt; function. This kind of style is often what you see with &lt;code&gt;List&lt;/code&gt; manipulations.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 328)&quot; onmouseover=&quot;showTip(event, 'fs116', 328)&quot; class=&quot;f&quot;&gt;numbers&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 329)&quot; onmouseover=&quot;showTip(event, 'fs99', 329)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs99', 330)&quot; onmouseover=&quot;showTip(event, 'fs99', 330)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 331)&quot; onmouseover=&quot;showTip(event, 'fs96', 331)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs117', 332)&quot; onmouseover=&quot;showTip(event, 'fs117', 332)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt;    (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 333)&quot; onmouseover=&quot;showTip(event, 'fs20', 333)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 334)&quot; onmouseover=&quot;showTip(event, 'fs20', 334)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// Add +3 to every element&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 335)&quot; onmouseover=&quot;showTip(event, 'fs96', 335)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs117', 336)&quot; onmouseover=&quot;showTip(event, 'fs117', 336)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt;    (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 337)&quot; onmouseover=&quot;showTip(event, 'fs20', 337)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 338)&quot; onmouseover=&quot;showTip(event, 'fs20', 338)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// Multiply every element by 2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 339)&quot; onmouseover=&quot;showTip(event, 'fs96', 339)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs118', 340)&quot; onmouseover=&quot;showTip(event, 'fs118', 340)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 341)&quot; onmouseover=&quot;showTip(event, 'fs20', 341)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 342)&quot; onmouseover=&quot;showTip(event, 'fs20', 342)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Only pick even elements&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 343)&quot; onmouseover=&quot;showTip(event, 'fs96', 343)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs118', 344)&quot; onmouseover=&quot;showTip(event, 'fs118', 344)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 345)&quot; onmouseover=&quot;showTip(event, 'fs20', 345)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 346)&quot; onmouseover=&quot;showTip(event, 'fs20', 346)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)    &lt;span class=&quot;c&quot;&gt;// Only pick elements greater than 10&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 347)&quot; onmouseover=&quot;showTip(event, 'fs96', 347)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs119', 348)&quot; onmouseover=&quot;showTip(event, 'fs119', 348)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;                   &lt;span class=&quot;c&quot;&gt;// Only take 10 Elements&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 349)&quot; onmouseover=&quot;showTip(event, 'fs120', 349)&quot; class=&quot;i&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 350)&quot; onmouseover=&quot;showTip(event, 'fs116', 350)&quot; class=&quot;f&quot;&gt;numbers&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [12; 14; 16; 18; 20; 22; 24; 26; 28; 30]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This style of composing is also what you see with LINQ in C# or Java 8 Stream interface. The above
code could also be implemented in this way with C# LINQ feature.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; IEnumerable&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; Numbers(IEnumerable&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; xs) {
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; xs
        .Select(x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
        .Select(x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)
        .Where(x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
        .Where(x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
        .Take(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
}

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; result &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Numbers(Enumerable.Range(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Final Note&lt;/h2&gt;
&lt;p&gt;I covered quite a lot of topics. But I hope that now &lt;em&gt;functional languages&lt;/em&gt; looks less scary to you. By understanding
all of the topics you basically already made a big step in understanding F# in general.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://channel9.msdn.com/Blogs/pdc2008/TL11&quot;&gt;[Video] An Introduction to Microsoft F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/why-use-fsharp/&quot;&gt;Why use F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.davesquared.net/2013/05/why-not-try-fsharp.html&quot;&gt;Why not try F#?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;type DateTime = System.DateTime&lt;br /&gt;&lt;br /&gt;Full name: Main.DateTime&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;type DateTime =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;new : ticks:int64 -&amp;gt; DateTime + 10 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Add : value:TimeSpan -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddDays : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddHours : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMilliseconds : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMinutes : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddMonths : months:int -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddSeconds : value:float -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddTicks : value:int64 -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member AddYears : value:int -&amp;gt; DateTime&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.DateTime&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.DateTime()&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(ticks: int64) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(ticks: int64, kind: System.DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, calendar: System.Globalization.Calendar) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, kind: System.DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, calendar: System.Globalization.Calendar) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.DateTime(year: int, month: int, day: int, hour: int, minute: int, second: int, millisecond: int, kind: System.DateTimeKind) : unit&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;type StringBuilder = System.Text.StringBuilder&lt;br /&gt;&lt;br /&gt;Full name: Main.StringBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;namespace System.Text&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;Multiple items&lt;br /&gt;type StringBuilder =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; StringBuilder + 5 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Append : value:string -&amp;gt; StringBuilder + 18 overloads&lt;br /&gt;&amp;#160;&amp;#160;member AppendFormat : format:string * arg0:obj -&amp;gt; StringBuilder + 4 overloads&lt;br /&gt;&amp;#160;&amp;#160;member AppendLine : unit -&amp;gt; StringBuilder + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Capacity : int with get, set&lt;br /&gt;&amp;#160;&amp;#160;member Chars : int -&amp;gt; char with get, set&lt;br /&gt;&amp;#160;&amp;#160;member Clear : unit -&amp;gt; StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member EnsureCapacity : capacity:int -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;member Equals : sb:StringBuilder -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Text.StringBuilder&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Text.StringBuilder() : unit&lt;br /&gt;System.Text.StringBuilder(capacity: int) : unit&lt;br /&gt;System.Text.StringBuilder(value: string) : unit&lt;br /&gt;System.Text.StringBuilder(value: string, capacity: int) : unit&lt;br /&gt;System.Text.StringBuilder(capacity: int, maxCapacity: int) : unit&lt;br /&gt;System.Text.StringBuilder(value: string, startIndex: int, length: int, capacity: int) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;Multiple items&lt;br /&gt;type Person =&lt;br /&gt;&amp;#160;&amp;#160;new : name:string -&amp;gt; Person&lt;br /&gt;&amp;#160;&amp;#160;member Name : string&lt;br /&gt;&amp;#160;&amp;#160;member Name : string with set&lt;br /&gt;&lt;br /&gt;Full name: Main.Person&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : name:string -&amp;gt; Person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val name : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val set : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val num : int&lt;br /&gt;&lt;br /&gt;Full name: Main.num&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val name : string&lt;br /&gt;&lt;br /&gt;Full name: Main.name&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val person : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val mutable num : int&lt;br /&gt;&lt;br /&gt;Full name: Main.num&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val mutable name : string&lt;br /&gt;&lt;br /&gt;Full name: Main.name&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val mutable person : Person&lt;br /&gt;&lt;br /&gt;Full name: Main.person&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: introductioninfsharp.MyOperations.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;module MyOperations&lt;br /&gt;&lt;br /&gt;from introductioninfsharp&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val result : int&lt;br /&gt;&lt;br /&gt;Full name: introductioninfsharp.result&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val someFunction : input:&amp;#39;a -&amp;gt; &amp;#39;a0&lt;br /&gt;&lt;br /&gt;Full name: introductioninfsharp.someFunction&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val input : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val someFunction : (&amp;#39;b -&amp;gt; int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val input : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val position : int * int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.position&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val x : int&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val y : int&lt;br /&gt;&lt;br /&gt;Full name: Main.y&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val z : int&lt;br /&gt;&lt;br /&gt;Full name: Main.z&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val someFunction : x:int -&amp;gt; int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.someFunction&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val result : int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.result&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;type Human =&lt;br /&gt;&amp;#160;&amp;#160;{Id: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;FirstName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;LastName: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Born: DateTime;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Human&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;Human.Id: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;Human.FirstName: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;Human.LastName: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;Human.Born: DateTime&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val me : Human&lt;br /&gt;&lt;br /&gt;Full name: Main.me&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val age : int&lt;br /&gt;&lt;br /&gt;Full name: Main.age&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;property System.DateTime.Today: System.DateTime&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;property System.DateTime.Year: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val newMe : Human&lt;br /&gt;&lt;br /&gt;Full name: Main.newMe&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;type Attributes =&lt;br /&gt;&amp;#160;&amp;#160;{Strength: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Dexterity: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Intelligence: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Vitality: int;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Attributes&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;Attributes.Strength: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;Attributes.Dexterity: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;Attributes.Intelligence: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;Attributes.Vitality: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;type CaharacterSheet =&lt;br /&gt;&amp;#160;&amp;#160;{Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Attribute: Attributes;}&lt;br /&gt;&lt;br /&gt;Full name: Main.CaharacterSheet&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;CaharacterSheet.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;CaharacterSheet.Attribute: Attributes&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val warrior : CaharacterSheet&lt;br /&gt;&lt;br /&gt;Full name: Main.warrior&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;type Payment =&lt;br /&gt;&amp;#160;&amp;#160;| Cash&lt;br /&gt;&amp;#160;&amp;#160;| PayPal of string&lt;br /&gt;&amp;#160;&amp;#160;| CreditCard of string&lt;br /&gt;&lt;br /&gt;Full name: Main.Payment&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;union case Payment.Cash: Payment&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;union case Payment.PayPal: string -&amp;gt; Payment&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;union case Payment.CreditCard: string -&amp;gt; Payment&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val inform : payment:Payment -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.inform&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val payment : Payment&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;val email : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val no : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;type Markdown =&lt;br /&gt;&amp;#160;&amp;#160;| NewLine&lt;br /&gt;&amp;#160;&amp;#160;| Literal of string&lt;br /&gt;&amp;#160;&amp;#160;| Bold of string&lt;br /&gt;&amp;#160;&amp;#160;| InlineCode of string&lt;br /&gt;&amp;#160;&amp;#160;| Block of Markdown list&lt;br /&gt;&lt;br /&gt;Full name: Main.Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;union case Markdown.NewLine: Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;Multiple items&lt;br /&gt;union case Markdown.Literal: string -&amp;gt; Markdown&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type LiteralAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; LiteralAttribute&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.LiteralAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; LiteralAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;union case Markdown.Bold: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;union case Markdown.InlineCode: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;union case Markdown.Block: Markdown list -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val document : Markdown&lt;br /&gt;&lt;br /&gt;Full name: Main.document&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val produceHtml : markdown:Markdown -&amp;gt; sb:StringBuilder -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.produceHtml&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val markdown : Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val sb : StringBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;System.Text.StringBuilder.Append(value: char []) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: obj) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: uint64) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: uint32) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: uint16) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: decimal) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: float) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: float32) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: int64) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;br /&gt;System.Text.StringBuilder.Append(value: int) : System.Text.StringBuilder&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&lt;em&gt;(+0 other overloads)&lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val ignore : value:&amp;#39;T -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.ignore&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;System.Text.StringBuilder.AppendFormat(format: string, [&amp;lt;System.ParamArray&amp;gt;] args: obj []) : System.Text.StringBuilder&lt;br /&gt;System.Text.StringBuilder.AppendFormat(format: string, arg0: obj) : System.Text.StringBuilder&lt;br /&gt;System.Text.StringBuilder.AppendFormat(provider: System.IFormatProvider, format: string, [&amp;lt;System.ParamArray&amp;gt;] args: obj []) : System.Text.StringBuilder&lt;br /&gt;System.Text.StringBuilder.AppendFormat(format: string, arg0: obj, arg1: obj) : System.Text.StringBuilder&lt;br /&gt;System.Text.StringBuilder.AppendFormat(format: string, arg0: obj, arg1: obj, arg2: obj) : System.Text.StringBuilder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val code : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val markdown : Markdown list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;val x : Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val html : System.Text.StringBuilder&lt;br /&gt;&lt;br /&gt;Full name: Main.html&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;System.Text.StringBuilder.ToString() : string&lt;br /&gt;System.Text.StringBuilder.ToString(startIndex: int, length: int) : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val data : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val data : (int * int * int * int) list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val oneMore : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;type unit = Unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;Multiple items&lt;br /&gt;module String&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type String = System.String&lt;br /&gt;&lt;br /&gt;Full name: Main.String&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;Multiple items&lt;br /&gt;type String =&lt;br /&gt;&amp;#160;&amp;#160;new : value:char -&amp;gt; string + 7 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Chars : int -&amp;gt; char&lt;br /&gt;&amp;#160;&amp;#160;member Clone : unit -&amp;gt; obj&lt;br /&gt;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Contains : value:string -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member EndsWith : value:string -&amp;gt; bool + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member GetEnumerator : unit -&amp;gt; CharEnumerator&lt;br /&gt;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.String&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.String(value: nativeptr&amp;lt;char&amp;gt;) : unit&lt;br /&gt;System.String(value: nativeptr&amp;lt;sbyte&amp;gt;) : unit&lt;br /&gt;System.String(value: char []) : unit&lt;br /&gt;System.String(c: char, count: int) : unit&lt;br /&gt;System.String(value: nativeptr&amp;lt;char&amp;gt;, startIndex: int, length: int) : unit&lt;br /&gt;System.String(value: nativeptr&amp;lt;sbyte&amp;gt;, startIndex: int, length: int) : unit&lt;br /&gt;System.String(value: char [], startIndex: int, length: int) : unit&lt;br /&gt;System.String(value: nativeptr&amp;lt;sbyte&amp;gt;, startIndex: int, length: int, enc: System.Text.Encoding) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;val parseInt : str:string -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.parseInt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;System.Int32.Parse(s: string) : int&lt;br /&gt;System.Int32.Parse(s: string, provider: System.IFormatProvider) : int&lt;br /&gt;System.Int32.Parse(s: string, style: System.Globalization.NumberStyles) : int&lt;br /&gt;System.Int32.Parse(s: string, style: System.Globalization.NumberStyles, provider: System.IFormatProvider) : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;val parseInts : str:String -&amp;gt; int list&lt;br /&gt;&lt;br /&gt;Full name: Main.parseInts&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;val str : String&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;System.String.Split([&amp;lt;System.ParamArray&amp;gt;] separator: char []) : string []&lt;br /&gt;System.String.Split(separator: string [], options: System.StringSplitOptions) : string []&lt;br /&gt;System.String.Split(separator: char [], options: System.StringSplitOptions) : string []&lt;br /&gt;System.String.Split(separator: char [], count: int) : string []&lt;br /&gt;System.String.Split(separator: string [], count: int, options: System.StringSplitOptions) : string []&lt;br /&gt;System.String.Split(separator: char [], count: int, options: System.StringSplitOptions) : string []&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs94&quot;&gt;module Array&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs95&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; array:&amp;#39;T [] -&amp;gt; &amp;#39;U []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs96&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs97&quot;&gt;val ofArray : array:&amp;#39;T [] -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.ofArray&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs98&quot;&gt;val sumList : xs:int list -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.sumList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs99&quot;&gt;val xs : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs100&quot;&gt;val sum : list:&amp;#39;T list -&amp;gt; &amp;#39;T (requires member ( + ) and member get_Zero)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs101&quot;&gt;val nums : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.nums&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs102&quot;&gt;val sum : int&lt;br /&gt;&lt;br /&gt;Full name: Main.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs103&quot;&gt;val strToSum : stringList:String -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.strToSum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs104&quot;&gt;val stringList : String&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs105&quot;&gt;val nums : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs106&quot;&gt;val sum : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs107&quot;&gt;val compose : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; g:(&amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;a -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: Main.compose&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs108&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs109&quot;&gt;val g : (&amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs110&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs111&quot;&gt;val z : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs112&quot;&gt;val strToSum : (String -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.strToSum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs113&quot;&gt;val result : int&lt;br /&gt;&lt;br /&gt;Full name: Main.result&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs114&quot;&gt;val strToStum : x:String -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.strToStum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs115&quot;&gt;val x : String&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs116&quot;&gt;val numbers : xs:int list -&amp;gt; int list&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs117&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs118&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs119&quot;&gt;val take : count:int -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.take&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs120&quot;&gt;val result : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.result&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Applying Structured Programming</title>
   <link href="https://sidburn.github.io/blog/2016/03/09/applying-structured-programming"/>
   <updated>2016-03-09T02:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/09/applying-structured-programming</id>
   <content type="html">&lt;p&gt;In my previous post about &lt;a href=&quot;/blog/2016/03/09/structured-programming&quot;&gt;Structured Programming&lt;/a&gt; I
talked about that basic looping constructs, &lt;code&gt;fold&lt;/code&gt; and so on are basically just still to powerful.
In the sense of readability we should try to eliminate them with more specific ones. In this post
i go through a &lt;em&gt;toy example&lt;/em&gt; to show the various ways on how to refactor some code.&lt;/p&gt;
&lt;h2&gt;The Toy Example&lt;/h2&gt;
&lt;p&gt;Recently I had some conversation about code in a game and providing some kind of
&lt;em&gt;critical hit-chance&lt;/em&gt; in a game. The typical way on how to achieve that is actually easy. Let's
assume that every attack of an player has a 16% chance to be critical. We only need to generate
a random number between 0 and 99 (or 0 to 1) and test if that number is lower than 16 (or 0.16).&lt;/p&gt;
&lt;p&gt;Let's assume we want to test if that really is true. We would just generate some random numbers.
Test if that number is a critical hit. And either increase a &lt;em&gt;critical hit&lt;/em&gt; variable or some
&lt;em&gt;normal hit&lt;/em&gt; variable. After 1000 tries we just calculate the average and see if
we really have around 16% or around 160 hits.&lt;/p&gt;
&lt;h2&gt;Solution 1&lt;/h2&gt;
&lt;p&gt;Some very imperative code in F# could look like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;t&quot;&gt;Random&lt;/span&gt;()

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 7)&quot; onmouseover=&quot;showTip(event, 'fs7', 7)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 8)&quot; onmouseover=&quot;showTip(event, 'fs8', 8)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 9)&quot; onmouseover=&quot;showTip(event, 'fs9', 9)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 10)&quot; onmouseover=&quot;showTip(event, 'fs10', 10)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 11)&quot; onmouseover=&quot;showTip(event, 'fs2', 11)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 12)&quot; onmouseover=&quot;showTip(event, 'fs11', 12)&quot; class=&quot;f&quot;&gt;Next&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 13)&quot; onmouseover=&quot;showTip(event, 'fs10', 13)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 14)&quot; onmouseover=&quot;showTip(event, 'fs6', 14)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs7', 15)&quot; onmouseover=&quot;showTip(event, 'fs7', 15)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 16)&quot; onmouseover=&quot;showTip(event, 'fs7', 16)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs8', 17)&quot; onmouseover=&quot;showTip(event, 'fs8', 17)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs7', 19)&quot; onmouseover=&quot;showTip(event, 'fs7', 19)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs8', 20)&quot; onmouseover=&quot;showTip(event, 'fs8', 20)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Testing our code would look something like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 21)&quot; onmouseover=&quot;showTip(event, 'fs12', 21)&quot; class=&quot;f&quot;&gt;percentage&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 23)&quot; onmouseover=&quot;showTip(event, 'fs14', 23)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs13', 24)&quot; onmouseover=&quot;showTip(event, 'fs13', 24)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 25)&quot; onmouseover=&quot;showTip(event, 'fs14', 25)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 26)&quot; onmouseover=&quot;showTip(event, 'fs13', 26)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 27)&quot; onmouseover=&quot;showTip(event, 'fs9', 27)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 28)&quot; onmouseover=&quot;showTip(event, 'fs15', 28)&quot; class=&quot;i&quot;&gt;crit&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs16', 29)&quot; onmouseover=&quot;showTip(event, 'fs16', 29)&quot; class=&quot;i&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 30)&quot; onmouseover=&quot;showTip(event, 'fs5', 30)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs17', 31)&quot; onmouseover=&quot;showTip(event, 'fs17', 31)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Crit: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Normal: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Percentage: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 32)&quot; onmouseover=&quot;showTip(event, 'fs15', 32)&quot; class=&quot;i&quot;&gt;crit&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 33)&quot; onmouseover=&quot;showTip(event, 'fs16', 33)&quot; class=&quot;i&quot;&gt;normal&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs12', 34)&quot; onmouseover=&quot;showTip(event, 'fs12', 34)&quot; class=&quot;f&quot;&gt;percentage&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 35)&quot; onmouseover=&quot;showTip(event, 'fs18', 35)&quot; class=&quot;f&quot;&gt;float&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 36)&quot; onmouseover=&quot;showTip(event, 'fs15', 36)&quot; class=&quot;i&quot;&gt;crit&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 37)&quot; onmouseover=&quot;showTip(event, 'fs18', 37)&quot; class=&quot;f&quot;&gt;float&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 38)&quot; onmouseover=&quot;showTip(event, 'fs16', 38)&quot; class=&quot;i&quot;&gt;normal&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now getting a result like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;Crit: 1585 Normal: 8415 Percentage: 15.850000
Crit: 1638 Normal: 8362 Percentage: 16.380000
Crit: 1616 Normal: 8384 Percentage: 16.160000
Crit: 1603 Normal: 8397 Percentage: 16.030000
Crit: 1624 Normal: 8376 Percentage: 16.240000
Crit: 1667 Normal: 8333 Percentage: 16.670000
Crit: 1617 Normal: 8383 Percentage: 16.170000
Crit: 1639 Normal: 8361 Percentage: 16.390000
Crit: 1653 Normal: 8347 Percentage: 16.530000
Crit: 1613 Normal: 8387 Percentage: 16.130000
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Actually we now have proven that the idea works, as around 16% of our attacks are now critical.
But now let's actually look if we can improve our &lt;code&gt;calculateChance&lt;/code&gt; function. As stated in the
beginning. It is a toy example, so we usually wouldn't waste any time in improving this particular
function. But by going through a toy example it can help to get the general concept on
how to improve code.&lt;/p&gt;
&lt;h2&gt;Solution 2&lt;/h2&gt;
&lt;p&gt;In functional programming mutable variables are actually a little bit frowned upon. So let's try
to eliminate our mutable variables by replacing our loop with recursion. Actually recursion is in that
sense just looping and you can turn any kind of loop into recursion. The difference between looping
and recursion is just what is explicit and what is implicit.&lt;/p&gt;
&lt;p&gt;In Looping we implicitly move to the next step, and we can explicitly break/abort a loop. In recursion
we implicitly abort, and we have to explicitly move to the next step, by calling our function recursively.&lt;/p&gt;
&lt;p&gt;Mutable variables outside of a loop turn into function parameters. This way we can turn any kind of
loop into a recursive function and eliminate mutable variables all together.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 39)&quot; onmouseover=&quot;showTip(event, 'fs5', 39)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 40)&quot; onmouseover=&quot;showTip(event, 'fs6', 40)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 41)&quot; onmouseover=&quot;showTip(event, 'fs19', 41)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 42)&quot; onmouseover=&quot;showTip(event, 'fs20', 42)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 43)&quot; onmouseover=&quot;showTip(event, 'fs21', 43)&quot; class=&quot;i&quot;&gt;criticalHit&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 44)&quot; onmouseover=&quot;showTip(event, 'fs22', 44)&quot; class=&quot;i&quot;&gt;normalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 45)&quot; onmouseover=&quot;showTip(event, 'fs20', 45)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 46)&quot; onmouseover=&quot;showTip(event, 'fs10', 46)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 47)&quot; onmouseover=&quot;showTip(event, 'fs2', 47)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 48)&quot; onmouseover=&quot;showTip(event, 'fs11', 48)&quot; class=&quot;f&quot;&gt;Next&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;)
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 49)&quot; onmouseover=&quot;showTip(event, 'fs10', 49)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 50)&quot; onmouseover=&quot;showTip(event, 'fs6', 50)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 51)&quot; onmouseover=&quot;showTip(event, 'fs19', 51)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 52)&quot; onmouseover=&quot;showTip(event, 'fs20', 52)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs21', 53)&quot; onmouseover=&quot;showTip(event, 'fs21', 53)&quot; class=&quot;i&quot;&gt;criticalHit&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs22', 54)&quot; onmouseover=&quot;showTip(event, 'fs22', 54)&quot; class=&quot;i&quot;&gt;normalHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
            | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 55)&quot; onmouseover=&quot;showTip(event, 'fs19', 55)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 56)&quot; onmouseover=&quot;showTip(event, 'fs20', 56)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 57)&quot; onmouseover=&quot;showTip(event, 'fs21', 57)&quot; class=&quot;i&quot;&gt;criticalHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs22', 58)&quot; onmouseover=&quot;showTip(event, 'fs22', 58)&quot; class=&quot;i&quot;&gt;normalHit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs21', 59)&quot; onmouseover=&quot;showTip(event, 'fs21', 59)&quot; class=&quot;i&quot;&gt;criticalHit&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs22', 60)&quot; onmouseover=&quot;showTip(event, 'fs22', 60)&quot; class=&quot;i&quot;&gt;normalHit&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs19', 61)&quot; onmouseover=&quot;showTip(event, 'fs19', 61)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now eliminated all mutable variables and now provided an inner recursive function that replaces
our loop. On top of it i replaced the inner &lt;code&gt;if&lt;/code&gt; check on &lt;code&gt;random &amp;lt; chance&lt;/code&gt; with pattern-matching.
This way it is easier to see the difference.&lt;/p&gt;
&lt;p&gt;Either in both ways we will call &lt;code&gt;loop&lt;/code&gt; again, but with an increment &lt;code&gt;count&lt;/code&gt;. If &lt;code&gt;random &amp;lt; change&lt;/code&gt;
is &lt;code&gt;false&lt;/code&gt; we have a normal hit, so we increase &lt;code&gt;normalHit&lt;/code&gt; by one, otherwise we increase &lt;code&gt;criticalHit&lt;/code&gt;
by one.&lt;/p&gt;
&lt;p&gt;We continue our recursive call as long we have &lt;code&gt;count &amp;lt; 1000&lt;/code&gt;. But as soon that condition is &lt;code&gt;false&lt;/code&gt;
we end up with just &lt;code&gt;criticalHit, normalHit&lt;/code&gt; that will return both variables as a tuple.&lt;/p&gt;
&lt;p&gt;The question overall is. Is that version better as &lt;em&gt;Solution 1&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Well it depends. We eliminated the mutable variables, but actually at least I am someone that
has nothing against mutable variables in a limited scope. If you are a programmer that primarily
uses an imperative language and are used to looping then you will probably prefer Solution 1. If you
are in the state of learning &lt;em&gt;functional programing&lt;/em&gt; you should try to replace looping
constructs in this kind of way to get used to it. This is especially important for the later Solutions
we will look at. If you are used to this, like me, you will probably not find the recursive version
any harder to understand as the looping example.&lt;/p&gt;
&lt;p&gt;So what is with Structured Programming? Did we replace a powerful construct with a less powerful
construct? At that moment, no we didn't. Recursion is just as much powerful as looping. The funny
part. The compiler will turn such kind of tail-recursion into a loop when compiled. That's also
the reason why functional programmers names such inner recursive functions just &lt;code&gt;loop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So was our transformation into &lt;em&gt;Solution 2&lt;/em&gt; wasteful? Not really, that now leads to &lt;em&gt;Solution 3&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Solution 3&lt;/h2&gt;
&lt;p&gt;Once we have eliminated all kinds of mutable variables we end up with a recursive function that
just loops. Our function takes some additional variables like &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;criticalHit&lt;/code&gt; and &lt;code&gt;normalHit&lt;/code&gt;
as it's state. What we really have is a looping construct with just an accumulator. But wait. That's
exactly what &lt;code&gt;fold&lt;/code&gt; is about! The question that starts to beg is. Can we replace &lt;em&gt;Solution 2&lt;/em&gt; somehow
by using a &lt;code&gt;fold&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The answer is &lt;em&gt;yes&lt;/em&gt;. But which kind of &lt;code&gt;fold&lt;/code&gt; do we need? Or in other words, over what exactly do
we loop? We don't loop over a data-structure like an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;List&lt;/code&gt;. So what is it that
we are looping over?&lt;/p&gt;
&lt;p&gt;When we examine our code we could say we loop over &lt;code&gt;count&lt;/code&gt;. But that isn't true. Our
&lt;code&gt;count&lt;/code&gt; is just there so we know when to end the looping. We really are looping over the
&lt;code&gt;rng.Next(0,100)&lt;/code&gt; call. We only need the &lt;code&gt;count&lt;/code&gt; because that is an infinite sequence.
But that actually answers our question. Let's create a &lt;code&gt;seq&lt;/code&gt; that just returns an
infinite sequence of random numbers.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 62)&quot; onmouseover=&quot;showTip(event, 'fs2', 62)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 63)&quot; onmouseover=&quot;showTip(event, 'fs3', 63)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 64)&quot; onmouseover=&quot;showTip(event, 'fs4', 64)&quot; class=&quot;t&quot;&gt;Random&lt;/span&gt;()
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 65)&quot; onmouseover=&quot;showTip(event, 'fs23', 65)&quot; class=&quot;f&quot;&gt;randomSeq&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 66)&quot; onmouseover=&quot;showTip(event, 'fs24', 66)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 67)&quot; onmouseover=&quot;showTip(event, 'fs25', 67)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 68)&quot; onmouseover=&quot;showTip(event, 'fs26', 68)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 69)&quot; onmouseover=&quot;showTip(event, 'fs27', 69)&quot; class=&quot;f&quot;&gt;initInfinite&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 70)&quot; onmouseover=&quot;showTip(event, 'fs2', 70)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 71)&quot; onmouseover=&quot;showTip(event, 'fs11', 71)&quot; class=&quot;f&quot;&gt;Next&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs24', 72)&quot; onmouseover=&quot;showTip(event, 'fs24', 72)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs25', 73)&quot; onmouseover=&quot;showTip(event, 'fs25', 73)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Note that I'm defining &lt;code&gt;rng&lt;/code&gt; outside the function. Instantiating a &lt;code&gt;System.Random&lt;/code&gt; inside the function
and calling &lt;code&gt;randomSeq&lt;/code&gt; in short time-interval would otherwise lead to a RNG with the same seed.
Once we have our Random Sequence it also becomes clearer what our &lt;code&gt;count&lt;/code&gt; was before. We just &lt;code&gt;take&lt;/code&gt;
the amount of randoms we need from our infinite sequence. After that, we only need to transform what is
left into a &lt;code&gt;fold&lt;/code&gt; call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 74)&quot; onmouseover=&quot;showTip(event, 'fs5', 74)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 75)&quot; onmouseover=&quot;showTip(event, 'fs6', 75)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs23', 76)&quot; onmouseover=&quot;showTip(event, 'fs23', 76)&quot; class=&quot;f&quot;&gt;randomSeq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 77)&quot; onmouseover=&quot;showTip(event, 'fs26', 77)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 78)&quot; onmouseover=&quot;showTip(event, 'fs28', 78)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 79)&quot; onmouseover=&quot;showTip(event, 'fs26', 79)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 80)&quot; onmouseover=&quot;showTip(event, 'fs29', 80)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 81)&quot; onmouseover=&quot;showTip(event, 'fs21', 81)&quot; class=&quot;i&quot;&gt;criticalHit&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs22', 82)&quot; onmouseover=&quot;showTip(event, 'fs22', 82)&quot; class=&quot;i&quot;&gt;normalHit&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs10', 83)&quot; onmouseover=&quot;showTip(event, 'fs10', 83)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs10', 84)&quot; onmouseover=&quot;showTip(event, 'fs10', 84)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 85)&quot; onmouseover=&quot;showTip(event, 'fs6', 85)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 86)&quot; onmouseover=&quot;showTip(event, 'fs21', 86)&quot; class=&quot;i&quot;&gt;criticalHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;),&lt;span onmouseout=&quot;hideTip(event, 'fs22', 87)&quot; onmouseover=&quot;showTip(event, 'fs22', 87)&quot; class=&quot;i&quot;&gt;normalHit&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 88)&quot; onmouseover=&quot;showTip(event, 'fs21', 88)&quot; class=&quot;i&quot;&gt;criticalHit&lt;/span&gt;,(&lt;span onmouseout=&quot;hideTip(event, 'fs22', 89)&quot; onmouseover=&quot;showTip(event, 'fs22', 89)&quot; class=&quot;i&quot;&gt;normalHit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
    ) (&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Looking at the current Solution i think we made our first improvements to our code. At first we
created a &lt;code&gt;randomSeq&lt;/code&gt;. A sequence out of random can be helpful in many other places. &lt;code&gt;Seq.take 1000&lt;/code&gt;
makes it clear that we just fetch &lt;code&gt;1000&lt;/code&gt; random numbers from it. And after having those we use &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, our &lt;code&gt;fold&lt;/code&gt; only contains the real logic. It just checks whether our random is a criticalHit or not
and we create our new state from it.&lt;/p&gt;
&lt;p&gt;But as stated before. &lt;code&gt;fold&lt;/code&gt; is still something that we consider as &lt;em&gt;powerful&lt;/em&gt;, is there a way to also
eliminate &lt;code&gt;fold&lt;/code&gt;?&lt;/p&gt;
&lt;h2&gt;Solution 4&lt;/h2&gt;
&lt;p&gt;We actually can eliminate &lt;code&gt;fold&lt;/code&gt;. But for that we need to go and look back at what we are actually
doing. What we really was interested in was the percentage if we really get the right amount of
&lt;em&gt;critical-hits&lt;/em&gt; this way. What we really need is to split it into two parts. We need some function
that test whether we have a critical hit or not. We could turn it into &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; values.
But later we need to turn those somehow into a formula to calculate the average.&lt;/p&gt;
&lt;p&gt;But by thinking separetely about it we easily can recognise that we can easily achive both things in
one step. By just turning a critical-hit into &lt;code&gt;1.0&lt;/code&gt; and a normal hit into &lt;code&gt;0.0&lt;/code&gt;. By calculating the
average we would automatically get a percentage that ranges bewteen &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;. We could multiply it by
&lt;code&gt;100.0&lt;/code&gt; or we also could use &lt;code&gt;100.0&lt;/code&gt; and &lt;code&gt;0.0&lt;/code&gt; instead of &lt;code&gt;1.0&lt;/code&gt; and &lt;code&gt;0.0&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 90)&quot; onmouseover=&quot;showTip(event, 'fs30', 90)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 91)&quot; onmouseover=&quot;showTip(event, 'fs6', 91)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs23', 92)&quot; onmouseover=&quot;showTip(event, 'fs23', 92)&quot; class=&quot;f&quot;&gt;randomSeq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 93)&quot; onmouseover=&quot;showTip(event, 'fs26', 93)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 94)&quot; onmouseover=&quot;showTip(event, 'fs28', 94)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 95)&quot; onmouseover=&quot;showTip(event, 'fs26', 95)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs31', 96)&quot; onmouseover=&quot;showTip(event, 'fs31', 96)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 97)&quot; onmouseover=&quot;showTip(event, 'fs32', 97)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 98)&quot; onmouseover=&quot;showTip(event, 'fs32', 98)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 99)&quot; onmouseover=&quot;showTip(event, 'fs6', 99)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 100)&quot; onmouseover=&quot;showTip(event, 'fs26', 100)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 101)&quot; onmouseover=&quot;showTip(event, 'fs33', 101)&quot; class=&quot;f&quot;&gt;average&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And as a final note. We can replace a call to &lt;code&gt;map&lt;/code&gt; followed by &lt;code&gt;average&lt;/code&gt; with &lt;code&gt;averageBy&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 102)&quot; onmouseover=&quot;showTip(event, 'fs30', 102)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 103)&quot; onmouseover=&quot;showTip(event, 'fs6', 103)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs23', 104)&quot; onmouseover=&quot;showTip(event, 'fs23', 104)&quot; class=&quot;f&quot;&gt;randomSeq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 105)&quot; onmouseover=&quot;showTip(event, 'fs26', 105)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 106)&quot; onmouseover=&quot;showTip(event, 'fs28', 106)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 107)&quot; onmouseover=&quot;showTip(event, 'fs26', 107)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 108)&quot; onmouseover=&quot;showTip(event, 'fs34', 108)&quot; class=&quot;f&quot;&gt;averageBy&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 109)&quot; onmouseover=&quot;showTip(event, 'fs32', 109)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 110)&quot; onmouseover=&quot;showTip(event, 'fs32', 110)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 111)&quot; onmouseover=&quot;showTip(event, 'fs6', 111)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When we compare the final code with what we started I think we have reached a good refactoring.&lt;/p&gt;
&lt;p&gt;We started with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 112)&quot; onmouseover=&quot;showTip(event, 'fs2', 112)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 113)&quot; onmouseover=&quot;showTip(event, 'fs3', 113)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 114)&quot; onmouseover=&quot;showTip(event, 'fs4', 114)&quot; class=&quot;t&quot;&gt;Random&lt;/span&gt;()

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 115)&quot; onmouseover=&quot;showTip(event, 'fs5', 115)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 116)&quot; onmouseover=&quot;showTip(event, 'fs6', 116)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 117)&quot; onmouseover=&quot;showTip(event, 'fs7', 117)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 118)&quot; onmouseover=&quot;showTip(event, 'fs8', 118)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 119)&quot; onmouseover=&quot;showTip(event, 'fs9', 119)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 120)&quot; onmouseover=&quot;showTip(event, 'fs10', 120)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 121)&quot; onmouseover=&quot;showTip(event, 'fs2', 121)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 122)&quot; onmouseover=&quot;showTip(event, 'fs11', 122)&quot; class=&quot;f&quot;&gt;Next&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 123)&quot; onmouseover=&quot;showTip(event, 'fs10', 123)&quot; class=&quot;i&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 124)&quot; onmouseover=&quot;showTip(event, 'fs6', 124)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs7', 125)&quot; onmouseover=&quot;showTip(event, 'fs7', 125)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 126)&quot; onmouseover=&quot;showTip(event, 'fs7', 126)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs8', 127)&quot; onmouseover=&quot;showTip(event, 'fs8', 127)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 128)&quot; onmouseover=&quot;showTip(event, 'fs8', 128)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs7', 129)&quot; onmouseover=&quot;showTip(event, 'fs7', 129)&quot; class=&quot;v&quot;&gt;criticalHit&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs8', 130)&quot; onmouseover=&quot;showTip(event, 'fs8', 130)&quot; class=&quot;v&quot;&gt;normalHit&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 131)&quot; onmouseover=&quot;showTip(event, 'fs12', 131)&quot; class=&quot;f&quot;&gt;percentage&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 132)&quot; onmouseover=&quot;showTip(event, 'fs13', 132)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 133)&quot; onmouseover=&quot;showTip(event, 'fs14', 133)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs13', 134)&quot; onmouseover=&quot;showTip(event, 'fs13', 134)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 135)&quot; onmouseover=&quot;showTip(event, 'fs14', 135)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 136)&quot; onmouseover=&quot;showTip(event, 'fs13', 136)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 137)&quot; onmouseover=&quot;showTip(event, 'fs9', 137)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 138)&quot; onmouseover=&quot;showTip(event, 'fs15', 138)&quot; class=&quot;i&quot;&gt;crit&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs16', 139)&quot; onmouseover=&quot;showTip(event, 'fs16', 139)&quot; class=&quot;i&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 140)&quot; onmouseover=&quot;showTip(event, 'fs5', 140)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs17', 141)&quot; onmouseover=&quot;showTip(event, 'fs17', 141)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Crit: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Normal: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; Percentage: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 142)&quot; onmouseover=&quot;showTip(event, 'fs15', 142)&quot; class=&quot;i&quot;&gt;crit&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 143)&quot; onmouseover=&quot;showTip(event, 'fs16', 143)&quot; class=&quot;i&quot;&gt;normal&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs12', 144)&quot; onmouseover=&quot;showTip(event, 'fs12', 144)&quot; class=&quot;f&quot;&gt;percentage&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 145)&quot; onmouseover=&quot;showTip(event, 'fs18', 145)&quot; class=&quot;f&quot;&gt;float&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 146)&quot; onmouseover=&quot;showTip(event, 'fs15', 146)&quot; class=&quot;i&quot;&gt;crit&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 147)&quot; onmouseover=&quot;showTip(event, 'fs18', 147)&quot; class=&quot;f&quot;&gt;float&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 148)&quot; onmouseover=&quot;showTip(event, 'fs16', 148)&quot; class=&quot;i&quot;&gt;normal&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;End we ended with&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 149)&quot; onmouseover=&quot;showTip(event, 'fs2', 149)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 150)&quot; onmouseover=&quot;showTip(event, 'fs3', 150)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 151)&quot; onmouseover=&quot;showTip(event, 'fs4', 151)&quot; class=&quot;t&quot;&gt;Random&lt;/span&gt;()
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 152)&quot; onmouseover=&quot;showTip(event, 'fs23', 152)&quot; class=&quot;f&quot;&gt;randomSeq&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 153)&quot; onmouseover=&quot;showTip(event, 'fs24', 153)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 154)&quot; onmouseover=&quot;showTip(event, 'fs25', 154)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 155)&quot; onmouseover=&quot;showTip(event, 'fs26', 155)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 156)&quot; onmouseover=&quot;showTip(event, 'fs27', 156)&quot; class=&quot;f&quot;&gt;initInfinite&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 157)&quot; onmouseover=&quot;showTip(event, 'fs2', 157)&quot; class=&quot;i&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 158)&quot; onmouseover=&quot;showTip(event, 'fs11', 158)&quot; class=&quot;f&quot;&gt;Next&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs24', 159)&quot; onmouseover=&quot;showTip(event, 'fs24', 159)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs25', 160)&quot; onmouseover=&quot;showTip(event, 'fs25', 160)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;))

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 161)&quot; onmouseover=&quot;showTip(event, 'fs30', 161)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 162)&quot; onmouseover=&quot;showTip(event, 'fs6', 162)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs23', 163)&quot; onmouseover=&quot;showTip(event, 'fs23', 163)&quot; class=&quot;f&quot;&gt;randomSeq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 164)&quot; onmouseover=&quot;showTip(event, 'fs26', 164)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 165)&quot; onmouseover=&quot;showTip(event, 'fs28', 165)&quot; class=&quot;f&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 166)&quot; onmouseover=&quot;showTip(event, 'fs26', 166)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 167)&quot; onmouseover=&quot;showTip(event, 'fs34', 167)&quot; class=&quot;f&quot;&gt;averageBy&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 168)&quot; onmouseover=&quot;showTip(event, 'fs32', 168)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 169)&quot; onmouseover=&quot;showTip(event, 'fs32', 169)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 170)&quot; onmouseover=&quot;showTip(event, 'fs6', 170)&quot; class=&quot;i&quot;&gt;chance&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0.0&lt;/span&gt;)

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 171)&quot; onmouseover=&quot;showTip(event, 'fs9', 171)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 172)&quot; onmouseover=&quot;showTip(event, 'fs35', 172)&quot; class=&quot;i&quot;&gt;percentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 173)&quot; onmouseover=&quot;showTip(event, 'fs30', 173)&quot; class=&quot;f&quot;&gt;calculateChance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs17', 174)&quot; onmouseover=&quot;showTip(event, 'fs17', 174)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Percentage: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 175)&quot; onmouseover=&quot;showTip(event, 'fs35', 175)&quot; class=&quot;i&quot;&gt;percentage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;From a code perspective we didn't write more code. We even reduced the line count number.
By rewriting we created a reusable &lt;code&gt;randomSeq&lt;/code&gt; sequence that can provide
us an infinite stream of random numbers. I also find the logic easier to understand.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialize a &lt;code&gt;randomSeq&lt;/code&gt; that return numbers from 0 to 99&lt;/li&gt;
&lt;li&gt;Take 1000 of those numbers&lt;/li&gt;
&lt;li&gt;Map them to &lt;code&gt;100.0&lt;/code&gt; if it smaller than &lt;code&gt;chance&lt;/code&gt; or &lt;code&gt;0.0&lt;/code&gt; and calculate the average from those numbers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As stated in the beginning. It was a toy program with what we started but overall we can see the ways
in how we can continuously improve our code.&lt;/p&gt;
&lt;p&gt;I don't think that just turning a loop in itself into
a recursive function as you see in &lt;em&gt;Solution 2&lt;/em&gt; provides much benefit. But doing such a thing
can help to later turn it into a &lt;code&gt;fold&lt;/code&gt; call. You also can move directly from &lt;em&gt;Solution 1&lt;/em&gt; to
&lt;em&gt;Solution 3&lt;/em&gt;. But doing the intermediate Step can greatly help if you are not used in doing this kind
of things.&lt;/p&gt;
&lt;p&gt;Once you have a &lt;code&gt;fold&lt;/code&gt; in it you can further think in how you can eliminate it. If there
exists other functions that can replace a &lt;code&gt;fold&lt;/code&gt; use them instead! But what happens if you don't
find other more specific function as &lt;code&gt;fold&lt;/code&gt;? Well just use it, it is there to be used. But if you
found similarities between multiple different lambda functions that you pass into &lt;code&gt;fold&lt;/code&gt;, you should
look into how you can abstract the lambda into a reusable function.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val rng : System.Random&lt;br /&gt;&lt;br /&gt;Full name: Main.rng&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;type Random =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Random + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Next : unit -&amp;gt; int + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member NextBytes : buffer:byte[] -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member NextDouble : unit -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: System.Random&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Random() : unit&lt;br /&gt;System.Random(Seed: int) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val calculateChance : chance:int -&amp;gt; int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.calculateChance&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val chance : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val mutable criticalHit : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val mutable normalHit : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val i : int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val random : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;System.Random.Next() : int&lt;br /&gt;System.Random.Next(maxValue: int) : int&lt;br /&gt;System.Random.Next(minValue: int, maxValue: int) : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val percentage : x:float -&amp;gt; y:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.percentage&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val x : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val y : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val crit : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val normal : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;Multiple items&lt;br /&gt;val float : value:&amp;#39;T -&amp;gt; float (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float = System.Double&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type float&amp;lt;&amp;#39;Measure&amp;gt; = float&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.float&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val loop : (int -&amp;gt; int -&amp;gt; int -&amp;gt; int * int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val count : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val criticalHit : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val normalHit : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val randomSeq : min:int -&amp;gt; max:int -&amp;gt; seq&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.randomSeq&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val min : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val max : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;module Seq&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val initInfinite : initializer:(int -&amp;gt; &amp;#39;T) -&amp;gt; seq&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.initInfinite&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val take : count:int -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.take&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val calculateChance : chance:int -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.calculateChance&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;U&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val average : source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T (requires member ( + ) and member DivideByInt and member get_Zero)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.average&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val averageBy : projection:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;U (requires member ( + ) and member DivideByInt and member get_Zero)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.averageBy&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val percentage : float&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Structured Programming</title>
   <link href="https://sidburn.github.io/blog/2016/03/09/structured-programming"/>
   <updated>2016-03-09T01:00:00+01:00</updated>
   <id>https://sidburn.github.io/blog/2016/03/09/structured-programming</id>
   <content type="html">&lt;p&gt;Back in 1968 Edsger W. Dijkstra wrote an open letter named &quot;Go To Statement Considered Harmful&quot;. As already suggested from
the title, the very idea was to raise consciousness that the &lt;code&gt;goto&lt;/code&gt; statement is more harmful then helpful. From
today view we would expect that this idea catches fire really fast, but it didn't. It took quite a long time. Even during
all the 1970s and 1980s that question was debated a lot.&lt;/p&gt;
&lt;p&gt;Looking back at it there are some interesting questions that is worth to look at. The first one was, if &lt;code&gt;goto&lt;/code&gt; was
harmful, what was the alternative to &lt;code&gt;goto&lt;/code&gt;? And why exactly is &lt;code&gt;goto&lt;/code&gt; harmful, and why exactly is the alternative better?&lt;/p&gt;
&lt;p&gt;I think that looking at this questions and their answers is still a very important step forward in understanding programming and
raise the awareness on how we achieve a more clean way of coding.&lt;/p&gt;
&lt;h2&gt;Why &quot;goto&quot; was considered harmful&lt;/h2&gt;
&lt;p&gt;At first we have to understand the time in which these statement was published. It was a time in that nearly every programmer
actually used a language with such a control statement. Not only that, it usually often was the only way to provide any
kind of control structures. There were no &quot;subroutines&quot;, no &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;for&lt;/code&gt; loops. No blocks of code ans so one. Sure
there existed languages that provides this kind of style of programming. The ALGOL 58 and ALGOL 60 (1958 and 1960) already
provided those kind of structures, but those languages were not used by the large.&lt;/p&gt;
&lt;p&gt;Most of the programmers still used languages where a &lt;code&gt;goto&lt;/code&gt; statement dominated. And where the flow of a program was dominated
by direct &lt;code&gt;goto&lt;/code&gt; statements. Dijkstra that was a huge proponent of the ALGOL language coined the term &lt;em&gt;Structured Programming&lt;/em&gt;
as an alternative to the &lt;code&gt;goto&lt;/code&gt; keyword, the idea was that we should have explicit control flow. Mainly a language should be separated
into Control Structures, Subroutines and Blocks. Control Structures should be further divided into &lt;strong&gt;sequence&lt;/strong&gt;, &lt;strong&gt;selection&lt;/strong&gt;,
&lt;strong&gt;iteration&lt;/strong&gt; and &lt;strong&gt;recursion&lt;/strong&gt; statements.&lt;/p&gt;
&lt;p&gt;But why should we do something like that? The reason was that we anyway had this concepts, but implicitly. All of these ideas
was &lt;em&gt;emulated&lt;/em&gt; with the &lt;code&gt;goto&lt;/code&gt; statement. You wanted a &lt;code&gt;for&lt;/code&gt; loop? No problem just jump with &lt;code&gt;goto&lt;/code&gt; to some earlier point.&lt;/p&gt;
&lt;p&gt;You wanted a subroutine? You pushed some values onto the stack, jumped to a certain point (your subroutine entry) and that
subroutine poped the right amount of values from a stack. That is still how functions are implemented in today's language.
That is the very reason of why you can get a &lt;code&gt;StackOverflowException&lt;/code&gt; if your language don't support tail-recursion.&lt;/p&gt;
&lt;p&gt;But by giving all of them direct labels we give all of our programs more structure. And this structure helps us in understanding
our programs. Or in other words the idea was that we should eliminate powerful construct like &lt;code&gt;goto&lt;/code&gt; and yet use a lot more
weaker but specific constructs.&lt;/p&gt;
&lt;h2&gt;Structured Programming&lt;/h2&gt;
&lt;p&gt;That overall leads to another important realization. Nearly all programming languages that we use today are basically some kind
of Structured Programming. Whether we are talking about object-oriented language, functional languages or other paradigms.&lt;/p&gt;
&lt;p&gt;All of those languages usually provide some kind of control structures, in the form of looping &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;foreach&lt;/code&gt;. Subroutines
in the form of procedures, functions, (static) methods or however your language names them. Selection in the form of
&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt; or pattern matching.&lt;/p&gt;
&lt;p&gt;It is important to realize this, because you don't really need any of those if you have a goto statement. The goto statement
could implement all of those structures just through the use of goto. That is also the reason why i said at the beginning that
Structured Programming is still a very important idea up to the current days.&lt;/p&gt;
&lt;p&gt;But looking more deeply into it, you will probably ask. Well is that really so? Especially if you use a functional language
you will encounter that looping constructs are discouraged. Even in object-oriented language it is more and more discouraged.
Instead of typical &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;foreach&lt;/code&gt; loops in C# for example you will use LINQ, Java 8 introduced Stream as a more declarative
alternative.&lt;/p&gt;
&lt;p&gt;And yet Structured Programming is even more an important topic. The thing is. All those functional interfaces itself or LINQ or Stream
are basically Structured Programming brought to an extreme. Because the important point of Structured programming was not
the introduction of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, functions or blocks. The important idea was the general concept of eliminating
something powerful and provide more declarative and specific control structures instead.&lt;/p&gt;
&lt;h2&gt;Powerful vs. Specific&lt;/h2&gt;
&lt;p&gt;So let's reconsider, why was &lt;code&gt;goto&lt;/code&gt; harmful? &lt;code&gt;goto&lt;/code&gt; was a very powerful concept. It was so powerful that we basically don't need
any concepts of looping constructs, functions and so on. The problem that it raised was that we ended up with programs that was
hard to maintain. Without &lt;strong&gt;words&lt;/strong&gt; that describe specific problems we have problems to face growing programs and we as humans
have problems understanding what happens.&lt;/p&gt;
&lt;p&gt;With the introduction of &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, functions and so on we introduced specific concepts that are all possible to express
with goto. But giving them proper names we have it more easy to follow and understand the intention of our code. It is more
easier because every control structure was build for one specific task.&lt;/p&gt;
&lt;p&gt;But when we look at the looping constructs we basically see the same things happen. Why do we consider &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt; and so
on more and more harmful these days, and replace them with functional interfaces instead? Because those concepts are still to
powerful. For example what does a &lt;code&gt;foreach&lt;/code&gt; really express? Actually not much. It just describes a &lt;em&gt;go through all data&lt;/em&gt;. That is
a general purpose way. But what can you do with it? Well a lot of powerful things!&lt;/p&gt;
&lt;p&gt;For example you can can loop with &lt;code&gt;foreach&lt;/code&gt; through an array to find the smallest element or the biggest element. You can apply a function
to every element and change every element, or insert the applied element into a new array. You can filter an array by some condition.
You can loop through two arrays, combine them in various ways, do some calculations with every element and so on. Or in other words.
We can do a lot with such a simple constructs. &lt;code&gt;foreach&lt;/code&gt; is actually the same kind of a powerful concept like &lt;code&gt;goto&lt;/code&gt;.
And that is why we view them as &lt;em&gt;harmful&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Looking at functional interface, they really brought the concept of Structured Programming even further. Instead of just &lt;em&gt;looping&lt;/em&gt; we now
have even further separated the idea of looping. We have &lt;code&gt;List.min&lt;/code&gt;, &lt;code&gt;List.max&lt;/code&gt;, &lt;code&gt;List.map&lt;/code&gt;, &lt;code&gt;List.filter&lt;/code&gt;, &lt;code&gt;List.map2&lt;/code&gt;, &lt;code&gt;List.zip&lt;/code&gt;, ...
and so one just to name a view. All of those constructs are still basically just &lt;em&gt;looping&lt;/em&gt; constructs. But they are specialized looping
constructs that just do one specific thing.&lt;/p&gt;
&lt;h2&gt;So having powerful things is bad?&lt;/h2&gt;
&lt;p&gt;If we follow this thinking then it can lead to the idea that a programming language itself should not have any powerful concepts at all.
The less powerful a language is, the better. But actually it cannot be further from the truth. In fact it is quite the opposite, a language
absolute must provide as much powerful things as possible.&lt;/p&gt;
&lt;p&gt;The reason for that is that we need those powerful concepts to build our less powerful, more specific things. And in building more of those
constructs we achieve a better more clean code. A result of this is also that code will be shorter, easier to understand with less bugs.&lt;/p&gt;
&lt;p&gt;So we should aim for powerful constructs, and a language should provide those powerful constructs. But we should use them to build all our
more specific less powerful constructs. Or in other words, in programming we always should prefer the least powerful concept to implement
something.&lt;/p&gt;
&lt;p&gt;Sure you can implement filtering a &lt;code&gt;List&lt;/code&gt; with a &lt;code&gt;foreach&lt;/code&gt; loop. Go through every element, push it into a new &lt;code&gt;List&lt;/code&gt; based on some condition.
But why not abstract such a common task? &lt;code&gt;List.filter&lt;/code&gt; does exactly that. It is less powerful, because it just can filter, nothing more,
but we only need to provide the logic for filtering. We have less code after we have a construct like &lt;code&gt;List.filter&lt;/code&gt;. The intention is more clearer.
Reading a &lt;code&gt;List.filter&lt;/code&gt; is easier as to basically try to understand filtering through a series of commands expressed within a &lt;code&gt;foreach&lt;/code&gt;
loop.&lt;/p&gt;
&lt;h2&gt;Using the least powerful thing&lt;/h2&gt;
&lt;p&gt;When we follow these rule and thinking what Structured Programming is about, I think it leads to more readable code with all of
the benefit this usually have. Like higher maintainability, less bugs, in general less code because of reusable constructs. The
only thing we have todo is to identify our powerful constructs and try to come up with some alternative. In C# the usage of
&lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;foreach&lt;/code&gt; is such a thing. In F# besides using looping constructs itself also using direct recursion or using
&lt;code&gt;fold&lt;/code&gt; counts as powerful. Recursion is basically just looping, and fold is the abstraction of tail-recursive looping with
an accumulator. Watch out for them and either try to replace them with more specific constructs. Or build your own control
structs!&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.8thlight.com/uncle-bob/2015/09/23/a-little-structure.html&quot;&gt;Uncle Bob - A Little Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>

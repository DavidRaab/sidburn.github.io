<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://sidburn.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sidburn.github.io/" rel="alternate" type="text/html" /><updated>2019-08-25T21:34:11+02:00</updated><id>https://sidburn.github.io/feed.xml</id><title type="html">David Raab</title><subtitle></subtitle><author><name>David Raab</name></author><entry><title type="html">Wie Cannabis mein Leben veränderte</title><link href="https://sidburn.github.io/blog/2019/08/25/wie-cannabis-mein-leben-veraenderte" rel="alternate" type="text/html" title="Wie Cannabis mein Leben veränderte" /><published>2019-08-25T00:00:00+02:00</published><updated>2019-08-25T00:00:00+02:00</updated><id>https://sidburn.github.io/blog/2019/08/25/wie-cannabis-mein-leben-veraenderte</id><content type="html" xml:base="https://sidburn.github.io/blog/2019/08/25/wie-cannabis-mein-leben-veraenderte">&lt;p&gt;Heute möchte ich dir meine Geschichte erzählen wie Cannabis mein Leben verändert hat. Um eine Veränderung jedoch Begreifen zu können,
muss ich aber erst einmal Erzählen, wie mein Leben zuvor verlaufen ist. Oder genauer gesagt, was alles falsch gelaufen ist.&lt;/p&gt;
&lt;p&gt;Natürlich wirst du dich Fragen, was nun auf dich zukommt. Also hier einen kleiner Spoiler. Ich werde über meine psychische Erkrankung, die
Depression sprechen und wie diese mein Leben in gewisse Weise zerstört, und gleichzeitig gerettet hat.&lt;/p&gt;
&lt;h2&gt;Wie ist es Depressiv zu sein?&lt;/h2&gt;
&lt;p&gt;Zuerst einmal muss man verstehen, dass es nicht &quot;Die Depression&quot; gibt. Grob unterteilt man zwischen der unipolaren (man hat Schübe
wo es einem schlecht geht), bipolar (Wechsel von extrem schlecht zu extrem gute Phasen) und der chronischen Depression (Auch Dysthymie genannt).&lt;/p&gt;
&lt;p&gt;Letzteres, ist &quot;Meine Depression&quot;. Aber wie genau äußert sich eine chronische Depression?&lt;/p&gt;
&lt;p&gt;Nun, der Vorteil einer Dysthymie ist, das sie zuerst einmal nicht so ausgeprägt und stark ist wie bei den anderen Depressionen.
Man hat keine Phasen in der man komplett Selbstzerstörerisch handelt. Sich selber verletzt, oder Suizid Gedanken hat.&lt;/p&gt;
&lt;p&gt;Der Nachteil ist aber, dass sie zuerst einmal nicht so ausgeprägt und stark ist wie bei den anderen Depressionen.
Anstatt kurze Phasen zu haben, hat man stattdessen sehr schöne lange Phasen. Oder besser gesagt, eine einzige Phase. Bei mir ca.
15 Jahre (oder länger) in denen man wunderbar Lernt, sich langsam und schleichend zu zerstören, ohne das man es selber merkt. Bis zu
den Suizid Gedanken dauert es dann etwas länger, aber wenn sie dann endlich da sind, schocken diese einen auch gar nicht mehr. Ich denke,
sowas könnte man bestimmt als Win-Win Situation verkaufen.&lt;/p&gt;
&lt;p&gt;Aber zurück zum Thema. Dadurch das dieser Prozess so schleichend vorangeht, merkt man selber einfach gar nicht das man überhaupt krank ist.
Man hat einfach keine großen Gefühlsschwankungen mehr. Glück oder Freude sind über die Jahre hinweg für mich bedeutungslose Wörter geworden.&lt;/p&gt;
&lt;p&gt;Letztendlich lebt man im Sumpf der Negativität &amp;amp; Neutralität. Negativ da man unglücklich ist, keine Freude mehr spürt, man kann den Sinn
des eigenen Lebens nicht mehr sehen, und man wünscht sich nur noch, morgen nicht mehr aufzuwachen, und einfach tot zu sein.&lt;/p&gt;
&lt;p&gt;Natürlich fragt man sich wie sowas Neutral sein kann, sowas muss doch negativ sein, oder?&lt;/p&gt;
&lt;p&gt;Antwort: Naja, das Problem ist das ich ausschließlich solche Gedanken gehabt habe. 24 Stunden am Tag, 7 Tage die Woche, 365 Tage im Jahr,
und das ca. 15 Jahre lang. Wenn man nichts anderes kennt auser genau diesen Gedanken, dann wird das empfundene ewige Leid des Lebens zur
Normalität. Das was man als &quot;Neutral&quot; wahr nimmt, verschiebt sich also ins Negative.&lt;/p&gt;
&lt;p&gt;Wenn der Kopf mit einem also so leichte Spielchen treibt, dann kann man sich wohl vorstellen das dies auch kleinere Auswirkungen auf sein
Leben hat. Und oh man, da habe ich tolle Geschichten zu Erzählen!&lt;/p&gt;
&lt;p&gt;Und ich denke so 08/15 kram wie schlechten und wenig Schlaf durch Grübeln, Antriebslosigkeit, Soziale Isolation oder bei mir Heißhunger,
wodurch ich stetig zugenommen habe, der Verlust von immer mehr Hobbys, da sie einem nicht mehr Spaß machen. Naja, das ist ja pille palle.
Dieser 08/15 kram kann man überall nachlesen. Was ich erzählen möchte sind richtige Erlebnisse und die dazugehörigen Gedankengänge die man als
Depressiver durchlebt.&lt;/p&gt;
&lt;h2&gt;Der Abstieg&lt;/h2&gt;
&lt;p&gt;Da der Prozess bei mir so schleichend gewesen ist, kann ich keinen exakten Zeitpunkt nennen wann es angefangen hat. Ich weiß jedoch was
Auslöser waren, und das diese bereits in meiner Kindheit begonnen haben. So hatte ich in meiner Kindheit schon Gedankengänge vom Tod &amp;amp; Sterben.&lt;/p&gt;
&lt;p&gt;Hiermit meine ich aber nicht die normalen Gedankengänge die jeder als Kind durchlebt. Wie das die Eltern sterben, und man als Kind Alpträume
und Angst hat, seine Eltern zu verlieren.&lt;/p&gt;
&lt;p&gt;Nein, meine Gedankengänge drehten sich primär darum dass ICH Sterbe. Und hiermit meine ich nicht einfach nur schnell. Sondern langsam. Meist
dachte ich das ich eine schlimme Krankheit hätte. Zum Beispiel Krebs. Manchmal würde er mich über Jahre hinweg langsam töten, ein ander mal
hätte ich Sachen wie Bauchspeicheldrüsenkrebs, dass mich in 1 Woche tötet.&lt;/p&gt;
&lt;p&gt;Wieder andere male hätte ich schwerste Unfälle, jedoch nicht so schwer das ich sofort tot bin, aber so schwer das ich etliche Operationen,
Amputationen oder sonstiges über mich ergehen lassen müsste um mich zu retten. Meine Familie diesen Schrecken mitbekommt, ich jedoch dabei
zusehen kann wie jemand um mich trauert. Und ich dann zufrieden Sterben kann. Ein Schrei, nach Aufmerksamkeit.&lt;/p&gt;
&lt;p&gt;Solche Gedankengänge sind aber nicht &quot;mal&quot; vorgekommen, sondern solche Gedankengänge waren bei mir dominant. Sich mit solchen Gedanken Abends
ins Bett zu weinen, war Normalität für mich.&lt;/p&gt;
&lt;h2&gt;Der Superheld&lt;/h2&gt;
&lt;p&gt;Irgendwann habe ich dann angefangen immer komplexere Geschichten zu kreieren. Zuerst war ich einfach jemand der anderen Menschen das Leben
rettet, natürlich immer auf Kosten meines eigenen Leben.&lt;/p&gt;
&lt;p&gt;Mal springt man vor einem Auto um ein Kind das Leben zu retten. Mal rettete ich mit meinem Handeln ganze Gruppen. Irgendwann bin ich dann
ein Superheld gewesen, der meist durch Aufopferung und der letzten eigenen Kraft die ganze Menschheit rettet.&lt;/p&gt;
&lt;p&gt;Die Geschichten wurden dabei immer länger. Oder anders gesagt: Vor meinen endgültigen Tod, wie jede Geschichte letztendlich ausging. Musste
ich meist so viel Schmerz, Erniedrigung und jegliche Art der Schande über mich ergehen lassen. Die Geschichten wurden so komplex, das andere
sogar erst nach meinem Tod begriffen haben, das ich durch meinen Tod, etwas gutes bewirkt habe. Letztendlich war der Tod am ende jeder
Geschichte nur eins für mich. Die Erlösung vom Schmerz.&lt;/p&gt;
&lt;p&gt;Diese Geschichten hat natürlich einen Zweck. Auf der einen Seite habe ich versucht meinen inneren Schmerz einen Sinn zu geben. Und auf
der anderen Seite werden solche Geschichten unpersönlicher wenn man anfängt über sich als Superheld nachzudenken. In Gewisser weiße war
dies eine Flucht in die Phantasie-Welt. Ich glaube anders hätte ich es wohl auch nicht ausgehalten.&lt;/p&gt;
&lt;h2&gt;Lebensmüde Gedanken?&lt;/h2&gt;
&lt;p&gt;Im ungefähren alter von 20 Jahren, haben dann bei mir die sogenannten Lebensmüden Gedanken angefangen. Der Unterschied zu Suizid Gedanken
ist, dass man hier passiv stirbt, anstatt das man sich aktiv selbst tötet.&lt;/p&gt;
&lt;p&gt;Wenn ich also Beispielsweise über eine Straße gelaufen bin, dann erschienen in meinen Gedanken Bilder das ich vom Auto angefahren werde.
Wenn ich Abends alleine gelaufen bin, hatte ich ständige Angst ich werde verfolgt und getötet. Wenn ich unter einer Brücke gelaufen bin,
dann dachte ich etwas fällt von der Brücke, und erschlägt mich. Wenn ich mit der Bahn gefahren bin, dann dachte ich die Bahn entgleist
und ein Unglück würde passieren. In absolut allem was mich umgibt, habe ich eine Bedrohung für mein Leben gesehen.&lt;/p&gt;
&lt;p&gt;Diese Gedanken haben mein Verhalten jedoch dahin verändert, dass ich allgemein Vorsichtiger wurde. Öfters schauen bevor ich über die Straße
laufe. Das ich verfolgt &amp;amp; getötet werde, oder etwas mich erschlägt habe ich durch Logik bekämpft indem ich mir sagte das solche Tode natürlich
passieren können, sie jedoch einfach selten und unwahrscheinlich sind. Ich wurde zu Mr. Spock.&lt;/p&gt;
&lt;p&gt;Und naja, wenn es doch passiert wäre. In dem Fall wäre es mir egal gewesen, den der Tod war für mich die Erlösung. Genau das habe ich mir
in meinen Geschichten ja eingeredet.&lt;/p&gt;
&lt;p&gt;Heute sehe ich darin aber auch, dass ich irgendeinen drang hatte weiter zu Leben. Ein innerer Kampf wo ich versuchte mich gegen diese Gedanken
zu wehren. Ich hätte sonst ja auch über die Straße laufen können und dabei unvorsichtiger werden können. Aber irgendetwas in meinen inneren
wehrte sich dagegen.&lt;/p&gt;
&lt;p&gt;Was dies genau war? Ich weiß es nicht. Vielleicht war es der normale Überlebens trieb eines Menschen. Vielleicht etwas anderes. Vielleicht
sollte ich diese Frage nochmal versuchen zu ergründen. Aber ehrlich gesagt, mir ist es auch egal geworden, da ich nicht mehr mit meinen
Gedanken ständig in der Vergangenheit stecken möchte.&lt;/p&gt;
&lt;p&gt;Der drang zu überleben war da, dafür empfinde ich einfach nur Dankbarkeit.&lt;/p&gt;
&lt;h2&gt;Apathie&lt;/h2&gt;
&lt;p&gt;Bisher muss ich aber immer noch eine Sache betonen, sollte dies noch immer nicht klar sein. Bei allem was ich bisher geschrieben habe, war
mir nicht klar das ich unter einer Depression leide. Nicht nur das ich nicht wusste das ich nicht krank war. Nein, ich dachte ich wäre Kern
Gesund, dass es mir gut geht, und das alles was ich bisher erzählt habe das normale Leben ist.&lt;/p&gt;
&lt;p&gt;Noch heute kann ich mich jedoch an einen einzigen Moment erinnern als ich ungefähr 25 war, als mir die Depression bewusst wurde. Ich stand
in meinem Zimmer und die ersten Suizid Gedanken kamen mir hoch. Ich hatte zwar keinen Konkreten Plan mich umzubringen, jedoch fing ich an über
den Suizid nachzudenken.&lt;/p&gt;
&lt;p&gt;Das erste mal war ich geschockt. Mein Gedanke: Oh mein Gott, worüber denkst du den jetzt nach? Weg mit diesen Gedanken! Ich will die nicht.
Sowas muss ich unterbinden. Keine negativen Gedanken mehr. Ich bin doch nicht Depressiv und will nicht depressiv werden.&lt;/p&gt;
&lt;p&gt;Von diesem Moment an dachte ich mir das ich solche Gefühle abschalten muss. Bloß nichts mehr negatives an sich heran lassen. Sich nicht mehr
aus der Bahn bringen lassen. Gleichgültig zu allem werden. Ich wurde Apathisch.&lt;/p&gt;
&lt;p&gt;Mit dieser Entscheidung wurde jedoch alles nur noch schlimmer.&lt;/p&gt;
&lt;p&gt;Das Gefühlsleben ist wie das Yin &amp;amp; Yang. Schöne Gefühle kann es nur geben, wenn man auch die für sich negativ assoziierten Gefühle zulässt. Man
kann sich nicht entscheiden nur die negativen Gefühle auszublenden. Entweder bekommt man das ganze Programm, oder gar nichts.
Ich entschied mich, für letzteres.&lt;/p&gt;
&lt;h2&gt;Selbstständigkeit&lt;/h2&gt;
&lt;p&gt;An dieser Stelle mache ich einen Sprung vorwärts, bis zum Jahre 2014 (da war ich dann 31 Jahre alt) als ich meine Selbstständigkeit als
Indie-Game-Developer begonnen hatte. Natürlich war ich zu diesem Zeitpunkt immer noch krank, nicht nur das, ich dachte immer noch das ich Gesund wäre.&lt;/p&gt;
&lt;p&gt;Rückblickend kann ich das gar nicht mehr begreifen. Über die Jahre hinweg hat sich meine Situation nur noch verschlimmert. Ich habe mich über
die Jahre hinweg immer mehr Isoliert. Meine Isolation ging soweit das ich regelrecht Angst hatte draußen gesehen zu werden, und mit irgendeinen Menschen zu sprechen.&lt;/p&gt;
&lt;p&gt;Meine Sucht die mich am Leben gelassen hat, war wohl die Sucht immer besser zu werden. Und das im Bezug auf meinem Job gesehen. Ich habe immer
mehr Bücher gelesen über Programmierung und die verschiedensten Themen dazu. Ich habe 6 Programmiersprachen gelernt, habe unzählige Bücher
über die diversen Themen gelesen. Mein Ziel war es auf diesem Feld so gut und erfolgreich zu werden wie es nur geht. Und wenn ich dann irgendwann
mal den Erfolg hätte den ich mir gewünscht habe, dann würde ich irgendwann Glücklich sein.&lt;/p&gt;
&lt;p&gt;Wie naiv von mir. Heute begreife ich das man zuerst einmal Glücklich sein muss, nur aus dieser Kraft heraus kann man irgendetwas im Leben erreichen
ohne sich dabei selbst zu zerstören. Ebenfalls habe ich mittlerweile Begriffen das Glücklich sein kein Zustand ist den man erreicht, sondern
man entscheidet sich einfach dafür.&lt;/p&gt;
&lt;p&gt;Aber wie sah eigentlich mein Alltag mittlerweile aus?&lt;/p&gt;
&lt;p&gt;Durch eine Förderung und durch Selbst Erspartes Geld, konnte ich mich ungefähr 1,5 Jahre selbst finanzieren. Jedoch ist es nicht so gewesen
das ich Gesund war. Meine Situation hatte sich so verschlimmert, dass ich im Grunde gar nicht mehr Arbeitsfähig war. Nicht nur war ich nicht Arbeitsfähig,
ich habe im Grunde meinen ganzen Alltag nicht mehr auf die Reihe bekommen.&lt;/p&gt;
&lt;p&gt;Selbst unheimlich wichtige Sachen wie die Zahlung meiner Krankenkasse habe ich nicht mehr geregelt bekommen. Was dann auch irgendwann dazu führte
das mein Konto gepfändet wurde. Dies führte dazu das ich meine Miete nicht mehr bezahlen konnte. Mir der Strom abgestellt wurde, und ich später
irgendwann mit einer Zwangsräumung aus meiner Wohnung geflogen bin. Aber eins nach dem anderen.&lt;/p&gt;
&lt;p&gt;Da ich nur noch Angst hatte Menschen zu begegnen, war es mir selbst unheimlich schwierig dinge zu erledigen, wie den Müll heraus zu bringen.
Das Ergebnis war: Stapelnde Müllsäcke in der Küche, und irgendwann dann auch Maden die durch die Wohnung krochen.&lt;/p&gt;
&lt;p&gt;Wann immer dies passierte räumte und säuberte ich danach alles. Dies kostete mich jedoch unheimlich viel Kraft. Nicht nur kraft, ich ekelte
mich vor mir selber. Habe ich daraus aber gelernt? Nein, immer und immer wieder wiederholte sich dieser Prozess. Und jedes mal wenn wieder die
Maden da waren, erzählte ich mir was für ein Versager, Nichtsnutz und wie widerwärtig ich war. Ich hatte nur noch Selbsthass für mich.&lt;/p&gt;
&lt;p&gt;Ich verstand auch nicht mehr warum ich so handelte. Nicht falsch verstehen, zu keinem Zeitpunkt dachte ich das sowas normal war. Ganz im Gegenteil,
ich Wuste wie abartig ich war, genau deswegen konnte ich mich nur noch selber Hassen das ich so Grundelementare dinge wie den Müll heraus
bringen nicht mehr hinbekomme.&lt;/p&gt;
&lt;p&gt;Als mir mein Geld dank Kontopfändung ausging musste ich natürlich noch etwas Essen, so fing ich an Dinge zu verkaufen. Hauptsächlich
Spiele-Konsolen und Videospiele. Da ich nicht Wuste wie lange ich mit dem Geld auskomme, musste ich schauen das Geld so effizient wie möglich auszugeben.&lt;/p&gt;
&lt;p&gt;Ich machte auch immer wieder Pausen und fing an mehre Wochen gar nichts zu essen. Die längste Zeit die ich mal gar nichts gegessen
hatte umfasste ca. 1 Monat. Manchmal aß ich einen Tag, und machte dann wieder mehrere Tage Pause.&lt;/p&gt;
&lt;p&gt;Als mir der Strom abgeschaltet wurde, naja spätestens da hätte ich eigentlich reagieren müssen. Okay, ich hätte schon viel
früher reagieren müssen, aber die Krankheit ließ mich nicht. Aber spätestens als der Strom weg war, und ich ja ein
Indie-Game-Developer war, der am Computer Video-Spiele programmieren wollte. Spätestens da hätte ich doch eigentlich
reagieren sollen!? Aber ich tat es nicht!&lt;/p&gt;
&lt;p&gt;Stattdessen saß ich 3 Monate ohne Strom in meiner Wohnung und lies mir Bücher über Computer Algorithmen durch. Mein Gedanke war:
Hauptsache ich lenke mich irgendwie ab, bitte nicht mit meinen Problemen beschäftigen. Wenn ich das tue, dann drehe ich noch durch.&lt;/p&gt;
&lt;p&gt;Ich hätte schon sehr viel früher meine Selbstständigkeit aufgeben sollen und dann zum Jobcenter gehen sollen. Jedoch konnte
ich es nicht ertragen schon wieder ein Versager zu sein, der es nicht schafft seinen größten Traum zu verwirklichen. Also tat
ich gar nichts. Und machte damit alles nur noch schlimmer.&lt;/p&gt;
&lt;p&gt;Irgendwann war natürlich alles verkauft, was ich noch irgendwie zu Geld machen konnte, und erst als gar kein Ausweg mehr da
war und ich gar kein Geld mehr hatte, erst dann gab ich meinen Traum auf, und ging zum Jobcenter.&lt;/p&gt;
&lt;p&gt;Als ich dann das erste mal zum Jobcenter ging, und dort meine Geschichte erzählte sagte mir jeder das er diese Geschichte
gar nicht glauben könne. Man erzählte mir das dies eine Depression sein könnte. Was war meine Antwort darauf?&lt;/p&gt;
&lt;p&gt;Waaaas? Ich bin doch nicht Depressiv!&lt;/p&gt;
&lt;p&gt;Da ich dies jedoch von mehreren Seiten hörte, fing ich das erste mal an mich über diese Krankheit zu informieren. Und tatsächlich,
ich fand mich in allen Beschreibungen wieder. Dies hob aber nicht unbedingt meine Stimmung, sondern verschlechterte Sie nur noch.&lt;/p&gt;
&lt;p&gt;Letztendlich lief es nur auf eine Sache hinaus. Ich schaffte es auch nicht die unterlagen die vom Jobcenter benötigt wurden
auszufüllen. Ich verlor auch diese Grundlage wieder, und der Termin zur Zwangsräumung rückte immer Näher. Ein Termin den ich
erfolgreich schaffte aus dem Weg zu gehen, und mich nicht einmal dazu bewegte nach einer neuen Unterbleibe zu suchen.&lt;/p&gt;
&lt;p&gt;Einen Tag vor meiner Zwangsräumung schaffte ich es dann irgendwie um Hilfe zu bitten. Natürlich war niemand mehr da der
etwas von mir hören wollte. Mein engster Freund erzählte mir das die Freundschaft erkaltet war, meine Mutter erzählte
mir das ich verschwinden soll, und was ich ihr den für schreckliche Dinge antue.&lt;/p&gt;
&lt;p&gt;Zum ersten mal in meinen Leben dachte ich nicht mehr darüber nach OB ich mir das Leben sollte.
Ich dachte darüber nach WIE ich es mir nehme.&lt;/p&gt;
&lt;p&gt;Meine Wahl fiel darauf einfach so viele Schlaftabletten zu schlucken wie es nur ging. Das Problem: Ich hatte keine,
und auch kein Geld welche zu kaufen. Zum Glück, sonst würde ich diesen Text hier nicht schreiben.&lt;/p&gt;
&lt;p&gt;Mich selber verletzen, Pulsadern aufschneiden? Davor hatte ich zum Glück zu viel Angst. Erschießen wäre aber
okay gewesen, aber wie an eine Waffe kommen, ohne Geld?&lt;/p&gt;
&lt;h2&gt;Der Aufschwang&lt;/h2&gt;
&lt;p&gt;Zum Glück wurde ich aber nicht obdachlos. Mit sehr viel Glück fand ich noch einen Platz in einem Männerheim
das mich aufnahm. Ich musste zwar so gut wie alle meine Habseligkeiten zurück lassen, aber zumindest hatte ich einen
Platz zum Schlafen und ein Dach über den Kopf.&lt;/p&gt;
&lt;p&gt;Beim Aufnahmegespräch war es das erste mal das ich offener über meine Geschichte erzählte. Ich brach dabei
in Tränen aus und realisierte das ich alleine gar nicht mehr Überlebensfähig war. Zum ersten mal realisierte
ich wirklich wie schlecht es mir ging, weil ich meine negativen Gefühle zu ließ. Dies brachte mir jedoch im nachhinein
eher Kraft meine Probleme anzugehen, und nicht mehr vor Ihnen weg zu rennen.&lt;/p&gt;
&lt;p&gt;Ich meldete mich bei einer Tagesklinik und machte eine drei Monatige Therapie durch. Mir wurde Setralin (ein
Antidepressiva) verschrieben, das auch ziemlich rasch eine Besserung zeigte. Ich lernte neue Menschen kennen und neue Freunde.&lt;/p&gt;
&lt;p&gt;Dieses kurze hoch war aber nicht von Dauer. Irgendwann ließ auch die Wirkung von Setralin nach, ich konnte nicht mehr
schlafen, war erschöpft, und hatte keinerlei Antrieb mehr. Mein Arzt änderte nichts an der Medikamentation, und ich brach dann
irgendwann die Behandlung vollständig ab. Dies führte zu einer Woche Bett mit Schüttelfrost und Fieber und schlief dabei ca. 20 Stunden am Tag.&lt;/p&gt;
&lt;p&gt;Nach dieser Woche Entzug, ging es mir jedoch genauso gut/schlecht wie mit Setralin. Mein Arzt verschrieb mir daraufhin
noch andere Antidepressiva. Hauptsächlich quälten mich Schlafprobleme. Sprich mir fiel es sehr schwer einzuschlafen, und wenn
ich dann mal schlief, dann wie ein Toter, und das sehr lange. Doch vollkommen egal welches Medikament ich ausprobierte,
geholfen hat letztendlich keins.&lt;/p&gt;
&lt;p&gt;Da ich bis zu diesem Zeitpunkt neue Menschen kennen gelernt hatte, darunter auch einige Cannabis Nutzer, kam mir irgendwann der
Gedanke es einfach mit Cannabis auszuprobieren. Ich wusste zuvor schon das es auch bei Schlafproblemen helfen kann, oder das
es Ansätze gibt es könnte bei Depressionen helfen.&lt;/p&gt;
&lt;p&gt;Ich bin an Cannabis heran gegangen das es mir helfen wird. Angst vor negativen Auswirkungen hatte ich keine. Und ich denke
das ist schonmal der erste wichtige Schritt den man als Cannabis Nutzer haben sollte. Psychedelische Drogen wie Cannabis
(LSD, Psilocybin) wirken nämlich anders wie z.B. Alkohol, Nikotin, Kokain, Ecstasy etc. Cannabis macht nicht einfach nur
glücklich, ganz im Gegenteil, es verstärkt einfach alles. Man nimmt Gefühle stärker war, Emotionen sind verstärkt, man nimmt
Musik intensiver war, man hat einen besseren Geruchs &amp;amp; Geschmackssinn.&lt;/p&gt;
&lt;p&gt;Ein Cannabis-Rausch entfaltet sich ganz nachdem welche Erwartungen man hat, welche Gedanken man hat, und wie die aktuelle
Gefühlslage ist. Aus diesem Grund empfehlen etliche Menschen kein Cannabis bei Depressionen zu nehmen.&lt;/p&gt;
&lt;p&gt;Warum habe ich es trotzdem getan? Warum hatte ich keine Angst?&lt;/p&gt;
&lt;p&gt;Wenn man so wie ich schon als kleines Kind ständig über den Tod am grübeln ist. Und eine so lange Geschichte von Lebensmüden Gedanken hat, dann …&lt;/p&gt;
&lt;p&gt;A) Ist man ohnehin irgendwann abgestumpft, und wenig Sachen können einen Schockieren.&lt;br /&gt;
B) Wäre es mir auch egal wenn ich gestorben wäre. (Was bei Cannabis ohnehin nicht passiert, es hätte aber meine Suizid Gedanken verstärken können, und das war mir egal)&lt;/p&gt;
&lt;h2&gt;Der Umgang mit Cannabis&lt;/h2&gt;
&lt;p&gt;An dieser Stelle wollte ich übrigens meinen Cannabis Konsum beschreiben, und welche Resultate dieser hatte. Als ich beim Meditieren
unter Cannabis über das Thema nachdachte lernte ich wie komplex dieses Thema ist.&lt;/p&gt;
&lt;p&gt;Das worüber ich also zuerst schreiben muss ist eher, wie nutze ich Cannabis, wie wirkt es, wie schaut die Häufigkeit aus,
Und wie geht man damit sinnvoll um? Tatsächlich ist jede Frage für sich schon ein eigener Artikel wert. Jedoch kann ich all
das nicht hier unterbringen. Daher versuche ich das wichtigste im groben schnellverlauf zu beschreiben. Ausführlichere Artikel
zu den einzelnen Themen schreibe ich später.&lt;/p&gt;
&lt;p&gt;Zuerst halte ich es für wichtig auf den Drogenmischkonsum mit Tabak einzugehen. Nikotin und THC haben eine gegenseitige Wechselwirkung.
Nikotin schwächt die Wirkung des Cannabis, und Cannabis stärkt die Wirkung des Nikotin. Wer beides mischt erlebt eigentlich eher eine
sehr starke Nikotin Wirkung, den sogenannten Nikotin-Flash. Da ich keinerlei Tabak rauche, und auch nicht vor habe Nikotin abhängig
zu werden, rauche ich nicht mit Tabak. Die Tatsache das ich mich jedes mal übergeben muss wenn ich mit Tabak rauche, hat natürlich
auch einen Grund daran.&lt;/p&gt;
&lt;p&gt;Entweder rauche ich Cannabis pur, oder aber in Kombination mit Damiana (bekommt man im Reformhaus).&lt;/p&gt;
&lt;p&gt;Damiana &amp;amp; Cannabis hat eine eigene Wechselwirkung. Tatsächlich verstärken sich beide Pflanzen gegenseitig. Damiana verstärkt hierbei
vor allem die psychedelische Wirkung des Cannabis stark. Genau die ist es aber auch, nach der ich Suche!&lt;/p&gt;
&lt;p&gt;Ich schrieb das ich über das Thema Meditativ nachdenke. Und denke das ist jetzt der richtige Moment dies zu erläutern. Die
Meisten Menschen verstehen darunter das man für sich selber ist, seine Gedanken los lässt, und einfach nur da ist. In Gewisser
weiße tue ich das auch. Ich komme zur Ruhe, ich entspanne, jedoch ist das Ziel nicht seine Gedanken zu unterbinden, sondern sie
Schweifen zu lassen. Man fällt in einem Modus der Konzentration und des Nachdenkens. Man macht es sich automatisch bequem, schließt
oftmals die Augen, und ist in einem Modus einen Film vor sich zu sehen.&lt;/p&gt;
&lt;p&gt;Es geht auch nicht darum seine Gedanken zu unterbinden, sondern seinen Gefühlen und Gedanken freien lauf zu lassen. Durch die
Entspannung kommt man in einem Modus wodurch man sich selber gut analysieren kann. Gleichzeitig ist man jedoch hoch-emotional.
Tatsächlich würde ich diesen Bewusstseinszustand als ein Wach-Traum beschreiben. Man ist wach, kann logisch und analytisch denken.
Und gleichzeitig ist man in einem Zustand wo man Traumartig Bilder vor sich sieht, und Erlebnisse erleben kann, die sich unheimlich
real anfühlen.&lt;/p&gt;
&lt;p&gt;Mit unheimlich real meine ich nicht das man Halluzinationen hat, oder reale Bilder vor sich sieht. Hiermit meine ich vor allem
die emotionale Ebene. Ich kann dir Dinge erzählen die ich im Rausch durchlebt habe. Du wirst diese Dinge vielleicht Logisch
nachvollziehen können, aber nie wirklich emotional nachvollziehen können. Stelle es dir wie ein Bungee Jump vor. Du kannst dir
noch so viele Videos dazu anschauen, und noch so viele Erzählungen dazu durchlesen. Verstehen wirst du es erst, wenn du es
selber durchlebst.&lt;/p&gt;
&lt;p&gt;Mit diesem Verständnis werde ich dir nun von meinen ersten Horror-Trip erzählen. Ich werde nicht jeden Gedanken und jede Erkenntnis
erzählen die ich aus den verschiedenen Themen gewonnen habe. Ich beschreibe den Ablauf jedoch grob, damit du siehst was ich mit Gedanken
schweifen meine.&lt;/p&gt;
&lt;h2&gt;Der Horror-Trip&lt;/h2&gt;
&lt;p&gt;Ich weiß gar nicht mehr wie ich auf das Thema gekommen bin. Vielleicht war es ein Thema das Unterbewusst in mir schlummerte. Vielleicht schaute
ich gerade ein Film oder ich habe etwas gelesen, ich weiß es nicht mehr. Jedoch beginnen so die meisten Trips. Ich schaue einen Film, beschäftige
mich mit einem Thema, oder sage mir vorher schon bewusst das ich über bestimmte Themen Nachdenken möchte, meistens klappt das.&lt;/p&gt;
&lt;p&gt;Jedoch erzwinge ich nichts, eher im Gegenteil, ich lasse alles auf mich zukommen. Mir kommt es manchmal vor das ich das Tor zum Unterbewusstsein
damit geöffnet habe. All das was ich über Jahre gelernt habe in mich zu verschließen kommt nun hoch. Da man hoch-emotional ist, ist so etwas jedoch
nicht automatisch schön. Beim Erleben meiner Trips mache ich Notizen, entweder am PC, Smartphone oder in einen Buch, je nachdem was zur Verfügung
steht, und worauf ich gerade Lust habe.&lt;/p&gt;
&lt;p&gt;Ich fing an über Religion nachzudenken. Tatsächlich formte ich aus, das Glauben, Religion und Institutionen wie die Kirche für mich drei
unterschiedliche Dinge sind. Ich persönlich lernte dabei auch, dass ich nur den Glauben als etwas positives ansehen kann. Doch wofür stellt
man sich eigentlich die Frage nach dem Glauben?&lt;/p&gt;
&lt;p&gt;Ging es um den Tod, und was danach kommt? Aus meiner Sicht gibt es auf diese Frage keine Antwort. Weshalb ich auch Agnostiker bin. Wenn es eine
Antwort auf diese Frage geben sollte, dann werden wir diese Antwort erst im Augenblicke unseres Todes Erfahren. Agnostiker zu sein heißt jedoch
nicht das man alles andere ablehnt. Viel mehr heißt es für mich das ich jede Theorie hinterfrage, mir Vorstelle sie würde stimmen, und daraus
Schlüsse ziehe was sein könnte.&lt;/p&gt;
&lt;p&gt;Ich saß bequem auf den Stuhl, und hatte meine Augen zu, und war sehr vertieft in den Gedanken über den Tod. Ich stellte mir vor das ich bereits
Tod sein würde und in einem Sarg liegen würde, ich würde mich wahrnehmen, und mein Bewusstsein wäre noch vollständig da. Daher, ich könnte noch
Denken und Fühlen. Jedoch ist mein Körper tot, und ich könnte Ihn nicht mehr Bewegen.&lt;/p&gt;
&lt;p&gt;An der Stelle möchte ich Erwähnen das wenn man an einem Gott (oder mehrere) glaubt, und glaubt der Mensch hat eine Seele und lebt nach dem Tod
weiter. Die Idee bei vollem Bewusstsein im Sarg zu liegen durchaus real sein kann! Nur ein Atheist der nicht an ein Leben nach dem Tod glaubt
und das als Absolut sieht, sollte nicht in der Lage sein so etwas nachvollziehen zu können. Als Agnostiker kann ich mich übrigens in beide
Situationen hinein versetzen!&lt;/p&gt;
&lt;p&gt;Ich lag also im Sarg, konnte mich nicht mehr bewegen, und war nun Tod. Langsam merkte ich das mir unbequem wurde. Meine Atmung wurde schneller,
ich fing an Angst zu spüren. Mein Magen zog sich zusammen, und alle Muskeln in meinen Körper fingen an sich zu verkrampfen.&lt;/p&gt;
&lt;p&gt;Dann dachte ich darüber nach was als nächstes passieren würde. Die Bakterien auf und in meinen Körper würden anfangen mich zu essen. Meine
Organe würden sich zersetzen und ich fing an all dieses Entsetzen zu spüren. Ich sah auf meinen Körper Millionen von Bakterien die nun anfangen
würden mich zu fressen.&lt;/p&gt;
&lt;p&gt;Alle Insekten in der Erde wo ich vergraben war, würden wahrnehmen das etwas essbares in der Nähe ist. Käfer, Würmer und Maden würden sich auf
den Weg zu mir machen. Zum ersten mal Begriff ich was eine Fressorgie ist. Sie findet immer statt, wann immer ein Mensch stirbt.&lt;/p&gt;
&lt;p&gt;Die Gefühle in mir wurden dabei so stark das ich mich kaum mehr halten konnte. Eigentlich hätte ich die ganze Zeit schreien können, jedoch war
ich dabei so verkrampft das ich dies nicht konnte. Ein so großes Gefühl von Angst und Ekel habe ich mein ganzes Leben noch nie gespürt.&lt;/p&gt;
&lt;p&gt;An diesem Punkt wurde mir das aber zu viel und ich fing an mich wieder zu normalisieren. Zwar brauch ich dafür ein paar Minuten, jedoch kann
ich mich ziemlich gut kontrollieren, wenn ich es möchte. Den genau das habe ich während meiner Depression gelernt! Das was ich vorher nicht
konnte, war das Gegenteil, meine Gefühle freien lauf zu lassen.&lt;/p&gt;
&lt;p&gt;Mein Trip ging an der Stelle noch viel weiter. Jedoch nicht im negativen Sinne. Das erste mal in meine Leben war ich dankbar das Ich Lebe.
Ich wurde danach von unheimlich positive Gedanken und Glücksgefühle überströmt. Ich fing an mir alles aufzuschreiben und seit dem mein Leben
umzugestalten.&lt;/p&gt;
&lt;p&gt;Die allererste Umgestaltung war das ich mich endgültig dazu entschied mich Vegan zu ernähren. Denn der Spaß am Fressen anderer Lebewesen ist mir
seit diesem Erlebnis doch etwas unangenehm geworden.&lt;/p&gt;
&lt;h2&gt;Cannabis &amp;amp; Depressionen&lt;/h2&gt;
&lt;p&gt;Mittlerweile sehe ich mich von meiner Depression als geheilt an. Dieser Horror-Trip hat mir wahrhaftig die Augen geöffnet. Seit diesem
Erlebnis scheint es mir das meine Apathie vollkommen weg gesprengt wurde. Mir kommt es vor das Mauern die mich vorher hinderten zu fühlen
weg sind und ich diese Gefühle akzeptieren kann.&lt;/p&gt;
&lt;p&gt;Stattdessen höre ich viel mehr auf meine Gefühle. Analysiere diese, und Frage mich was mein Körper mir sagen möchte, und ob das Gefühl
das ich nun Erlebe gerechtfertigt ist, oder es ein schlecht antrainiertes Gefühl ist dass ich überdenken muss.&lt;/p&gt;
&lt;p&gt;Wichtig ist jedoch zu verstehen das der Rausch Zustand das ist, was dazu führt das ich mein Leben, meine Gefühle, meine Gedanken und
meine Zukunft neu überdenke. Es ist nicht die Substanz selber die irgendwelche Symptome bekämpft wie es Antidepressiva tun.&lt;/p&gt;
&lt;p&gt;Daher muss ich auch nicht ständig Cannabis konsumieren. Ich konsumiere auch zum Genuss, aber mittlerweile bin ich eher so etwas was
man als Wochenende-Konsument bezeichnet. Müsste ich Cannabis in irgendeiner Form täglich zu mir führen, würde ich mich auch nicht als geheilt ansehen.&lt;/p&gt;
&lt;p&gt;Natürlich heißt das nicht das all meine Lebensprobleme die durch meine Depression entstanden sind auf einmal gelöst sind. Jedoch
habe ich nun endlich die nötige Kraft gefunden, diese Probleme anzugehen, und daran zu Arbeiten.&lt;/p&gt;
&lt;h2&gt;Warum ich das hier Schreibe?&lt;/h2&gt;
&lt;p&gt;Ich schreibe das ganze weil ich näher bringen möchte wie ein Depressiver denkt. Jedoch gilt das was ich geschrieben habe nicht für
alle Depressive. Nicht jeder denkt so wie ich. Jede Depression ist individuell.&lt;/p&gt;
&lt;p&gt;Übrigens ist meine ganze Geschichte über meine Gefühle und meine Lebensgeschichte ein Produkt dessen, weil ich im Cannabis-Rausch
meine Vergangenheit durcherlebt habe und mich so selber Analysiert habe. Sonst hätte ich diesen ganzen Artikel wohl nicht schreiben können.&lt;/p&gt;
&lt;p&gt;Weiterhin will ich das Stigma über Cannabis brechen. Und natürlich bin ich für eine Legalisierung von Cannabis (tatsächlich sogar ALLER Drogen).&lt;/p&gt;
&lt;p&gt;Manche mögen sich Fragen wie ich so offen meine Lebensgeschichte Erzählen kann. Die Antwort dazu einfach. Ich habe vorher nicht gelebt.
Ich war Depressiv und krank. Mein eigentliches Leben hat erst jetzt begonnen. Für mich beginnt nun ein neuer Abschnitt in meinen Leben,
und ich werfe all den Ballast den ich durchlebt habe einfach über Bord.&lt;/p&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Cannabis hat mir gezeigt das wenn ich Glück &amp;amp; Liebe spüren möchte, ich alle Emotionen zulassen muss, auch die &quot;schlechten&quot;. Abschotten
nur von den negativen Gefühlen, ist nicht möglich. Entweder durchlebt man all seine Gefühle, oder gar keine.&lt;/p&gt;
&lt;p&gt;Und so richtig, gibt es eigentlich gar keine negativen Gefühle. In Zukunft werde ich weitere Geschichten, Ideen, Denkanstöße
und vieles andere publizieren.&lt;/p&gt;
&lt;p&gt;Wenn Ihr Fragen oder Kritik habt, so ist diese gerne Gesehen.&lt;/p&gt;
&lt;p&gt;Danke, das du bis hier gelesen hast.&lt;/p&gt;</content><author><name>David Raab</name></author><category term="cannabis" /><category term="depressionen" /><category term="vegan" /><summary type="html">Heute möchte ich dir meine Geschichte erzählen wie Cannabis mein Leben verändert hat. Um eine Veränderung jedoch Begreifen zu können, muss ich aber erst einmal Erzählen, wie mein Leben zuvor verlaufen ist. Oder genauer gesagt, was alles falsch gelaufen ist. Natürlich wirst du dich Fragen, was nun auf dich zukommt. Also hier einen kleiner Spoiler. Ich werde über meine psychische Erkrankung, die Depression sprechen und wie diese mein Leben in gewisse Weise zerstört, und gleichzeitig gerettet hat. Wie ist es Depressiv zu sein? Zuerst einmal muss man verstehen, dass es nicht &quot;Die Depression&quot; gibt. Grob unterteilt man zwischen der unipolaren (man hat Schübe wo es einem schlecht geht), bipolar (Wechsel von extrem schlecht zu extrem gute Phasen) und der chronischen Depression (Auch Dysthymie genannt). Letzteres, ist &quot;Meine Depression&quot;. Aber wie genau äußert sich eine chronische Depression? Nun, der Vorteil einer Dysthymie ist, das sie zuerst einmal nicht so ausgeprägt und stark ist wie bei den anderen Depressionen. Man hat keine Phasen in der man komplett Selbstzerstörerisch handelt. Sich selber verletzt, oder Suizid Gedanken hat. Der Nachteil ist aber, dass sie zuerst einmal nicht so ausgeprägt und stark ist wie bei den anderen Depressionen. Anstatt kurze Phasen zu haben, hat man stattdessen sehr schöne lange Phasen. Oder besser gesagt, eine einzige Phase. Bei mir ca. 15 Jahre (oder länger) in denen man wunderbar Lernt, sich langsam und schleichend zu zerstören, ohne das man es selber merkt. Bis zu den Suizid Gedanken dauert es dann etwas länger, aber wenn sie dann endlich da sind, schocken diese einen auch gar nicht mehr. Ich denke, sowas könnte man bestimmt als Win-Win Situation verkaufen. Aber zurück zum Thema. Dadurch das dieser Prozess so schleichend vorangeht, merkt man selber einfach gar nicht das man überhaupt krank ist. Man hat einfach keine großen Gefühlsschwankungen mehr. Glück oder Freude sind über die Jahre hinweg für mich bedeutungslose Wörter geworden. Letztendlich lebt man im Sumpf der Negativität &amp;amp; Neutralität. Negativ da man unglücklich ist, keine Freude mehr spürt, man kann den Sinn des eigenen Lebens nicht mehr sehen, und man wünscht sich nur noch, morgen nicht mehr aufzuwachen, und einfach tot zu sein. Natürlich fragt man sich wie sowas Neutral sein kann, sowas muss doch negativ sein, oder? Antwort: Naja, das Problem ist das ich ausschließlich solche Gedanken gehabt habe. 24 Stunden am Tag, 7 Tage die Woche, 365 Tage im Jahr, und das ca. 15 Jahre lang. Wenn man nichts anderes kennt auser genau diesen Gedanken, dann wird das empfundene ewige Leid des Lebens zur Normalität. Das was man als &quot;Neutral&quot; wahr nimmt, verschiebt sich also ins Negative. Wenn der Kopf mit einem also so leichte Spielchen treibt, dann kann man sich wohl vorstellen das dies auch kleinere Auswirkungen auf sein Leben hat. Und oh man, da habe ich tolle Geschichten zu Erzählen! Und ich denke so 08/15 kram wie schlechten und wenig Schlaf durch Grübeln, Antriebslosigkeit, Soziale Isolation oder bei mir Heißhunger, wodurch ich stetig zugenommen habe, der Verlust von immer mehr Hobbys, da sie einem nicht mehr Spaß machen. Naja, das ist ja pille palle. Dieser 08/15 kram kann man überall nachlesen. Was ich erzählen möchte sind richtige Erlebnisse und die dazugehörigen Gedankengänge die man als Depressiver durchlebt. Der Abstieg Da der Prozess bei mir so schleichend gewesen ist, kann ich keinen exakten Zeitpunkt nennen wann es angefangen hat. Ich weiß jedoch was Auslöser waren, und das diese bereits in meiner Kindheit begonnen haben. So hatte ich in meiner Kindheit schon Gedankengänge vom Tod &amp;amp; Sterben. Hiermit meine ich aber nicht die normalen Gedankengänge die jeder als Kind durchlebt. Wie das die Eltern sterben, und man als Kind Alpträume und Angst hat, seine Eltern zu verlieren. Nein, meine Gedankengänge drehten sich primär darum dass ICH Sterbe. Und hiermit meine ich nicht einfach nur schnell. Sondern langsam. Meist dachte ich das ich eine schlimme Krankheit hätte. Zum Beispiel Krebs. Manchmal würde er mich über Jahre hinweg langsam töten, ein ander mal hätte ich Sachen wie Bauchspeicheldrüsenkrebs, dass mich in 1 Woche tötet. Wieder andere male hätte ich schwerste Unfälle, jedoch nicht so schwer das ich sofort tot bin, aber so schwer das ich etliche Operationen, Amputationen oder sonstiges über mich ergehen lassen müsste um mich zu retten. Meine Familie diesen Schrecken mitbekommt, ich jedoch dabei zusehen kann wie jemand um mich trauert. Und ich dann zufrieden Sterben kann. Ein Schrei, nach Aufmerksamkeit. Solche Gedankengänge sind aber nicht &quot;mal&quot; vorgekommen, sondern solche Gedankengänge waren bei mir dominant. Sich mit solchen Gedanken Abends ins Bett zu weinen, war Normalität für mich. Der Superheld Irgendwann habe ich dann angefangen immer komplexere Geschichten zu kreieren. Zuerst war ich einfach jemand der anderen Menschen das Leben rettet, natürlich immer auf Kosten meines eigenen Leben. Mal springt man vor einem Auto um ein Kind das Leben zu retten. Mal rettete ich mit meinem Handeln ganze Gruppen. Irgendwann bin ich dann ein Superheld gewesen, der meist durch Aufopferung und der letzten eigenen Kraft die ganze Menschheit rettet. Die Geschichten wurden dabei immer länger. Oder anders gesagt: Vor meinen endgültigen Tod, wie jede Geschichte letztendlich ausging. Musste ich meist so viel Schmerz, Erniedrigung und jegliche Art der Schande über mich ergehen lassen. Die Geschichten wurden so komplex, das andere sogar erst nach meinem Tod begriffen haben, das ich durch meinen Tod, etwas gutes bewirkt habe. Letztendlich war der Tod am ende jeder Geschichte nur eins für mich. Die Erlösung vom Schmerz. Diese Geschichten hat natürlich einen Zweck. Auf der einen Seite habe ich versucht meinen inneren Schmerz einen Sinn zu geben. Und auf der anderen Seite werden solche Geschichten unpersönlicher wenn man anfängt über sich als Superheld nachzudenken. In Gewisser weiße war dies eine Flucht in die Phantasie-Welt. Ich glaube anders hätte ich es wohl auch nicht ausgehalten. Lebensmüde Gedanken? Im ungefähren alter von 20 Jahren, haben dann bei mir die sogenannten Lebensmüden Gedanken angefangen. Der Unterschied zu Suizid Gedanken ist, dass man hier passiv stirbt, anstatt das man sich aktiv selbst tötet. Wenn ich also Beispielsweise über eine Straße gelaufen bin, dann erschienen in meinen Gedanken Bilder das ich vom Auto angefahren werde. Wenn ich Abends alleine gelaufen bin, hatte ich ständige Angst ich werde verfolgt und getötet. Wenn ich unter einer Brücke gelaufen bin, dann dachte ich etwas fällt von der Brücke, und erschlägt mich. Wenn ich mit der Bahn gefahren bin, dann dachte ich die Bahn entgleist und ein Unglück würde passieren. In absolut allem was mich umgibt, habe ich eine Bedrohung für mein Leben gesehen. Diese Gedanken haben mein Verhalten jedoch dahin verändert, dass ich allgemein Vorsichtiger wurde. Öfters schauen bevor ich über die Straße laufe. Das ich verfolgt &amp;amp; getötet werde, oder etwas mich erschlägt habe ich durch Logik bekämpft indem ich mir sagte das solche Tode natürlich passieren können, sie jedoch einfach selten und unwahrscheinlich sind. Ich wurde zu Mr. Spock. Und naja, wenn es doch passiert wäre. In dem Fall wäre es mir egal gewesen, den der Tod war für mich die Erlösung. Genau das habe ich mir in meinen Geschichten ja eingeredet. Heute sehe ich darin aber auch, dass ich irgendeinen drang hatte weiter zu Leben. Ein innerer Kampf wo ich versuchte mich gegen diese Gedanken zu wehren. Ich hätte sonst ja auch über die Straße laufen können und dabei unvorsichtiger werden können. Aber irgendetwas in meinen inneren wehrte sich dagegen. Was dies genau war? Ich weiß es nicht. Vielleicht war es der normale Überlebens trieb eines Menschen. Vielleicht etwas anderes. Vielleicht sollte ich diese Frage nochmal versuchen zu ergründen. Aber ehrlich gesagt, mir ist es auch egal geworden, da ich nicht mehr mit meinen Gedanken ständig in der Vergangenheit stecken möchte. Der drang zu überleben war da, dafür empfinde ich einfach nur Dankbarkeit. Apathie Bisher muss ich aber immer noch eine Sache betonen, sollte dies noch immer nicht klar sein. Bei allem was ich bisher geschrieben habe, war mir nicht klar das ich unter einer Depression leide. Nicht nur das ich nicht wusste das ich nicht krank war. Nein, ich dachte ich wäre Kern Gesund, dass es mir gut geht, und das alles was ich bisher erzählt habe das normale Leben ist. Noch heute kann ich mich jedoch an einen einzigen Moment erinnern als ich ungefähr 25 war, als mir die Depression bewusst wurde. Ich stand in meinem Zimmer und die ersten Suizid Gedanken kamen mir hoch. Ich hatte zwar keinen Konkreten Plan mich umzubringen, jedoch fing ich an über den Suizid nachzudenken. Das erste mal war ich geschockt. Mein Gedanke: Oh mein Gott, worüber denkst du den jetzt nach? Weg mit diesen Gedanken! Ich will die nicht. Sowas muss ich unterbinden. Keine negativen Gedanken mehr. Ich bin doch nicht Depressiv und will nicht depressiv werden. Von diesem Moment an dachte ich mir das ich solche Gefühle abschalten muss. Bloß nichts mehr negatives an sich heran lassen. Sich nicht mehr aus der Bahn bringen lassen. Gleichgültig zu allem werden. Ich wurde Apathisch. Mit dieser Entscheidung wurde jedoch alles nur noch schlimmer. Das Gefühlsleben ist wie das Yin &amp;amp; Yang. Schöne Gefühle kann es nur geben, wenn man auch die für sich negativ assoziierten Gefühle zulässt. Man kann sich nicht entscheiden nur die negativen Gefühle auszublenden. Entweder bekommt man das ganze Programm, oder gar nichts. Ich entschied mich, für letzteres. Selbstständigkeit An dieser Stelle mache ich einen Sprung vorwärts, bis zum Jahre 2014 (da war ich dann 31 Jahre alt) als ich meine Selbstständigkeit als Indie-Game-Developer begonnen hatte. Natürlich war ich zu diesem Zeitpunkt immer noch krank, nicht nur das, ich dachte immer noch das ich Gesund wäre. Rückblickend kann ich das gar nicht mehr begreifen. Über die Jahre hinweg hat sich meine Situation nur noch verschlimmert. Ich habe mich über die Jahre hinweg immer mehr Isoliert. Meine Isolation ging soweit das ich regelrecht Angst hatte draußen gesehen zu werden, und mit irgendeinen Menschen zu sprechen. Meine Sucht die mich am Leben gelassen hat, war wohl die Sucht immer besser zu werden. Und das im Bezug auf meinem Job gesehen. Ich habe immer mehr Bücher gelesen über Programmierung und die verschiedensten Themen dazu. Ich habe 6 Programmiersprachen gelernt, habe unzählige Bücher über die diversen Themen gelesen. Mein Ziel war es auf diesem Feld so gut und erfolgreich zu werden wie es nur geht. Und wenn ich dann irgendwann mal den Erfolg hätte den ich mir gewünscht habe, dann würde ich irgendwann Glücklich sein. Wie naiv von mir. Heute begreife ich das man zuerst einmal Glücklich sein muss, nur aus dieser Kraft heraus kann man irgendetwas im Leben erreichen ohne sich dabei selbst zu zerstören. Ebenfalls habe ich mittlerweile Begriffen das Glücklich sein kein Zustand ist den man erreicht, sondern man entscheidet sich einfach dafür. Aber wie sah eigentlich mein Alltag mittlerweile aus? Durch eine Förderung und durch Selbst Erspartes Geld, konnte ich mich ungefähr 1,5 Jahre selbst finanzieren. Jedoch ist es nicht so gewesen das ich Gesund war. Meine Situation hatte sich so verschlimmert, dass ich im Grunde gar nicht mehr Arbeitsfähig war. Nicht nur war ich nicht Arbeitsfähig, ich habe im Grunde meinen ganzen Alltag nicht mehr auf die Reihe bekommen. Selbst unheimlich wichtige Sachen wie die Zahlung meiner Krankenkasse habe ich nicht mehr geregelt bekommen. Was dann auch irgendwann dazu führte das mein Konto gepfändet wurde. Dies führte dazu das ich meine Miete nicht mehr bezahlen konnte. Mir der Strom abgestellt wurde, und ich später irgendwann mit einer Zwangsräumung aus meiner Wohnung geflogen bin. Aber eins nach dem anderen. Da ich nur noch Angst hatte Menschen zu begegnen, war es mir selbst unheimlich schwierig dinge zu erledigen, wie den Müll heraus zu bringen. Das Ergebnis war: Stapelnde Müllsäcke in der Küche, und irgendwann dann auch Maden die durch die Wohnung krochen. Wann immer dies passierte räumte und säuberte ich danach alles. Dies kostete mich jedoch unheimlich viel Kraft. Nicht nur kraft, ich ekelte mich vor mir selber. Habe ich daraus aber gelernt? Nein, immer und immer wieder wiederholte sich dieser Prozess. Und jedes mal wenn wieder die Maden da waren, erzählte ich mir was für ein Versager, Nichtsnutz und wie widerwärtig ich war. Ich hatte nur noch Selbsthass für mich. Ich verstand auch nicht mehr warum ich so handelte. Nicht falsch verstehen, zu keinem Zeitpunkt dachte ich das sowas normal war. Ganz im Gegenteil, ich Wuste wie abartig ich war, genau deswegen konnte ich mich nur noch selber Hassen das ich so Grundelementare dinge wie den Müll heraus bringen nicht mehr hinbekomme. Als mir mein Geld dank Kontopfändung ausging musste ich natürlich noch etwas Essen, so fing ich an Dinge zu verkaufen. Hauptsächlich Spiele-Konsolen und Videospiele. Da ich nicht Wuste wie lange ich mit dem Geld auskomme, musste ich schauen das Geld so effizient wie möglich auszugeben. Ich machte auch immer wieder Pausen und fing an mehre Wochen gar nichts zu essen. Die längste Zeit die ich mal gar nichts gegessen hatte umfasste ca. 1 Monat. Manchmal aß ich einen Tag, und machte dann wieder mehrere Tage Pause. Als mir der Strom abgeschaltet wurde, naja spätestens da hätte ich eigentlich reagieren müssen. Okay, ich hätte schon viel früher reagieren müssen, aber die Krankheit ließ mich nicht. Aber spätestens als der Strom weg war, und ich ja ein Indie-Game-Developer war, der am Computer Video-Spiele programmieren wollte. Spätestens da hätte ich doch eigentlich reagieren sollen!? Aber ich tat es nicht! Stattdessen saß ich 3 Monate ohne Strom in meiner Wohnung und lies mir Bücher über Computer Algorithmen durch. Mein Gedanke war: Hauptsache ich lenke mich irgendwie ab, bitte nicht mit meinen Problemen beschäftigen. Wenn ich das tue, dann drehe ich noch durch. Ich hätte schon sehr viel früher meine Selbstständigkeit aufgeben sollen und dann zum Jobcenter gehen sollen. Jedoch konnte ich es nicht ertragen schon wieder ein Versager zu sein, der es nicht schafft seinen größten Traum zu verwirklichen. Also tat ich gar nichts. Und machte damit alles nur noch schlimmer. Irgendwann war natürlich alles verkauft, was ich noch irgendwie zu Geld machen konnte, und erst als gar kein Ausweg mehr da war und ich gar kein Geld mehr hatte, erst dann gab ich meinen Traum auf, und ging zum Jobcenter. Als ich dann das erste mal zum Jobcenter ging, und dort meine Geschichte erzählte sagte mir jeder das er diese Geschichte gar nicht glauben könne. Man erzählte mir das dies eine Depression sein könnte. Was war meine Antwort darauf? Waaaas? Ich bin doch nicht Depressiv! Da ich dies jedoch von mehreren Seiten hörte, fing ich das erste mal an mich über diese Krankheit zu informieren. Und tatsächlich, ich fand mich in allen Beschreibungen wieder. Dies hob aber nicht unbedingt meine Stimmung, sondern verschlechterte Sie nur noch. Letztendlich lief es nur auf eine Sache hinaus. Ich schaffte es auch nicht die unterlagen die vom Jobcenter benötigt wurden auszufüllen. Ich verlor auch diese Grundlage wieder, und der Termin zur Zwangsräumung rückte immer Näher. Ein Termin den ich erfolgreich schaffte aus dem Weg zu gehen, und mich nicht einmal dazu bewegte nach einer neuen Unterbleibe zu suchen. Einen Tag vor meiner Zwangsräumung schaffte ich es dann irgendwie um Hilfe zu bitten. Natürlich war niemand mehr da der etwas von mir hören wollte. Mein engster Freund erzählte mir das die Freundschaft erkaltet war, meine Mutter erzählte mir das ich verschwinden soll, und was ich ihr den für schreckliche Dinge antue. Zum ersten mal in meinen Leben dachte ich nicht mehr darüber nach OB ich mir das Leben sollte. Ich dachte darüber nach WIE ich es mir nehme. Meine Wahl fiel darauf einfach so viele Schlaftabletten zu schlucken wie es nur ging. Das Problem: Ich hatte keine, und auch kein Geld welche zu kaufen. Zum Glück, sonst würde ich diesen Text hier nicht schreiben. Mich selber verletzen, Pulsadern aufschneiden? Davor hatte ich zum Glück zu viel Angst. Erschießen wäre aber okay gewesen, aber wie an eine Waffe kommen, ohne Geld? Der Aufschwang Zum Glück wurde ich aber nicht obdachlos. Mit sehr viel Glück fand ich noch einen Platz in einem Männerheim das mich aufnahm. Ich musste zwar so gut wie alle meine Habseligkeiten zurück lassen, aber zumindest hatte ich einen Platz zum Schlafen und ein Dach über den Kopf. Beim Aufnahmegespräch war es das erste mal das ich offener über meine Geschichte erzählte. Ich brach dabei in Tränen aus und realisierte das ich alleine gar nicht mehr Überlebensfähig war. Zum ersten mal realisierte ich wirklich wie schlecht es mir ging, weil ich meine negativen Gefühle zu ließ. Dies brachte mir jedoch im nachhinein eher Kraft meine Probleme anzugehen, und nicht mehr vor Ihnen weg zu rennen. Ich meldete mich bei einer Tagesklinik und machte eine drei Monatige Therapie durch. Mir wurde Setralin (ein Antidepressiva) verschrieben, das auch ziemlich rasch eine Besserung zeigte. Ich lernte neue Menschen kennen und neue Freunde. Dieses kurze hoch war aber nicht von Dauer. Irgendwann ließ auch die Wirkung von Setralin nach, ich konnte nicht mehr schlafen, war erschöpft, und hatte keinerlei Antrieb mehr. Mein Arzt änderte nichts an der Medikamentation, und ich brach dann irgendwann die Behandlung vollständig ab. Dies führte zu einer Woche Bett mit Schüttelfrost und Fieber und schlief dabei ca. 20 Stunden am Tag. Nach dieser Woche Entzug, ging es mir jedoch genauso gut/schlecht wie mit Setralin. Mein Arzt verschrieb mir daraufhin noch andere Antidepressiva. Hauptsächlich quälten mich Schlafprobleme. Sprich mir fiel es sehr schwer einzuschlafen, und wenn ich dann mal schlief, dann wie ein Toter, und das sehr lange. Doch vollkommen egal welches Medikament ich ausprobierte, geholfen hat letztendlich keins. Da ich bis zu diesem Zeitpunkt neue Menschen kennen gelernt hatte, darunter auch einige Cannabis Nutzer, kam mir irgendwann der Gedanke es einfach mit Cannabis auszuprobieren. Ich wusste zuvor schon das es auch bei Schlafproblemen helfen kann, oder das es Ansätze gibt es könnte bei Depressionen helfen. Ich bin an Cannabis heran gegangen das es mir helfen wird. Angst vor negativen Auswirkungen hatte ich keine. Und ich denke das ist schonmal der erste wichtige Schritt den man als Cannabis Nutzer haben sollte. Psychedelische Drogen wie Cannabis (LSD, Psilocybin) wirken nämlich anders wie z.B. Alkohol, Nikotin, Kokain, Ecstasy etc. Cannabis macht nicht einfach nur glücklich, ganz im Gegenteil, es verstärkt einfach alles. Man nimmt Gefühle stärker war, Emotionen sind verstärkt, man nimmt Musik intensiver war, man hat einen besseren Geruchs &amp;amp; Geschmackssinn. Ein Cannabis-Rausch entfaltet sich ganz nachdem welche Erwartungen man hat, welche Gedanken man hat, und wie die aktuelle Gefühlslage ist. Aus diesem Grund empfehlen etliche Menschen kein Cannabis bei Depressionen zu nehmen. Warum habe ich es trotzdem getan? Warum hatte ich keine Angst? Wenn man so wie ich schon als kleines Kind ständig über den Tod am grübeln ist. Und eine so lange Geschichte von Lebensmüden Gedanken hat, dann … A) Ist man ohnehin irgendwann abgestumpft, und wenig Sachen können einen Schockieren. B) Wäre es mir auch egal wenn ich gestorben wäre. (Was bei Cannabis ohnehin nicht passiert, es hätte aber meine Suizid Gedanken verstärken können, und das war mir egal) Der Umgang mit Cannabis An dieser Stelle wollte ich übrigens meinen Cannabis Konsum beschreiben, und welche Resultate dieser hatte. Als ich beim Meditieren unter Cannabis über das Thema nachdachte lernte ich wie komplex dieses Thema ist. Das worüber ich also zuerst schreiben muss ist eher, wie nutze ich Cannabis, wie wirkt es, wie schaut die Häufigkeit aus, Und wie geht man damit sinnvoll um? Tatsächlich ist jede Frage für sich schon ein eigener Artikel wert. Jedoch kann ich all das nicht hier unterbringen. Daher versuche ich das wichtigste im groben schnellverlauf zu beschreiben. Ausführlichere Artikel zu den einzelnen Themen schreibe ich später. Zuerst halte ich es für wichtig auf den Drogenmischkonsum mit Tabak einzugehen. Nikotin und THC haben eine gegenseitige Wechselwirkung. Nikotin schwächt die Wirkung des Cannabis, und Cannabis stärkt die Wirkung des Nikotin. Wer beides mischt erlebt eigentlich eher eine sehr starke Nikotin Wirkung, den sogenannten Nikotin-Flash. Da ich keinerlei Tabak rauche, und auch nicht vor habe Nikotin abhängig zu werden, rauche ich nicht mit Tabak. Die Tatsache das ich mich jedes mal übergeben muss wenn ich mit Tabak rauche, hat natürlich auch einen Grund daran. Entweder rauche ich Cannabis pur, oder aber in Kombination mit Damiana (bekommt man im Reformhaus). Damiana &amp;amp; Cannabis hat eine eigene Wechselwirkung. Tatsächlich verstärken sich beide Pflanzen gegenseitig. Damiana verstärkt hierbei vor allem die psychedelische Wirkung des Cannabis stark. Genau die ist es aber auch, nach der ich Suche! Ich schrieb das ich über das Thema Meditativ nachdenke. Und denke das ist jetzt der richtige Moment dies zu erläutern. Die Meisten Menschen verstehen darunter das man für sich selber ist, seine Gedanken los lässt, und einfach nur da ist. In Gewisser weiße tue ich das auch. Ich komme zur Ruhe, ich entspanne, jedoch ist das Ziel nicht seine Gedanken zu unterbinden, sondern sie Schweifen zu lassen. Man fällt in einem Modus der Konzentration und des Nachdenkens. Man macht es sich automatisch bequem, schließt oftmals die Augen, und ist in einem Modus einen Film vor sich zu sehen. Es geht auch nicht darum seine Gedanken zu unterbinden, sondern seinen Gefühlen und Gedanken freien lauf zu lassen. Durch die Entspannung kommt man in einem Modus wodurch man sich selber gut analysieren kann. Gleichzeitig ist man jedoch hoch-emotional. Tatsächlich würde ich diesen Bewusstseinszustand als ein Wach-Traum beschreiben. Man ist wach, kann logisch und analytisch denken. Und gleichzeitig ist man in einem Zustand wo man Traumartig Bilder vor sich sieht, und Erlebnisse erleben kann, die sich unheimlich real anfühlen. Mit unheimlich real meine ich nicht das man Halluzinationen hat, oder reale Bilder vor sich sieht. Hiermit meine ich vor allem die emotionale Ebene. Ich kann dir Dinge erzählen die ich im Rausch durchlebt habe. Du wirst diese Dinge vielleicht Logisch nachvollziehen können, aber nie wirklich emotional nachvollziehen können. Stelle es dir wie ein Bungee Jump vor. Du kannst dir noch so viele Videos dazu anschauen, und noch so viele Erzählungen dazu durchlesen. Verstehen wirst du es erst, wenn du es selber durchlebst. Mit diesem Verständnis werde ich dir nun von meinen ersten Horror-Trip erzählen. Ich werde nicht jeden Gedanken und jede Erkenntnis erzählen die ich aus den verschiedenen Themen gewonnen habe. Ich beschreibe den Ablauf jedoch grob, damit du siehst was ich mit Gedanken schweifen meine. Der Horror-Trip Ich weiß gar nicht mehr wie ich auf das Thema gekommen bin. Vielleicht war es ein Thema das Unterbewusst in mir schlummerte. Vielleicht schaute ich gerade ein Film oder ich habe etwas gelesen, ich weiß es nicht mehr. Jedoch beginnen so die meisten Trips. Ich schaue einen Film, beschäftige mich mit einem Thema, oder sage mir vorher schon bewusst das ich über bestimmte Themen Nachdenken möchte, meistens klappt das. Jedoch erzwinge ich nichts, eher im Gegenteil, ich lasse alles auf mich zukommen. Mir kommt es manchmal vor das ich das Tor zum Unterbewusstsein damit geöffnet habe. All das was ich über Jahre gelernt habe in mich zu verschließen kommt nun hoch. Da man hoch-emotional ist, ist so etwas jedoch nicht automatisch schön. Beim Erleben meiner Trips mache ich Notizen, entweder am PC, Smartphone oder in einen Buch, je nachdem was zur Verfügung steht, und worauf ich gerade Lust habe. Ich fing an über Religion nachzudenken. Tatsächlich formte ich aus, das Glauben, Religion und Institutionen wie die Kirche für mich drei unterschiedliche Dinge sind. Ich persönlich lernte dabei auch, dass ich nur den Glauben als etwas positives ansehen kann. Doch wofür stellt man sich eigentlich die Frage nach dem Glauben? Ging es um den Tod, und was danach kommt? Aus meiner Sicht gibt es auf diese Frage keine Antwort. Weshalb ich auch Agnostiker bin. Wenn es eine Antwort auf diese Frage geben sollte, dann werden wir diese Antwort erst im Augenblicke unseres Todes Erfahren. Agnostiker zu sein heißt jedoch nicht das man alles andere ablehnt. Viel mehr heißt es für mich das ich jede Theorie hinterfrage, mir Vorstelle sie würde stimmen, und daraus Schlüsse ziehe was sein könnte. Ich saß bequem auf den Stuhl, und hatte meine Augen zu, und war sehr vertieft in den Gedanken über den Tod. Ich stellte mir vor das ich bereits Tod sein würde und in einem Sarg liegen würde, ich würde mich wahrnehmen, und mein Bewusstsein wäre noch vollständig da. Daher, ich könnte noch Denken und Fühlen. Jedoch ist mein Körper tot, und ich könnte Ihn nicht mehr Bewegen. An der Stelle möchte ich Erwähnen das wenn man an einem Gott (oder mehrere) glaubt, und glaubt der Mensch hat eine Seele und lebt nach dem Tod weiter. Die Idee bei vollem Bewusstsein im Sarg zu liegen durchaus real sein kann! Nur ein Atheist der nicht an ein Leben nach dem Tod glaubt und das als Absolut sieht, sollte nicht in der Lage sein so etwas nachvollziehen zu können. Als Agnostiker kann ich mich übrigens in beide Situationen hinein versetzen! Ich lag also im Sarg, konnte mich nicht mehr bewegen, und war nun Tod. Langsam merkte ich das mir unbequem wurde. Meine Atmung wurde schneller, ich fing an Angst zu spüren. Mein Magen zog sich zusammen, und alle Muskeln in meinen Körper fingen an sich zu verkrampfen. Dann dachte ich darüber nach was als nächstes passieren würde. Die Bakterien auf und in meinen Körper würden anfangen mich zu essen. Meine Organe würden sich zersetzen und ich fing an all dieses Entsetzen zu spüren. Ich sah auf meinen Körper Millionen von Bakterien die nun anfangen würden mich zu fressen. Alle Insekten in der Erde wo ich vergraben war, würden wahrnehmen das etwas essbares in der Nähe ist. Käfer, Würmer und Maden würden sich auf den Weg zu mir machen. Zum ersten mal Begriff ich was eine Fressorgie ist. Sie findet immer statt, wann immer ein Mensch stirbt. Die Gefühle in mir wurden dabei so stark das ich mich kaum mehr halten konnte. Eigentlich hätte ich die ganze Zeit schreien können, jedoch war ich dabei so verkrampft das ich dies nicht konnte. Ein so großes Gefühl von Angst und Ekel habe ich mein ganzes Leben noch nie gespürt. An diesem Punkt wurde mir das aber zu viel und ich fing an mich wieder zu normalisieren. Zwar brauch ich dafür ein paar Minuten, jedoch kann ich mich ziemlich gut kontrollieren, wenn ich es möchte. Den genau das habe ich während meiner Depression gelernt! Das was ich vorher nicht konnte, war das Gegenteil, meine Gefühle freien lauf zu lassen. Mein Trip ging an der Stelle noch viel weiter. Jedoch nicht im negativen Sinne. Das erste mal in meine Leben war ich dankbar das Ich Lebe. Ich wurde danach von unheimlich positive Gedanken und Glücksgefühle überströmt. Ich fing an mir alles aufzuschreiben und seit dem mein Leben umzugestalten. Die allererste Umgestaltung war das ich mich endgültig dazu entschied mich Vegan zu ernähren. Denn der Spaß am Fressen anderer Lebewesen ist mir seit diesem Erlebnis doch etwas unangenehm geworden. Cannabis &amp;amp; Depressionen Mittlerweile sehe ich mich von meiner Depression als geheilt an. Dieser Horror-Trip hat mir wahrhaftig die Augen geöffnet. Seit diesem Erlebnis scheint es mir das meine Apathie vollkommen weg gesprengt wurde. Mir kommt es vor das Mauern die mich vorher hinderten zu fühlen weg sind und ich diese Gefühle akzeptieren kann. Stattdessen höre ich viel mehr auf meine Gefühle. Analysiere diese, und Frage mich was mein Körper mir sagen möchte, und ob das Gefühl das ich nun Erlebe gerechtfertigt ist, oder es ein schlecht antrainiertes Gefühl ist dass ich überdenken muss. Wichtig ist jedoch zu verstehen das der Rausch Zustand das ist, was dazu führt das ich mein Leben, meine Gefühle, meine Gedanken und meine Zukunft neu überdenke. Es ist nicht die Substanz selber die irgendwelche Symptome bekämpft wie es Antidepressiva tun. Daher muss ich auch nicht ständig Cannabis konsumieren. Ich konsumiere auch zum Genuss, aber mittlerweile bin ich eher so etwas was man als Wochenende-Konsument bezeichnet. Müsste ich Cannabis in irgendeiner Form täglich zu mir führen, würde ich mich auch nicht als geheilt ansehen. Natürlich heißt das nicht das all meine Lebensprobleme die durch meine Depression entstanden sind auf einmal gelöst sind. Jedoch habe ich nun endlich die nötige Kraft gefunden, diese Probleme anzugehen, und daran zu Arbeiten. Warum ich das hier Schreibe? Ich schreibe das ganze weil ich näher bringen möchte wie ein Depressiver denkt. Jedoch gilt das was ich geschrieben habe nicht für alle Depressive. Nicht jeder denkt so wie ich. Jede Depression ist individuell. Übrigens ist meine ganze Geschichte über meine Gefühle und meine Lebensgeschichte ein Produkt dessen, weil ich im Cannabis-Rausch meine Vergangenheit durcherlebt habe und mich so selber Analysiert habe. Sonst hätte ich diesen ganzen Artikel wohl nicht schreiben können. Weiterhin will ich das Stigma über Cannabis brechen. Und natürlich bin ich für eine Legalisierung von Cannabis (tatsächlich sogar ALLER Drogen). Manche mögen sich Fragen wie ich so offen meine Lebensgeschichte Erzählen kann. Die Antwort dazu einfach. Ich habe vorher nicht gelebt. Ich war Depressiv und krank. Mein eigentliches Leben hat erst jetzt begonnen. Für mich beginnt nun ein neuer Abschnitt in meinen Leben, und ich werfe all den Ballast den ich durchlebt habe einfach über Bord. Fazit Cannabis hat mir gezeigt das wenn ich Glück &amp;amp; Liebe spüren möchte, ich alle Emotionen zulassen muss, auch die &quot;schlechten&quot;. Abschotten nur von den negativen Gefühlen, ist nicht möglich. Entweder durchlebt man all seine Gefühle, oder gar keine. Und so richtig, gibt es eigentlich gar keine negativen Gefühle. In Zukunft werde ich weitere Geschichten, Ideen, Denkanstöße und vieles andere publizieren. Wenn Ihr Fragen oder Kritik habt, so ist diese gerne Gesehen. Danke, das du bis hier gelesen hast.</summary></entry><entry><title type="html">Meine Erfahrung mit Cannabis und Depressionen</title><link href="https://sidburn.github.io/blog/2018/08/31/depression-and-cannabis" rel="alternate" type="text/html" title="Meine Erfahrung mit Cannabis und Depressionen" /><published>2018-08-31T00:00:00+02:00</published><updated>2018-08-31T00:00:00+02:00</updated><id>https://sidburn.github.io/blog/2018/08/31/depression-and-cannabis</id><content type="html" xml:base="https://sidburn.github.io/blog/2018/08/31/depression-and-cannabis">&lt;p&gt;Meine Erfahrung mit Cannabis und Depressionen&lt;/p&gt;
&lt;h2&gt;Einleitung&lt;/h2&gt;
&lt;p&gt;Hallo, mein Name ist David Raab und ich wurde 1983 geboren. Ich bin gelernter
Fachinformatiker-Systemintegration und habe mir das Programmieren selbst
beigebracht. Nach meinem Abi war ich jobmäßig immer unterwegs, doch meine
Depression hat mir mein Leben sprichwörtlich zur Hölle gemacht.&lt;/p&gt;
&lt;p&gt;Ich denke ich werde in Zukunft noch mehr über mein Leben preisgeben, darüber
was mir gefällt, meine Philosophie und Lebenseinstellung.&lt;/p&gt;
&lt;h2&gt;Was möchte ich bezwecken?&lt;/h2&gt;
&lt;p&gt;Ich möchte, dass Depressionen besser verstanden und akzeptiert werden. Von euch Lesern
und von mir selbst. Denn auch für mich ist die Krankheit noch neu und der Umgang mit Ihr
ein Lernprozess.&lt;/p&gt;
&lt;p&gt;Durch das öffentliche Schreiben erhoffe ich mir natürlich auch den positiven Effekt,
mich selbst besser zu verstehen. Auch wenn ich anderen in meiner Lage nicht direkt
helfen kann, hoffe ich trotzdem, dass ich anderen dazu verhelfen lkann, Depressionen besser
verstehen, oder zu ermutigen, sich Hilfe zu holen.&lt;/p&gt;
&lt;h2&gt;Drogen&lt;/h2&gt;
&lt;p&gt;Desweiteren schreibe ich diesen Text kurz nachdem ich Cannabis konsumiert habe.
Sprich: Ich bin dicht!&lt;/p&gt;
&lt;p&gt;Dies ist auch die Einleitung zu meinem ersten Thema. Der Drogenkonsum generell
und im speziellen die Erfahrungen, die ich mit Cannabis mache.&lt;/p&gt;
&lt;h2&gt;Sind Drogen schlecht?&lt;/h2&gt;
&lt;p&gt;Das Wort &quot;Drogen&quot; ist in vielen Köpfen sehr negativ belastet. Man sieht Junkies
irgendwo in der Ecke. Leute die ihr Leben nicht in den Griff bekommen, oder
sonstige Horror Geschichten. Doch ist dieses Thema komplett surreal für mich
geworden.&lt;/p&gt;
&lt;p&gt;Wir Menschen sind im Grunde alle Abhängig. Wir sind Abhängig nach Freude. Diese
Freude kann etliches sein.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Liebe eines Partners&lt;/li&gt;
&lt;li&gt;Die Zeit mit Freunden verbringen&lt;/li&gt;
&lt;li&gt;Im Restaurant Essen gehen (Ich liebe Griechisch...)&lt;/li&gt;
&lt;li&gt;Zuckerkonsum durch Süßigkeiten (Tue ich auch gerade!)&lt;/li&gt;
&lt;li&gt;Ins Kino gehen&lt;/li&gt;
&lt;li&gt;Fettiges Essen (Mhhhh Burger King!!!)&lt;/li&gt;
&lt;li&gt;Sport&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;und natürlich gehört auch Drogenkonsum dazu!&lt;/p&gt;
&lt;p&gt;Das schlimme wäre nur, wenn wir Menschen an nichts mehr Freude verspüren würden.
Hätten wir keinen Ansporn im Leben, dann würde sich die Frage auftun, wofür man den
überhaupt noch Lebt.&lt;/p&gt;
&lt;p&gt;Stell dir vor:
Du kannst essen was du willst und es schmeckt dir nicht. Du willst einfach nur alleine sein.
Die Süßigkeiten schmecken nicht. Den Burger den man isst ruft nur Schuldgefühle
hervor und kein Partner in ausschau. Klingt gräßlich?&lt;/p&gt;
&lt;p&gt;Nun, so verläuft mein Leben seit ca. 15 Jahren. Wenn man mich noch vor einem
halben jahr gefragt hätte, was Freude ist, ich hätte nicht darauf antworten
können. Auch kann ich mich nicht erinnern das letzte mal Freude verspürt zu haben.&lt;/p&gt;
&lt;p&gt;Naja, so ganz richtig ist das nicht. Seit ich Kiffe, nämlich seit einem
halben Jahr, habe ich mal wieder an etwas Freude. Ich kann Filme an einem Stück
zu Ende schauen, kann mich konzentrieren. Mir kommen sinvolle Gedanken die mich
weiter führen und mich nicht andauernd über dasselbe grübeln lassen. Ich bin auf einmal
in der Lage, Dinge nicht einfach nur schwarz oder weiß zu sehen.&lt;/p&gt;
&lt;p&gt;Natürlich gefällt mir auch der Rausch des Cannabis. Man ist zugleich sediert und
wenn man es möchte kann man auch mal seinen Kopf abschalten und genießen. Das Konzentrieren
fällt mir leichter und das denken tut nicht weh. Oder der Geschmackssinn wird
verbessert und ich kann mein Essen mal geniessen.&lt;/p&gt;
&lt;p&gt;Für jemanden der nicht wirklich weiß, wofür er auf dieser Welt ist, sind das äußerst
positive Effekte. Positive Effekte die einen wieder lernen lassen, das Leben
zu genießen.&lt;/p&gt;
&lt;p&gt;Die Frage die sich mir stellt ist: Warum möchte man mich als Cannabiskonsument
eigentlich krimialisieren? Wem habe ich Schaden zugefügt, außer (höchstens) mir
selbst? Warum sollte der Drogenkonsum überhaupt etwas Schlechtes sein?&lt;/p&gt;
&lt;p&gt;Klingt verrückt? Sehe ich nicht so. Nehmen wir zuerst einmal ein Vergleich.&lt;/p&gt;
&lt;h2&gt;Süßigkeiten &amp;amp; Sport&lt;/h2&gt;
&lt;p&gt;Nun, wir alle Wissen, dass Süßigkeiten unserer Gesundheit nicht gut tun. Sport
tut es schon (auch nur zu einem gewissen Maß, denn die Dosis macht das Gift!),
aber mit der Motivation Sport zu treiben, wer kennt das nicht?&lt;/p&gt;
&lt;p&gt;Es ist natürlich leichter, auf der Couch zu sitzen, etwas süßes zu essen und einen
Film zu geniessen. Leider ist das ungesund und macht dick.&lt;/p&gt;
&lt;p&gt;Aber halt! Dafür haben wir ja das Fitness-Studio! Das Training erlaubt es uns,
auch mal etwas ungesundes zu machen.&lt;/p&gt;
&lt;p&gt;Wäre es nicht logischer, einfach auf alle Süßigkeiten zu verzichten? Dann werden
wir nicht dick und müssen generell weniger Sport treiben und Fit zu bleiben.&lt;/p&gt;
&lt;p&gt;Wir würden Geld bei den Süßigkeiten sparen, müssen weniger Sport betreiben um unsere
Fitness aufrecht zu erhalten. Aber&lt;/p&gt;
&lt;p&gt;Wir sparen doppelt Geld. Bei den Süßigkeiten und beim Fitness Studio. Macht doch
mehr Sinn, oder etwa nicht?&lt;/p&gt;
&lt;p&gt;Nun kann man machen! Aber was ist der Zweck davon? Dann hat man weniger Spaß
an den Süßigkeiten, und sollten wir deswegen weniger Sport treiben, auch noch weniger
Spaß durch den Sport.&lt;/p&gt;
&lt;p&gt;Natürlich schadet man sich und seiner Gesundheit durch Fett und Süßigkeiten, aber
das macht unser Leben nunmal aus. Freude spüren und das auch auf Kosten der Gesundheit.&lt;/p&gt;
&lt;h2&gt;Cannabis&lt;/h2&gt;
&lt;p&gt;Und hier landen wir bei meinen Cannabiskonsum.&lt;/p&gt;
&lt;p&gt;Ja, ich nehme Cannabis. Es hilft mir durch meine Depression. Ich bin wieder
in der Lage, Freude an dingen zu spüren. Das Computerspielen macht mir Spaß, ich
werde Kontaktfreudiger und generell aktiver, außerdem verspüre ich den Antrieb
meine Probleme anzugehen.&lt;/p&gt;
&lt;p&gt;Die Gesundheitlichen Schäden? Ich bin alt genug, so das der Cannabiskonsum keine
langzeitlichen Schäden mehr auf mein Gehirn anrichtet (Bitte nicht kiffen, wenn
ihr jünger als 18, besser noch 21 Jahre alt seid!).&lt;/p&gt;
&lt;p&gt;Psychosen hat es bei mir nicht ausgelöst, und es ist immer noch umstritten ob es
das überhaupt tut!&lt;/p&gt;
&lt;p&gt;Ich habe jetzt zwei packungen zwiback mit kokos und Dunkler Schokolade gegessen,
saure bonbons und Marzipanschokolade. Dies war meiner gesundheit wahrscheinlich
schädlicher, als der Cannabiskonsum. Aber hey, dafür habe ich ja das Fitness-Studio!&lt;/p&gt;
&lt;p&gt;Sind Drogen also schädlich? Ja und nein. Vieles was uns nunmal gut tut, richtet
auch Schaden an. Dies gilt für alles in unserem Leben. Zu viel von etwas kann uns immer
Schaden. So kann man genauso sexsüchtig sein, fettsüchtig oder von jeder anderer
Sache die uns Spaß bereitet. Die Frage sollte also kein schwarz/weiß denken sein
im Sinne von: Ist etwas gut oder schlecht.&lt;/p&gt;
&lt;p&gt;Sondern die Frage sollte immer sein:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Überwiegen die positiven die negativen Effekte &amp;amp; kann ich es meiner Gesundheit
antun?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Auch muss die Antwort nicht eine volkommene Abstinenz von etwas sein. Es macht
immer die Dosis das Gift. Wieviel Süßigkeiten, Fettes Essen, Alkohol, Koffein,
Cannabis, Zucker, oder Sport tut uns den gut?&lt;/p&gt;
&lt;p&gt;Evtl. sollten wir das eine oder andere erhöhen oder verringern, es kommt
immer auf ein Gesundes mittelmaß an! Die Frage stellt sich eher wo das mittelmaß
beim Cannabis Konsum ist.&lt;/p&gt;
&lt;p&gt;Vielleicht einfach so viel das man sich gut fühlt jedoch nicht Abhängig von etwas
ist? Wie ist Abhängigkeit eigentlich definiert? Ich denke in einem nächsten Blog
werde ich auf diese Dinge genauer eingehen.&lt;/p&gt;
&lt;h2&gt;Schlußszene&lt;/h2&gt;
&lt;p&gt;Hinterlasst mir doch einen Kommentar wie euch dieser Artikel gefallen hat, oder
was Ihr gerne Erfahren möchtet. Welche Erfahrung habt ihr mit Cannabis und
seit ihr auch von Depressionen betroffen?&lt;/p&gt;</content><author><name>David Raab</name></author><category term="cannabis" /><category term="depressionen" /><summary type="html">Meine Erfahrung mit Cannabis und Depressionen Einleitung Hallo, mein Name ist David Raab und ich wurde 1983 geboren. Ich bin gelernter Fachinformatiker-Systemintegration und habe mir das Programmieren selbst beigebracht. Nach meinem Abi war ich jobmäßig immer unterwegs, doch meine Depression hat mir mein Leben sprichwörtlich zur Hölle gemacht. Ich denke ich werde in Zukunft noch mehr über mein Leben preisgeben, darüber was mir gefällt, meine Philosophie und Lebenseinstellung. Was möchte ich bezwecken? Ich möchte, dass Depressionen besser verstanden und akzeptiert werden. Von euch Lesern und von mir selbst. Denn auch für mich ist die Krankheit noch neu und der Umgang mit Ihr ein Lernprozess. Durch das öffentliche Schreiben erhoffe ich mir natürlich auch den positiven Effekt, mich selbst besser zu verstehen. Auch wenn ich anderen in meiner Lage nicht direkt helfen kann, hoffe ich trotzdem, dass ich anderen dazu verhelfen lkann, Depressionen besser verstehen, oder zu ermutigen, sich Hilfe zu holen. Drogen Desweiteren schreibe ich diesen Text kurz nachdem ich Cannabis konsumiert habe. Sprich: Ich bin dicht! Dies ist auch die Einleitung zu meinem ersten Thema. Der Drogenkonsum generell und im speziellen die Erfahrungen, die ich mit Cannabis mache. Sind Drogen schlecht? Das Wort &quot;Drogen&quot; ist in vielen Köpfen sehr negativ belastet. Man sieht Junkies irgendwo in der Ecke. Leute die ihr Leben nicht in den Griff bekommen, oder sonstige Horror Geschichten. Doch ist dieses Thema komplett surreal für mich geworden. Wir Menschen sind im Grunde alle Abhängig. Wir sind Abhängig nach Freude. Diese Freude kann etliches sein. Die Liebe eines Partners Die Zeit mit Freunden verbringen Im Restaurant Essen gehen (Ich liebe Griechisch...) Zuckerkonsum durch Süßigkeiten (Tue ich auch gerade!) Ins Kino gehen Fettiges Essen (Mhhhh Burger King!!!) Sport und natürlich gehört auch Drogenkonsum dazu! Das schlimme wäre nur, wenn wir Menschen an nichts mehr Freude verspüren würden. Hätten wir keinen Ansporn im Leben, dann würde sich die Frage auftun, wofür man den überhaupt noch Lebt. Stell dir vor: Du kannst essen was du willst und es schmeckt dir nicht. Du willst einfach nur alleine sein. Die Süßigkeiten schmecken nicht. Den Burger den man isst ruft nur Schuldgefühle hervor und kein Partner in ausschau. Klingt gräßlich? Nun, so verläuft mein Leben seit ca. 15 Jahren. Wenn man mich noch vor einem halben jahr gefragt hätte, was Freude ist, ich hätte nicht darauf antworten können. Auch kann ich mich nicht erinnern das letzte mal Freude verspürt zu haben. Naja, so ganz richtig ist das nicht. Seit ich Kiffe, nämlich seit einem halben Jahr, habe ich mal wieder an etwas Freude. Ich kann Filme an einem Stück zu Ende schauen, kann mich konzentrieren. Mir kommen sinvolle Gedanken die mich weiter führen und mich nicht andauernd über dasselbe grübeln lassen. Ich bin auf einmal in der Lage, Dinge nicht einfach nur schwarz oder weiß zu sehen. Natürlich gefällt mir auch der Rausch des Cannabis. Man ist zugleich sediert und wenn man es möchte kann man auch mal seinen Kopf abschalten und genießen. Das Konzentrieren fällt mir leichter und das denken tut nicht weh. Oder der Geschmackssinn wird verbessert und ich kann mein Essen mal geniessen. Für jemanden der nicht wirklich weiß, wofür er auf dieser Welt ist, sind das äußerst positive Effekte. Positive Effekte die einen wieder lernen lassen, das Leben zu genießen. Die Frage die sich mir stellt ist: Warum möchte man mich als Cannabiskonsument eigentlich krimialisieren? Wem habe ich Schaden zugefügt, außer (höchstens) mir selbst? Warum sollte der Drogenkonsum überhaupt etwas Schlechtes sein? Klingt verrückt? Sehe ich nicht so. Nehmen wir zuerst einmal ein Vergleich. Süßigkeiten &amp;amp; Sport Nun, wir alle Wissen, dass Süßigkeiten unserer Gesundheit nicht gut tun. Sport tut es schon (auch nur zu einem gewissen Maß, denn die Dosis macht das Gift!), aber mit der Motivation Sport zu treiben, wer kennt das nicht? Es ist natürlich leichter, auf der Couch zu sitzen, etwas süßes zu essen und einen Film zu geniessen. Leider ist das ungesund und macht dick. Aber halt! Dafür haben wir ja das Fitness-Studio! Das Training erlaubt es uns, auch mal etwas ungesundes zu machen. Wäre es nicht logischer, einfach auf alle Süßigkeiten zu verzichten? Dann werden wir nicht dick und müssen generell weniger Sport treiben und Fit zu bleiben. Wir würden Geld bei den Süßigkeiten sparen, müssen weniger Sport betreiben um unsere Fitness aufrecht zu erhalten. Aber Wir sparen doppelt Geld. Bei den Süßigkeiten und beim Fitness Studio. Macht doch mehr Sinn, oder etwa nicht? Nun kann man machen! Aber was ist der Zweck davon? Dann hat man weniger Spaß an den Süßigkeiten, und sollten wir deswegen weniger Sport treiben, auch noch weniger Spaß durch den Sport. Natürlich schadet man sich und seiner Gesundheit durch Fett und Süßigkeiten, aber das macht unser Leben nunmal aus. Freude spüren und das auch auf Kosten der Gesundheit. Cannabis Und hier landen wir bei meinen Cannabiskonsum. Ja, ich nehme Cannabis. Es hilft mir durch meine Depression. Ich bin wieder in der Lage, Freude an dingen zu spüren. Das Computerspielen macht mir Spaß, ich werde Kontaktfreudiger und generell aktiver, außerdem verspüre ich den Antrieb meine Probleme anzugehen. Die Gesundheitlichen Schäden? Ich bin alt genug, so das der Cannabiskonsum keine langzeitlichen Schäden mehr auf mein Gehirn anrichtet (Bitte nicht kiffen, wenn ihr jünger als 18, besser noch 21 Jahre alt seid!). Psychosen hat es bei mir nicht ausgelöst, und es ist immer noch umstritten ob es das überhaupt tut! Ich habe jetzt zwei packungen zwiback mit kokos und Dunkler Schokolade gegessen, saure bonbons und Marzipanschokolade. Dies war meiner gesundheit wahrscheinlich schädlicher, als der Cannabiskonsum. Aber hey, dafür habe ich ja das Fitness-Studio! Sind Drogen also schädlich? Ja und nein. Vieles was uns nunmal gut tut, richtet auch Schaden an. Dies gilt für alles in unserem Leben. Zu viel von etwas kann uns immer Schaden. So kann man genauso sexsüchtig sein, fettsüchtig oder von jeder anderer Sache die uns Spaß bereitet. Die Frage sollte also kein schwarz/weiß denken sein im Sinne von: Ist etwas gut oder schlecht. Sondern die Frage sollte immer sein: Überwiegen die positiven die negativen Effekte &amp;amp; kann ich es meiner Gesundheit antun? Auch muss die Antwort nicht eine volkommene Abstinenz von etwas sein. Es macht immer die Dosis das Gift. Wieviel Süßigkeiten, Fettes Essen, Alkohol, Koffein, Cannabis, Zucker, oder Sport tut uns den gut? Evtl. sollten wir das eine oder andere erhöhen oder verringern, es kommt immer auf ein Gesundes mittelmaß an! Die Frage stellt sich eher wo das mittelmaß beim Cannabis Konsum ist. Vielleicht einfach so viel das man sich gut fühlt jedoch nicht Abhängig von etwas ist? Wie ist Abhängigkeit eigentlich definiert? Ich denke in einem nächsten Blog werde ich auf diese Dinge genauer eingehen. Schlußszene Hinterlasst mir doch einen Kommentar wie euch dieser Artikel gefallen hat, oder was Ihr gerne Erfahren möchtet. Welche Erfahrung habt ihr mit Cannabis und seit ihr auch von Depressionen betroffen?</summary></entry><entry><title type="html">Understanding Fold</title><link href="https://sidburn.github.io/blog/2017/03/19/understanding-fold" rel="alternate" type="text/html" title="Understanding Fold" /><published>2017-03-19T00:00:00+01:00</published><updated>2017-03-19T00:00:00+01:00</updated><id>https://sidburn.github.io/blog/2017/03/19/understanding-fold</id><content type="html" xml:base="https://sidburn.github.io/blog/2017/03/19/understanding-fold">&lt;p&gt;A very important function in List-processing is the &lt;code&gt;List.fold&lt;/code&gt; function.
&lt;code&gt;List.fold&lt;/code&gt; is a very powerful function that gives you a lot of flexibility
to do any kind of list transformation. The disadvantage is that this kind of
power makes understanding &lt;code&gt;List.fold&lt;/code&gt; a lot harder. In this article we
look at some visualizations to better understand &lt;code&gt;List.fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First we need to understand how we visualize a function. A function has some
inputs and one output and we visualize it as a box with the inputs on
the top and the output on the bottom. As an example this function and
functions call:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 4)&quot; onmouseover=&quot;showTip(event, 'fs3', 4)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs2', 5)&quot; onmouseover=&quot;showTip(event, 'fs2', 5)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 6)&quot; onmouseover=&quot;showTip(event, 'fs2', 6)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 14&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 7)&quot; onmouseover=&quot;showTip(event, 'fs2', 7)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Will be visualized like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/01-times2.svg&quot; alt=&quot;The times2 functions as boxes&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We visualze a list like &lt;code&gt;[1;2;3;4;5]&lt;/code&gt; like that:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/02-list.svg&quot; alt=&quot;A list containing elements 1 to 5&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We don't directly jump to &lt;code&gt;List.fold&lt;/code&gt;, instead we work towards &lt;code&gt;List.fold&lt;/code&gt; by
first looking at &lt;code&gt;List.map&lt;/code&gt; and then &lt;code&gt;List.reduce&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;List.map&lt;/h2&gt;
&lt;p&gt;We could visualize a call like &lt;code&gt;List.map times2 [1;2;3;4;5]&lt;/code&gt; with the technique
we have seen so far. Draw a box with two inputs and a list as output. But we
are not interested in visualizing the &lt;code&gt;List.map&lt;/code&gt; call itself, we want to
visualize how &lt;code&gt;List.map&lt;/code&gt; internally works.&lt;/p&gt;
&lt;p&gt;We can think of &lt;code&gt;List.map&lt;/code&gt; as a function that applies its first argument, a function,
to every element of the list passed as the second argument.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/03-map.svg&quot; alt=&quot;Visualization for List.map example&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;List.map&lt;/code&gt; is a very useful function as executing a function for every element is
often needed in programming. On the other hand it is the exact opposite
of powerful, it is a very specific function that only can manipulate one element
of a list at a time. For example we cannot add all values of a list together, filter a
list and do other kind of things with a list.&lt;/p&gt;
&lt;h2&gt;List.reduce&lt;/h2&gt;
&lt;p&gt;To understand &lt;code&gt;List.reduce&lt;/code&gt; I use an example that is often used by others.
First let me say that I don't think this is the best way to explain &lt;code&gt;List.reduce&lt;/code&gt;
but it is still a good start.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 8)&quot; onmouseover=&quot;showTip(event, 'fs4', 8)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The result of the above statement is &lt;code&gt;15&lt;/code&gt;. You can imagine that &lt;code&gt;List.reduce&lt;/code&gt;
just puts the &lt;code&gt;+&lt;/code&gt; between every element in the list:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It isn't the best explanation because as it doesn't explain what this means:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 10)&quot; onmouseover=&quot;showTip(event, 'fs4', 10)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 11)&quot; onmouseover=&quot;showTip(event, 'fs5', 11)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Putting &lt;code&gt;someFunc&lt;/code&gt; between every element doesn't seem to make any sense!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// What does that mean?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;someFunc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we ignore this for a moment.&lt;/p&gt;
&lt;p&gt;First, we need to understand that &lt;code&gt;+&lt;/code&gt; is also just a function. For example
we could visualize &lt;code&gt;7 + 9&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/04-plus.svg&quot; alt=&quot;Visualization of: 7 + 9&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Second, if we calculate &lt;code&gt;1 + 2 + 3 + 4 + 5&lt;/code&gt; in our head then we don't do
it in one big step. We actually do a lot of steps and create a lot of
intermediate results.&lt;/p&gt;
&lt;p&gt;We first calculate &lt;code&gt;1 + 2&lt;/code&gt; and keep &lt;code&gt;3&lt;/code&gt; in our head. Then we calculate
&lt;code&gt;3 + 3&lt;/code&gt; and keep &lt;code&gt;6&lt;/code&gt; in our head. Then we calculate &lt;code&gt;6 + 4&lt;/code&gt; and finally
we do &lt;code&gt;10 + 5&lt;/code&gt; in our head. If we add parenthesis around every step we
do something like this in our head:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;((((&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This idea of doing multiple calculations and remembering an intermediate
value after each step is exactly how &lt;code&gt;List.reduce&lt;/code&gt; works.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/05-reduce.svg&quot; alt=&quot;Visualization of reduce&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;This visualization also explains how &lt;code&gt;List.reduce&lt;/code&gt; works if we pass it other
functions instead of operators like &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 12)&quot; onmouseover=&quot;showTip(event, 'fs4', 12)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 13)&quot; onmouseover=&quot;showTip(event, 'fs5', 13)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 14)&quot; onmouseover=&quot;showTip(event, 'fs6', 14)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;18&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/06-max.svg&quot; alt=&quot;Visualization of reduce with max&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We also can write it with parenthesis:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs6', 15)&quot; onmouseover=&quot;showTip(event, 'fs6', 15)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 16)&quot; onmouseover=&quot;showTip(event, 'fs6', 16)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 17)&quot; onmouseover=&quot;showTip(event, 'fs6', 17)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 18)&quot; onmouseover=&quot;showTip(event, 'fs6', 18)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;18&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is how &lt;code&gt;List.reduce&lt;/code&gt; works, but also &lt;code&gt;List.reduce&lt;/code&gt; has some limitations.&lt;/p&gt;
&lt;p&gt;First, what should &lt;code&gt;List.reduce&lt;/code&gt; do if you only pass a list with one or zero
elements? In the case of one argument it just returns this one element without
that functions like &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;max&lt;/code&gt; is executed once. In the case of zero arguments
it throws an exception.&lt;/p&gt;
&lt;p&gt;A second limitation is that we are still limited in which kind of list
transformations we can create. This becomes more obvious if we look at the
types of the function that we must pass to &lt;code&gt;List.reduce&lt;/code&gt;. We must pass
a function where all input and output types are the same and must be of
the type that the list contains.&lt;/p&gt;
&lt;p&gt;This becomes obvious if we look at how &lt;code&gt;List.reduce (+) [1;2;3;4;5]&lt;/code&gt; works. The
first calculation it does is &lt;code&gt;1 + 2&lt;/code&gt;. So it passes &lt;code&gt;1&lt;/code&gt; as the first argument
and &lt;code&gt;2&lt;/code&gt; as the second argument to &lt;code&gt;+&lt;/code&gt;. As both values come from the same list
and all values in a list must be of the same type it means both input values
must be the exact same type of the list.&lt;/p&gt;
&lt;p&gt;As the result of &lt;code&gt;1 + 2&lt;/code&gt; is again passed as the first argument to the next
&lt;code&gt;+&lt;/code&gt; call it also means the output of a function must be the same as its
input type.&lt;/p&gt;
&lt;p&gt;This means when we pass a list of &lt;code&gt;int&lt;/code&gt; to &lt;code&gt;List.reduce&lt;/code&gt; then we must pass a
&lt;code&gt;int -&amp;gt; int -&amp;gt; int&lt;/code&gt; function to &lt;code&gt;List.reduce&lt;/code&gt; and overall it also returns
an &lt;code&gt;int&lt;/code&gt; as the final value. More general, we need a function of type:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Another way to describe how &lt;code&gt;List.reduce&lt;/code&gt; works is to say it combines the first
two values of a list into a new single value and repeats doing this step until
we end up with a single value that is then returned.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/07-reduce2.svg&quot; alt=&quot;Another visualization of reduce&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The first visualization we have seen is more accurate, but also this
kind of idea leads you to the correct result of any &lt;code&gt;List.reduce&lt;/code&gt; call.&lt;/p&gt;
&lt;h2&gt;List.fold&lt;/h2&gt;
&lt;p&gt;Finally we are at &lt;code&gt;List.fold&lt;/code&gt;. The way how &lt;code&gt;List.fold&lt;/code&gt; works is pretty much
the exact same as &lt;code&gt;List.reduce&lt;/code&gt;! The only difference is that we pass an
initial starting value. Doesn't seems like a big deal but this initial
value fixes all limitations of &lt;code&gt;List.reduce&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 19)&quot; onmouseover=&quot;showTip(event, 'fs4', 19)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 20)&quot; onmouseover=&quot;showTip(event, 'fs7', 20)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;List.fold&lt;/code&gt; call above internally does something like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/08-fold.svg&quot; alt=&quot;Visualization of fold&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Overall &lt;code&gt;List.fold&lt;/code&gt; does one additional calculation compared to &lt;code&gt;List.reduce&lt;/code&gt;
because we pass it an initial value. But because of this it also always can
return a value even if we pass it an empty list. This way it doesn't need
to throw an exception.&lt;/p&gt;
&lt;p&gt;The biggest advantage is that we can use different types. As the initial
value is not part of the list it also can be another type.&lt;/p&gt;
&lt;p&gt;The initial value is passed as the first argument to the folder function,
the folder function then returns a new intermediate result that is used
for the next call. This tells us that the first argument and the return
value must be of the same type.&lt;/p&gt;
&lt;p&gt;Only the second argument of the folder function must be the type thats inside
of our list.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/09-fold-func.svg&quot; alt=&quot;List.fold annotated&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Let's say we want to traverse a list and build a string where every number
is just concatenated. Then we already know that the initial value must be
a string. The initial value must be a starting value, so we use the empty
string. Next we know that the the first argument of the folder function
is the initial value or any intermediate string, the second argument is
one element from the list, and we must return the next intermediate string
(or final return value).&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 21)&quot; onmouseover=&quot;showTip(event, 'fs4', 21)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 22)&quot; onmouseover=&quot;showTip(event, 'fs7', 22)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 23)&quot; onmouseover=&quot;showTip(event, 'fs8', 23)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 24)&quot; onmouseover=&quot;showTip(event, 'fs3', 24)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 25)&quot; onmouseover=&quot;showTip(event, 'fs8', 25)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs9', 26)&quot; onmouseover=&quot;showTip(event, 'fs9', 26)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 27)&quot; onmouseover=&quot;showTip(event, 'fs3', 27)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// &amp;quot;12345&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The execution of the above function looks like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/10-fold-string.svg&quot; alt=&quot;Building a string&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Instead of &lt;strong&gt;initial&lt;/strong&gt; or &lt;strong&gt;intermediate&lt;/strong&gt; value we use the term &lt;strong&gt;accumulator&lt;/strong&gt;,
hence the name &lt;code&gt;acc&lt;/code&gt; in the anonymous function.&lt;/p&gt;
&lt;p&gt;Now i want you to look at the following code:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 28)&quot; onmouseover=&quot;showTip(event, 'fs10', 28)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 29)&quot; onmouseover=&quot;showTip(event, 'fs3', 29)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs10', 30)&quot; onmouseover=&quot;showTip(event, 'fs10', 30)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 31)&quot; onmouseover=&quot;showTip(event, 'fs10', 31)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs9', 32)&quot; onmouseover=&quot;showTip(event, 'fs9', 32)&quot; class=&quot;f&quot;&gt;string&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 33)&quot; onmouseover=&quot;showTip(event, 'fs3', 33)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Can you see the similarities with the &lt;code&gt;List.fold&lt;/code&gt; function call?&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/11-fold-vs-loop.svg&quot; alt=&quot;Comparing fold with a loop&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In some way we can say that &lt;code&gt;List.fold&lt;/code&gt; for immutable data-types is what a
&lt;strong&gt;for-loop&lt;/strong&gt; is for mutable data-types. &lt;code&gt;List.fold&lt;/code&gt; is what you get if you try
to eliminate all mutable variables and data-types. The whole purpose of looping
is to mutate some state that is usually defined outside of the loop. In
&lt;code&gt;List.fold&lt;/code&gt; on the other hand the new state is always passed as an argument
and we need to return the new state for the next function call.&lt;/p&gt;
&lt;p&gt;It becomes more obvious if we go through the states of &lt;code&gt;acc&lt;/code&gt; in the loop based
code. We start with the empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;. In the first loop iteration &lt;code&gt;x&lt;/code&gt; is
assigned &lt;code&gt;1&lt;/code&gt; and we append this to &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;acc&lt;/code&gt; is set to &lt;code&gt;&quot;1&quot;&lt;/code&gt;. The second
loop iteration assigns &lt;code&gt;&quot;12&quot;&lt;/code&gt; to &lt;code&gt;acc&lt;/code&gt; and so on. These are exactly the states
our &lt;strong&gt;folder&lt;/strong&gt; function return in the &lt;code&gt;List.fold&lt;/code&gt; example.&lt;/p&gt;
&lt;p&gt;You also can easily convert other loop code to a &lt;code&gt;List.fold&lt;/code&gt;. As an example:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 34)&quot; onmouseover=&quot;showTip(event, 'fs11', 34)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 35)&quot; onmouseover=&quot;showTip(event, 'fs12', 35)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 36)&quot; onmouseover=&quot;showTip(event, 'fs13', 36)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 37)&quot; onmouseover=&quot;showTip(event, 'fs13', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs11', 38)&quot; onmouseover=&quot;showTip(event, 'fs11', 38)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 39)&quot; onmouseover=&quot;showTip(event, 'fs11', 39)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs12', 40)&quot; onmouseover=&quot;showTip(event, 'fs12', 40)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 41)&quot; onmouseover=&quot;showTip(event, 'fs12', 41)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 42)&quot; onmouseover=&quot;showTip(event, 'fs13', 42)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs11', 43)&quot; onmouseover=&quot;showTip(event, 'fs11', 43)&quot; class=&quot;v&quot;&gt;amountOfEvenNumbers&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 44)&quot; onmouseover=&quot;showTip(event, 'fs12', 44)&quot; class=&quot;v&quot;&gt;sumOfEvenNumbers&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Written as a fold:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 45)&quot; onmouseover=&quot;showTip(event, 'fs14', 45)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 46)&quot; onmouseover=&quot;showTip(event, 'fs15', 46)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs16', 47)&quot; onmouseover=&quot;showTip(event, 'fs16', 47)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs3', 48)&quot; onmouseover=&quot;showTip(event, 'fs3', 48)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs3', 49)&quot; onmouseover=&quot;showTip(event, 'fs3', 49)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 50)&quot; onmouseover=&quot;showTip(event, 'fs15', 50)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs16', 51)&quot; onmouseover=&quot;showTip(event, 'fs16', 51)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 52)&quot; onmouseover=&quot;showTip(event, 'fs3', 52)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 53)&quot; onmouseover=&quot;showTip(event, 'fs15', 53)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs16', 54)&quot; onmouseover=&quot;showTip(event, 'fs16', 54)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;)

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 55)&quot; onmouseover=&quot;showTip(event, 'fs17', 55)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs18', 56)&quot; onmouseover=&quot;showTip(event, 'fs18', 56)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 57)&quot; onmouseover=&quot;showTip(event, 'fs4', 57)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 58)&quot; onmouseover=&quot;showTip(event, 'fs7', 58)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 59)&quot; onmouseover=&quot;showTip(event, 'fs14', 59)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs17', 60)&quot; onmouseover=&quot;showTip(event, 'fs17', 60)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs18', 61)&quot; onmouseover=&quot;showTip(event, 'fs18', 61)&quot; class=&quot;i&quot;&gt;sum&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It's a bit different. As a &lt;code&gt;List.fold&lt;/code&gt; only supports one initial value
we use a Tuple with two values. In the mutation based code we don't need an
&lt;em&gt;else&lt;/em&gt; branch as nothing happens with an odd number. In the &lt;code&gt;List.fold&lt;/code&gt;
example we must explicitly return the unchanged state.&lt;/p&gt;
&lt;h2&gt;List.foldBack&lt;/h2&gt;
&lt;p&gt;As &lt;code&gt;List.fold&lt;/code&gt; is basically just a for-loop it should now become clear why it
is so powerful, yet some task are harder as it seems. As an example we want
to build our own &lt;code&gt;List.map&lt;/code&gt; with the help of &lt;code&gt;List.fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As the return value is a list our initial value also must be a list and we
start with the empty list as the initial value. Then we execute a user-defined function
for every element and the result must be added to the empty list.&lt;/p&gt;
&lt;p&gt;We could write something like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 62)&quot; onmouseover=&quot;showTip(event, 'fs19', 62)&quot; class=&quot;f&quot;&gt;map&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 63)&quot; onmouseover=&quot;showTip(event, 'fs20', 63)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 64)&quot; onmouseover=&quot;showTip(event, 'fs21', 64)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 65)&quot; onmouseover=&quot;showTip(event, 'fs22', 65)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 66)&quot; onmouseover=&quot;showTip(event, 'fs23', 66)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 67)&quot; onmouseover=&quot;showTip(event, 'fs24', 67)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 68)&quot; onmouseover=&quot;showTip(event, 'fs25', 68)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 69)&quot; onmouseover=&quot;showTip(event, 'fs20', 69)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 70)&quot; onmouseover=&quot;showTip(event, 'fs24', 70)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs25', 71)&quot; onmouseover=&quot;showTip(event, 'fs25', 71)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 72)&quot; onmouseover=&quot;showTip(event, 'fs23', 72)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs4', 73)&quot; onmouseover=&quot;showTip(event, 'fs4', 73)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 74)&quot; onmouseover=&quot;showTip(event, 'fs7', 74)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 75)&quot; onmouseover=&quot;showTip(event, 'fs22', 75)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; [] &lt;span onmouseout=&quot;hideTip(event, 'fs21', 76)&quot; onmouseover=&quot;showTip(event, 'fs21', 76)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs19', 77)&quot; onmouseover=&quot;showTip(event, 'fs19', 77)&quot; class=&quot;f&quot;&gt;map&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 78)&quot; onmouseover=&quot;showTip(event, 'fs2', 78)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [10; 8; 6; 4; 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The problem is how we build the list. The cons operator &lt;code&gt;::&lt;/code&gt; only can prepend
an element to a list, not append. Because of this we get &lt;code&gt;[10;8;6;4;2]&lt;/code&gt; instead
of the expected &lt;code&gt;[2;4;6;8;10]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is possible to write an &lt;code&gt;append&lt;/code&gt; function that appends a single element to
a list. The general problem is that this is a very inefficient operation with
an immutable list. Whenever you append an element a whole new list must be
created and all elements must be copied.&lt;/p&gt;
&lt;p&gt;A better approach would be to traverse the list in reverse order. We start at
the end (the right side) and prepend the result to an empty list. This is
excactly how &lt;code&gt;List.foldBack&lt;/code&gt; works.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 79)&quot; onmouseover=&quot;showTip(event, 'fs26', 79)&quot; class=&quot;f&quot;&gt;map&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 80)&quot; onmouseover=&quot;showTip(event, 'fs20', 80)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 81)&quot; onmouseover=&quot;showTip(event, 'fs21', 81)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 82)&quot; onmouseover=&quot;showTip(event, 'fs27', 82)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 83)&quot; onmouseover=&quot;showTip(event, 'fs24', 83)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 84)&quot; onmouseover=&quot;showTip(event, 'fs23', 84)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 85)&quot; onmouseover=&quot;showTip(event, 'fs25', 85)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 86)&quot; onmouseover=&quot;showTip(event, 'fs20', 86)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 87)&quot; onmouseover=&quot;showTip(event, 'fs24', 87)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs25', 88)&quot; onmouseover=&quot;showTip(event, 'fs25', 88)&quot; class=&quot;i&quot;&gt;newElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 89)&quot; onmouseover=&quot;showTip(event, 'fs23', 89)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs4', 90)&quot; onmouseover=&quot;showTip(event, 'fs4', 90)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 91)&quot; onmouseover=&quot;showTip(event, 'fs28', 91)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 92)&quot; onmouseover=&quot;showTip(event, 'fs27', 92)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 93)&quot; onmouseover=&quot;showTip(event, 'fs21', 93)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; []

&lt;span onmouseout=&quot;hideTip(event, 'fs26', 94)&quot; onmouseover=&quot;showTip(event, 'fs26', 94)&quot; class=&quot;f&quot;&gt;map&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 95)&quot; onmouseover=&quot;showTip(event, 'fs2', 95)&quot; class=&quot;f&quot;&gt;times2&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [2;4;6;8;10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:80%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2017/fold/12-foldback.svg&quot; alt=&quot;FoldBack that shows the map implementation&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;If you look at the visualization it also becomes clear why the order of the initial
value is different. In &lt;code&gt;List.fold&lt;/code&gt; you start from the left and the initial value
is also places on the left-side from the list.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;List.foldBack&lt;/code&gt; we start at the right and we also place the initial value at the
right-side of the list. The &lt;code&gt;List.fold&lt;/code&gt; and &lt;code&gt;List.foldBack&lt;/code&gt; resembles that idea.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 96)&quot; onmouseover=&quot;showTip(event, 'fs4', 96)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 97)&quot; onmouseover=&quot;showTip(event, 'fs7', 97)&quot; class=&quot;i&quot;&gt;fold&lt;/span&gt;     &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;initialValue&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 98)&quot; onmouseover=&quot;showTip(event, 'fs29', 98)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 99)&quot; onmouseover=&quot;showTip(event, 'fs4', 99)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs28', 100)&quot; onmouseover=&quot;showTip(event, 'fs28', 100)&quot; class=&quot;i&quot;&gt;foldBack&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 101)&quot; onmouseover=&quot;showTip(event, 'fs29', 101)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;         &lt;span class=&quot;i&quot;&gt;initialValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Also the folder function receives the accumulator as the second argument
(right argument) in &lt;code&gt;List.foldback&lt;/code&gt; while &lt;code&gt;List.fold&lt;/code&gt; receives it as the first
argument (left argument).&lt;/p&gt;
&lt;h2&gt;Exercises&lt;/h2&gt;
&lt;p&gt;If you truly want to understand those function you should do some exercises.
As an exercise you should re-create the following List functions with either
&lt;code&gt;List.fold&lt;/code&gt; or &lt;code&gt;List.foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Function&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Description&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;length xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Returns the amount of elements in a list&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;rev xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Reverses a list&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;map f xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Runs a function on every element of a list&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;filter predicate xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Only keep those elements that predicate returns true for&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;forAll predicate xs&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Returns true if all elements of the list return true for the predicate&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Other languages use different namens for these operations, but the logic
stays the same.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th align=&quot;left&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;List.fold&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;List.foldBack&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;List.reduce&lt;/p&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;&lt;p&gt;Comment&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;C# (LINQ)&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Aggregate&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Aggregate&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Aggregate accepts 2 or 3 arguments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduceRight&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;Array.reduce accepts 2 or 3 arguments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;Elm&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldl&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldr&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;None&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldl&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldr&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;foldl1&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;None&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;&lt;strong&gt;Clojure&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;reduce&lt;/p&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;p&gt;reduce accepts 2 or 3 arguments&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;List.fold&lt;/code&gt; and &lt;code&gt;List.foldBack&lt;/code&gt; functions are powerful function, but this
doesn't mean they are &quot;good&quot;. In general you should avoid powerful language
constructs. Functions like &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;filter&lt;/code&gt; are overall less powerful but
many times easier to understand. This is also the idea of
&lt;a href=&quot;/blog/2016/03/09/structured-programming&quot;&gt;Structured Programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But avoiding doesn't mean: &quot;Never use it&quot;. If you need a special list manipulation
and there doesn't exists a built-in function then use &lt;code&gt;List.fold&lt;/code&gt; or &lt;code&gt;List.foldBack&lt;/code&gt;
and create the needed function on your own.&lt;/p&gt;
&lt;p&gt;Besides list manipulation (list as input and list as output), &lt;code&gt;List.fold&lt;/code&gt; and
&lt;code&gt;List.foldBack&lt;/code&gt; are the best functions if you want to convert a list to any other
non-list data-types.&lt;/p&gt;
&lt;p&gt;If you are interested in more code examples and you want to know how to implement
&lt;code&gt;List.fold&lt;/code&gt; and &lt;code&gt;List.foldBack&lt;/code&gt; yourself you also can read
&lt;a href=&quot;/blog/2016/04/05/mutable-loops-to-immutability&quot;&gt;From mutable loops to immutable folds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nowadays &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; functions are not only implemented for the List
data-type. The idea was generalized and is known as
&lt;a href=&quot;/blog/2016/05/28/catamorphisms&quot;&gt;Catamorphisms&lt;/a&gt;. You should
know about &lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic Data-Types&lt;/a&gt;
especially recursive data-types beforehand to understand them.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val times2 : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.times2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val acc : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val mutable acc : string&lt;br /&gt;&lt;br /&gt;Full name: Main.acc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val mutable amountOfEvenNumbers : int&lt;br /&gt;&lt;br /&gt;Full name: Main.amountOfEvenNumbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val mutable sumOfEvenNumbers : int&lt;br /&gt;&lt;br /&gt;Full name: Main.sumOfEvenNumbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val x : int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val folder : amount:int * sum:int -&amp;gt; x:int -&amp;gt; int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.folder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val amount : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val sum : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val amount : int&lt;br /&gt;&lt;br /&gt;Full name: Main.amount&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val sum : int&lt;br /&gt;&lt;br /&gt;Full name: Main.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val map&amp;#39; : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.map&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;a list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val folder : (&amp;#39;b list -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;b list)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val acc : &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val newElement : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val map&amp;#39;&amp;#39; : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list&lt;br /&gt;&lt;br /&gt;Full name: Main.map&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;b list -&amp;gt; &amp;#39;b list)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val foldBack : folder:(&amp;#39;T -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;T list -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><category term="list" /><category term="fold" /><summary type="html">A very important function in List-processing is the List.fold function. List.fold is a very powerful function that gives you a lot of flexibility to do any kind of list transformation. The disadvantage is that this kind of power makes understanding List.fold a lot harder. In this article we look at some visualizations to better understand List.fold. First we need to understand how we visualize a function. A function has some inputs and one output and we visualize it as a box with the inputs on the top and the output on the bottom. As an example this function and functions call: 1: 2: 3: 4: 5: let times2 x = x * 2</summary></entry><entry><title type="html">Variable Arguments in F#</title><link href="https://sidburn.github.io/blog/2017/03/13/variable-arguments" rel="alternate" type="text/html" title="Variable Arguments in F#" /><published>2017-03-13T00:00:00+01:00</published><updated>2017-03-13T00:00:00+01:00</updated><id>https://sidburn.github.io/blog/2017/03/13/variable-arguments</id><content type="html" xml:base="https://sidburn.github.io/blog/2017/03/13/variable-arguments">&lt;p&gt;One question that appears in F# from time to time is: How do you create a
function that expects a variable amount of arguments?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A short answer is:&lt;/strong&gt; You can't do that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A longer and correct answer:&lt;/strong&gt; You can do it with (static) methods.
But you probably don't want to use this and look for an alternative.&lt;/p&gt;
&lt;p&gt;First we should look at the difference between an F# function and a (static)
method.&lt;/p&gt;
&lt;h2&gt;F# Functions vs. (static) methods&lt;/h2&gt;
&lt;p&gt;Usually I don't distinguish between those two as both just execute
some code and return some value. But in this case we must differentiate
them. An F# function is any function defined with the &lt;code&gt;let&lt;/code&gt; keyword.
F# functions are usually defined inside of modules or inside of other
functions.&lt;/p&gt;
&lt;p&gt;A (static) method on the other hand is part of a class definition. The
definition is different, but using (static) methods or functions can look
the same. The biggest difference is that (static) methods often use
tupled-syntax while F# functions use currying. But you are not restricted
to the one or other.&lt;/p&gt;
&lt;p&gt;You can use currying and a tupled syntax in F# functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;SomeModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Currying&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;f&quot;&gt;funcC&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Tuple&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;f&quot;&gt;funcT&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 6)&quot; onmouseover=&quot;showTip(event, 'fs3', 6)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;You could call both functions like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;t&quot;&gt;SomeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 9)&quot; onmouseover=&quot;showTip(event, 'fs2', 9)&quot; class=&quot;f&quot;&gt;funcC&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs6', 10)&quot; onmouseover=&quot;showTip(event, 'fs6', 10)&quot; class=&quot;t&quot;&gt;SomeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 11)&quot; onmouseover=&quot;showTip(event, 'fs5', 11)&quot; class=&quot;f&quot;&gt;funcT&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The second version looks a lot like calling a function in other languages
from C, C#, Java and so on and this is not an accident. But F# is
really consistent in its syntax. Whenever you see parenthesis
and values separated with commas then you really just define a tuple.
Because of this you also could write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 12)&quot; onmouseover=&quot;showTip(event, 'fs7', 12)&quot; class=&quot;i&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;t&quot;&gt;SomeModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 14)&quot; onmouseover=&quot;showTip(event, 'fs5', 14)&quot; class=&quot;f&quot;&gt;funcT&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 15)&quot; onmouseover=&quot;showTip(event, 'fs7', 15)&quot; class=&quot;i&quot;&gt;args&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is something you cannot do in C, C#, Java and so on. Calling a function
looks the same but the meaning is different. All of this is also possible
with (static) methods.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 16)&quot; onmouseover=&quot;showTip(event, 'fs8', 16)&quot; class=&quot;t&quot;&gt;SomeClass&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;funcC&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;funcT&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;you can call it in the same way&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 17)&quot; onmouseover=&quot;showTip(event, 'fs8', 17)&quot; class=&quot;i&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;funcC&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;i&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;funcT&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, why is any of this important?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In F# you usually want to work with curried functions.&lt;/li&gt;
&lt;li&gt;Variable Arguments are only supported with tupled (static) methods.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Variable Arguments&lt;/h2&gt;
&lt;p&gt;First lets focus on the second point. So we only can use variable
arguments if we create a class, and use tupled syntax. As a light
example let's build a &lt;code&gt;max&lt;/code&gt; function that returns the biggest
element from all arguments we pass to it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Util&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 51)&quot; onmouseover=&quot;showTip(event, 'fs27', 51)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;([&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 52)&quot; onmouseover=&quot;showTip(event, 'fs11', 52)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 53)&quot; onmouseover=&quot;showTip(event, 'fs12', 53)&quot; class=&quot;t&quot;&gt;ParamArray&lt;/span&gt;&amp;gt;] &lt;span onmouseout=&quot;hideTip(event, 'fs28', 54)&quot; onmouseover=&quot;showTip(event, 'fs28', 54)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 55)&quot; onmouseover=&quot;showTip(event, 'fs14', 55)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 56)&quot; onmouseover=&quot;showTip(event, 'fs15', 56)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 57)&quot; onmouseover=&quot;showTip(event, 'fs16', 57)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 58)&quot; onmouseover=&quot;showTip(event, 'fs28', 58)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 59)&quot; onmouseover=&quot;showTip(event, 'fs9', 59)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 60)&quot; onmouseover=&quot;showTip(event, 'fs29', 60)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)         &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 61)&quot; onmouseover=&quot;showTip(event, 'fs9', 61)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 62)&quot; onmouseover=&quot;showTip(event, 'fs29', 62)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 63)&quot; onmouseover=&quot;showTip(event, 'fs9', 63)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 64)&quot; onmouseover=&quot;showTip(event, 'fs29', 64)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)         &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The concept of a variable argument function is easy. You just use a normal
argument and add the attribute &lt;code&gt;[&amp;lt;System.ParamArray&amp;gt;]&lt;/code&gt; to it. Only the
last argument can be flagged with the attribute. And finally, you receive all
arguments as an array.&lt;/p&gt;
&lt;h2&gt;Why you should avoid variable arguments&lt;/h2&gt;
&lt;p&gt;Previously I said that when you use parenthesis and separate values with
comma it is a tuple. In fact this kind of consistency is broken with &lt;code&gt;ParamArray&lt;/code&gt;.
You can see the difference in this extended example:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 65)&quot; onmouseover=&quot;showTip(event, 'fs30', 65)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 66)&quot; onmouseover=&quot;showTip(event, 'fs31', 66)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;([&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 67)&quot; onmouseover=&quot;showTip(event, 'fs11', 67)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 68)&quot; onmouseover=&quot;showTip(event, 'fs12', 68)&quot; class=&quot;t&quot;&gt;ParamArray&lt;/span&gt;&amp;gt;] &lt;span onmouseout=&quot;hideTip(event, 'fs32', 69)&quot; onmouseover=&quot;showTip(event, 'fs32', 69)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 70)&quot; onmouseover=&quot;showTip(event, 'fs14', 70)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 71)&quot; onmouseover=&quot;showTip(event, 'fs15', 71)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 72)&quot; onmouseover=&quot;showTip(event, 'fs16', 72)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 73)&quot; onmouseover=&quot;showTip(event, 'fs32', 73)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 74)&quot; onmouseover=&quot;showTip(event, 'fs33', 74)&quot; class=&quot;f&quot;&gt;max4&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs34', 75)&quot; onmouseover=&quot;showTip(event, 'fs34', 75)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 76)&quot; onmouseover=&quot;showTip(event, 'fs35', 76)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 77)&quot; onmouseover=&quot;showTip(event, 'fs36', 77)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 78)&quot; onmouseover=&quot;showTip(event, 'fs37', 78)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;)                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 79)&quot; onmouseover=&quot;showTip(event, 'fs14', 79)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 80)&quot; onmouseover=&quot;showTip(event, 'fs15', 80)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 81)&quot; onmouseover=&quot;showTip(event, 'fs16', 81)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [|&lt;span onmouseout=&quot;hideTip(event, 'fs34', 82)&quot; onmouseover=&quot;showTip(event, 'fs34', 82)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 83)&quot; onmouseover=&quot;showTip(event, 'fs35', 83)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs36', 84)&quot; onmouseover=&quot;showTip(event, 'fs36', 84)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs37', 85)&quot; onmouseover=&quot;showTip(event, 'fs37', 85)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;|]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 86)&quot; onmouseover=&quot;showTip(event, 'fs38', 86)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs9', 87)&quot; onmouseover=&quot;showTip(event, 'fs9', 87)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 88)&quot; onmouseover=&quot;showTip(event, 'fs39', 88)&quot; class=&quot;f&quot;&gt;max4&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 89)&quot; onmouseover=&quot;showTip(event, 'fs9', 89)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 90)&quot; onmouseover=&quot;showTip(event, 'fs39', 90)&quot; class=&quot;f&quot;&gt;max4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 91)&quot; onmouseover=&quot;showTip(event, 'fs38', 91)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 92)&quot; onmouseover=&quot;showTip(event, 'fs9', 92)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 93)&quot; onmouseover=&quot;showTip(event, 'fs29', 93)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;  (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 94)&quot; onmouseover=&quot;showTip(event, 'fs9', 94)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 95)&quot; onmouseover=&quot;showTip(event, 'fs29', 95)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs38', 96)&quot; onmouseover=&quot;showTip(event, 'fs38', 96)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;// (1,10,30,15)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Both &lt;code&gt;Util.max4&lt;/code&gt; calls return &lt;code&gt;30&lt;/code&gt; because this function expects a tuple with
four arguments and we pass this to &lt;code&gt;Util.max4&lt;/code&gt; in both cases.&lt;/p&gt;
&lt;p&gt;But the &lt;code&gt;Util.max&lt;/code&gt; calls completely differ. In the first example we really pass
four arguments, but in the second &lt;code&gt;Util.max&lt;/code&gt; example we really pass a single
value, a tuple containing four elements.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParamArray&lt;/code&gt; really is an inconsistency in the language. I wouldn't even say this
was a bad decision. If you use a variable arguments function defined in C# from F#
it absolutely makes sense to break this consistency. In fact this inconsistency can
even feel more consistent. A C# static method that you call from F# with four
arguments looks like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 102)&quot; onmouseover=&quot;showTip(event, 'fs40', 102)&quot; class=&quot;i&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Func&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs34', 103)&quot; onmouseover=&quot;showTip(event, 'fs34', 103)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 104)&quot; onmouseover=&quot;showTip(event, 'fs35', 104)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 105)&quot; onmouseover=&quot;showTip(event, 'fs36', 105)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 106)&quot; onmouseover=&quot;showTip(event, 'fs37', 106)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;a static method with variable arguments that you also pass four arguments also looks like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs40', 102)&quot; onmouseover=&quot;showTip(event, 'fs40', 102)&quot; class=&quot;i&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;Func&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs34', 103)&quot; onmouseover=&quot;showTip(event, 'fs34', 103)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs35', 104)&quot; onmouseover=&quot;showTip(event, 'fs35', 104)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs36', 105)&quot; onmouseover=&quot;showTip(event, 'fs36', 105)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs37', 106)&quot; onmouseover=&quot;showTip(event, 'fs37', 106)&quot; class=&quot;i&quot;&gt;d&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So it is consistent or inconsistent depending from which way you look at it.&lt;/p&gt;
&lt;p&gt;But rather arguing with consistency the important part I consider is that it
behaves differently and you cannot see that from the code. When I look at
code like &lt;code&gt;Class.func(a,b,c,d)&lt;/code&gt; I could assume that it is a function that
expects four arguments. It isn't obvious that I can add a fifth argument
or probably use less arguments.&lt;/p&gt;
&lt;p&gt;The biggest problem in my opinion is that most of the time you already have
a collection like a list and you just want to pass that list to a function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 107)&quot; onmouseover=&quot;showTip(event, 'fs41', 107)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs9', 108)&quot; onmouseover=&quot;showTip(event, 'fs9', 108)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 109)&quot; onmouseover=&quot;showTip(event, 'fs29', 109)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [20;14;37;16]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 110)&quot; onmouseover=&quot;showTip(event, 'fs9', 110)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 111)&quot; onmouseover=&quot;showTip(event, 'fs29', 111)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 112)&quot; onmouseover=&quot;showTip(event, 'fs41', 112)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;// [20;14;37;16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If you already have a list, then variable arguments doesn't help you at all.
In fact you must write other code like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 113)&quot; onmouseover=&quot;showTip(event, 'fs42', 113)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs43', 114)&quot; onmouseover=&quot;showTip(event, 'fs43', 114)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 115)&quot; onmouseover=&quot;showTip(event, 'fs44', 115)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 116)&quot; onmouseover=&quot;showTip(event, 'fs45', 116)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 117)&quot; onmouseover=&quot;showTip(event, 'fs9', 117)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 118)&quot; onmouseover=&quot;showTip(event, 'fs29', 118)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs44', 119)&quot; onmouseover=&quot;showTip(event, 'fs44', 119)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs45', 120)&quot; onmouseover=&quot;showTip(event, 'fs45', 120)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 121)&quot; onmouseover=&quot;showTip(event, 'fs41', 121)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is pretty much exactly how &lt;code&gt;Util.max()&lt;/code&gt; itself is implemented! On top
it's a bit longer, because you cannot just write
&lt;code&gt;List.reduce Util.max numbers&lt;/code&gt;. &lt;code&gt;List.reduce&lt;/code&gt; expect a curried two argument
function, not a tupled two argument function!&lt;/p&gt;
&lt;p&gt;The funny thing is: It works differently with an Array. Actually you can write
stuff like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 122)&quot; onmouseover=&quot;showTip(event, 'fs46', 122)&quot; class=&quot;i&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;|]

&lt;span onmouseout=&quot;hideTip(event, 'fs9', 123)&quot; onmouseover=&quot;showTip(event, 'fs9', 123)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 124)&quot; onmouseover=&quot;showTip(event, 'fs29', 124)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 125)&quot; onmouseover=&quot;showTip(event, 'fs46', 125)&quot; class=&quot;i&quot;&gt;array&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 126)&quot; onmouseover=&quot;showTip(event, 'fs9', 126)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 127)&quot; onmouseover=&quot;showTip(event, 'fs29', 127)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;37&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;|]     &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 128)&quot; onmouseover=&quot;showTip(event, 'fs9', 128)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 129)&quot; onmouseover=&quot;showTip(event, 'fs29', 129)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs14', 130)&quot; onmouseover=&quot;showTip(event, 'fs14', 130)&quot; class=&quot;t&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 131)&quot; onmouseover=&quot;showTip(event, 'fs47', 131)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 132)&quot; onmouseover=&quot;showTip(event, 'fs41', 132)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 37&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So you can pass arrays, and arrays are not considered as passing one argument.
This also works with functions with fixed arguments.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 133)&quot; onmouseover=&quot;showTip(event, 'fs30', 133)&quot; class=&quot;i&quot;&gt;Util&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;amount&lt;/span&gt;, [&amp;lt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 134)&quot; onmouseover=&quot;showTip(event, 'fs11', 134)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 135)&quot; onmouseover=&quot;showTip(event, 'fs12', 135)&quot; class=&quot;i&quot;&gt;ParamArray&lt;/span&gt;&amp;gt;] &lt;span class=&quot;i&quot;&gt;xs&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 136)&quot; onmouseover=&quot;showTip(event, 'fs14', 136)&quot; class=&quot;i&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 137)&quot; onmouseover=&quot;showTip(event, 'fs25', 137)&quot; class=&quot;i&quot;&gt;collect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs14', 138)&quot; onmouseover=&quot;showTip(event, 'fs14', 138)&quot; class=&quot;i&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 139)&quot; onmouseover=&quot;showTip(event, 'fs26', 139)&quot; class=&quot;i&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;amount&lt;/span&gt;) &lt;span class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The idea is that you can pass a variable amount of elements, and the first argument
describes how often every element gets repeated.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 140)&quot; onmouseover=&quot;showTip(event, 'fs9', 140)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 141)&quot; onmouseover=&quot;showTip(event, 'fs48', 141)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)      &lt;span class=&quot;c&quot;&gt;// [|1; 1; 1; 2; 2; 2; 3; 3; 3|]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 142)&quot; onmouseover=&quot;showTip(event, 'fs9', 142)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 143)&quot; onmouseover=&quot;showTip(event, 'fs48', 143)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, [|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]) &lt;span class=&quot;c&quot;&gt;// [|1; 1; 1; 2; 2; 2; 3; 3; 3|]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs9', 144)&quot; onmouseover=&quot;showTip(event, 'fs9', 144)&quot; class=&quot;t&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 145)&quot; onmouseover=&quot;showTip(event, 'fs48', 145)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;])   &lt;span class=&quot;c&quot;&gt;// [|[1; 2; 3]; [1; 2; 3]; [1; 2; 3]|]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So the first and second function calls are the same, but the third one is different.
It works with arrays but not with lists. By the way here we see how &lt;code&gt;ParamArray&lt;/code&gt;
could be implemented in F# from the beginning and still maintain consistency by
always expecting an &lt;code&gt;Array&lt;/code&gt; and disallowing the first notation.&lt;/p&gt;
&lt;p&gt;The Last reason why it might be a bad idea is because in F# everything is really
build around the concepts of currying. A tupled syntax like in &lt;code&gt;Util.replicate&lt;/code&gt;
means we always must pass all arguments. We cannot just partial apply
only the first argument and write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs30', 146)&quot; onmouseover=&quot;showTip(event, 'fs30', 146)&quot; class=&quot;i&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;replicate&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The reason why we want to write this is to allow a more sequence based approach.
As an example. We would want to write it like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// This doesn&amp;#39;t work&lt;/span&gt;
[|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 147)&quot; onmouseover=&quot;showTip(event, 'fs30', 147)&quot; class=&quot;i&quot;&gt;Util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, in this small example you gain not much from this kind of piping-style.
But you usually want functions that work well with piping. It's important to notice
that piping doesn't work because we have the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator. Piping really works
because we have curried function that we can call without passing all arguments!&lt;/p&gt;
&lt;p&gt;Currying is the reason we can choose to write &lt;code&gt;func a b&lt;/code&gt; or &lt;code&gt;b |&amp;gt; func a&lt;/code&gt;.
With tupled-syntax we really lose this advantage, and we also must write
more parenthesis and commas.&lt;/p&gt;
&lt;h2&gt;The Alternative&lt;/h2&gt;
&lt;p&gt;So, instead of variable arguments, what should we do instead? We should just
expect a collection as an argument! If you expect &lt;code&gt;Seq&lt;/code&gt; then a user also can
pass an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;List&lt;/code&gt; as an argument.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 148)&quot; onmouseover=&quot;showTip(event, 'fs49', 148)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 149)&quot; onmouseover=&quot;showTip(event, 'fs50', 149)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 150)&quot; onmouseover=&quot;showTip(event, 'fs51', 150)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 151)&quot; onmouseover=&quot;showTip(event, 'fs52', 151)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 152)&quot; onmouseover=&quot;showTip(event, 'fs16', 152)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 153)&quot; onmouseover=&quot;showTip(event, 'fs50', 153)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 154)&quot; onmouseover=&quot;showTip(event, 'fs53', 154)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 155)&quot; onmouseover=&quot;showTip(event, 'fs23', 155)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 156)&quot; onmouseover=&quot;showTip(event, 'fs54', 156)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 157)&quot; onmouseover=&quot;showTip(event, 'fs51', 157)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs55', 158)&quot; onmouseover=&quot;showTip(event, 'fs55', 158)&quot; class=&quot;f&quot;&gt;collect&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 159)&quot; onmouseover=&quot;showTip(event, 'fs51', 159)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs56', 160)&quot; onmouseover=&quot;showTip(event, 'fs56', 160)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 161)&quot; onmouseover=&quot;showTip(event, 'fs23', 161)&quot; class=&quot;i&quot;&gt;amount&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs54', 162)&quot; onmouseover=&quot;showTip(event, 'fs54', 162)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 163)&quot; onmouseover=&quot;showTip(event, 'fs57', 163)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs49', 164)&quot; onmouseover=&quot;showTip(event, 'fs49', 164)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 165)&quot; onmouseover=&quot;showTip(event, 'fs57', 165)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 166)&quot; onmouseover=&quot;showTip(event, 'fs49', 166)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]        &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 167)&quot; onmouseover=&quot;showTip(event, 'fs49', 167)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]      &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 168)&quot; onmouseover=&quot;showTip(event, 'fs49', 168)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs58', 169)&quot; onmouseover=&quot;showTip(event, 'fs58', 169)&quot; class=&quot;i&quot;&gt;seq&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;}) &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs53', 170)&quot; onmouseover=&quot;showTip(event, 'fs53', 170)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 171)&quot; onmouseover=&quot;showTip(event, 'fs57', 171)&quot; class=&quot;i&quot;&gt;numbers&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs53', 172)&quot; onmouseover=&quot;showTip(event, 'fs53', 172)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]        &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs53', 173)&quot; onmouseover=&quot;showTip(event, 'fs53', 173)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; [|&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;|]      &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs53', 174)&quot; onmouseover=&quot;showTip(event, 'fs53', 174)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs58', 175)&quot; onmouseover=&quot;showTip(event, 'fs58', 175)&quot; class=&quot;i&quot;&gt;seq&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;}) &lt;span class=&quot;c&quot;&gt;// seq [1;1;1;2;2;2;3;3;3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Instead of variable arguments you should just expect a &lt;code&gt;Seq&lt;/code&gt; as an argument
to a function. It's very easy to create &lt;code&gt;List&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; in F# and you can
directly inline those creations with a function call. You don't get problems
if you already have a collection. With currying you can use functions in a
piping-style and you can use partial application.&lt;/p&gt;
&lt;p&gt;But more important, its easy to see that arguments are variable because you
pass a &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Seq&lt;/code&gt; as an argument. My recommendation is just
simply: &lt;strong&gt;Avoid functions with variable arguments.&lt;/strong&gt;&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val funcC : a:&amp;#39;a -&amp;gt; b:&amp;#39;b -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeModule.funcC&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val a : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val b : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val funcT : a:&amp;#39;a * b:&amp;#39;b -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeModule.funcT&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;module SomeModule&lt;br /&gt;&lt;br /&gt;from variablearguments&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val args : obj * obj&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.args&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;Multiple items&lt;br /&gt;type SomeClass =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; SomeClass&lt;br /&gt;&amp;#160;&amp;#160;static member max : [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeClass&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; SomeClass&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;Multiple items&lt;br /&gt;type Util =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Util&lt;br /&gt;&amp;#160;&amp;#160;static member max : [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;c [] -&amp;gt; &amp;#39;c (requires comparison)&lt;br /&gt;&amp;#160;&amp;#160;static member max4 : a:&amp;#39;b * b:&amp;#39;b * c:&amp;#39;b * d:&amp;#39;b -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&amp;#160;&amp;#160;static member replicate : amount:int * [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a []&lt;br /&gt;&lt;br /&gt;Full name: Main.Util&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; Util&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;static member Util.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;c [] -&amp;gt; &amp;#39;c (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.Util.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;Multiple items&lt;br /&gt;type ParamArrayAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; ParamArrayAttribute&lt;br /&gt;&lt;br /&gt;Full name: System.ParamArrayAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.ParamArrayAttribute() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val xs : &amp;#39;c [] (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;module Array&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; array:&amp;#39;T [] -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;static member Util.max4 : a:&amp;#39;b * b:&amp;#39;b * c:&amp;#39;b * d:&amp;#39;b -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.Util.max4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val a : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val b : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val c : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val d : &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;static member Util.replicate : amount:int * [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a []&lt;br /&gt;&lt;br /&gt;Full name: Main.Util.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val amount : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val xs : &amp;#39;a []&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val collect : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U []) -&amp;gt; array:&amp;#39;T [] -&amp;gt; &amp;#39;U []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.collect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val replicate : count:int -&amp;gt; initial:&amp;#39;T -&amp;gt; &amp;#39;T []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;static member SomeClass.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.SomeClass.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val xs : &amp;#39;a [] (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;static member Util.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;c [] -&amp;gt; &amp;#39;c (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;Multiple items&lt;br /&gt;type Util =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Util&lt;br /&gt;&amp;#160;&amp;#160;static member max : [&amp;lt;ParamArray&amp;gt;] xs:&amp;#39;b [] -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&amp;#160;&amp;#160;static member max4 : a:&amp;#39;a * b:&amp;#39;a * c:&amp;#39;a * d:&amp;#39;a -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.Util&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; Util&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;static member Util.max : [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;b [] -&amp;gt; &amp;#39;b (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.Util.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val xs : &amp;#39;b [] (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;static member Util.max4 : a:&amp;#39;a * b:&amp;#39;a * c:&amp;#39;a * d:&amp;#39;a -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: variablearguments.Util.max4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val a : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val b : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val c : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val d : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val nums : int * int * int * int&lt;br /&gt;&lt;br /&gt;Full name: Main.nums&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;static member Util.max4 : a:&amp;#39;b * b:&amp;#39;b * c:&amp;#39;b * d:&amp;#39;b -&amp;gt; &amp;#39;b (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;Multiple items&lt;br /&gt;type ClassAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; ClassAttribute&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ClassAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; ClassAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;Multiple items&lt;br /&gt;val list : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.list&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;Multiple items&lt;br /&gt;val array : int []&lt;br /&gt;&lt;br /&gt;Full name: Main.array&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T array = &amp;#39;T []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.array&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val ofList : list:&amp;#39;T list -&amp;gt; &amp;#39;T []&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Array.ofList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;static member Util.replicate : amount:int * [&amp;lt;System.ParamArray&amp;gt;] xs:&amp;#39;a [] -&amp;gt; &amp;#39;a []&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val max : xs:seq&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;a (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val xs : seq&amp;lt;&amp;#39;a&amp;gt; (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;module Seq&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val replicate : amount:int -&amp;gt; xs:seq&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val xs : seq&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val collect : mapping:(&amp;#39;T -&amp;gt; #seq&amp;lt;&amp;#39;U&amp;gt;) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;U&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.collect&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val replicate : count:int -&amp;gt; initial:&amp;#39;T -&amp;gt; seq&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val numbers : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.numbers&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;Multiple items&lt;br /&gt;val seq : sequence:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; seq&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.seq&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type seq&amp;lt;&amp;#39;T&amp;gt; = System.Collections.Generic.IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.seq&amp;lt;_&amp;gt;&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><summary type="html">One question that appears in F# from time to time is: How do you create a function that expects a variable amount of arguments? A short answer is: You can't do that. A longer and correct answer: You can do it with (static) methods. But you probably don't want to use this and look for an alternative. First we should look at the difference between an F# function and a (static) method. F# Functions vs. (static) methods Usually I don't distinguish between those two as both just execute some code and return some value. But in this case we must differentiate them. An F# function is any function defined with the let keyword. F# functions are usually defined inside of modules or inside of other functions. A (static) method on the other hand is part of a class definition. The definition is different, but using (static) methods or functions can look the same. The biggest difference is that (static) methods often use tupled-syntax while F# functions use currying. But you are not restricted to the one or other. You can use currying and a tupled syntax in F# functions. 1: 2: 3: 4: 5: 6: module SomeModule = // Currying let funcC a b = ...</summary></entry><entry><title type="html">Mutability vs. Immutability: Valid objects</title><link href="https://sidburn.github.io/blog/2017/02/27/mutability-vs-immutability-validation" rel="alternate" type="text/html" title="Mutability vs. Immutability: Valid objects" /><published>2017-02-27T00:00:00+01:00</published><updated>2017-02-27T00:00:00+01:00</updated><id>https://sidburn.github.io/blog/2017/02/27/mutability-vs-immutability-validation</id><content type="html" xml:base="https://sidburn.github.io/blog/2017/02/27/mutability-vs-immutability-validation">&lt;p&gt;I already wrote &lt;a href=&quot;/blog/2016/03/14/immutability-and-pure-functions&quot;&gt;an article that explains immutability&lt;/a&gt;,
but one thing I hand-waved was the benefits of immutability and why you should
program with immutable values.&lt;/p&gt;
&lt;p&gt;In this article I talk about those benefits by trying to maintaining valid
objects at all time and show how we can achieve it with mutability and
immutability.&lt;/p&gt;
&lt;p&gt;One question might be why I'm not just showing the immutable part. I could do
this, but the problem I see is that it isn't so obvious how hard the mutable
part really is.&lt;/p&gt;
&lt;p&gt;Because of this, first I show all the things you have to keep in mind if you work
with mutability. Then we see how immutability helps us.&lt;/p&gt;
&lt;h2&gt;About this article&lt;/h2&gt;
&lt;p&gt;Throughout this article I will use C# and F#. I use C# for the mutable examples
and F# for the immutable example. There are multiple reasons for this decision:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
Mutability is best handled by classes and C# is built around that concepts
and everything by default is mutable.
&lt;/li&gt;
&lt;li&gt;
Immutability is best handled by immutable data-types and functions that
operate on them. In F# everything is immutable by default.
&lt;/li&gt;
&lt;li&gt;
If you are new to F#, probably this article can help a little bit if
you see how C# code translates to F#.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Throughout this article I use some words, and you should know my definition
of those words to avoid confusion:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: State, mutable objects or mutability is just used interchangeable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Object&lt;/strong&gt;: The word &lt;em&gt;object&lt;/em&gt; is not limited to OOP. In general it just means
&lt;strong&gt;a thing&lt;/strong&gt;. Also F# data-types like records, unions or tuples are just objects.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Function&lt;/strong&gt;: Anything that you somehow execute is a function. This includes
class constructors, methods, static methods, F# functions and so on.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Constructors&lt;/strong&gt;: A &lt;em&gt;constructor&lt;/em&gt; is any &lt;em&gt;function&lt;/em&gt; that creates a new
&lt;em&gt;object&lt;/em&gt; if you don't already have one.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With immutability a constructor might seems a little blurry because every function
returns a new object. The important detail is &lt;strong&gt;if you don't already have one&lt;/strong&gt;.
As an example &lt;code&gt;List.map&lt;/code&gt;, &lt;code&gt;List.filter&lt;/code&gt; or &lt;code&gt;List.fold&lt;/code&gt; are not considered as
constructors. All those functions already expect a List that they operator on.
If you don't already have a list, you cannot use those functions.&lt;/p&gt;
&lt;p&gt;In F# there are multiple ways to create a list, like the special List syntax
&lt;code&gt;[1;2;3]&lt;/code&gt; or the cons operator &lt;code&gt;1 :: 2&lt;/code&gt; or functions like &lt;code&gt;List.unfold&lt;/code&gt;. All
of those things create a list without that you need one beforehand and
thus are considered &lt;em&gt;constructors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This article is not a C# vs. F# or OO vs. FP comparison. You also can create
immutable object in C# and get the same benefits as in the F# examples. Or
you can create mutable classes in F# and get the same disadvantages as in
the C# examples.&lt;/p&gt;
&lt;h2&gt;Mutability: The MinMax example&lt;/h2&gt;
&lt;p&gt;We start with a really small and simple example. A &lt;code&gt;MinMax&lt;/code&gt; class that only has
the purpose to keep a &lt;em&gt;current&lt;/em&gt; value between a defined &lt;em&gt;minimum&lt;/em&gt; and &lt;em&gt;maximum&lt;/em&gt;.
A C# class could look like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;36: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;37: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;38: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;39: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; MinMax {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Minimum { get; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; set; }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Maximum { get; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; set; }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Current { get; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; set; }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; MinMax(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; minimum, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; maximum, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; current) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; minimum;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; maximum;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; current;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckMinMax();
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
    }

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; CheckMinMax() {
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum ) {
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;s&quot;&gt;&quot;Minimum greater than Maximum&quot;&lt;/span&gt;);
        }
    }

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; CheckCurrent() {
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum ) {
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum;
        }
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum ) {
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Minimum;
        }
    }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; amount) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; amount;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
    }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Subtract(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; amount) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Current &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; amount;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We start by only providing methods to change the &lt;em&gt;current&lt;/em&gt; value. When we
look closer we also could define our &lt;code&gt;MinMax&lt;/code&gt; class as two distinct rules.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The minimum value must be smaller or equal to maximum. &lt;code&gt;CheckMinMax()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The current value must be between minimum and maximum. &lt;code&gt;CheckCurrent()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Often people argue that we don't need to re-check all rules, only those that
are somehow affected. As an example the &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt; functions
only call &lt;code&gt;CheckCurrent()&lt;/code&gt;. Obviously, we don't need to call &lt;code&gt;CheckMinMax()&lt;/code&gt;
if we don't change those values.&lt;/p&gt;
&lt;p&gt;While this is true, for more complex objects it can be hard to determine
what is affected and what's not. Imagine we add a &lt;code&gt;SetMaximum&lt;/code&gt; function to
mutate the maximum. Would it be enough to just call &lt;code&gt;CheckMinMax()&lt;/code&gt;
because only maximum changed?&lt;/p&gt;
&lt;p&gt;Well no, otherwise this code would create an invalid state:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; v &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; MinMax(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;80&lt;/span&gt;);
v.SetMaximum(&lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;);
&lt;span class=&quot;c&quot;&gt;// Minimum=0; Maximum=50; Current=80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In a very easy example like this it might be obvious that you must re-check
both rules and call &lt;code&gt;CheckMinMax()&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;CheckCurrent()&lt;/code&gt;. In a more complex
class determining what needs to be called can be a lot harder.&lt;/p&gt;
&lt;p&gt;As our goal is to always maintain valid objects, why not make up some rules like
a coding-standard that when we strictly follow it, we can be sure objects always
are valid?&lt;/p&gt;
&lt;p&gt;We just define our first rule as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;First Rule: Always re-validate every rule to ensure the correctness of an object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a conclusion of the first rule we could create a single function like &lt;code&gt;IsValid()&lt;/code&gt;
instead of multiple functions like &lt;code&gt;CheckMinMax()&lt;/code&gt; and &lt;code&gt;CheckCurrent()&lt;/code&gt;. But
in this example, lets just call both. Following our rule, now imagine we
implement &lt;code&gt;SetMaximum()&lt;/code&gt; in this way:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; SetMaximum(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; max) {
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.Maximum &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; max;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckMinMax();
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.CheckCurrent();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; Is this implementation correct, or not? What is the state of &lt;code&gt;v&lt;/code&gt; at the end of
this code example?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; v &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; MinMax(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;80&lt;/span&gt;);

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; {
    v.SetMaximum(&lt;span class=&quot;n&quot;&gt;-100&lt;/span&gt;);
}
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; {}

v.Add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; &lt;code&gt;SetMaximum&lt;/code&gt; is not correct and the state of &lt;code&gt;v&lt;/code&gt; will be:
&lt;code&gt;Minimum=0; Maximum=-100; Current=-100&lt;/code&gt;. Mutating a field before we know
a change is valid is a problem. Our next rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Second Rule: You always must validate before mutating.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The interesting part is. Before we implemented &lt;code&gt;SetMaximum()&lt;/code&gt; this was not
a problem! &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt; both check after we mutate the &lt;code&gt;Current&lt;/code&gt;
value. So what is the difference? Why does it work with &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt;
but not with &lt;code&gt;SetMaximum&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;One reason is that we only called &lt;code&gt;CheckMinMax&lt;/code&gt; from the constructor. The
exception in &lt;code&gt;CheckMinMax&lt;/code&gt; aborts the whole creation of an object. But when
we already have an object and call it from a method that isn't enough.&lt;/p&gt;
&lt;p&gt;We can create another rule to describe that this is okay.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Third Rule: The second rule don't need to be followed in a constructor. In
a constructor you always are allowed to mutate and validate afterwards.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But this still doesn't explain why first mutating and the checking is no
problem in &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt;. With our current rules so far we are not
allowed to write &lt;code&gt;Add&lt;/code&gt; and &lt;code&gt;Subtract&lt;/code&gt; in the way it is currently written.&lt;/p&gt;
&lt;p&gt;The reason why we can validate afterwards is because our &lt;code&gt;CheckCurrent()&lt;/code&gt; not
just validates and throws an error in the case there is something invalid.
It actually &lt;strong&gt;fixes&lt;/strong&gt; the problem.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;Current&lt;/code&gt; gets bigger than &lt;code&gt;Maximum&lt;/code&gt;, and thus invalidates the object,
it fixes the problem by setting &lt;code&gt;Current&lt;/code&gt; to the &lt;code&gt;Maximum&lt;/code&gt; value. So whenever
we can &lt;strong&gt;fix&lt;/strong&gt; an invalid object and there is a way to turn it back into
a valid object, we actually are allowed to mutate and check afterwards.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fourth Rule: If there is a way to &lt;em&gt;fix&lt;/em&gt; an invalid object, you
are allowed to mutate and validate even outside of an constructor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We also could apply this kind of &lt;strong&gt;fixing&lt;/strong&gt; to &lt;code&gt;Minimum&lt;/code&gt; and &lt;code&gt;Maximum&lt;/code&gt;.
For example I could add the following logic to the &lt;code&gt;SetMinimum&lt;/code&gt; and
&lt;code&gt;SetMaximum&lt;/code&gt; methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If Minimum is bigger than Maximum, then set Maximum to the same value.&lt;/li&gt;
&lt;li&gt;If Maximum is smaller than Minimum, then set Minimum to the same value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every method (or say at least &quot;a lot&quot;) could somehow fix an object.
If a string is restricted to 80 characters you could reset a string to
the empty string, or maybe cut everything off after 80 characters. The
problem with logic like these are they are very hard to remember.&lt;/p&gt;
&lt;p&gt;There isn't a right or wrong approach. But depending which
approach you pick you have other rules you must follow. If you pick the approach
to throw/return errors then you should validate before mutating. If you fix
invalid objects you are allowed to mutate and call your &lt;strong&gt;fix&lt;/strong&gt; function afterwards.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
It might be true that we cannot label one as &lt;strong&gt;right&lt;/strong&gt; or &lt;strong&gt;wrong&lt;/strong&gt;,
nevertheless I suggest we should avoid a solution that fixes something automatically
most of the time as they are hard to remember. Returning an error, no matter how
you do it exactly (null / Options / Results / Exceptions), is most of the time
more flexible and easier to comprehend.
&lt;/div&gt;
&lt;p&gt;If we now decide for one way and follow the rules, is it then impossible
that an object will never be in an invalid state? The answer is no. But
we need another example to demonstrate this.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MinMax&lt;/code&gt; class uses three mutable fields. While the fields itself are mutable
this is not true for the &lt;code&gt;int&lt;/code&gt; itself. An &lt;code&gt;int&lt;/code&gt; is an immutable type. So we also
must consider an example where the objects themselves are mutable.&lt;/p&gt;
&lt;p&gt;For the next example let's consider a &lt;code&gt;Product&lt;/code&gt; class with two fields &lt;code&gt;Name&lt;/code&gt;
and &lt;code&gt;Price&lt;/code&gt;. To make it easy, we just assume every &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Price&lt;/code&gt; is valid.
Instead we focus on a &lt;code&gt;ProductsPriceOver&lt;/code&gt; class. The purpose of this class
is to maintain a list of &lt;code&gt;Product&lt;/code&gt;s with only one rule. Every &lt;code&gt;Product&lt;/code&gt; must
be more expensive then a defined minimum.&lt;/p&gt;
&lt;p&gt;The final usage of those two classes could look like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;9.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;49.99&lt;/span&gt;);

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; ppo  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; ProductsPriceOver(&lt;span class=&quot;n&quot;&gt;10.00&lt;/span&gt;);
ppo.add(a);
ppo.add(b);
ppo.add(c);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;First we create an &lt;code&gt;ProductsPriceOver&lt;/code&gt; object that only accepts Products more expensive than &lt;code&gt;10.00&lt;/code&gt;.
When we implement &lt;code&gt;ProductsPriceOver&lt;/code&gt; it means the &lt;code&gt;add&lt;/code&gt; method must check the &lt;code&gt;Price&lt;/code&gt;
of every &lt;code&gt;Product&lt;/code&gt;. When the above code gets executed we assume only product &quot;B&quot;
and &quot;C&quot; are inside &lt;code&gt;ProductsPriceOver&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; If we assume &lt;code&gt;add&lt;/code&gt; is the only method &lt;code&gt;ProductsPriceOver&lt;/code&gt; will ever
implement. Will &lt;code&gt;ProductsPriceOver&lt;/code&gt; always be valid?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; No. We can invalidate &lt;code&gt;ProductsPriceOver&lt;/code&gt; by just changing the Price
of any Product directly.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;b.Price &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The problem is that we reference Product B directly in &lt;code&gt;ProductsPriceOver&lt;/code&gt; and we
also never get a notification if one of the products changes.&lt;/p&gt;
&lt;p&gt;There are two ways how we can fix that. We could choose only one so I consider
both as the fifth rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fifth Rule A: Mutable objects must have some kind of notification mechanism
once they changed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an example. We could add a &lt;code&gt;Changed&lt;/code&gt; event to every mutable object that gets
fired as soon an object changes.&lt;/p&gt;
&lt;p&gt;This way the &lt;code&gt;ppo.add(x)&lt;/code&gt; function can add an event handler to every product.
If a product changes it price, it re-checks if the new price is high enough
to still be part of the &lt;code&gt;ppo&lt;/code&gt; object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fifth Rule B: Mutable objects must have a &lt;code&gt;Copy&lt;/code&gt; function that can create
deep copies of an object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This technique is often named &lt;em&gt;defensive copies&lt;/em&gt;. When &lt;code&gt;ppo.add(x)&lt;/code&gt; is
called it doesn't save a reference to the same object. It creates a copy
of the whole object and only keeps the copy in its internal list.&lt;/p&gt;
&lt;p&gt;When we do this, even after we execute &lt;code&gt;b.Price = 5.00&lt;/code&gt; the product in &lt;code&gt;ppo&lt;/code&gt;
will still be &lt;code&gt;19.99&lt;/code&gt; instead of &lt;code&gt;5&lt;/code&gt;. This way every &lt;code&gt;ProductsPriceOver&lt;/code&gt; object
stay valid, but we need a way to update the price in &lt;code&gt;ProductsPriceOver&lt;/code&gt;.
We look at this problem more precisely later in the immutability part.&lt;/p&gt;
&lt;p&gt;In some way &lt;em&gt;defensive copies&lt;/em&gt; and &lt;em&gt;immutability&lt;/em&gt; are the same. Because
sharing a mutable object can cause problems, defensive copying creates
copies of objects and try to avoid sharing. With immutable objects
sharing is no problem, but we create copies of objects when we want to
change something.&lt;/p&gt;
&lt;p&gt;The difference is at what time we create copies. Defensive copies
creates copies before-hand, immutability creates copies only in the exact
moment something is changing.&lt;/p&gt;
&lt;p&gt;But after all, we are still not safe from invalid objects! Rule Five only
covers things we could describe as &lt;em&gt;Input&lt;/em&gt;. It only covers those cases
when our current object receives another object from outside of our
current object.&lt;/p&gt;
&lt;p&gt;Another problem that can occur is when we return mutable objects from
methods. Or in some sense when we return them as &lt;em&gt;Output&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Up so far The &lt;code&gt;ProductsPriceOver&lt;/code&gt; class only provides an &lt;code&gt;add&lt;/code&gt; method
and is pretty useless at this time. We assume that the &lt;code&gt;ProductsPriceOver&lt;/code&gt;
object has an internal mutable list to keep track of all its Products.
This list is usually created when we create an &lt;code&gt;ProductsPriceOver&lt;/code&gt; object
and is not passed from the outside.&lt;/p&gt;
&lt;p&gt;But when we return those internal mutable object, then our object can be
easily invalidated. Let's assume our &lt;code&gt;ppo&lt;/code&gt; has a &lt;code&gt;Products&lt;/code&gt; field that
directly returns the products as a &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt;. We could then write
something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;9.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;19.99&lt;/span&gt;);
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Product(&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;49.99&lt;/span&gt;);

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; ppo  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; ProductsPriceOver(&lt;span class=&quot;n&quot;&gt;10.00&lt;/span&gt;);
ppo.add(a);
ppo.add(b);
ppo.add(c);

&lt;span class=&quot;c&quot;&gt;// At this time ppo contains only &quot;B&quot; and &quot;C&quot;&lt;/span&gt;

List&amp;lt;Product&amp;gt; products &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ppo.Products
products.Add(a)

&lt;span class=&quot;c&quot;&gt;// ppo now contains &quot;A&quot;, &quot;B&quot; and &quot;C&quot;!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;By directly accessing the internal mutable array we bypass the &lt;code&gt;ppo.add()&lt;/code&gt; method
including its enforcement of the rules. We can solve this problem in the exact
same way we did with Rule Five.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sixth Rule A: Every mutable object we return must have a Changed event
that gets fired when an object was mutated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the internal mutable list has an event that gets fired whenever the list
somehow mutates. Then our &lt;code&gt;ProductsPriceOver&lt;/code&gt; class could add an event-handler
that re-checks if all elements inside the list are valid.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sixth Rule B: Never return mutable objects directly. Return defensive
copies instead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If &lt;code&gt;ppo.Products&lt;/code&gt; just returns a copy then the caller can manipulate
the returning list in any possible way, but it doesn't affect &lt;code&gt;ppo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But for the output case, there exists a third way.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sixth Rule C: Don't allow access to internal mutable objects at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This rule is probably the most used one in practice. And in my opinion it
is the worst rule of all. This rule is so bad that in my opinion most problems
of OO programming are connected to this idea. This rule alone deserves a
whole article on its own to describe its evilness. Yes, I'm serious and this
is not a joke!&lt;/p&gt;
&lt;p&gt;Currently I left it to he reader to figure out how many implications this has,
otherwise this article will get too long. You can start with the question:
&lt;em&gt;When you cannot access the &lt;code&gt;Products&lt;/code&gt; list of an &lt;code&gt;ProductsPriceOver&lt;/code&gt; object.
How do you implement new functionality?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we have Rule Five and Six, lets talk about these. Actually you cannot
freely decide if you either use events or defensive copies. Events are
&lt;em&gt;reactive&lt;/em&gt;. They get fired &lt;em&gt;after&lt;/em&gt; a mutation happened. So you only can use
events if there is a way to fix an object after it became invalid.&lt;/p&gt;
&lt;p&gt;If there is no way to fix an invalid object, you must use defensive copies!
This is not really a rule you must follow, more a reminder which
previously rule you must choose. But because of its important I still
consider it as a new rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Seventh Rule: Events can only be used if there is always a way to fix
an invalid object. If there is no way to fix an invalid object, use
defensive copies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Straight away, here is my last rule without much explanation as
it should be self-explanatory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Eighth Rule: If your mutable objects are accessed by multiple threads
(mutable shared state). You also must add synchronization primitives
to avoid race conditions that can bring an object into an invalid
state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And here is a bonus rule for the eighth rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bonus Rule: Just because every method of an object has synchronization
primitives doesn't mean it is thread-safe. Because of this, you probably
want to ignore Rule Eight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also this is worth its own article I will write about in the near future.&lt;/p&gt;
&lt;p&gt;Let's get an overview of all rules we have to follow so we can be sure state
will always be valid.&lt;/p&gt;
&lt;h2&gt;All Rules to ensure a valid State&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;First Rule:&lt;/strong&gt; Always re-validate every rule to ensure the correctness of an object.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Second Rule:&lt;/strong&gt; You always must validate before mutating.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Third Rule:&lt;/strong&gt; The second rule don't need to be followed in a constructor. In
a constructor you always are allowed to mutate and validate afterwards.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fourth Rule:&lt;/strong&gt; If there is a way to &lt;em&gt;fix&lt;/em&gt; an invalid object, you
are allowed to mutate and validate even outside of an constructor.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fifth Rule A:&lt;/strong&gt; Mutable objects must have some kind of notification mechanism
once they changed.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fifth Rule B:&lt;/strong&gt; Mutable objects must have a &lt;code&gt;Copy&lt;/code&gt; function that can create
deep copies of an object.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sixth Rule A:&lt;/strong&gt; Every mutable object we return must have a Changed event
that gets fired when an object was mutated.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sixth Rule B:&lt;/strong&gt; Never return mutable objects directly. Return defensive
copies instead.
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sixth Rule C:&lt;/strong&gt; Don't allow access to internal mutable objects at all.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Seventh Rule:&lt;/strong&gt; Events can only be used if there is always a way to fix
an invalid object. If there is no way to fix an invalid object, use
defensive copies.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Eighth Rule:&lt;/strong&gt; If your mutable objects are accessed by multiple threads
(mutable shared state). You also must add synchronization primitives
to avoid race conditions that can bring an object into an invalid
state.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonus Rule:&lt;/strong&gt; Just because every method of an object has synchronization
primitives doesn't mean it is thread-safe. Because of this, you probably
want to ignore Rule Eighth.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In fact, even now I'm not sure if I really covered everything! Besides
the amount of rules you should follow to ensure an object is always valid,
the problem is that nearly every rule either has an exception or special
requirements when you should/can use them.&lt;/p&gt;
&lt;p&gt;This overall makes mutability pretty hard. Now that we covered the mutability
part lets see how immutability helps us.&lt;/p&gt;
&lt;h2&gt;Designing with Immutability&lt;/h2&gt;
&lt;p&gt;Our MinMax class can be easily represented by a record in F#. Records in F#
are immutable by default and can group data together like classes do.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 100)&quot; onmouseover=&quot;showTip(event, 'fs24', 100)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs25', 101)&quot; onmouseover=&quot;showTip(event, 'fs25', 101)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 102)&quot; onmouseover=&quot;showTip(event, 'fs4', 102)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs26', 103)&quot; onmouseover=&quot;showTip(event, 'fs26', 103)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 104)&quot; onmouseover=&quot;showTip(event, 'fs4', 104)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs27', 105)&quot; onmouseover=&quot;showTip(event, 'fs27', 105)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 106)&quot; onmouseover=&quot;showTip(event, 'fs4', 106)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The problem is that up to this point we have no validation and can create a lot
of invalid objects like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 107)&quot; onmouseover=&quot;showTip(event, 'fs28', 107)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;}
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We solve that problem by creating a module and make the record constructor private.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 108)&quot; onmouseover=&quot;showTip(event, 'fs24', 108)&quot; class=&quot;i&quot;&gt;MinMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 109)&quot; onmouseover=&quot;showTip(event, 'fs4', 109)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 110)&quot; onmouseover=&quot;showTip(event, 'fs4', 110)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
        &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 111)&quot; onmouseover=&quot;showTip(event, 'fs4', 111)&quot; class=&quot;i&quot;&gt;int&lt;/span&gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we cannot create a &lt;code&gt;MinMax&lt;/code&gt; object outside of the &lt;code&gt;MinMax&lt;/code&gt; module. So we need at
least one constructor. Because we want to eliminate the ability to create invalid
&lt;code&gt;MinMax&lt;/code&gt; objects we also add any validation we want to this constructor. Our
final constructor &lt;code&gt;create&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 112)&quot; onmouseover=&quot;showTip(event, 'fs29', 112)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 113)&quot; onmouseover=&quot;showTip(event, 'fs12', 113)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 114)&quot; onmouseover=&quot;showTip(event, 'fs13', 114)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 115)&quot; onmouseover=&quot;showTip(event, 'fs14', 115)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 116)&quot; onmouseover=&quot;showTip(event, 'fs30', 116)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 117)&quot; onmouseover=&quot;showTip(event, 'fs12', 117)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 118)&quot; onmouseover=&quot;showTip(event, 'fs13', 118)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 119)&quot; onmouseover=&quot;showTip(event, 'fs14', 119)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 120)&quot; onmouseover=&quot;showTip(event, 'fs12', 120)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 121)&quot; onmouseover=&quot;showTip(event, 'fs13', 121)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 122)&quot; onmouseover=&quot;showTip(event, 'fs14', 122)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;}

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs12', 123)&quot; onmouseover=&quot;showTip(event, 'fs12', 123)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 124)&quot; onmouseover=&quot;showTip(event, 'fs13', 124)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 125)&quot; onmouseover=&quot;showTip(event, 'fs16', 125)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Minimum greater than Maximum&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 126)&quot; onmouseover=&quot;showTip(event, 'fs14', 126)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 127)&quot; onmouseover=&quot;showTip(event, 'fs13', 127)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 128)&quot; onmouseover=&quot;showTip(event, 'fs30', 128)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 129)&quot; onmouseover=&quot;showTip(event, 'fs12', 129)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 130)&quot; onmouseover=&quot;showTip(event, 'fs13', 130)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 131)&quot; onmouseover=&quot;showTip(event, 'fs13', 131)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 132)&quot; onmouseover=&quot;showTip(event, 'fs14', 132)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 133)&quot; onmouseover=&quot;showTip(event, 'fs12', 133)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 134)&quot; onmouseover=&quot;showTip(event, 'fs30', 134)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 135)&quot; onmouseover=&quot;showTip(event, 'fs12', 135)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 136)&quot; onmouseover=&quot;showTip(event, 'fs13', 136)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 137)&quot; onmouseover=&quot;showTip(event, 'fs12', 137)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 138)&quot; onmouseover=&quot;showTip(event, 'fs30', 138)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 139)&quot; onmouseover=&quot;showTip(event, 'fs12', 139)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 140)&quot; onmouseover=&quot;showTip(event, 'fs13', 140)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 141)&quot; onmouseover=&quot;showTip(event, 'fs14', 141)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I also create a small &lt;code&gt;show&lt;/code&gt; function that can display the content of a &lt;code&gt;MinMax&lt;/code&gt; object.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 142)&quot; onmouseover=&quot;showTip(event, 'fs31', 142)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 143)&quot; onmouseover=&quot;showTip(event, 'fs32', 143)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 144)&quot; onmouseover=&quot;showTip(event, 'fs18', 144)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; range &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 145)&quot; onmouseover=&quot;showTip(event, 'fs32', 145)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 146)&quot; onmouseover=&quot;showTip(event, 'fs27', 146)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 147)&quot; onmouseover=&quot;showTip(event, 'fs32', 147)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 148)&quot; onmouseover=&quot;showTip(event, 'fs25', 148)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 149)&quot; onmouseover=&quot;showTip(event, 'fs32', 149)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 150)&quot; onmouseover=&quot;showTip(event, 'fs26', 150)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Outside of the &lt;code&gt;MinMax&lt;/code&gt; module the only way to create a new &lt;code&gt;MinMax&lt;/code&gt; object is
by using the &lt;code&gt;MinMax.create&lt;/code&gt; constructor. As an example the previously invalid
state cannot be created anymore.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 151)&quot; onmouseover=&quot;showTip(event, 'fs33', 151)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 152)&quot; onmouseover=&quot;showTip(event, 'fs34', 152)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs33', 153)&quot; onmouseover=&quot;showTip(event, 'fs33', 153)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 154)&quot; onmouseover=&quot;showTip(event, 'fs35', 154)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 100 range 0/100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs33', 155)&quot; onmouseover=&quot;showTip(event, 'fs33', 155)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 156)&quot; onmouseover=&quot;showTip(event, 'fs35', 156)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1000&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;// Exception: Minimum greater than Maximum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Inside the module it is a little bit different. Every function still has access
to the record constructor, so there is a possibility of creating an invalid object.
This leads to the &lt;strong&gt;only&lt;/strong&gt; rule you will ever need with immutability!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Golden Rule: Create a constructor function with the name &lt;code&gt;create&lt;/code&gt; that contains
all rules and validation logic. Only use this function to create new
objects from now on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;subtract&lt;/code&gt; functions:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 157)&quot; onmouseover=&quot;showTip(event, 'fs36', 157)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 158)&quot; onmouseover=&quot;showTip(event, 'fs20', 158)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 159)&quot; onmouseover=&quot;showTip(event, 'fs32', 159)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 160)&quot; onmouseover=&quot;showTip(event, 'fs29', 160)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 161)&quot; onmouseover=&quot;showTip(event, 'fs32', 161)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 162)&quot; onmouseover=&quot;showTip(event, 'fs25', 162)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 163)&quot; onmouseover=&quot;showTip(event, 'fs32', 163)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 164)&quot; onmouseover=&quot;showTip(event, 'fs26', 164)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 165)&quot; onmouseover=&quot;showTip(event, 'fs32', 165)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 166)&quot; onmouseover=&quot;showTip(event, 'fs27', 166)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 167)&quot; onmouseover=&quot;showTip(event, 'fs20', 167)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 168)&quot; onmouseover=&quot;showTip(event, 'fs37', 168)&quot; class=&quot;f&quot;&gt;subtract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 169)&quot; onmouseover=&quot;showTip(event, 'fs20', 169)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 170)&quot; onmouseover=&quot;showTip(event, 'fs32', 170)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 171)&quot; onmouseover=&quot;showTip(event, 'fs29', 171)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 172)&quot; onmouseover=&quot;showTip(event, 'fs32', 172)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 173)&quot; onmouseover=&quot;showTip(event, 'fs25', 173)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 174)&quot; onmouseover=&quot;showTip(event, 'fs32', 174)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 175)&quot; onmouseover=&quot;showTip(event, 'fs26', 175)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 176)&quot; onmouseover=&quot;showTip(event, 'fs32', 176)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 177)&quot; onmouseover=&quot;showTip(event, 'fs27', 177)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 178)&quot; onmouseover=&quot;showTip(event, 'fs20', 178)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Consider that these functions don't contain any validation logic and
still work as intended. With mutability we had rules if we
need to validate or mutate first. Because we cannot mutate in the first
place we must create a new object and we do that by using the &lt;code&gt;create&lt;/code&gt;
function that contains all validation logic. We also can say, we are
falling into the pit of success.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 179)&quot; onmouseover=&quot;showTip(event, 'fs33', 179)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 180)&quot; onmouseover=&quot;showTip(event, 'fs35', 180)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 181)&quot; onmouseover=&quot;showTip(event, 'fs33', 181)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs38', 182)&quot; onmouseover=&quot;showTip(event, 'fs38', 182)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 183)&quot; onmouseover=&quot;showTip(event, 'fs33', 183)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 184)&quot; onmouseover=&quot;showTip(event, 'fs34', 184)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100 range 0/100&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs33', 185)&quot; onmouseover=&quot;showTip(event, 'fs33', 185)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 186)&quot; onmouseover=&quot;showTip(event, 'fs35', 186)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 187)&quot; onmouseover=&quot;showTip(event, 'fs33', 187)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 188)&quot; onmouseover=&quot;showTip(event, 'fs39', 188)&quot; class=&quot;f&quot;&gt;subtract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 189)&quot; onmouseover=&quot;showTip(event, 'fs33', 189)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 190)&quot; onmouseover=&quot;showTip(event, 'fs34', 190)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 0 range 0/100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because functions return a new &lt;code&gt;MinMax&lt;/code&gt; object we often end up with a fluid-interface.
The only thing you have to consider is that the &lt;code&gt;MinMax&lt;/code&gt; object should be
the last argument of a function.&lt;/p&gt;
&lt;p&gt;Next look at &lt;code&gt;setMinimum&lt;/code&gt; and &lt;code&gt;setMaximum&lt;/code&gt;. In our mutation version it throws
an exception, but it could leave an object in an invalid state if we first
mutated an object. Needless to say that we never get this problem with
immutability.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 191)&quot; onmouseover=&quot;showTip(event, 'fs40', 191)&quot; class=&quot;f&quot;&gt;setMaximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 192)&quot; onmouseover=&quot;showTip(event, 'fs13', 192)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 193)&quot; onmouseover=&quot;showTip(event, 'fs32', 193)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 194)&quot; onmouseover=&quot;showTip(event, 'fs29', 194)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 195)&quot; onmouseover=&quot;showTip(event, 'fs32', 195)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 196)&quot; onmouseover=&quot;showTip(event, 'fs25', 196)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 197)&quot; onmouseover=&quot;showTip(event, 'fs13', 197)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 198)&quot; onmouseover=&quot;showTip(event, 'fs32', 198)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 199)&quot; onmouseover=&quot;showTip(event, 'fs27', 199)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 200)&quot; onmouseover=&quot;showTip(event, 'fs41', 200)&quot; class=&quot;f&quot;&gt;setMinimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 201)&quot; onmouseover=&quot;showTip(event, 'fs12', 201)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 202)&quot; onmouseover=&quot;showTip(event, 'fs32', 202)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 203)&quot; onmouseover=&quot;showTip(event, 'fs29', 203)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 204)&quot; onmouseover=&quot;showTip(event, 'fs12', 204)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 205)&quot; onmouseover=&quot;showTip(event, 'fs32', 205)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 206)&quot; onmouseover=&quot;showTip(event, 'fs26', 206)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 207)&quot; onmouseover=&quot;showTip(event, 'fs32', 207)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs27', 208)&quot; onmouseover=&quot;showTip(event, 'fs27', 208)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, everything always stays valid:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 209)&quot; onmouseover=&quot;showTip(event, 'fs42', 209)&quot; class=&quot;i&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 210)&quot; onmouseover=&quot;showTip(event, 'fs33', 210)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 211)&quot; onmouseover=&quot;showTip(event, 'fs35', 211)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;80&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 212)&quot; onmouseover=&quot;showTip(event, 'fs43', 212)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 213)&quot; onmouseover=&quot;showTip(event, 'fs33', 213)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs44', 214)&quot; onmouseover=&quot;showTip(event, 'fs44', 214)&quot; class=&quot;f&quot;&gt;setMaximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 215)&quot; onmouseover=&quot;showTip(event, 'fs42', 215)&quot; class=&quot;i&quot;&gt;v&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs45', 216)&quot; onmouseover=&quot;showTip(event, 'fs45', 216)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs33', 217)&quot; onmouseover=&quot;showTip(event, 'fs33', 217)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 218)&quot; onmouseover=&quot;showTip(event, 'fs34', 218)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 219)&quot; onmouseover=&quot;showTip(event, 'fs43', 219)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; ()

&lt;span onmouseout=&quot;hideTip(event, 'fs33', 220)&quot; onmouseover=&quot;showTip(event, 'fs33', 220)&quot; class=&quot;t&quot;&gt;MinMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs34', 221)&quot; onmouseover=&quot;showTip(event, 'fs34', 221)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 222)&quot; onmouseover=&quot;showTip(event, 'fs42', 222)&quot; class=&quot;i&quot;&gt;v&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 80 range 0/100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This should be obvious as &lt;code&gt;MinMax.setMaximum&lt;/code&gt; returns a new object and don't
mutate an object. &lt;code&gt;v&lt;/code&gt; never can become invalid.&lt;/p&gt;
&lt;p&gt;You can choose if you want to &lt;em&gt;fix&lt;/em&gt; or throw an error exactly like we did
with the mutable version. But there are no special rules you must consider
how something can become invalid. Nevertheless it still might be a good idea
to avoid &lt;em&gt;fixing&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
I only use exceptions to throw errors. In functional language this is usually
not considered good. Instead of throwing an exception I also could return an
&lt;strong&gt;Option&lt;/strong&gt; or a &lt;strong&gt;Result-type&lt;/strong&gt;. Functional error
handling is yet another topic on its own. But for this topic, none of those
matter as long the validation stays inside the constructor.
&lt;/div&gt;
&lt;p&gt;Up to this point I already covered the whole &lt;code&gt;MinMax&lt;/code&gt; example, and covered
everything up to the Fifth Rule in our mutation based code. Here is the full
code for our &lt;code&gt;MinMax&lt;/code&gt; module.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;MinMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 6)&quot; onmouseover=&quot;showTip(event, 'fs4', 6)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs6', 7)&quot; onmouseover=&quot;showTip(event, 'fs6', 7)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 8)&quot; onmouseover=&quot;showTip(event, 'fs4', 8)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    }
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;f&quot;&gt;minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 10)&quot; onmouseover=&quot;showTip(event, 'fs8', 10)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 11)&quot; onmouseover=&quot;showTip(event, 'fs8', 11)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 12)&quot; onmouseover=&quot;showTip(event, 'fs3', 12)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 13)&quot; onmouseover=&quot;showTip(event, 'fs9', 13)&quot; class=&quot;f&quot;&gt;maximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 14)&quot; onmouseover=&quot;showTip(event, 'fs8', 14)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 15)&quot; onmouseover=&quot;showTip(event, 'fs8', 15)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 16)&quot; onmouseover=&quot;showTip(event, 'fs5', 16)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 17)&quot; onmouseover=&quot;showTip(event, 'fs10', 17)&quot; class=&quot;f&quot;&gt;current&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 19)&quot; onmouseover=&quot;showTip(event, 'fs8', 19)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 20)&quot; onmouseover=&quot;showTip(event, 'fs6', 20)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 21)&quot; onmouseover=&quot;showTip(event, 'fs11', 21)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 22)&quot; onmouseover=&quot;showTip(event, 'fs12', 22)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 23)&quot; onmouseover=&quot;showTip(event, 'fs13', 23)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 24)&quot; onmouseover=&quot;showTip(event, 'fs14', 24)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 25)&quot; onmouseover=&quot;showTip(event, 'fs15', 25)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 26)&quot; onmouseover=&quot;showTip(event, 'fs12', 26)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 27)&quot; onmouseover=&quot;showTip(event, 'fs13', 27)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 28)&quot; onmouseover=&quot;showTip(event, 'fs14', 28)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;i&quot;&gt;Minimum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs12', 29)&quot; onmouseover=&quot;showTip(event, 'fs12', 29)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Maximum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 30)&quot; onmouseover=&quot;showTip(event, 'fs13', 30)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;}

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs12', 32)&quot; onmouseover=&quot;showTip(event, 'fs12', 32)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 33)&quot; onmouseover=&quot;showTip(event, 'fs13', 33)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 34)&quot; onmouseover=&quot;showTip(event, 'fs16', 34)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Minimum greater than Maximum&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 35)&quot; onmouseover=&quot;showTip(event, 'fs14', 35)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 36)&quot; onmouseover=&quot;showTip(event, 'fs13', 36)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 37)&quot; onmouseover=&quot;showTip(event, 'fs15', 37)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 38)&quot; onmouseover=&quot;showTip(event, 'fs12', 38)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 39)&quot; onmouseover=&quot;showTip(event, 'fs13', 39)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 40)&quot; onmouseover=&quot;showTip(event, 'fs13', 40)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 42)&quot; onmouseover=&quot;showTip(event, 'fs12', 42)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 44)&quot; onmouseover=&quot;showTip(event, 'fs12', 44)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 45)&quot; onmouseover=&quot;showTip(event, 'fs13', 45)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 46)&quot; onmouseover=&quot;showTip(event, 'fs12', 46)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 47)&quot; onmouseover=&quot;showTip(event, 'fs15', 47)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 48)&quot; onmouseover=&quot;showTip(event, 'fs12', 48)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 49)&quot; onmouseover=&quot;showTip(event, 'fs13', 49)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 50)&quot; onmouseover=&quot;showTip(event, 'fs14', 50)&quot; class=&quot;i&quot;&gt;cur&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 51)&quot; onmouseover=&quot;showTip(event, 'fs17', 51)&quot; class=&quot;f&quot;&gt;show&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 52)&quot; onmouseover=&quot;showTip(event, 'fs8', 52)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 53)&quot; onmouseover=&quot;showTip(event, 'fs18', 53)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; range &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 54)&quot; onmouseover=&quot;showTip(event, 'fs8', 54)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 55)&quot; onmouseover=&quot;showTip(event, 'fs6', 55)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 56)&quot; onmouseover=&quot;showTip(event, 'fs8', 56)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 57)&quot; onmouseover=&quot;showTip(event, 'fs3', 57)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 58)&quot; onmouseover=&quot;showTip(event, 'fs8', 58)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 59)&quot; onmouseover=&quot;showTip(event, 'fs5', 59)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 60)&quot; onmouseover=&quot;showTip(event, 'fs19', 60)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 61)&quot; onmouseover=&quot;showTip(event, 'fs20', 61)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 62)&quot; onmouseover=&quot;showTip(event, 'fs8', 62)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 63)&quot; onmouseover=&quot;showTip(event, 'fs11', 63)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 64)&quot; onmouseover=&quot;showTip(event, 'fs8', 64)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 65)&quot; onmouseover=&quot;showTip(event, 'fs3', 65)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 66)&quot; onmouseover=&quot;showTip(event, 'fs8', 66)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 67)&quot; onmouseover=&quot;showTip(event, 'fs5', 67)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 68)&quot; onmouseover=&quot;showTip(event, 'fs8', 68)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 69)&quot; onmouseover=&quot;showTip(event, 'fs6', 69)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 70)&quot; onmouseover=&quot;showTip(event, 'fs20', 70)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 71)&quot; onmouseover=&quot;showTip(event, 'fs21', 71)&quot; class=&quot;f&quot;&gt;subtract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 72)&quot; onmouseover=&quot;showTip(event, 'fs20', 72)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 73)&quot; onmouseover=&quot;showTip(event, 'fs8', 73)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 74)&quot; onmouseover=&quot;showTip(event, 'fs11', 74)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 75)&quot; onmouseover=&quot;showTip(event, 'fs8', 75)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 76)&quot; onmouseover=&quot;showTip(event, 'fs3', 76)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 77)&quot; onmouseover=&quot;showTip(event, 'fs8', 77)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 78)&quot; onmouseover=&quot;showTip(event, 'fs5', 78)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 79)&quot; onmouseover=&quot;showTip(event, 'fs8', 79)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 80)&quot; onmouseover=&quot;showTip(event, 'fs6', 80)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 81)&quot; onmouseover=&quot;showTip(event, 'fs20', 81)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 82)&quot; onmouseover=&quot;showTip(event, 'fs22', 82)&quot; class=&quot;f&quot;&gt;setMaximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 83)&quot; onmouseover=&quot;showTip(event, 'fs13', 83)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 84)&quot; onmouseover=&quot;showTip(event, 'fs8', 84)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 85)&quot; onmouseover=&quot;showTip(event, 'fs11', 85)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 86)&quot; onmouseover=&quot;showTip(event, 'fs8', 86)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 87)&quot; onmouseover=&quot;showTip(event, 'fs3', 87)&quot; class=&quot;i&quot;&gt;Minimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 88)&quot; onmouseover=&quot;showTip(event, 'fs13', 88)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 89)&quot; onmouseover=&quot;showTip(event, 'fs8', 89)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 90)&quot; onmouseover=&quot;showTip(event, 'fs6', 90)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 91)&quot; onmouseover=&quot;showTip(event, 'fs23', 91)&quot; class=&quot;f&quot;&gt;setMinimum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 92)&quot; onmouseover=&quot;showTip(event, 'fs12', 92)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 93)&quot; onmouseover=&quot;showTip(event, 'fs8', 93)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 94)&quot; onmouseover=&quot;showTip(event, 'fs11', 94)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 95)&quot; onmouseover=&quot;showTip(event, 'fs12', 95)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 96)&quot; onmouseover=&quot;showTip(event, 'fs8', 96)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 97)&quot; onmouseover=&quot;showTip(event, 'fs5', 97)&quot; class=&quot;i&quot;&gt;Maximum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 98)&quot; onmouseover=&quot;showTip(event, 'fs8', 98)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs6', 99)&quot; onmouseover=&quot;showTip(event, 'fs6', 99)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the mutation based code I introduced the &lt;code&gt;ProductsPriceOver&lt;/code&gt; example
and we discussed what happens if mutable objects are either passed
or returned from an object.&lt;/p&gt;
&lt;p&gt;We had two solution for this problem. We either fired events as soon
something was changed or we created defensive copies. Using events
doesn't make any sense with immutable objects. As they cannot change those
events will never be fired.&lt;/p&gt;
&lt;p&gt;And as discussed previously the idea of creating defensive copies is very
similar to immutability. In fact it created another problem that if we mutated
a product it didn't affected the same product in a &lt;code&gt;ProductsPriceOver&lt;/code&gt; object.
So lets address this problem.&lt;/p&gt;
&lt;p&gt;First, we create an immutable &lt;code&gt;Product&lt;/code&gt;. It contains no validation and I also
could just used the Record definition (3 lines of code). But I anyway decided
to create another module with functions so you could get an idea how to convert
a similar mutable &lt;code&gt;Product&lt;/code&gt; class to an immutable &lt;code&gt;Product&lt;/code&gt; module.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 223)&quot; onmouseover=&quot;showTip(event, 'fs46', 223)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs47', 224)&quot; onmouseover=&quot;showTip(event, 'fs47', 224)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs48', 225)&quot; onmouseover=&quot;showTip(event, 'fs48', 225)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 226)&quot; onmouseover=&quot;showTip(event, 'fs49', 226)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 227)&quot; onmouseover=&quot;showTip(event, 'fs50', 227)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
    }
    &lt;span class=&quot;c&quot;&gt;// Constructor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 228)&quot; onmouseover=&quot;showTip(event, 'fs51', 228)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 229)&quot; onmouseover=&quot;showTip(event, 'fs52', 229)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 230)&quot; onmouseover=&quot;showTip(event, 'fs53', 230)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        {&lt;span class=&quot;i&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs52', 231)&quot; onmouseover=&quot;showTip(event, 'fs52', 231)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs53', 232)&quot; onmouseover=&quot;showTip(event, 'fs53', 232)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;}

    &lt;span class=&quot;c&quot;&gt;// Getters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 233)&quot; onmouseover=&quot;showTip(event, 'fs54', 233)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 234)&quot; onmouseover=&quot;showTip(event, 'fs8', 234)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 235)&quot; onmouseover=&quot;showTip(event, 'fs8', 235)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 236)&quot; onmouseover=&quot;showTip(event, 'fs47', 236)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 237)&quot; onmouseover=&quot;showTip(event, 'fs55', 237)&quot; class=&quot;f&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 238)&quot; onmouseover=&quot;showTip(event, 'fs8', 238)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 239)&quot; onmouseover=&quot;showTip(event, 'fs8', 239)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 240)&quot; onmouseover=&quot;showTip(event, 'fs49', 240)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Setter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 241)&quot; onmouseover=&quot;showTip(event, 'fs56', 241)&quot; class=&quot;f&quot;&gt;setName&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 242)&quot; onmouseover=&quot;showTip(event, 'fs52', 242)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 243)&quot; onmouseover=&quot;showTip(event, 'fs8', 243)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 244)&quot; onmouseover=&quot;showTip(event, 'fs51', 244)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 245)&quot; onmouseover=&quot;showTip(event, 'fs52', 245)&quot; class=&quot;i&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 246)&quot; onmouseover=&quot;showTip(event, 'fs8', 246)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 247)&quot; onmouseover=&quot;showTip(event, 'fs49', 247)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 248)&quot; onmouseover=&quot;showTip(event, 'fs57', 248)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 249)&quot; onmouseover=&quot;showTip(event, 'fs53', 249)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 250)&quot; onmouseover=&quot;showTip(event, 'fs8', 250)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 251)&quot; onmouseover=&quot;showTip(event, 'fs51', 251)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 252)&quot; onmouseover=&quot;showTip(event, 'fs8', 252)&quot; class=&quot;i&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 253)&quot; onmouseover=&quot;showTip(event, 'fs47', 253)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 254)&quot; onmouseover=&quot;showTip(event, 'fs53', 254)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// other functions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 255)&quot; onmouseover=&quot;showTip(event, 'fs58', 255)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 256)&quot; onmouseover=&quot;showTip(event, 'fs59', 256)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 257)&quot; onmouseover=&quot;showTip(event, 'fs18', 257)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; -- &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%.2f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 258)&quot; onmouseover=&quot;showTip(event, 'fs59', 258)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs47', 259)&quot; onmouseover=&quot;showTip(event, 'fs47', 259)&quot; class=&quot;i&quot;&gt;Name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 260)&quot; onmouseover=&quot;showTip(event, 'fs59', 260)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 261)&quot; onmouseover=&quot;showTip(event, 'fs49', 261)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Second, we create our &lt;code&gt;ProductsPriceOver&lt;/code&gt; type. This time I just show
the whole code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 262)&quot; onmouseover=&quot;showTip(event, 'fs60', 262)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; {
        &lt;span onmouseout=&quot;hideTip(event, 'fs49', 263)&quot; onmouseover=&quot;showTip(event, 'fs49', 263)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs50', 264)&quot; onmouseover=&quot;showTip(event, 'fs50', 264)&quot; class=&quot;t&quot;&gt;decimal&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs61', 265)&quot; onmouseover=&quot;showTip(event, 'fs61', 265)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 266)&quot; onmouseover=&quot;showTip(event, 'fs62', 266)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs46', 267)&quot; onmouseover=&quot;showTip(event, 'fs46', 267)&quot; class=&quot;t&quot;&gt;T&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 268)&quot; onmouseover=&quot;showTip(event, 'fs63', 268)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
    }
    &lt;span class=&quot;c&quot;&gt;// Constructor&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 269)&quot; onmouseover=&quot;showTip(event, 'fs64', 269)&quot; class=&quot;f&quot;&gt;priceOver&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 270)&quot; onmouseover=&quot;showTip(event, 'fs65', 270)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 271)&quot; onmouseover=&quot;showTip(event, 'fs66', 271)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 272)&quot; onmouseover=&quot;showTip(event, 'fs62', 272)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 273)&quot; onmouseover=&quot;showTip(event, 'fs67', 273)&quot; class=&quot;f&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 274)&quot; onmouseover=&quot;showTip(event, 'fs66', 274)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 275)&quot; onmouseover=&quot;showTip(event, 'fs65', 275)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 276)&quot; onmouseover=&quot;showTip(event, 'fs68', 276)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 277)&quot; onmouseover=&quot;showTip(event, 'fs53', 277)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 278)&quot; onmouseover=&quot;showTip(event, 'fs69', 278)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 279)&quot; onmouseover=&quot;showTip(event, 'fs69', 279)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 280)&quot; onmouseover=&quot;showTip(event, 'fs70', 280)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs71', 281)&quot; onmouseover=&quot;showTip(event, 'fs71', 281)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 282)&quot; onmouseover=&quot;showTip(event, 'fs64', 282)&quot; class=&quot;f&quot;&gt;priceOver&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 283)&quot; onmouseover=&quot;showTip(event, 'fs53', 283)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs69', 284)&quot; onmouseover=&quot;showTip(event, 'fs69', 284)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt;
        {&lt;span class=&quot;i&quot;&gt;Price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs53', 285)&quot; onmouseover=&quot;showTip(event, 'fs53', 285)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt;; &lt;span class=&quot;i&quot;&gt;Products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs69', 286)&quot; onmouseover=&quot;showTip(event, 'fs69', 286)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt;}

    &lt;span class=&quot;c&quot;&gt;// Getter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 287)&quot; onmouseover=&quot;showTip(event, 'fs72', 287)&quot; class=&quot;f&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 288)&quot; onmouseover=&quot;showTip(event, 'fs73', 288)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 289)&quot; onmouseover=&quot;showTip(event, 'fs73', 289)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 290)&quot; onmouseover=&quot;showTip(event, 'fs49', 290)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 291)&quot; onmouseover=&quot;showTip(event, 'fs74', 291)&quot; class=&quot;f&quot;&gt;products&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 292)&quot; onmouseover=&quot;showTip(event, 'fs73', 292)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 293)&quot; onmouseover=&quot;showTip(event, 'fs73', 293)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 294)&quot; onmouseover=&quot;showTip(event, 'fs61', 294)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Setter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 295)&quot; onmouseover=&quot;showTip(event, 'fs75', 295)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 296)&quot; onmouseover=&quot;showTip(event, 'fs53', 296)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 297)&quot; onmouseover=&quot;showTip(event, 'fs73', 297)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 298)&quot; onmouseover=&quot;showTip(event, 'fs68', 298)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 299)&quot; onmouseover=&quot;showTip(event, 'fs53', 299)&quot; class=&quot;i&quot;&gt;price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 300)&quot; onmouseover=&quot;showTip(event, 'fs73', 300)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 301)&quot; onmouseover=&quot;showTip(event, 'fs61', 301)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 302)&quot; onmouseover=&quot;showTip(event, 'fs76', 302)&quot; class=&quot;f&quot;&gt;setProducts&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 303)&quot; onmouseover=&quot;showTip(event, 'fs69', 303)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 304)&quot; onmouseover=&quot;showTip(event, 'fs73', 304)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 305)&quot; onmouseover=&quot;showTip(event, 'fs68', 305)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 306)&quot; onmouseover=&quot;showTip(event, 'fs73', 306)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 307)&quot; onmouseover=&quot;showTip(event, 'fs49', 307)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 308)&quot; onmouseover=&quot;showTip(event, 'fs69', 308)&quot; class=&quot;i&quot;&gt;products&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Other Functions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 309)&quot; onmouseover=&quot;showTip(event, 'fs77', 309)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 310)&quot; onmouseover=&quot;showTip(event, 'fs73', 310)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs18', 311)&quot; onmouseover=&quot;showTip(event, 'fs18', 311)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs70', 312)&quot; onmouseover=&quot;showTip(event, 'fs70', 312)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 313)&quot; onmouseover=&quot;showTip(event, 'fs78', 313)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 314)&quot; onmouseover=&quot;showTip(event, 'fs62', 314)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs79', 315)&quot; onmouseover=&quot;showTip(event, 'fs79', 315)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 316)&quot; onmouseover=&quot;showTip(event, 'fs73', 316)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 317)&quot; onmouseover=&quot;showTip(event, 'fs61', 317)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;)

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 318)&quot; onmouseover=&quot;showTip(event, 'fs80', 318)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 319)&quot; onmouseover=&quot;showTip(event, 'fs66', 319)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 320)&quot; onmouseover=&quot;showTip(event, 'fs73', 320)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs68', 321)&quot; onmouseover=&quot;showTip(event, 'fs68', 321)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 322)&quot; onmouseover=&quot;showTip(event, 'fs73', 322)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 323)&quot; onmouseover=&quot;showTip(event, 'fs49', 323)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 324)&quot; onmouseover=&quot;showTip(event, 'fs66', 324)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 325)&quot; onmouseover=&quot;showTip(event, 'fs73', 325)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 326)&quot; onmouseover=&quot;showTip(event, 'fs61', 326)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;)

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 327)&quot; onmouseover=&quot;showTip(event, 'fs81', 327)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 328)&quot; onmouseover=&quot;showTip(event, 'fs66', 328)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 329)&quot; onmouseover=&quot;showTip(event, 'fs73', 329)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 330)&quot; onmouseover=&quot;showTip(event, 'fs82', 330)&quot; class=&quot;f&quot;&gt;mapper&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 331)&quot; onmouseover=&quot;showTip(event, 'fs83', 331)&quot; class=&quot;i&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 332)&quot; onmouseover=&quot;showTip(event, 'fs62', 332)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs84', 333)&quot; onmouseover=&quot;showTip(event, 'fs84', 333)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 334)&quot; onmouseover=&quot;showTip(event, 'fs83', 334)&quot; class=&quot;i&quot;&gt;old&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 335)&quot; onmouseover=&quot;showTip(event, 'fs62', 335)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs84', 336)&quot; onmouseover=&quot;showTip(event, 'fs84', 336)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 337)&quot; onmouseover=&quot;showTip(event, 'fs66', 337)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;)
            &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 338)&quot; onmouseover=&quot;showTip(event, 'fs66', 338)&quot; class=&quot;i&quot;&gt;product&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 339)&quot; onmouseover=&quot;showTip(event, 'fs83', 339)&quot; class=&quot;i&quot;&gt;old&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 340)&quot; onmouseover=&quot;showTip(event, 'fs85', 340)&quot; class=&quot;i&quot;&gt;updatedList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 341)&quot; onmouseover=&quot;showTip(event, 'fs70', 341)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 342)&quot; onmouseover=&quot;showTip(event, 'fs78', 342)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 343)&quot; onmouseover=&quot;showTip(event, 'fs82', 343)&quot; class=&quot;f&quot;&gt;mapper&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 344)&quot; onmouseover=&quot;showTip(event, 'fs73', 344)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs61', 345)&quot; onmouseover=&quot;showTip(event, 'fs61', 345)&quot; class=&quot;i&quot;&gt;Products&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs68', 346)&quot; onmouseover=&quot;showTip(event, 'fs68', 346)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 347)&quot; onmouseover=&quot;showTip(event, 'fs73', 347)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs49', 348)&quot; onmouseover=&quot;showTip(event, 'fs49', 348)&quot; class=&quot;i&quot;&gt;Price&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 349)&quot; onmouseover=&quot;showTip(event, 'fs85', 349)&quot; class=&quot;i&quot;&gt;updatedList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Here is a short summary of the stuff you already should now.&lt;/p&gt;
&lt;p&gt;Instead of a class we create a module. We put all private mutable fields
inside an immutable record. We make this record private. A constructor
function that we name &lt;code&gt;create&lt;/code&gt; has the purpose of creating a new object and
contains all validation. In this case it filters the list and ensures that only
products over a specified price will be saved in our object. The Getter and
Setter part are identical to what you know from OO. Because the record is private
we need getters so we can access the &lt;code&gt;Price&lt;/code&gt; and &lt;code&gt;Products&lt;/code&gt; outside of the module.
The setter just sets the value of &lt;code&gt;Price&lt;/code&gt; or &lt;code&gt;Products&lt;/code&gt; to a new value. But it does
it by creating new objects instead of mutating. The &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt;
functions are normal functions like &lt;code&gt;MinMax.show&lt;/code&gt;, &lt;code&gt;MinMax.add&lt;/code&gt; or
&lt;code&gt;MinMax.subtract&lt;/code&gt; with more logic.&lt;/p&gt;
&lt;p&gt;For a moment lets forget about the &lt;code&gt;update&lt;/code&gt; function. Lets see what we can
do with our &lt;code&gt;ProductsPriceOver&lt;/code&gt; module so far:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;36: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// returns a list of product names from a ProductsPriceOver object&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 350)&quot; onmouseover=&quot;showTip(event, 'fs86', 350)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 351)&quot; onmouseover=&quot;showTip(event, 'fs87', 351)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs70', 352)&quot; onmouseover=&quot;showTip(event, 'fs70', 352)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 353)&quot; onmouseover=&quot;showTip(event, 'fs78', 353)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 354)&quot; onmouseover=&quot;showTip(event, 'fs62', 354)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs84', 355)&quot; onmouseover=&quot;showTip(event, 'fs84', 355)&quot; class=&quot;f&quot;&gt;name&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs88', 356)&quot; onmouseover=&quot;showTip(event, 'fs88', 356)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs89', 357)&quot; onmouseover=&quot;showTip(event, 'fs89', 357)&quot; class=&quot;f&quot;&gt;products&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 358)&quot; onmouseover=&quot;showTip(event, 'fs87', 358)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// Our Products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 359)&quot; onmouseover=&quot;showTip(event, 'fs90', 359)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 360)&quot; onmouseover=&quot;showTip(event, 'fs62', 360)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 361)&quot; onmouseover=&quot;showTip(event, 'fs91', 361)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;9.99m&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 362)&quot; onmouseover=&quot;showTip(event, 'fs92', 362)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 363)&quot; onmouseover=&quot;showTip(event, 'fs62', 363)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 364)&quot; onmouseover=&quot;showTip(event, 'fs91', 364)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;19.99m&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 365)&quot; onmouseover=&quot;showTip(event, 'fs93', 365)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 366)&quot; onmouseover=&quot;showTip(event, 'fs62', 366)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 367)&quot; onmouseover=&quot;showTip(event, 'fs91', 367)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;49.99m&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Initializing and adding our products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 368)&quot; onmouseover=&quot;showTip(event, 'fs94', 368)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs88', 369)&quot; onmouseover=&quot;showTip(event, 'fs88', 369)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs95', 370)&quot; onmouseover=&quot;showTip(event, 'fs95', 370)&quot; class=&quot;f&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.00m&lt;/span&gt; []
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 371)&quot; onmouseover=&quot;showTip(event, 'fs88', 371)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs96', 372)&quot; onmouseover=&quot;showTip(event, 'fs96', 372)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 373)&quot; onmouseover=&quot;showTip(event, 'fs90', 373)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 374)&quot; onmouseover=&quot;showTip(event, 'fs88', 374)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs96', 375)&quot; onmouseover=&quot;showTip(event, 'fs96', 375)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 376)&quot; onmouseover=&quot;showTip(event, 'fs92', 376)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 377)&quot; onmouseover=&quot;showTip(event, 'fs88', 377)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs96', 378)&quot; onmouseover=&quot;showTip(event, 'fs96', 378)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 379)&quot; onmouseover=&quot;showTip(event, 'fs93', 379)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 380)&quot; onmouseover=&quot;showTip(event, 'fs45', 380)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 381)&quot; onmouseover=&quot;showTip(event, 'fs86', 381)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 382)&quot; onmouseover=&quot;showTip(event, 'fs94', 382)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;C&amp;quot;; &amp;quot;B&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: only contains B and C as price of A is below 10.00&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Replace the whole products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 383)&quot; onmouseover=&quot;showTip(event, 'fs97', 383)&quot; class=&quot;i&quot;&gt;ppo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 384)&quot; onmouseover=&quot;showTip(event, 'fs88', 384)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs98', 385)&quot; onmouseover=&quot;showTip(event, 'fs98', 385)&quot; class=&quot;f&quot;&gt;setProducts&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs90', 386)&quot; onmouseover=&quot;showTip(event, 'fs90', 386)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs93', 387)&quot; onmouseover=&quot;showTip(event, 'fs93', 387)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;] &lt;span onmouseout=&quot;hideTip(event, 'fs94', 388)&quot; onmouseover=&quot;showTip(event, 'fs94', 388)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 389)&quot; onmouseover=&quot;showTip(event, 'fs45', 389)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 390)&quot; onmouseover=&quot;showTip(event, 'fs86', 390)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 391)&quot; onmouseover=&quot;showTip(event, 'fs97', 391)&quot; class=&quot;i&quot;&gt;ppo2&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: only contains C as price of A is below 10.00&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Increase minimum price&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 392)&quot; onmouseover=&quot;showTip(event, 'fs99', 392)&quot; class=&quot;i&quot;&gt;ppo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 393)&quot; onmouseover=&quot;showTip(event, 'fs88', 393)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs100', 394)&quot; onmouseover=&quot;showTip(event, 'fs100', 394)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20.00m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 395)&quot; onmouseover=&quot;showTip(event, 'fs94', 395)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 396)&quot; onmouseover=&quot;showTip(event, 'fs45', 396)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 397)&quot; onmouseover=&quot;showTip(event, 'fs86', 397)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 398)&quot; onmouseover=&quot;showTip(event, 'fs99', 398)&quot; class=&quot;i&quot;&gt;ppo3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: Contained B and C before. B was removed after&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//          increasing the needed price a product must have.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Decrease Price and then reset all products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 399)&quot; onmouseover=&quot;showTip(event, 'fs101', 399)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs94', 400)&quot; onmouseover=&quot;showTip(event, 'fs94', 400)&quot; class=&quot;i&quot;&gt;ppo&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 401)&quot; onmouseover=&quot;showTip(event, 'fs88', 401)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs100', 402)&quot; onmouseover=&quot;showTip(event, 'fs100', 402)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.00m&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 403)&quot; onmouseover=&quot;showTip(event, 'fs88', 403)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs98', 404)&quot; onmouseover=&quot;showTip(event, 'fs98', 404)&quot; class=&quot;f&quot;&gt;setProducts&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs90', 405)&quot; onmouseover=&quot;showTip(event, 'fs90', 405)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs92', 406)&quot; onmouseover=&quot;showTip(event, 'fs92', 406)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs93', 407)&quot; onmouseover=&quot;showTip(event, 'fs93', 407)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;]
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 408)&quot; onmouseover=&quot;showTip(event, 'fs45', 408)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%A&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 409)&quot; onmouseover=&quot;showTip(event, 'fs86', 409)&quot; class=&quot;f&quot;&gt;getProductNames&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 410)&quot; onmouseover=&quot;showTip(event, 'fs101', 410)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [&amp;quot;A&amp;quot;; &amp;quot;B&amp;quot;; &amp;quot;C&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Correct: Should be obvious.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Again, we can see how we got a fluid-syntax or in general an data-flow API
very easily. Amazing is that none of our functions from &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;setProducts&lt;/code&gt;
or &lt;code&gt;setPrice&lt;/code&gt; contains any validation logic and we still always get valid objects.&lt;/p&gt;
&lt;p&gt;The final part is the problem we already saw with &lt;em&gt;defensive copies&lt;/em&gt;. If we
change the price of any product, it doesn't effect any &lt;code&gt;ProductsPriceOver&lt;/code&gt;
object.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Set Price of A to &amp;quot;1.00&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 411)&quot; onmouseover=&quot;showTip(event, 'fs102', 411)&quot; class=&quot;i&quot;&gt;newA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 412)&quot; onmouseover=&quot;showTip(event, 'fs62', 412)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 413)&quot; onmouseover=&quot;showTip(event, 'fs103', 413)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.00m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 414)&quot; onmouseover=&quot;showTip(event, 'fs90', 414)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// A in ppo4 is still 9.99&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 415)&quot; onmouseover=&quot;showTip(event, 'fs45', 415)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs88', 416)&quot; onmouseover=&quot;showTip(event, 'fs88', 416)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs104', 417)&quot; onmouseover=&quot;showTip(event, 'fs104', 417)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 418)&quot; onmouseover=&quot;showTip(event, 'fs101', 418)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// [&amp;quot;A -- 9.99&amp;quot;; &amp;quot;B -- 19.99&amp;quot;; &amp;quot;C -- 49.99&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This should be obvious and is the reason why we need an &lt;code&gt;update&lt;/code&gt; function.
When we update the price of a product, we need to create a new &lt;code&gt;ProductsPriceOver&lt;/code&gt;
object and we pass it the Product that changed. We could pass &lt;code&gt;newA&lt;/code&gt;
that we created and pass it to the &lt;code&gt;update&lt;/code&gt; function. But actually, there
is no reason to create &lt;code&gt;newA&lt;/code&gt; separately. We also could write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 419)&quot; onmouseover=&quot;showTip(event, 'fs105', 419)&quot; class=&quot;i&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 420)&quot; onmouseover=&quot;showTip(event, 'fs88', 420)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs106', 421)&quot; onmouseover=&quot;showTip(event, 'fs106', 421)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 422)&quot; onmouseover=&quot;showTip(event, 'fs62', 422)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 423)&quot; onmouseover=&quot;showTip(event, 'fs103', 423)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;8.0m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 424)&quot; onmouseover=&quot;showTip(event, 'fs90', 424)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs101', 425)&quot; onmouseover=&quot;showTip(event, 'fs101', 425)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs88', 426)&quot; onmouseover=&quot;showTip(event, 'fs88', 426)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs104', 427)&quot; onmouseover=&quot;showTip(event, 'fs104', 427)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 428)&quot; onmouseover=&quot;showTip(event, 'fs105', 428)&quot; class=&quot;i&quot;&gt;p1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// [&amp;quot;A -- 8.00&amp;quot;; &amp;quot;B -- 19.99&amp;quot;; &amp;quot;C -- 49.99&amp;quot;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 429)&quot; onmouseover=&quot;showTip(event, 'fs107', 429)&quot; class=&quot;i&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 430)&quot; onmouseover=&quot;showTip(event, 'fs88', 430)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs106', 431)&quot; onmouseover=&quot;showTip(event, 'fs106', 431)&quot; class=&quot;f&quot;&gt;update&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs62', 432)&quot; onmouseover=&quot;showTip(event, 'fs62', 432)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs103', 433)&quot; onmouseover=&quot;showTip(event, 'fs103', 433)&quot; class=&quot;f&quot;&gt;setPrice&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0m&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 434)&quot; onmouseover=&quot;showTip(event, 'fs90', 434)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs101', 435)&quot; onmouseover=&quot;showTip(event, 'fs101', 435)&quot; class=&quot;i&quot;&gt;ppo4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs88', 436)&quot; onmouseover=&quot;showTip(event, 'fs88', 436)&quot; class=&quot;t&quot;&gt;ProductsPriceOver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs104', 437)&quot; onmouseover=&quot;showTip(event, 'fs104', 437)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 438)&quot; onmouseover=&quot;showTip(event, 'fs107', 438)&quot; class=&quot;i&quot;&gt;p2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// [&amp;quot;B -- 19.99&amp;quot;; &amp;quot;C -- 49.99&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of creating a new object, and then pass it to update, we just
inline the whole function call. &lt;a href=&quot;/blog/2016/09/25/function-application-and-composition&quot;&gt;In general immutability changes the way how
we write code either into a more sequential-style or a nested-style&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you follow this idea further there are probably even more changes you want
to do, but all of those are outside the scope of this article. The important
aspect is if our objects stay valid.&lt;/p&gt;
&lt;p&gt;We must create an &lt;code&gt;update&lt;/code&gt; function that is not needed in an mutable version.
But even that can be considered as good. We didn't need to create an &lt;code&gt;update&lt;/code&gt;
function with a mutable version because mutable Products already had this
feature. In fact the problem is more that you can forget this feature, and this
is the reason why an &lt;code&gt;ProductsPriceOver&lt;/code&gt; in the mutable version can become
invalid, because you can forget a feature that msomehow must be handled.&lt;/p&gt;
&lt;p&gt;The rules to create either events or defensive copies forces you to think about
this cases so you hopefully don't forget them. With immutability you cannot forget
anything that later on can invalidate anything. Your code only has those
features you also implemented!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Working with immutability sure is different. I guess some people will also claim
that updating with immutability is harder. With mutability you just need to
change the Product and that's it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;a.Price &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The problem is that those things often miss the bigger picture. As just mutating
the price can cause problems in other code like we have seen previously. If we
start adding &lt;code&gt;copy&lt;/code&gt; functions for defensive copying or need to add event handling
then this is not really simpler compared to immutability.&lt;/p&gt;
&lt;p&gt;It is sure possible that you can create mutable objects that are always valid,
but doing so is a lot harder. Even now I'm still not 100% sure if I covered
ll possibilities how mutation can somehow lead to an invalid object.&lt;/p&gt;
&lt;p&gt;There are more reasons for immutability, advantages and techniques we didn't
looked at. But there are also reasons against immutability. But in this article we
only looked at mutability vs. immutability in the context of maintaining
valid objects.&lt;/p&gt;
&lt;p&gt;In my opinion, most of the time, this is the most important aspect we usually
care for. As a general thumb of rule I would claim that by default everything
should be immutable. Until of course there are other reasons why this
shouldn't be the case. What this other reasons could be are topics for other
articles.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;type T =&lt;br /&gt;&amp;#160;&amp;#160;private {Minimum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Maximum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Current: int;}&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;T.Minimum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;T.Maximum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;T.Current: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val minimum : mm:T -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.minimum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val mm : T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val maximum : mm:T -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.maximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val current : mm:T -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.current&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val create : min:int -&amp;gt; max:int -&amp;gt; cur:int -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val min : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val max : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val cur : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val create : (int -&amp;gt; int -&amp;gt; int -&amp;gt; T)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val failwith : message:string -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.failwith&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val show : mm:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val sprintf : format:Printf.StringFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val add : x:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val subtract : x:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.subtract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val setMaximum : max:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.setMaximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val setMinimum : min:int -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.setMinimum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;type MinMax =&lt;br /&gt;&amp;#160;&amp;#160;{Minimum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Maximum: int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Current: int;}&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.MinMax&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;MinMax.Minimum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;MinMax.Maximum: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;MinMax.Current: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val a : MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val create : min:int -&amp;gt; max:int -&amp;gt; cur:int -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val create : (int -&amp;gt; int -&amp;gt; int -&amp;gt; MinMax)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val show : mm:MinMax -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val mm : MinMax&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;module MinMax&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val show : mm:MinMax.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.show&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val create : min:int -&amp;gt; max:int -&amp;gt; cur:int -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val add : x:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val subtract : x:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.subtract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val add : x:int -&amp;gt; mm:MinMax.T -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val subtract : x:int -&amp;gt; mm:MinMax.T -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.subtract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val setMaximum : max:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.setMaximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val setMinimum : min:int -&amp;gt; mm:MinMax -&amp;gt; MinMax&lt;br /&gt;&lt;br /&gt;Full name: mutabilityvsimmutabilityvalidation.setMinimum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val v : MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.v&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val x : MinMax.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val setMaximum : max:int -&amp;gt; mm:MinMax.T -&amp;gt; MinMax.T&lt;br /&gt;&lt;br /&gt;Full name: Main.MinMax.setMaximum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;type T =&lt;br /&gt;&amp;#160;&amp;#160;private {Name: string;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Price: decimal;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;T.Name: string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;T.Price: decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;Multiple items&lt;br /&gt;val decimal : value:&amp;#39;T -&amp;gt; decimal (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal = System.Decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type decimal&amp;lt;&amp;#39;Measure&amp;gt; = decimal&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.decimal&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val create : name:string -&amp;gt; price:decimal -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val name : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val price : decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val name : mm:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.name&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val price : mm:T -&amp;gt; decimal&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.price&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val setName : name:string -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.setName&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val setPrice : price:decimal -&amp;gt; mm:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val toString : p:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;val p : T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;type T =&lt;br /&gt;&amp;#160;&amp;#160;private {Price: decimal;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;Products: T list;}&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;T.Products: Product.T list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;module Product&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val priceOver : x:decimal -&amp;gt; product:Product.T -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.priceOver&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val x : decimal&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val product : Product.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val price : mm:Product.T -&amp;gt; decimal&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.price&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val create : price:decimal -&amp;gt; products:Product.T list -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val products : Product.T list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val price : ppo:T -&amp;gt; decimal&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.price&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val ppo : T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val products : ppo:T -&amp;gt; Product.T list&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.products&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val setPrice : price:decimal -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val setProducts : products:Product.T list -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setProducts&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val toString : ppo:T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;val toString : p:Product.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val add : product:Product.T -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val update : product:Product.T -&amp;gt; ppo:T -&amp;gt; T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.update&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val mapper : (Product.T -&amp;gt; Product.T)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val old : Product.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val name : mm:Product.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.name&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val updatedList : Product.T list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;val getProductNames : ppo:ProductsPriceOver.T -&amp;gt; string list&lt;br /&gt;&lt;br /&gt;Full name: Main.getProductNames&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val ppo : ProductsPriceOver.T&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;module ProductsPriceOver&lt;br /&gt;&lt;br /&gt;from Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;val products : ppo:ProductsPriceOver.T -&amp;gt; Product.T list&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.products&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;val a : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;val create : name:string -&amp;gt; price:decimal -&amp;gt; Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;val b : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;val c : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.c&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs94&quot;&gt;val ppo : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs95&quot;&gt;val create : price:decimal -&amp;gt; products:Product.T list -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.create&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs96&quot;&gt;val add : product:Product.T -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs97&quot;&gt;val ppo2 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs98&quot;&gt;val setProducts : products:Product.T list -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setProducts&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs99&quot;&gt;val ppo3 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs100&quot;&gt;val setPrice : price:decimal -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs101&quot;&gt;val ppo4 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ppo4&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs102&quot;&gt;val newA : Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.newA&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs103&quot;&gt;val setPrice : price:decimal -&amp;gt; mm:Product.T -&amp;gt; Product.T&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.setPrice&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs104&quot;&gt;val toString : ppo:ProductsPriceOver.T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs105&quot;&gt;val p1 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.p1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs106&quot;&gt;val update : product:Product.T -&amp;gt; ppo:ProductsPriceOver.T -&amp;gt; ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.ProductsPriceOver.update&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs107&quot;&gt;val p2 : ProductsPriceOver.T&lt;br /&gt;&lt;br /&gt;Full name: Main.p2&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><category term="C#" /><category term="immutability" /><category term="comparison" /><summary type="html">I already wrote an article that explains immutability, but one thing I hand-waved was the benefits of immutability and why you should program with immutable values. In this article I talk about those benefits by trying to maintaining valid objects at all time and show how we can achieve it with mutability and immutability. One question might be why I'm not just showing the immutable part. I could do this, but the problem I see is that it isn't so obvious how hard the mutable part really is. Because of this, first I show all the things you have to keep in mind if you work with mutability. Then we see how immutability helps us. About this article Throughout this article I will use C# and F#. I use C# for the mutable examples and F# for the immutable example. There are multiple reasons for this decision: Mutability is best handled by classes and C# is built around that concepts and everything by default is mutable. Immutability is best handled by immutable data-types and functions that operate on them. In F# everything is immutable by default. If you are new to F#, probably this article can help a little bit if you see how C# code translates to F#. Throughout this article I use some words, and you should know my definition of those words to avoid confusion: State: State, mutable objects or mutability is just used interchangeable. Object: The word object is not limited to OOP. In general it just means a thing. Also F# data-types like records, unions or tuples are just objects. Function: Anything that you somehow execute is a function. This includes class constructors, methods, static methods, F# functions and so on. Constructors: A constructor is any function that creates a new object if you don't already have one. With immutability a constructor might seems a little blurry because every function returns a new object. The important detail is if you don't already have one. As an example List.map, List.filter or List.fold are not considered as constructors. All those functions already expect a List that they operator on. If you don't already have a list, you cannot use those functions. In F# there are multiple ways to create a list, like the special List syntax [1;2;3] or the cons operator 1 :: 2 or functions like List.unfold. All of those things create a list without that you need one beforehand and thus are considered constructors. This article is not a C# vs. F# or OO vs. FP comparison. You also can create immutable object in C# and get the same benefits as in the F# examples. Or you can create mutable classes in F# and get the same disadvantages as in the C# examples. Mutability: The MinMax example We start with a really small and simple example. A MinMax class that only has the purpose to keep a current value between a defined minimum and maximum. A C# class could look like this: 1: 2: 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: 16: 17: 18: 19: 20: 21: 22: 23: 24: 25: 26: 27: 28: 29: 30: 31: 32: 33: 34: 35: 36: 37: 38: 39: public class MinMax { public int Minimum { get; private set; } public int Maximum { get; private set; } public int Current { get; private set; }</summary></entry><entry><title type="html">Function Application and Composition</title><link href="https://sidburn.github.io/blog/2016/09/25/function-application-and-composition" rel="alternate" type="text/html" title="Function Application and Composition" /><published>2016-09-25T00:00:00+02:00</published><updated>2016-09-25T00:00:00+02:00</updated><id>https://sidburn.github.io/blog/2016/09/25/function-application-and-composition</id><content type="html" xml:base="https://sidburn.github.io/blog/2016/09/25/function-application-and-composition">&lt;p&gt;Function application is probably one of those terms in functional programming that sounds more
scarier as the topic really is. The idea behind functional application just means that we execute
a function to get the result. Let's take the example of calculating the square root of
&lt;code&gt;2.0&lt;/code&gt;. We can write the following in F# to do that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 2)&quot; onmouseover=&quot;showTip(event, 'fs2', 2)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The interesting part is how we read this example. We read it from right-to-left.
&lt;code&gt;2.0&lt;/code&gt; is the input to &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt; returns the value &lt;code&gt;1.41&lt;/code&gt; this is then stored in &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/sqrt.svg&quot; alt=&quot;sqrt example that shows how we read a function from right-to-left&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Usually we just say that we &lt;em&gt;execute&lt;/em&gt; or &lt;em&gt;run&lt;/em&gt; the &lt;code&gt;sqrt&lt;/code&gt; function. But in functional
programming the correct term is that we apply the value &lt;code&gt;2.0&lt;/code&gt; to the function &lt;code&gt;sqrt&lt;/code&gt;. Probably
you will ask how I can write a whole article about this topic, but there are some topics
associated with it.&lt;/p&gt;
&lt;h2&gt;Partial Application&lt;/h2&gt;
&lt;p&gt;Partial application is one of those topics. If we pass all arguments to a function we name it
&lt;em&gt;function application&lt;/em&gt;. But if we only pass some arguments to a function we name it
&lt;em&gt;partial application&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In some programming languages it is an error if we don't pass all arguments to a function, but
in some functional languages, including F#, this is an explicit feature. The result of
partial application is a new function that accepts/waits for the remaining arguments. For
example: If we have a function &lt;code&gt;add&lt;/code&gt; that expects two integers:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 7)&quot; onmouseover=&quot;showTip(event, 'fs5', 7)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 8)&quot; onmouseover=&quot;showTip(event, 'fs6', 8)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we only pass one argument to that function:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 9)&quot; onmouseover=&quot;showTip(event, 'fs7', 9)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 10)&quot; onmouseover=&quot;showTip(event, 'fs4', 10)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Then partial application returns a new functions that expects the remaining argument. In the
above case we could say that we baked in &lt;code&gt;1&lt;/code&gt; as &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;add1&lt;/code&gt; expects the remaining
argument &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 11)&quot; onmouseover=&quot;showTip(event, 'fs7', 11)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 12)&quot; onmouseover=&quot;showTip(event, 'fs7', 12)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Immutability&lt;/h2&gt;
&lt;p&gt;Another big topic in functional programming is immutability. Immutability is a fairly easy
concept. It just means data cannot be changed after creation. If you are new to functional
programming or in general to this concept, this sound a little bit strange. How
can we do anything useful if we cannot change anything?&lt;/p&gt;
&lt;p&gt;The answer is simple. Instead of changing any kind of data, we just generate new data.
Probably you wonder how this concept is associated with function application. While immutability
has no direct effect on function application, it changes the way how we think about
functions. With immutability in-place every functions must return a new value.&lt;/p&gt;
&lt;p&gt;Let's look at some example code to understand why this kind of idea is important. Besides
&lt;code&gt;sqrt&lt;/code&gt; we first create two new functions:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 13)&quot; onmouseover=&quot;showTip(event, 'fs8', 13)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 14)&quot; onmouseover=&quot;showTip(event, 'fs9', 14)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 15)&quot; onmouseover=&quot;showTip(event, 'fs10', 15)&quot; class=&quot;f&quot;&gt;pown&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 16)&quot; onmouseover=&quot;showTip(event, 'fs9', 16)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 17)&quot; onmouseover=&quot;showTip(event, 'fs11', 17)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 18)&quot; onmouseover=&quot;showTip(event, 'fs9', 18)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We now create a new function that first calculates the square root of a number, add 10 to the
result of it, and finally squares the result. That function is pretty artificial so we just
name it &lt;code&gt;blub&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 20)&quot; onmouseover=&quot;showTip(event, 'fs12', 20)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 21)&quot; onmouseover=&quot;showTip(event, 'fs9', 21)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 23)&quot; onmouseover=&quot;showTip(event, 'fs3', 23)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 24)&quot; onmouseover=&quot;showTip(event, 'fs9', 24)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 25)&quot; onmouseover=&quot;showTip(event, 'fs14', 25)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 26)&quot; onmouseover=&quot;showTip(event, 'fs11', 26)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 27)&quot; onmouseover=&quot;showTip(event, 'fs13', 27)&quot; class=&quot;i&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 28)&quot; onmouseover=&quot;showTip(event, 'fs15', 28)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 29)&quot; onmouseover=&quot;showTip(event, 'fs8', 29)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 30)&quot; onmouseover=&quot;showTip(event, 'fs14', 30)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 31)&quot; onmouseover=&quot;showTip(event, 'fs15', 31)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs12', 32)&quot; onmouseover=&quot;showTip(event, 'fs12', 32)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 130.28&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The above code I wrote probably resembles the way how you write functions in a non-functional
language that also don't use immutability. But in this case every function returns a new value
and this style is a little bit verbose. But first lets look how we read this code:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub.svg&quot; alt=&quot;visualization how we read the blub function&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;I don't know you, but I think reading it is pretty horrible. The amount of &lt;em&gt;jumping around&lt;/em&gt;
is quite high. If you don't think it is horrible then it just shows how much you are used
to this kind of writing. But lets examine the example a little bit further.&lt;/p&gt;
&lt;p&gt;If you look at the visualization we can see some kind of pattern. We actually can
see two properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every value is only used once.&lt;/li&gt;
&lt;li&gt;The input of the next function is the output of the previous function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first property allows us to just embed or &lt;strong&gt;nest&lt;/strong&gt; the function calls. There is no
reason why we store the result of a function explicitly in a variable if we anyway just use
the result once. We just can nest the code:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 33)&quot; onmouseover=&quot;showTip(event, 'fs12', 33)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 34)&quot; onmouseover=&quot;showTip(event, 'fs9', 34)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 35)&quot; onmouseover=&quot;showTip(event, 'fs14', 35)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 36)&quot; onmouseover=&quot;showTip(event, 'fs11', 36)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 37)&quot; onmouseover=&quot;showTip(event, 'fs3', 37)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 38)&quot; onmouseover=&quot;showTip(event, 'fs9', 38)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 39)&quot; onmouseover=&quot;showTip(event, 'fs15', 39)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 40)&quot; onmouseover=&quot;showTip(event, 'fs8', 40)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;b&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 42)&quot; onmouseover=&quot;showTip(event, 'fs15', 42)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can repeat this step again. Also &lt;code&gt;b&lt;/code&gt; is only used once, so we nest &lt;code&gt;b&lt;/code&gt; again.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 43)&quot; onmouseover=&quot;showTip(event, 'fs12', 43)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 44)&quot; onmouseover=&quot;showTip(event, 'fs9', 44)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 45)&quot; onmouseover=&quot;showTip(event, 'fs15', 45)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 46)&quot; onmouseover=&quot;showTip(event, 'fs8', 46)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 47)&quot; onmouseover=&quot;showTip(event, 'fs11', 47)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 48)&quot; onmouseover=&quot;showTip(event, 'fs3', 48)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 49)&quot; onmouseover=&quot;showTip(event, 'fs9', 49)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
    &lt;span onmouseout=&quot;hideTip(event, 'fs15', 50)&quot; onmouseover=&quot;showTip(event, 'fs15', 50)&quot; class=&quot;i&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we also don't need &lt;code&gt;c&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 255)&quot; onmouseover=&quot;showTip(event, 'fs12', 255)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 256)&quot; onmouseover=&quot;showTip(event, 'fs9', 256)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 257)&quot; onmouseover=&quot;showTip(event, 'fs8', 257)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 258)&quot; onmouseover=&quot;showTip(event, 'fs11', 258)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 259)&quot; onmouseover=&quot;showTip(event, 'fs3', 259)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 260)&quot; onmouseover=&quot;showTip(event, 'fs9', 260)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The final result is quite a lot shorter, but how do we read this code?&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub-nested.svg&quot; alt=&quot;visualization how we read the nested blub function&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The final result resembles a normal function call. We just can read it straight from
right to left. Every function call returns a new result that is directly used as the
input of another function. With nesting we have once again a simple chain of execution.
No &lt;em&gt;jumping around&lt;/em&gt; anymore to understand the code.&lt;/p&gt;
&lt;h2&gt;Piping with |&amp;gt;&lt;/h2&gt;
&lt;p&gt;Up so far I only discussed the first property that a variable was only used once. But we
also had another property that the output of one function is the input of the
next function. We also could say, we have a chain of execution. The last visualization
already showed that chain as you could start on the right side and read the code to the left
until you are done.&lt;/p&gt;
&lt;p&gt;But we also can reverse that chain so we can read it from left-to-right. We achieve that
style with the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator. The &lt;code&gt;|&amp;gt;&lt;/code&gt; operator allows us to write the input of a function
on the left side and the function to execute on the right side.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/pipe.svg&quot; alt=&quot;Example of a single function with piping&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;With this idea we can reverse the input step by step like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub-pipe.svg&quot; alt=&quot;blub function with piping&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The advantage is that &lt;code&gt;|&amp;gt;&lt;/code&gt; is left-associative and has low precedence. In overall that means
when we see code like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we can remove the parenthesis from the left-side of &lt;code&gt;|&amp;gt;&lt;/code&gt; so we just end up with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This means the last version:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 57)&quot; onmouseover=&quot;showTip(event, 'fs12', 57)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 58)&quot; onmouseover=&quot;showTip(event, 'fs9', 58)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ((&lt;span onmouseout=&quot;hideTip(event, 'fs9', 59)&quot; onmouseover=&quot;showTip(event, 'fs9', 59)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 60)&quot; onmouseover=&quot;showTip(event, 'fs3', 60)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 61)&quot; onmouseover=&quot;showTip(event, 'fs11', 61)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 62)&quot; onmouseover=&quot;showTip(event, 'fs8', 62)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;also can be written without any parenthesis:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 63)&quot; onmouseover=&quot;showTip(event, 'fs12', 63)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 64)&quot; onmouseover=&quot;showTip(event, 'fs9', 64)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 65)&quot; onmouseover=&quot;showTip(event, 'fs9', 65)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 66)&quot; onmouseover=&quot;showTip(event, 'fs3', 66)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 67)&quot; onmouseover=&quot;showTip(event, 'fs11', 67)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 68)&quot; onmouseover=&quot;showTip(event, 'fs8', 68)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This kind of style is often preferred in the F# community and can be read from left-to-right.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:75%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/blub-pipe-read.svg&quot; alt=&quot;Shows that blub can be read from left-to-right&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;You often see this style in List manipulations:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;3.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;7.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;11.0&lt;/span&gt;; &lt;span class=&quot;n&quot;&gt;13.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 69)&quot; onmouseover=&quot;showTip(event, 'fs16', 69)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 70)&quot; onmouseover=&quot;showTip(event, 'fs17', 70)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 71)&quot; onmouseover=&quot;showTip(event, 'fs3', 71)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 72)&quot; onmouseover=&quot;showTip(event, 'fs16', 72)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 73)&quot; onmouseover=&quot;showTip(event, 'fs17', 73)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 74)&quot; onmouseover=&quot;showTip(event, 'fs11', 74)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 75)&quot; onmouseover=&quot;showTip(event, 'fs16', 75)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 76)&quot; onmouseover=&quot;showTip(event, 'fs17', 76)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 77)&quot; onmouseover=&quot;showTip(event, 'fs8', 77)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// [121.0; 137.64; 149.72; 159.91; 177.33; 185.11]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We start with the data, and every new command is put on a new line. This way we easily
can create longer chains that are still readable and extensible.&lt;/p&gt;
&lt;h2&gt;Never use &amp;lt;|&lt;/h2&gt;
&lt;p&gt;We can summarize &lt;code&gt;|&amp;gt;&lt;/code&gt; as an operator that swaps the function and the input of a function. Usually
the input is on the right and the function on the left, and we say we read it from right-to-left.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;|&amp;gt;&lt;/code&gt; we swap the function and the input. The input is now on the left, and we read the code
from left to right. That's why I name it just left-piping.&lt;/p&gt;
&lt;p&gt;F# also provides another operator &lt;code&gt;&amp;lt;|&lt;/code&gt;. Before we look into what it really does, the question
is: What do you &lt;strong&gt;expect&lt;/strong&gt; it should do?&lt;/p&gt;
&lt;p&gt;Lets think about it. &lt;code&gt;|&amp;gt;&lt;/code&gt; allows us to have the input on the left side of the function. We can
think of it that we pipe the input from left into the function on the right. So when we see &lt;code&gt;&amp;lt;|&lt;/code&gt;
we just expect the opposite. We could say, the input on the right is piped to the function on
the left side. This opens up a new question: What is the difference between &lt;code&gt;&amp;lt;|&lt;/code&gt; and
normal function application?&lt;/p&gt;
&lt;p&gt;So let us explore &lt;code&gt;&amp;lt;|&lt;/code&gt; step-by-step, and to understand why you never ever should use this
operator. We start with a simple case:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 78)&quot; onmouseover=&quot;showTip(event, 'fs3', 78)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can insert &lt;code&gt;&amp;lt;|&lt;/code&gt; in this term. But &lt;code&gt;&amp;lt;|&lt;/code&gt; does not change the order of anything, we still
write the input on the right side. So we end up with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 79)&quot; onmouseover=&quot;showTip(event, 'fs3', 79)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Seems pretty useless at this point. But if you remember, one advantage of &lt;code&gt;|&amp;gt;&lt;/code&gt; was
that we also could eliminate some parenthesis. So lets create a small example where the
input is a more complex term that needs to be calculated:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 80)&quot; onmouseover=&quot;showTip(event, 'fs3', 80)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At this point it is also helpful to understand what happens if we don't write the parenthesis.
The code above means. First calculate &lt;code&gt;(1.0 + 1.0)&lt;/code&gt; and use the result &lt;code&gt;2.0&lt;/code&gt; as the input
to &lt;code&gt;sqrt&lt;/code&gt;. When we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 81)&quot; onmouseover=&quot;showTip(event, 'fs3', 81)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;it basically means:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs3', 82)&quot; onmouseover=&quot;showTip(event, 'fs3', 82)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;that means, first calculate &lt;code&gt;sqrt 1&lt;/code&gt; and then add &lt;code&gt;1&lt;/code&gt; to the result. If we use &lt;code&gt;&amp;lt;|&lt;/code&gt;,
we can get rid of the parenthesis and still maintain the same behaviour.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs3', 83)&quot; onmouseover=&quot;showTip(event, 'fs3', 83)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Believe me or not, but I don't see any improvement so far. I have seen a lot of people arguing
that the last version is better as the version with parenthesis. I don't think so. Reading
parenthesis and the idea that everything inside of parenthesis is calculated first is something
that we already learn in elementary school:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/math.svg&quot; alt=&quot;A Math example with parenthesis&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Now instead of a clearly visible grouping with characters that human mankind already use
for centuries, now you just use two different characters instead. It could be that you have
another opinion on this, this is okay, but let's continue to see more problems of &lt;code&gt;&amp;lt;|&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem of &lt;code&gt;&amp;lt;|&lt;/code&gt; is, we just think of it as right-piping. We &lt;strong&gt;expect&lt;/strong&gt; that &lt;code&gt;&amp;lt;|&lt;/code&gt; is
the reverse of &lt;code&gt;|&amp;gt;&lt;/code&gt;. With a single function and a single argument, it also seems to work
this way. But this breaks as soon we try to extend the code. For example, when we now want
to add 10 to the result with our &lt;code&gt;add10&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;With nesting we just write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 84)&quot; onmouseover=&quot;showTip(event, 'fs3', 84)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;with left-piping we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 85)&quot; onmouseover=&quot;showTip(event, 'fs3', 85)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;with right-piping you probably assume to write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// This code does not work&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 86)&quot; onmouseover=&quot;showTip(event, 'fs3', 86)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably that is what you &lt;strong&gt;expect&lt;/strong&gt;. But this &lt;strong&gt;isn't&lt;/strong&gt; how &lt;code&gt;&amp;lt;|&lt;/code&gt; works! In fact, the above code
will just give you a compile-time error. Because of this, piping with &lt;code&gt;&amp;lt;|&lt;/code&gt; is just an exceptional
bad idea. If you see code like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 87)&quot; onmouseover=&quot;showTip(event, 'fs3', 87)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;you would probably assume that &lt;code&gt;&amp;lt;|&lt;/code&gt; just reverse the pipe:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// This code does not work&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 88)&quot; onmouseover=&quot;showTip(event, 'fs3', 88)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;but this isn't at all how it works. So how does &lt;code&gt;&amp;lt;|&lt;/code&gt; work instead? Probably at this point it
makes sense to add explicit parenthesis to understand how it works. And if you think
&lt;code&gt;&amp;lt;|&lt;/code&gt; is better because of the elimination of parenthesis. Isn't it funny that I need to
add parenthesis so you are able to understand how &lt;code&gt;&amp;lt;|&lt;/code&gt; actually works?&lt;/p&gt;
&lt;p&gt;We actually &lt;strong&gt;expect&lt;/strong&gt; that &lt;code&gt;&amp;lt;|&lt;/code&gt; works in this way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 89)&quot; onmouseover=&quot;showTip(event, 'fs3', 89)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The above code is valid and will compile. But it is no improvement over:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 90)&quot; onmouseover=&quot;showTip(event, 'fs3', 90)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we remove the explicit parenthesis in the first example. The code is interpreted like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ((&lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;add10&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 91)&quot; onmouseover=&quot;showTip(event, 'fs3', 91)&quot; class=&quot;i&quot;&gt;sqrt&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And this is a truly exceptional bad idea. The problem of &lt;code&gt;&amp;lt;|&lt;/code&gt; is that it is still
left-associative. That means, the thing on the left side is executed first. In the above case it
means. First &lt;code&gt;square&lt;/code&gt; is executed and we pass it &lt;code&gt;add10&lt;/code&gt; a function as the first argument
to &lt;code&gt;square&lt;/code&gt;. This is a compile-time error because &lt;code&gt;square&lt;/code&gt; expects a float, not a function.&lt;/p&gt;
&lt;p&gt;But if we still continue to interpret this code, and ignore this error, we then expect that
&lt;code&gt;square &amp;lt;| add10&lt;/code&gt; returns a new function as a result. We then execute that function by passing
&lt;code&gt;sqrt&lt;/code&gt; as an argument. Well, &lt;code&gt;square&lt;/code&gt; does not return a function, so this also cannot work.&lt;/p&gt;
&lt;p&gt;And if we still ignore this error, we once again assume that this will return another new function
as a result that we then finally pass &lt;code&gt;x&lt;/code&gt; as a value.&lt;/p&gt;
&lt;p&gt;Already confused? And that's why &lt;code&gt;&amp;lt;|&lt;/code&gt; is just an exceptional bad idea, and you never ever
should use &lt;code&gt;&amp;lt;|&lt;/code&gt;. &lt;code&gt;&amp;lt;|&lt;/code&gt; is just broken, it isn't at all how someone thinks it works or should work.&lt;/p&gt;
&lt;p&gt;At least let me give you a quick example that shows how &lt;code&gt;&amp;lt;|&lt;/code&gt; works and in which situation
it would &lt;em&gt;theoretically&lt;/em&gt; make sense. First you need a function that expects at least two arguments:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 92)&quot; onmouseover=&quot;showTip(event, 'fs18', 92)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 93)&quot; onmouseover=&quot;showTip(event, 'fs5', 93)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 94)&quot; onmouseover=&quot;showTip(event, 'fs6', 94)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 95)&quot; onmouseover=&quot;showTip(event, 'fs19', 95)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 96)&quot; onmouseover=&quot;showTip(event, 'fs5', 96)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 97)&quot; onmouseover=&quot;showTip(event, 'fs6', 97)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 98)&quot; onmouseover=&quot;showTip(event, 'fs19', 98)&quot; class=&quot;i&quot;&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now imagine all arguments are some more complex terms that you compute, usually you have to
put parenthesis around every term to group them:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 99)&quot; onmouseover=&quot;showTip(event, 'fs18', 99)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) (&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is just a function call with three arguments. But every arguments is calculated before
&lt;code&gt;add&lt;/code&gt; is called. In such a case, you could use &lt;code&gt;&amp;lt;|&lt;/code&gt; instead of parenthesis:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 100)&quot; onmouseover=&quot;showTip(event, 'fs18', 100)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The whole example is read like this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/right-piping.svg&quot; alt=&quot;How you read right-piping&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Overall &lt;code&gt;&amp;lt;|&lt;/code&gt; is just another delimiter that you could use instead of parenthesis. But
this kind of behaviour is not really how you would expect it to work. As left-piping with
&lt;code&gt;|&amp;gt;&lt;/code&gt; is used a lot, you would think &lt;code&gt;&amp;lt;|&lt;/code&gt; just does the reverse. So in general right-piping
only adds more confusion and it is better to not use it at all.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
If it is unclear why `&lt;|` works in this way. Lets add the parenthesis back in the last example.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;((&lt;span class=&quot;i&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The first thing that is executed is &lt;code&gt;(add &amp;lt;| 1 + 1)&lt;/code&gt;. This means first &lt;code&gt;1 + 1&lt;/code&gt; is calculated and
the result &lt;code&gt;2&lt;/code&gt; is passed to the &lt;code&gt;add&lt;/code&gt; function as the first argument. But the parenthesis around
this term end this term. So what do we really do? We basically &lt;em&gt;partial apply&lt;/em&gt; &lt;code&gt;add&lt;/code&gt; with a single
argument. This then returns a new anonymous function that expects the remaining arguments
&lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; of &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;2 + 2&lt;/code&gt; is calculated and this is once again &lt;em&gt;partial applied&lt;/em&gt; to that anonymous function. This
then returns another new anonymous function that expects the last argument &lt;code&gt;z&lt;/code&gt;. And to this function
we finally apply &lt;code&gt;3 + 3&lt;/code&gt; to it what then executes everything.
&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Nesting again&lt;/h2&gt;
&lt;p&gt;Writing code in a piping style with left-piping is probably the most common and most used
way you see in F#. Its not that this is in general a bad idea, but it can be bad if people
try to solve everything this way. It is important to understand when it is a good idea
and when not.&lt;/p&gt;
&lt;p&gt;Piping is only a good idea if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The last argument of a function is a more complex computation&lt;/li&gt;
&lt;li&gt;A function only has a single argument that is the result of another function&lt;/li&gt;
&lt;li&gt;You need to chain multiple of those functions in one explicit order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To understand those restriction better, let's talk about the List module. Why can we usually
chain most of the List functions? For example we can create something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 101)&quot; onmouseover=&quot;showTip(event, 'fs16', 101)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 102)&quot; onmouseover=&quot;showTip(event, 'fs20', 102)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 103)&quot; onmouseover=&quot;showTip(event, 'fs5', 103)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 104)&quot; onmouseover=&quot;showTip(event, 'fs5', 104)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// [2; 4; 6; 8; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 105)&quot; onmouseover=&quot;showTip(event, 'fs16', 105)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 106)&quot; onmouseover=&quot;showTip(event, 'fs17', 106)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 107)&quot; onmouseover=&quot;showTip(event, 'fs5', 107)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 108)&quot; onmouseover=&quot;showTip(event, 'fs5', 108)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)          &lt;span class=&quot;c&quot;&gt;// [4; 8; 12, 16; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 109)&quot; onmouseover=&quot;showTip(event, 'fs16', 109)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs21', 110)&quot; onmouseover=&quot;showTip(event, 'fs21', 110)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 111)&quot; onmouseover=&quot;showTip(event, 'fs22', 111)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 112)&quot; onmouseover=&quot;showTip(event, 'fs5', 112)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 113)&quot; onmouseover=&quot;showTip(event, 'fs22', 113)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 114)&quot; onmouseover=&quot;showTip(event, 'fs5', 114)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The first reason is the order of the arguments. All of those functions expects the list as the
last argument:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 115)&quot; onmouseover=&quot;showTip(event, 'fs16', 115)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 116)&quot; onmouseover=&quot;showTip(event, 'fs20', 116)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 117)&quot; onmouseover=&quot;showTip(event, 'fs23', 117)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 118)&quot; onmouseover=&quot;showTip(event, 'fs16', 118)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 119)&quot; onmouseover=&quot;showTip(event, 'fs17', 119)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;mapper&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 120)&quot; onmouseover=&quot;showTip(event, 'fs23', 120)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 121)&quot; onmouseover=&quot;showTip(event, 'fs16', 121)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs21', 122)&quot; onmouseover=&quot;showTip(event, 'fs21', 122)&quot; class=&quot;i&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 123)&quot; onmouseover=&quot;showTip(event, 'fs23', 123)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But even if we switch the order of the arguments we always can use piping, but it probably isn't
more readable anymore. If we for example assume the &lt;code&gt;List.map&lt;/code&gt; functions first expects a list
and then the &lt;em&gt;mapper&lt;/em&gt; function, we would write something like this with piping:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 124)&quot; onmouseover=&quot;showTip(event, 'fs16', 124)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 125)&quot; onmouseover=&quot;showTip(event, 'fs17', 125)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 126)&quot; onmouseover=&quot;showTip(event, 'fs23', 126)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's consider we had the same swapping in List.filter&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 127)&quot; onmouseover=&quot;showTip(event, 'fs16', 127)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 128)&quot; onmouseover=&quot;showTip(event, 'fs20', 128)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As &lt;code&gt;List.map&lt;/code&gt; used the result of &lt;code&gt;List.filter&lt;/code&gt; in our first example we would end with something
like this if &lt;em&gt;map&lt;/em&gt; and &lt;em&gt;filter&lt;/em&gt; had swapped arguments:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 129)&quot; onmouseover=&quot;showTip(event, 'fs16', 129)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 130)&quot; onmouseover=&quot;showTip(event, 'fs17', 130)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; ((&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 131)&quot; onmouseover=&quot;showTip(event, 'fs16', 131)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 132)&quot; onmouseover=&quot;showTip(event, 'fs20', 132)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But this kind of code is not readable or understandable at all. So a good choice for the
last argument is usually some kind of immutable data-type. But that is not everything. In
&lt;code&gt;List.fold&lt;/code&gt; we have two immutable data-types. The &lt;code&gt;state&lt;/code&gt; and the &lt;code&gt;list&lt;/code&gt;. So why is &lt;code&gt;list&lt;/code&gt;
the better choice? Because a list is very likely the result of a more complex computation.
The &lt;code&gt;state&lt;/code&gt; is almost always just a plain direct value like &lt;code&gt;0&lt;/code&gt; or an empty list and so on.
Very unlikely will you have a complex computation that computes the &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a thumb of rule we can say: It is a good idea if the output type of a function and the type of the
last argument is the same. Most of the functions from the List module are build that way. Most of those
functions return a new list, and most of them also expect a list as the last argument. It is in some
sense only natural that if you have dozens of functions that operate, transforms or create list that
you want to compose these functions together.&lt;/p&gt;
&lt;p&gt;Picking the correct last argument of a function is important, but that is not everything. The
problem is, sometimes you don't have one clear value to put as the last argument, sometimes more
than the last value gets computed, and so on. Whether or not piping is a good case also depends
on the argument itself. Let's pick another function to explore this behaviour: &lt;code&gt;List.append&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The purpose of &lt;code&gt;List.append&lt;/code&gt; is to append two lists together into one list. Whether or not piping is a
good choice now depends on the arguments itself. If only one argument is computed, it still works
fine with piping.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 133)&quot; onmouseover=&quot;showTip(event, 'fs16', 133)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs20', 134)&quot; onmouseover=&quot;showTip(event, 'fs20', 134)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 135)&quot; onmouseover=&quot;showTip(event, 'fs5', 135)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 136)&quot; onmouseover=&quot;showTip(event, 'fs5', 136)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// [2; 4; 6; 8; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 137)&quot; onmouseover=&quot;showTip(event, 'fs16', 137)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 138)&quot; onmouseover=&quot;showTip(event, 'fs17', 138)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 139)&quot; onmouseover=&quot;showTip(event, 'fs5', 139)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 140)&quot; onmouseover=&quot;showTip(event, 'fs5', 140)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;)          &lt;span class=&quot;c&quot;&gt;// [4; 8; 12, 16; ...]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 141)&quot; onmouseover=&quot;showTip(event, 'fs16', 141)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 142)&quot; onmouseover=&quot;showTip(event, 'fs24', 142)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;50&lt;/span&gt;]               &lt;span class=&quot;c&quot;&gt;// [100; 50; 4; 8; 12; ...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But if both lists are the result of a computation, then nesting is a much better choice.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 143)&quot; onmouseover=&quot;showTip(event, 'fs25', 143)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 144)&quot; onmouseover=&quot;showTip(event, 'fs9', 144)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 145)&quot; onmouseover=&quot;showTip(event, 'fs9', 145)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 146)&quot; onmouseover=&quot;showTip(event, 'fs26', 146)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 147)&quot; onmouseover=&quot;showTip(event, 'fs9', 147)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 148)&quot; onmouseover=&quot;showTip(event, 'fs9', 148)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Using Nesting&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 149)&quot; onmouseover=&quot;showTip(event, 'fs16', 149)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 150)&quot; onmouseover=&quot;showTip(event, 'fs24', 150)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt;
  (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 151)&quot; onmouseover=&quot;showTip(event, 'fs16', 151)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 152)&quot; onmouseover=&quot;showTip(event, 'fs17', 152)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 153)&quot; onmouseover=&quot;showTip(event, 'fs8', 153)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 154)&quot; onmouseover=&quot;showTip(event, 'fs16', 154)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 155)&quot; onmouseover=&quot;showTip(event, 'fs17', 155)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 156)&quot; onmouseover=&quot;showTip(event, 'fs25', 156)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]))
  (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 157)&quot; onmouseover=&quot;showTip(event, 'fs16', 157)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 158)&quot; onmouseover=&quot;showTip(event, 'fs17', 158)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 159)&quot; onmouseover=&quot;showTip(event, 'fs8', 159)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 160)&quot; onmouseover=&quot;showTip(event, 'fs16', 160)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 161)&quot; onmouseover=&quot;showTip(event, 'fs17', 161)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 162)&quot; onmouseover=&quot;showTip(event, 'fs26', 162)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]))

&lt;span class=&quot;c&quot;&gt;// The same as above with partial piping...&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 163)&quot; onmouseover=&quot;showTip(event, 'fs16', 163)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 164)&quot; onmouseover=&quot;showTip(event, 'fs17', 164)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 165)&quot; onmouseover=&quot;showTip(event, 'fs26', 165)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 166)&quot; onmouseover=&quot;showTip(event, 'fs16', 166)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 167)&quot; onmouseover=&quot;showTip(event, 'fs17', 167)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 168)&quot; onmouseover=&quot;showTip(event, 'fs8', 168)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 169)&quot; onmouseover=&quot;showTip(event, 'fs16', 169)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 170)&quot; onmouseover=&quot;showTip(event, 'fs24', 170)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 171)&quot; onmouseover=&quot;showTip(event, 'fs16', 171)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 172)&quot; onmouseover=&quot;showTip(event, 'fs17', 172)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 173)&quot; onmouseover=&quot;showTip(event, 'fs8', 173)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 174)&quot; onmouseover=&quot;showTip(event, 'fs16', 174)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 175)&quot; onmouseover=&quot;showTip(event, 'fs17', 175)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 176)&quot; onmouseover=&quot;showTip(event, 'fs25', 176)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]))

&lt;span class=&quot;c&quot;&gt;// ...with even more piping&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 177)&quot; onmouseover=&quot;showTip(event, 'fs16', 177)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 178)&quot; onmouseover=&quot;showTip(event, 'fs17', 178)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 179)&quot; onmouseover=&quot;showTip(event, 'fs26', 179)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 180)&quot; onmouseover=&quot;showTip(event, 'fs16', 180)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 181)&quot; onmouseover=&quot;showTip(event, 'fs17', 181)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 182)&quot; onmouseover=&quot;showTip(event, 'fs8', 182)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 183)&quot; onmouseover=&quot;showTip(event, 'fs16', 183)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 184)&quot; onmouseover=&quot;showTip(event, 'fs24', 184)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; ([&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 185)&quot; onmouseover=&quot;showTip(event, 'fs16', 185)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 186)&quot; onmouseover=&quot;showTip(event, 'fs17', 186)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 187)&quot; onmouseover=&quot;showTip(event, 'fs25', 187)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 188)&quot; onmouseover=&quot;showTip(event, 'fs16', 188)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 189)&quot; onmouseover=&quot;showTip(event, 'fs17', 189)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 190)&quot; onmouseover=&quot;showTip(event, 'fs8', 190)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// ...full piping including the evil &amp;lt;|&lt;/span&gt;
[&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;]
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 191)&quot; onmouseover=&quot;showTip(event, 'fs16', 191)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 192)&quot; onmouseover=&quot;showTip(event, 'fs17', 192)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 193)&quot; onmouseover=&quot;showTip(event, 'fs25', 193)&quot; class=&quot;f&quot;&gt;add1&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// &amp;lt;-- add1 instead of sub1!!!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 194)&quot; onmouseover=&quot;showTip(event, 'fs16', 194)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 195)&quot; onmouseover=&quot;showTip(event, 'fs17', 195)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 196)&quot; onmouseover=&quot;showTip(event, 'fs8', 196)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 197)&quot; onmouseover=&quot;showTip(event, 'fs16', 197)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 198)&quot; onmouseover=&quot;showTip(event, 'fs24', 198)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; ([&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5.0&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 199)&quot; onmouseover=&quot;showTip(event, 'fs16', 199)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 200)&quot; onmouseover=&quot;showTip(event, 'fs17', 200)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 201)&quot; onmouseover=&quot;showTip(event, 'fs26', 201)&quot; class=&quot;f&quot;&gt;sub1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 202)&quot; onmouseover=&quot;showTip(event, 'fs16', 202)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 203)&quot; onmouseover=&quot;showTip(event, 'fs17', 203)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 204)&quot; onmouseover=&quot;showTip(event, 'fs8', 204)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Also notice that in the last version, the parenthesis at the right of &lt;code&gt;&amp;lt;|&lt;/code&gt; are still important
and the whole order of &lt;code&gt;List.map add1&lt;/code&gt; and &lt;code&gt;List.map sub1&lt;/code&gt; changed!&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Do you understand why &lt;code&gt;add1&lt;/code&gt; and &lt;code&gt;sub1&lt;/code&gt; needs to be swapped in the last example?
Consider the following function:
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now look at those three definitions and their results:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the first and second example &lt;code&gt;5&lt;/code&gt; is the first argument to &lt;code&gt;sub&lt;/code&gt;. It is also the
first argument in the second example because function application has a higher precedence
as &lt;code&gt;|&amp;gt;&lt;/code&gt;. In the last example there is no direct function application anymore and &lt;code&gt;3 |&amp;gt; sub&lt;/code&gt;
is executed first and &lt;code&gt;3&lt;/code&gt; becomes the first argument of &lt;code&gt;sub&lt;/code&gt;. With explicit parenthesis, the code
is interpreted like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)    &lt;span class=&quot;c&quot;&gt;// 2&lt;/span&gt;
(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;sub&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Before we go further lets formalize why this kind of code is so hard to write with piping.
We have this problem because we don't have a single chain of computations anymore. We have two paths
of computation that are different. When we call &lt;code&gt;List.append&lt;/code&gt; it is just a way to combine
those two computations. In other words, our computation resembles a tree.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/tree.svg&quot; alt=&quot;Shows the computation as a tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Piping is not a good tool for those kind of trees. Piping is only a good option for
computations that works in a linear/sequential way. Nesting on the other hand don't have
this problem. If some argument is a more complex computation we always can surround the term
with parenthesis and embed the term where we need it. Look once again at the math example
to understand this:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/math.svg&quot; alt=&quot;A Math example&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;If you don't see the tree in it. First consider that operators like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; are just
binary operators that expects two arguments. So a term like &lt;code&gt;5 + 5&lt;/code&gt; also could be represented
as a tree. &lt;code&gt;+&lt;/code&gt; is the node with two arguments.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/add5-tree.svg&quot; alt=&quot;Shows how 5 + 5 can be read as a tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;You can apply this idea to the whole math formula &lt;code&gt;(5 + 5) * (3 + (6 * 2))&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/math-tree.svg&quot; alt=&quot;Visualize the math formula as a tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The only problem we have is to properly write those nesting so it is still readable. It isn't
useful if a line expand further and further. We need to properly format the code so we can
better understand it. And there is an easy way to format code with nesting. If things starts
to get too long we just can put every argument on a new line and indent it. We already have
seen this in the nested &lt;code&gt;List.append&lt;/code&gt; example.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/append.svg&quot; alt=&quot;List.append example&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In fact these kind of formatting works with any kind of tree like structure no matter how
complicated it seems. Here you can see a visualization of a tree and how you represent
it with indentation.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:100%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/tree2.svg&quot; alt=&quot;More complex example of a tree structure&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In fact, if you ever have written HTML or XML you should be comfortable with this. Both document
formats are tree structures. You have a starting and an end-tag. Inside of a tag you can nest
other tags to create hierachical structures. The rules you already use to properly indent
and format HTML also can be used to format and indent nested code with parenthesis.&lt;/p&gt;
&lt;p&gt;Up so far we have seen two kinds of code. One kind is sequential. With sequential code we can
use piping for a better representation. But if we have tree like structures just normal
nesting is quite better. The question we should ask is: Should we try to represent
anything as a sequence?&lt;/p&gt;
&lt;p&gt;The answer is actually, no. Not everything can be written in a linear way. I would even argue
that representing things as trees is easier. Trying to fit everything into a piping style just
can limit the view in how to solve problems in general. This is best described with
an example.&lt;/p&gt;
&lt;h2&gt;Binary Converter&lt;/h2&gt;
&lt;p&gt;In our example we want to write a function that can convert any number into a binary string
representation. Before we start coding we actually need to know an algorithm that
solves our problem.&lt;/p&gt;
&lt;p&gt;The algorithm I describe does not only work for converting numbers to binary, we also can
convert numbers to other bases like octal, hexadecimal and so on. For demonstrating the
algorithm I first show how we convert a number into decimal because it is a lot easier to follow.&lt;/p&gt;
&lt;p&gt;In general the algorithm works by removing one digit from a number, convert it into a string
and repeat that process for the remaining number. That description also already tell us that we
have a recursive algorithm.&lt;/p&gt;
&lt;p&gt;The first step is to remove one digit from a number. We achieve this by using the modulo operation.
When we calculate &lt;code&gt;x % 10&lt;/code&gt; we always get the right most digit of a number. This is just
a single digit between zero and nine. This allows us to create a function that just can convert
any digit to its string representation.&lt;/p&gt;
&lt;p&gt;For example when we start with the number &lt;code&gt;225&lt;/code&gt; we calculate &lt;code&gt;225 % 10&lt;/code&gt; and get &lt;code&gt;5&lt;/code&gt; out of it.
This &lt;code&gt;5&lt;/code&gt; then can be passed to a function that knows how to transform the numbers zero to nine
to a string.&lt;/p&gt;
&lt;p&gt;But we are not finished after this step. We only transformed the &lt;code&gt;5&lt;/code&gt; from &lt;code&gt;225&lt;/code&gt; into a string.
But we still need to transform the remaining digits &lt;code&gt;22&lt;/code&gt;. So we actually need a way to &lt;em&gt;remove&lt;/em&gt;
&lt;code&gt;5&lt;/code&gt; from &lt;code&gt;225&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We achieve that by dividing by the base. First we subtract &lt;code&gt;5&lt;/code&gt; from &lt;code&gt;225&lt;/code&gt;. So we get &lt;code&gt;220&lt;/code&gt;.
Then we divide by ten to get &lt;code&gt;22&lt;/code&gt;. In general dividing or multiplying a number by its base means
we can shift the value. Multiplying by the base means we add zeros at the right of a number. Dividing
by the base means we remove zeros.&lt;/p&gt;
&lt;p&gt;So the step to transform 225 into a string are:&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 0 0 1rem 30px&quot;&gt;
&lt;img src=&quot;/images/2016/application/algorithm-decimal.svg&quot; alt=&quot;Shows the steps to transform 255 into a decimal string&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;As you can see. Every modulo operation returns the right most digit of a number. By subtracting that
digit and dividing by 10. We get a new number. We just repeat that process until we end up at zero.&lt;/p&gt;
&lt;p&gt;As said at the beginning. This algorithm works for any base. If we want to convert a number into a
binary representation we just do modulo 2 and divide by 2.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:25%; margin: 0 0 1rem 30px&quot;&gt;
&lt;img src=&quot;/images/2016/application/algorithm-binary.svg&quot; alt=&quot;Shows the steps to transform 255 into a binary string&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;If we concatenate the modulo operation we get &quot;1110 0001&quot; as the result. So, how do we transform
this algorithm into code? We could write the whole computations directly. But it is usually
easier to decompose the problem into smaller parts, or functions in our case. So lets split the
various steps into functions with meaningful names.&lt;/p&gt;
&lt;p&gt;First we need a way to extract the right most digit from a number. So we just create a function
&lt;code&gt;extract&lt;/code&gt; that does this step.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 205)&quot; onmouseover=&quot;showTip(event, 'fs27', 205)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 206)&quot; onmouseover=&quot;showTip(event, 'fs5', 206)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 207)&quot; onmouseover=&quot;showTip(event, 'fs5', 207)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once we have such a function, we actually need a way to transform the digits
returned by &lt;code&gt;extract&lt;/code&gt; to a string.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 208)&quot; onmouseover=&quot;showTip(event, 'fs28', 208)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 209)&quot; onmouseover=&quot;showTip(event, 'fs5', 209)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 210)&quot; onmouseover=&quot;showTip(event, 'fs5', 210)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    | &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    | _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 211)&quot; onmouseover=&quot;showTip(event, 'fs29', 211)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This should not happen&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Another function we need is the idea of right-shift a number. With a decimal number we turn the
number &lt;code&gt;225&lt;/code&gt; to &lt;code&gt;22&lt;/code&gt;, with binary we turn &lt;code&gt;225&lt;/code&gt; into &lt;code&gt;112&lt;/code&gt; ((225 - 1) / 2)&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 212)&quot; onmouseover=&quot;showTip(event, 'fs30', 212)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 213)&quot; onmouseover=&quot;showTip(event, 'fs5', 213)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 214)&quot; onmouseover=&quot;showTip(event, 'fs5', 214)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs27', 215)&quot; onmouseover=&quot;showTip(event, 'fs27', 215)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 216)&quot; onmouseover=&quot;showTip(event, 'fs5', 216)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Are we done? Well, let's try to create a binary convert at this point. We could come up with
code like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;rightEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;extract&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;rest&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So we calculate two values. First we extract the right most digit and convert it into a string.
If we have &lt;code&gt;225&lt;/code&gt; as input this would be the first step in our calculation and the string &lt;code&gt;&quot;1&quot;&lt;/code&gt;
is stored in &lt;code&gt;rightEnd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we call &lt;code&gt;rightShift x&lt;/code&gt; the result is &lt;code&gt;112&lt;/code&gt;. But what do we do with that? Well, this is the
reason why it is a recursive function. We need to repeat the calculation until we end up
with zero. That's why we pass the result to &lt;code&gt;toBinary&lt;/code&gt; immediately.&lt;/p&gt;
&lt;p&gt;If you are not used to recursion it can probably be hard to understand what this will return.
In recursion you just make the assumption the the recursive call just somehow works. So what is
the result of &lt;code&gt;toBinary (rightShift 112)&lt;/code&gt;? It is the string representation of the number &lt;code&gt;112&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So what do we have exactly? We have the first right most bit. It is stored inside &lt;code&gt;rightEnd&lt;/code&gt;,
and in &lt;code&gt;rest&lt;/code&gt; the rest of the transformation is saved. In our example this means:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;rightEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;rest&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1110000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The &quot;missing&quot; part we currently have is, that we need to combine those two strings into a single
string. So we need another function that can concatenate two strings:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 217)&quot; onmouseover=&quot;showTip(event, 'fs31', 217)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 218)&quot; onmouseover=&quot;showTip(event, 'fs32', 218)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 219)&quot; onmouseover=&quot;showTip(event, 'fs33', 219)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 220)&quot; onmouseover=&quot;showTip(event, 'fs34', 220)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 221)&quot; onmouseover=&quot;showTip(event, 'fs35', 221)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [|&lt;span onmouseout=&quot;hideTip(event, 'fs32', 222)&quot; onmouseover=&quot;showTip(event, 'fs32', 222)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 223)&quot; onmouseover=&quot;showTip(event, 'fs33', 223)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;|]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we have two computations that we merge together, we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;concat&lt;/span&gt;
        (&lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
        (&lt;span class=&quot;i&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;extract&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we are still not done. We need a way to abort the recursion. Currently the function
would loop forever (Theoretically, practically it blows up with a stack overflow exception).&lt;/p&gt;
&lt;p&gt;So we need to check if &lt;code&gt;rightShift x&lt;/code&gt; reached zero. If it reached zero we just use an empty
string for the string concatenation, otherwise we use the result of the recursive call
for the string concatenation.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;concat&lt;/span&gt;
        (&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;toBinary&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;rightShift&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
        (&lt;span class=&quot;i&quot;&gt;toString&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;extract&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;All functions we created are only useful for the &lt;code&gt;toBinary&lt;/code&gt; function, we also can embed
all functions inside &lt;code&gt;toBinary&lt;/code&gt; in this case. So our final solution looks like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 224)&quot; onmouseover=&quot;showTip(event, 'fs36', 224)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 225)&quot; onmouseover=&quot;showTip(event, 'fs5', 225)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Helper functions&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 226)&quot; onmouseover=&quot;showTip(event, 'fs37', 226)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 227)&quot; onmouseover=&quot;showTip(event, 'fs5', 227)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 228)&quot; onmouseover=&quot;showTip(event, 'fs5', 228)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 229)&quot; onmouseover=&quot;showTip(event, 'fs38', 229)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 230)&quot; onmouseover=&quot;showTip(event, 'fs5', 230)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 231)&quot; onmouseover=&quot;showTip(event, 'fs5', 231)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs37', 232)&quot; onmouseover=&quot;showTip(event, 'fs37', 232)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 233)&quot; onmouseover=&quot;showTip(event, 'fs5', 233)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)) &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 234)&quot; onmouseover=&quot;showTip(event, 'fs39', 234)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
        | &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; | &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
        | _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 235)&quot; onmouseover=&quot;showTip(event, 'fs29', 235)&quot; class=&quot;f&quot;&gt;failwith&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This should not happen&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 236)&quot; onmouseover=&quot;showTip(event, 'fs40', 236)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 237)&quot; onmouseover=&quot;showTip(event, 'fs32', 237)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 238)&quot; onmouseover=&quot;showTip(event, 'fs33', 238)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 239)&quot; onmouseover=&quot;showTip(event, 'fs34', 239)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs35', 240)&quot; onmouseover=&quot;showTip(event, 'fs35', 240)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [|&lt;span onmouseout=&quot;hideTip(event, 'fs32', 241)&quot; onmouseover=&quot;showTip(event, 'fs32', 241)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 242)&quot; onmouseover=&quot;showTip(event, 'fs33', 242)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;|]

    &lt;span class=&quot;c&quot;&gt;// Main algorithm&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs40', 243)&quot; onmouseover=&quot;showTip(event, 'fs40', 243)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt;
        (&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 244)&quot; onmouseover=&quot;showTip(event, 'fs38', 244)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 245)&quot; onmouseover=&quot;showTip(event, 'fs5', 245)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 246)&quot; onmouseover=&quot;showTip(event, 'fs36', 246)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 247)&quot; onmouseover=&quot;showTip(event, 'fs38', 247)&quot; class=&quot;f&quot;&gt;rightShift&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 248)&quot; onmouseover=&quot;showTip(event, 'fs5', 248)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
        (&lt;span onmouseout=&quot;hideTip(event, 'fs39', 249)&quot; onmouseover=&quot;showTip(event, 'fs39', 249)&quot; class=&quot;f&quot;&gt;toString&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs37', 250)&quot; onmouseover=&quot;showTip(event, 'fs37', 250)&quot; class=&quot;f&quot;&gt;extract&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 251)&quot; onmouseover=&quot;showTip(event, 'fs5', 251)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))

&lt;span onmouseout=&quot;hideTip(event, 'fs36', 252)&quot; onmouseover=&quot;showTip(event, 'fs36', 252)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// &amp;quot;0&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs36', 253)&quot; onmouseover=&quot;showTip(event, 'fs36', 253)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;178&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;10110010&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs36', 254)&quot; onmouseover=&quot;showTip(event, 'fs36', 254)&quot; class=&quot;f&quot;&gt;toBinary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;225&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;11100001&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As a summary, what did we learn so far? I hoped to show, that working with a nesting style
of functions is actually more easier to work with, and also a lot more natural in some cases. In
the case of a binary converter we really have two computations or a tree of computations. Not trying
to think with piping in mind actually makes a lot of stuff easier.&lt;/p&gt;
&lt;p&gt;When we face a problem we just decompose a problem into solvable small functions. Once we decomposed
a problem we need to compose the small parts back together. The problem is, sometimes that problem
can be naturally represented as a sequence of operations, but most of the time it can't. In our
case we also don't have a single sequence of computation. On every recursive step we really
have two computations.&lt;/p&gt;
&lt;p&gt;One computation determines the next character for our result. And another computation calculates
the next number we need to recurs on. We end up with two computations, two strings that
in the end need to put together into a single result. This algorithm is best visualized by a tree.&lt;/p&gt;
&lt;div class=&quot;svg-code&quot; style=&quot;width:50%; margin: 30px auto&quot;&gt;
&lt;img src=&quot;/images/2016/application/tree-tobinary.svg&quot; alt=&quot;Shows the toBinary function as a Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;And the classical way to represent trees with code is by nesting and indentions. Piping is
not a good approach to represent tree structures. If you want to try to solve everything by
some kind of piping even before you determined if the problem is even solvable in a sequential
manner, you will only run into problems and will have a hard time to solve these kind of problems.&lt;/p&gt;
&lt;h2&gt;Composition&lt;/h2&gt;
&lt;p&gt;What we have seen so far is function application. Function application means to apply a value to
a function, or in other words. Execute a function to get the result of a function. Function
composition on the other hand is completely different. It means, combine two or more functions
together to create a new function. Even if it seems like two different tasks in theory, in practice
the difference isn't too big.&lt;/p&gt;
&lt;p&gt;Let's go back to our &lt;code&gt;blub&lt;/code&gt; function. We started with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 255)&quot; onmouseover=&quot;showTip(event, 'fs12', 255)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 256)&quot; onmouseover=&quot;showTip(event, 'fs9', 256)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 257)&quot; onmouseover=&quot;showTip(event, 'fs8', 257)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 258)&quot; onmouseover=&quot;showTip(event, 'fs11', 258)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 259)&quot; onmouseover=&quot;showTip(event, 'fs3', 259)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 260)&quot; onmouseover=&quot;showTip(event, 'fs9', 260)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This code is written with nesting. But as you can see, the real goal was not to execute
the chain of functions we have. The goal was to create a new function. In such a case, we also
can use function composition instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 261)&quot; onmouseover=&quot;showTip(event, 'fs41', 261)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 262)&quot; onmouseover=&quot;showTip(event, 'fs8', 262)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 263)&quot; onmouseover=&quot;showTip(event, 'fs11', 263)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 264)&quot; onmouseover=&quot;showTip(event, 'fs3', 264)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In this example you can see that the most natural way to write nesting as function composition
is to use &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;. With nesting we read the code from right to left. On the right is the input of
a function, on its left the output. The &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator preserves this structure. The input of
&lt;code&gt;square&lt;/code&gt; is the result of &lt;code&gt;add10&lt;/code&gt;. The input of &lt;code&gt;add10&lt;/code&gt; is the result of &lt;code&gt;sqrt&lt;/code&gt;. And the input
of &lt;code&gt;sqrt&lt;/code&gt; becomes the input of the &lt;code&gt;blub&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The advantage of function composition is that we can omit parenthesis and variables even further.
We also don't need explicit function arguments. If we use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; we just can
reverse the whole chain this time.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 265)&quot; onmouseover=&quot;showTip(event, 'fs41', 265)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 266)&quot; onmouseover=&quot;showTip(event, 'fs3', 266)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 267)&quot; onmouseover=&quot;showTip(event, 'fs11', 267)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 268)&quot; onmouseover=&quot;showTip(event, 'fs8', 268)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This is also an even further example why &lt;code&gt;&amp;lt;|&lt;/code&gt; is bad. It is only natural to think that &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; are somewhat the same only in reverse order, and sure they are. But this is not the case
for the combination &lt;code&gt;&amp;lt;|&lt;/code&gt; and &lt;code&gt;|&amp;gt;&lt;/code&gt;. The piping operators are really two completely distinct operators
that work differently.&lt;/p&gt;
&lt;p&gt;While function composition is a little bit shorter compared to piping, the difference isn't that much.
Because of some problems in F# with the type-inference it also can be that this approach sometimes
creates a &lt;strong&gt;Value restriction&lt;/strong&gt; error. If you encounter such an error, the best fix to those kind
of error is just to create a function with explicit arguments instead of function composition.
As the difference is anyway not too big, you also always can use nesting or piping instead of
function composition.&lt;/p&gt;
&lt;p&gt;One place where function composition is a better choice is if you want to pass a function
as an argument to another function. Let's look at our &lt;code&gt;blub&lt;/code&gt; function again. We first can
create the &lt;code&gt;blub&lt;/code&gt; function and then use it in &lt;code&gt;List.map&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 269)&quot; onmouseover=&quot;showTip(event, 'fs41', 269)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 270)&quot; onmouseover=&quot;showTip(event, 'fs8', 270)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 271)&quot; onmouseover=&quot;showTip(event, 'fs11', 271)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 272)&quot; onmouseover=&quot;showTip(event, 'fs3', 272)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 273)&quot; onmouseover=&quot;showTip(event, 'fs16', 273)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 274)&quot; onmouseover=&quot;showTip(event, 'fs17', 274)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 275)&quot; onmouseover=&quot;showTip(event, 'fs41', 275)&quot; class=&quot;f&quot;&gt;blub&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But if you need &lt;code&gt;blub&lt;/code&gt; only in a single place, it is a little bit annoying to explicitly create and
name a function. It is just better to inline the whole function. Without function composition we need
to write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 276)&quot; onmouseover=&quot;showTip(event, 'fs16', 276)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 277)&quot; onmouseover=&quot;showTip(event, 'fs17', 277)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 278)&quot; onmouseover=&quot;showTip(event, 'fs9', 278)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 279)&quot; onmouseover=&quot;showTip(event, 'fs8', 279)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs11', 280)&quot; onmouseover=&quot;showTip(event, 'fs11', 280)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 281)&quot; onmouseover=&quot;showTip(event, 'fs3', 281)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 282)&quot; onmouseover=&quot;showTip(event, 'fs9', 282)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;))) [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;With function composition on the other hand we can shorten this example to:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 283)&quot; onmouseover=&quot;showTip(event, 'fs16', 283)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs17', 284)&quot; onmouseover=&quot;showTip(event, 'fs17', 284)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 285)&quot; onmouseover=&quot;showTip(event, 'fs8', 285)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 286)&quot; onmouseover=&quot;showTip(event, 'fs11', 286)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 287)&quot; onmouseover=&quot;showTip(event, 'fs3', 287)&quot; class=&quot;f&quot;&gt;sqrt&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100.0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;p&gt;At the end I just want to gather some best practices. Those are best practices from me and
like always, every person usually disagree with another 10%.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Never use &lt;code&gt;&amp;lt;|&lt;/code&gt;. People think of it as the reverse of &lt;code&gt;|&amp;gt;&lt;/code&gt; but it isn't.&lt;/li&gt;
&lt;li&gt;If you disagree with 1. then at least never mix &lt;code&gt;|&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;|&lt;/code&gt; in a single statement.&lt;/li&gt;
&lt;li&gt;
Never mix &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; in a single-statement. &lt;code&gt;f &amp;gt;&amp;gt; g &amp;gt;&amp;gt; h &amp;gt;&amp;gt; i&lt;/code&gt; or &lt;code&gt;f &amp;lt;&amp;lt; g &amp;lt;&amp;lt; h &amp;lt;&amp;lt; i&lt;/code&gt; is
easy to understand. &lt;code&gt;f &amp;lt;&amp;lt; g &amp;gt;&amp;gt; h &amp;lt;&amp;lt; i&lt;/code&gt; isn't.
&lt;/li&gt;
&lt;li&gt;
Don't favour piping over nesting. Piping is only good for strict sequential code. Favour piping
over nesting means you limit the way you think.
&lt;/li&gt;
&lt;li&gt;
If you create new functions. Don't think of piping too much. It is good if you can pipe
functions, but it is not bad if you cannot do that. Not every function works good with piping.
&lt;/li&gt;
&lt;li&gt;
Try to &lt;strong&gt;solve your problem first&lt;/strong&gt;. Because nesting is good for any kind of tree structure and
thus more powerful. Try to use nesting by default.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;After&lt;/strong&gt; you solved a problem and realized that the code can be represented by a sequence with
piping. Refactor the code with piping.
&lt;/li&gt;
&lt;li&gt;If possible, use function composition if you pass functions as arguments instead of lambda functions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Overall we covered function application and composition. We saw function application with nesting
or piping with operators like &lt;code&gt;|&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;|&lt;/code&gt;. We also can use function composition with &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; or
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; in certain situation.&lt;/p&gt;
&lt;p&gt;I hope in this article you learned how all of those operators work, and more important, when you should
use which kind of style. Nesting, piping and function composition are three ways to either execute
or compose functions. But not any of those are good in any situation.&lt;/p&gt;
&lt;p&gt;Especially piping is overused in F# in my opinion. Not every problem can be expressed naturally
in a sequential way of piping. So don't view any problem as a nail that you solve with a hammer.&lt;/p&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val x : float&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val sqrt : value:&amp;#39;T -&amp;gt; &amp;#39;U (requires member Sqrt)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.sqrt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val add1 : (int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.add1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val square : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.square&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val x : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val pown : x:&amp;#39;T -&amp;gt; n:int -&amp;gt; &amp;#39;T (requires member get_One and member ( * ) and member ( / ))&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.pown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val add10 : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.add10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val blub : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.blub&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val a : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val b : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val c : float&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; z:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val z : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val append : list1:&amp;#39;T list -&amp;gt; list2:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.append&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val add1 : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.add1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val sub1 : x:float -&amp;gt; float&lt;br /&gt;&lt;br /&gt;Full name: Main.sub1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val extract : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.extract&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val toString : x:int -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.toString&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val failwith : message:string -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.failwith&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val rightShift : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.rightShift&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val concat : x:string -&amp;gt; y:string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val x : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val y : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;module String&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val concat : sep:string -&amp;gt; strings:seq&amp;lt;string&amp;gt; -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val toBinary : x:int -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Main.toBinary&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val extract : (int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val rightShift : (int -&amp;gt; int)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val toString : (int -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val concat : (string -&amp;gt; string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val blub : (float -&amp;gt; float)&lt;br /&gt;&lt;br /&gt;Full name: Main.blub&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><category term="composition" /><category term="piping" /><category term="recursion" /><category term="immutability" /><summary type="html">Function application is probably one of those terms in functional programming that sounds more scarier as the topic really is. The idea behind functional application just means that we execute a function to get the result. Let's take the example of calculating the square root of 2.0. We can write the following in F# to do that: 1: let x = sqrt 2.0 The interesting part is how we read this example. We read it from right-to-left. 2.0 is the input to sqrt, sqrt returns the value 1.41 this is then stored in x. Usually we just say that we execute or run the sqrt function. But in functional programming the correct term is that we apply the value 2.0 to the function sqrt. Probably you will ask how I can write a whole article about this topic, but there are some topics associated with it. Partial Application Partial application is one of those topics. If we pass all arguments to a function we name it function application. But if we only pass some arguments to a function we name it partial application. In some programming languages it is an error if we don't pass all arguments to a function, but in some functional languages, including F#, this is an explicit feature. The result of partial application is a new function that accepts/waits for the remaining arguments. For example: If we have a function add that expects two integers: 1: let add x y = x + y But we only pass one argument to that function: 1: let add1 = add 1 Then partial application returns a new functions that expects the remaining argument. In the above case we could say that we baked in 1 as x and add1 expects the remaining argument y. 1: 2: add1 1 // 2 add1 10 // 11 Immutability Another big topic in functional programming is immutability. Immutability is a fairly easy concept. It just means data cannot be changed after creation. If you are new to functional programming or in general to this concept, this sound a little bit strange. How can we do anything useful if we cannot change anything? The answer is simple. Instead of changing any kind of data, we just generate new data. Probably you wonder how this concept is associated with function application. While immutability has no direct effect on function application, it changes the way how we think about functions. With immutability in-place every functions must return a new value. Let's look at some example code to understand why this kind of idea is important. Besides sqrt we first create two new functions: 1: 2: let square x = pown x 2 let add10 x = x + 10.0 We now create a new function that first calculates the square root of a number, add 10 to the result of it, and finally squares the result. That function is pretty artificial so we just name it blub: 1: 2: 3: 4: 5: 6: 7: let blub x = let a = sqrt x let b = add10 a let c = square b c</summary></entry><entry><title type="html">Catamorphisms</title><link href="https://sidburn.github.io/blog/2016/05/28/catamorphisms" rel="alternate" type="text/html" title="Catamorphisms" /><published>2016-05-28T00:00:00+02:00</published><updated>2016-05-28T00:00:00+02:00</updated><id>https://sidburn.github.io/blog/2016/05/28/catamorphisms</id><content type="html" xml:base="https://sidburn.github.io/blog/2016/05/28/catamorphisms">&lt;p&gt;Up to this point I created various articles about &lt;code&gt;fold&lt;/code&gt;, in my &lt;a href=&quot;/Series&quot;&gt;Series&lt;/a&gt; I
also created a category named &lt;strong&gt;Fold (Catamorphisms)&lt;/strong&gt; but up till now I didn't explained
how this articles related to each other, or what &lt;em&gt;Catamorphisms&lt;/em&gt; mean. In this article
I want to talk about the remaining parts.&lt;/p&gt;
&lt;h2&gt;Table of Content&lt;/h2&gt;
&lt;ul class=&quot;toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#TheLists&quot;&gt;The List&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cata&quot;&gt;Introducing Cata&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tail-recursion&quot;&gt;Tail Recursion with FoldBack&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#binary-trees&quot;&gt;Binary Trees&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-cata&quot;&gt;Cata for Tree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fold-vs-foldback&quot;&gt;Fold vs. FoldBack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-foldback&quot;&gt;FoldBack for Tree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-foldback-examples&quot;&gt;FoldBack examples&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tree-fold&quot;&gt;Fold for Tree&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#benchmarking&quot;&gt;Some Benchmarking&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#markdown&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;TheLists&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The List&lt;/h2&gt;
&lt;p&gt;Catamorphisms is a generalization that emerged from the list data-structure. The list
data-structure, how it is found in functional programming, is usually build as a single
linked list. Or to be more precise, it is build as a recursive data type expressed
as a Discriminated Union. That is the reason why
&lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic Data-Types&lt;/a&gt; is the very first
entry.&lt;/p&gt;
&lt;p&gt;Catamorphisms is the idea that we also implement &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; functions for
other discriminated unions besides list. Because of this it is important to first
understand how to define data-types, especially recursive discriminated unions.&lt;/p&gt;
&lt;p&gt;To get a better understanding of the concept, this time we implement our own
list type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;I also create additionally constructor functions for each case:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 9)&quot; onmouseover=&quot;showTip(event, 'fs5', 9)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 10)&quot; onmouseover=&quot;showTip(event, 'fs8', 10)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 11)&quot; onmouseover=&quot;showTip(event, 'fs9', 11)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 12)&quot; onmouseover=&quot;showTip(event, 'fs10', 12)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 14)&quot; onmouseover=&quot;showTip(event, 'fs9', 14)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 15)&quot; onmouseover=&quot;showTip(event, 'fs10', 15)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;info&quot;&gt;
When you wonder about the name &lt;code&gt;Cons&lt;/code&gt; this dates back to Lisp. For example
in &lt;a href=&quot;http://www.racket-lang.org/&quot;&gt;Racket&lt;/a&gt; (a Lisp dialect) you can
build a list in such way.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;racket&quot;&gt;(define xs (cons 1 (cons 2 (cons 3 empty))))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;with the helper functions we defined in F# it almost looks the same.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 16)&quot; onmouseover=&quot;showTip(event, 'fs11', 16)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;As soon we have any kind of discriminated union, working with such a type follows
a straight pattern. Usually we create a function that matches on our type, and
we must provide code for every case we have. In our list case that means
we must match on the &lt;code&gt;Empty&lt;/code&gt; case and on the &lt;code&gt;Cons(h,t)&lt;/code&gt; case and do something
with every case.&lt;/p&gt;
&lt;p&gt;But the &lt;code&gt;Cons&lt;/code&gt; case is special, because it is recursive. So how do we work
with it? We just write a recursive function that recurs! Once you notice
this pattern, writing any kind of function for a recursive discriminated union
becomes easy. First, let's define some example data that we will use from now on:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 17)&quot; onmouseover=&quot;showTip(event, 'fs12', 17)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 18)&quot; onmouseover=&quot;showTip(event, 'fs8', 18)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 19)&quot; onmouseover=&quot;showTip(event, 'fs8', 19)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 20)&quot; onmouseover=&quot;showTip(event, 'fs8', 20)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 21)&quot; onmouseover=&quot;showTip(event, 'fs7', 21)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)))
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 23)&quot; onmouseover=&quot;showTip(event, 'fs8', 23)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 24)&quot; onmouseover=&quot;showTip(event, 'fs8', 24)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 25)&quot; onmouseover=&quot;showTip(event, 'fs8', 25)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 26)&quot; onmouseover=&quot;showTip(event, 'fs8', 26)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 27)&quot; onmouseover=&quot;showTip(event, 'fs8', 27)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 28)&quot; onmouseover=&quot;showTip(event, 'fs7', 28)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)))))
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 29)&quot; onmouseover=&quot;showTip(event, 'fs14', 29)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 30)&quot; onmouseover=&quot;showTip(event, 'fs8', 30)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 31)&quot; onmouseover=&quot;showTip(event, 'fs8', 31)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 32)&quot; onmouseover=&quot;showTip(event, 'fs8', 32)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 33)&quot; onmouseover=&quot;showTip(event, 'fs7', 33)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And our first example function &lt;code&gt;listLength'&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 34)&quot; onmouseover=&quot;showTip(event, 'fs15', 34)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 35)&quot; onmouseover=&quot;showTip(event, 'fs16', 35)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 36)&quot; onmouseover=&quot;showTip(event, 'fs16', 36)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 37)&quot; onmouseover=&quot;showTip(event, 'fs5', 37)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 38)&quot; onmouseover=&quot;showTip(event, 'fs6', 38)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 39)&quot; onmouseover=&quot;showTip(event, 'fs9', 39)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 40)&quot; onmouseover=&quot;showTip(event, 'fs10', 40)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs15', 41)&quot; onmouseover=&quot;showTip(event, 'fs15', 41)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 42)&quot; onmouseover=&quot;showTip(event, 'fs10', 42)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 44)&quot; onmouseover=&quot;showTip(event, 'fs12', 44)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs15', 45)&quot; onmouseover=&quot;showTip(event, 'fs15', 45)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 46)&quot; onmouseover=&quot;showTip(event, 'fs13', 46)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs15', 47)&quot; onmouseover=&quot;showTip(event, 'fs15', 47)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 48)&quot; onmouseover=&quot;showTip(event, 'fs14', 48)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;listLength'&lt;/code&gt; returns the amount of elements in our list. We just need to handle
both cases to achieve that. If we have an &lt;code&gt;Empty&lt;/code&gt; case, the length is obvious,
then we have zero elements. If we have &lt;code&gt;Cons&lt;/code&gt; then we have one element plus
the amount of elements of the remaining list. So we call &lt;code&gt;listLength' t&lt;/code&gt; to
get it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 49)&quot; onmouseover=&quot;showTip(event, 'fs17', 49)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 50)&quot; onmouseover=&quot;showTip(event, 'fs5', 50)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 51)&quot; onmouseover=&quot;showTip(event, 'fs6', 51)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs18', 52)&quot; onmouseover=&quot;showTip(event, 'fs18', 52)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs19', 53)&quot; onmouseover=&quot;showTip(event, 'fs19', 53)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs17', 55)&quot; onmouseover=&quot;showTip(event, 'fs17', 55)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 56)&quot; onmouseover=&quot;showTip(event, 'fs19', 56)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)

&lt;span onmouseout=&quot;hideTip(event, 'fs17', 57)&quot; onmouseover=&quot;showTip(event, 'fs17', 57)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 58)&quot; onmouseover=&quot;showTip(event, 'fs12', 58)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs17', 59)&quot; onmouseover=&quot;showTip(event, 'fs17', 59)&quot; class=&quot;f&quot;&gt;listSum&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 60)&quot; onmouseover=&quot;showTip(event, 'fs13', 60)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;div class=&quot;info&quot;&gt;
The keyword &lt;code&gt;function&lt;/code&gt; is a shortcut. Instead of defining the last argument
and Pattern Match on it. We can directly use &lt;code&gt;function&lt;/code&gt; that does the same.
This way we can omit the argument, and the &lt;code&gt;match&lt;/code&gt; line.
&lt;/div
&lt;p&gt;&lt;code&gt;listSum'&lt;/code&gt; is just a simple &lt;em&gt;sum&lt;/em&gt; function that adds a list of &lt;code&gt;int&lt;/code&gt; together.
Probably at this time you start to see that &lt;code&gt;listLength'&lt;/code&gt; and &lt;code&gt;listSum'&lt;/code&gt; are
very similar. But let's create some more examples.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 61)&quot; onmouseover=&quot;showTip(event, 'fs20', 61)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 62)&quot; onmouseover=&quot;showTip(event, 'fs21', 62)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 63)&quot; onmouseover=&quot;showTip(event, 'fs5', 63)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 64)&quot; onmouseover=&quot;showTip(event, 'fs7', 64)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 65)&quot; onmouseover=&quot;showTip(event, 'fs6', 65)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 66)&quot; onmouseover=&quot;showTip(event, 'fs9', 66)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 67)&quot; onmouseover=&quot;showTip(event, 'fs10', 67)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 68)&quot; onmouseover=&quot;showTip(event, 'fs8', 68)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 69)&quot; onmouseover=&quot;showTip(event, 'fs21', 69)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 70)&quot; onmouseover=&quot;showTip(event, 'fs9', 70)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 71)&quot; onmouseover=&quot;showTip(event, 'fs20', 71)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 72)&quot; onmouseover=&quot;showTip(event, 'fs21', 72)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 73)&quot; onmouseover=&quot;showTip(event, 'fs10', 73)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;))

&lt;span onmouseout=&quot;hideTip(event, 'fs20', 74)&quot; onmouseover=&quot;showTip(event, 'fs20', 74)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 75)&quot; onmouseover=&quot;showTip(event, 'fs22', 75)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 76)&quot; onmouseover=&quot;showTip(event, 'fs22', 76)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 77)&quot; onmouseover=&quot;showTip(event, 'fs22', 77)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs12', 78)&quot; onmouseover=&quot;showTip(event, 'fs12', 78)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Empty)))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs20', 79)&quot; onmouseover=&quot;showTip(event, 'fs20', 79)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 80)&quot; onmouseover=&quot;showTip(event, 'fs22', 80)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 81)&quot; onmouseover=&quot;showTip(event, 'fs22', 81)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 82)&quot; onmouseover=&quot;showTip(event, 'fs22', 82)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs13', 83)&quot; onmouseover=&quot;showTip(event, 'fs13', 83)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Cons (16,Cons (25,Empty)))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs20', 84)&quot; onmouseover=&quot;showTip(event, 'fs20', 84)&quot; class=&quot;f&quot;&gt;listMap&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 85)&quot; onmouseover=&quot;showTip(event, 'fs23', 85)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 86)&quot; onmouseover=&quot;showTip(event, 'fs24', 86)&quot; class=&quot;f&quot;&gt;length&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 87)&quot; onmouseover=&quot;showTip(event, 'fs14', 87)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// Cons (5,Cons (1,Cons (6,Empty)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If you are not used to recursion then this looks a little bit more complicated, but it
is still the same. We expect that &lt;code&gt;map&lt;/code&gt; runs a function on every element. So what do
we do we do with an empty list? We just return empty. Otherwise we have a single
element &lt;code&gt;h&lt;/code&gt; and another list &lt;code&gt;t&lt;/code&gt;. In that case we just call &lt;code&gt;(f h)&lt;/code&gt; to transform
our &lt;code&gt;h&lt;/code&gt; element, and how do we transform the remaining list &lt;code&gt;t&lt;/code&gt;? With &lt;code&gt;listMap'&lt;/code&gt;,
we only need to &lt;code&gt;cons&lt;/code&gt; the result of both function calls.&lt;/p&gt;
&lt;p&gt;In the next function we want to append an element to a list. Just think for a
moment for yourself how you achieve that. The answer: In the &lt;code&gt;Cons&lt;/code&gt; case we do nothing, as
this is not the end of the list. Instead we transform an &lt;code&gt;Empty&lt;/code&gt; with our element
appended.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 88)&quot; onmouseover=&quot;showTip(event, 'fs25', 88)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 89)&quot; onmouseover=&quot;showTip(event, 'fs26', 89)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 90)&quot; onmouseover=&quot;showTip(event, 'fs5', 90)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 91)&quot; onmouseover=&quot;showTip(event, 'fs8', 91)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 92)&quot; onmouseover=&quot;showTip(event, 'fs26', 92)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 93)&quot; onmouseover=&quot;showTip(event, 'fs7', 93)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 94)&quot; onmouseover=&quot;showTip(event, 'fs6', 94)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 95)&quot; onmouseover=&quot;showTip(event, 'fs9', 95)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 96)&quot; onmouseover=&quot;showTip(event, 'fs10', 96)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 97)&quot; onmouseover=&quot;showTip(event, 'fs8', 97)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 98)&quot; onmouseover=&quot;showTip(event, 'fs9', 98)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs25', 99)&quot; onmouseover=&quot;showTip(event, 'fs25', 99)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 100)&quot; onmouseover=&quot;showTip(event, 'fs26', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 101)&quot; onmouseover=&quot;showTip(event, 'fs10', 101)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;))

&lt;span onmouseout=&quot;hideTip(event, 'fs25', 102)&quot; onmouseover=&quot;showTip(event, 'fs25', 102)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 103)&quot; onmouseover=&quot;showTip(event, 'fs12', 103)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (2,Cons (3,Cons (4,Empty))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs25', 104)&quot; onmouseover=&quot;showTip(event, 'fs25', 104)&quot; class=&quot;f&quot;&gt;listSnoc&amp;#39;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Kazom!&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 105)&quot; onmouseover=&quot;showTip(event, 'fs14', 105)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (&amp;quot;Hello&amp;quot;,Cons (&amp;quot; &amp;quot;,Cons (&amp;quot;World!&amp;quot;,Cons (&amp;quot;Kazom!&amp;quot;,Empty))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, at this point we have enough examples. When we look at our examples, how do we work
with a discriminated union in general? All examples have one recurring pattern that we
do all over again.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We must pattern match on every case of the discriminated union.&lt;/li&gt;
&lt;li&gt;In a non-recursive case we just do whatever needs to be done.&lt;/li&gt;
&lt;li&gt;
In a recursive case like &lt;code&gt;Cons&lt;/code&gt; we have two data-fields. &lt;code&gt;h&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;. We just work
with &lt;code&gt;h&lt;/code&gt; however we need, exactly like a non-recursive case. For the recursive datum
&lt;code&gt;t&lt;/code&gt; we just call our function again and recurs.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a general pattern how we can work with any discriminated union and provide any
kind of transformation for it. But there can be two problems with this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
The function feels repetitive, or more important, always rewriting the whole recursion logic
feels not like Don't-Repeat-Yourself.
&lt;/li&gt;
&lt;li&gt;None of the functions we have, are tail-recursive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's address those problems separately.&lt;/p&gt;
&lt;a name=&quot;cata&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Introducing Cata&lt;/h2&gt;
&lt;p&gt;We already identified our Pattern, so what we usually do is to create a &lt;code&gt;cata&lt;/code&gt; function
that abstract those repetition. To describe the repetition in one sentence: &lt;em&gt;A &lt;code&gt;cata&lt;/code&gt;
function abstracts the recursion over a data-structure.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We handle the recursion inside of &lt;code&gt;cata&lt;/code&gt;. &lt;code&gt;cata&lt;/code&gt; then expects a function to handle
every case. New functions can then be created out of &lt;code&gt;cata&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Abstraction is probably the most important thing in programming. Abstraction is the idea
to see recurring patterns. That means in order to do abstraction we need at least
two things that are very similar (lets name them A and B). We then create a new function
(we name it C) that contains all the similar things between A and B. To handle the differences
we expect the differences to be passed as arguments to C (Often in the form of functions).
After we have C, we rewrite A and B by using C.
&lt;/div&gt;
&lt;p&gt;Our first version of &lt;code&gt;cata&lt;/code&gt; could look like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 106)&quot; onmouseover=&quot;showTip(event, 'fs27', 106)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 107)&quot; onmouseover=&quot;showTip(event, 'fs28', 107)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 108)&quot; onmouseover=&quot;showTip(event, 'fs29', 108)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 109)&quot; onmouseover=&quot;showTip(event, 'fs5', 109)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 110)&quot; onmouseover=&quot;showTip(event, 'fs28', 110)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 111)&quot; onmouseover=&quot;showTip(event, 'fs6', 111)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs30', 112)&quot; onmouseover=&quot;showTip(event, 'fs30', 112)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 113)&quot; onmouseover=&quot;showTip(event, 'fs31', 113)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 114)&quot; onmouseover=&quot;showTip(event, 'fs29', 114)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 115)&quot; onmouseover=&quot;showTip(event, 'fs30', 115)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs27', 116)&quot; onmouseover=&quot;showTip(event, 'fs27', 116)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 117)&quot; onmouseover=&quot;showTip(event, 'fs28', 117)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 118)&quot; onmouseover=&quot;showTip(event, 'fs29', 118)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 119)&quot; onmouseover=&quot;showTip(event, 'fs31', 119)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Before we look closer in how it works, let's see how we can create a new length function
defined with &lt;code&gt;cata&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 120)&quot; onmouseover=&quot;showTip(event, 'fs32', 120)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 121)&quot; onmouseover=&quot;showTip(event, 'fs16', 121)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 122)&quot; onmouseover=&quot;showTip(event, 'fs27', 122)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 123)&quot; onmouseover=&quot;showTip(event, 'fs9', 123)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 124)&quot; onmouseover=&quot;showTip(event, 'fs33', 124)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 125)&quot; onmouseover=&quot;showTip(event, 'fs33', 125)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 126)&quot; onmouseover=&quot;showTip(event, 'fs16', 126)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs32', 127)&quot; onmouseover=&quot;showTip(event, 'fs32', 127)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 128)&quot; onmouseover=&quot;showTip(event, 'fs12', 128)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs32', 129)&quot; onmouseover=&quot;showTip(event, 'fs32', 129)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 130)&quot; onmouseover=&quot;showTip(event, 'fs13', 130)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs32', 131)&quot; onmouseover=&quot;showTip(event, 'fs32', 131)&quot; class=&quot;f&quot;&gt;listLength&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 132)&quot; onmouseover=&quot;showTip(event, 'fs14', 132)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;listCata'&lt;/code&gt; just expects two functions. The first functions handles the &lt;code&gt;Empty&lt;/code&gt; case,
and the second functions handles the &lt;code&gt;Cons&lt;/code&gt; case. But which arguments do we pass those function
exactly?&lt;/p&gt;
&lt;p&gt;We pass the data that is attached to every case to the provided function. As the &lt;code&gt;Empty&lt;/code&gt; case
don't contain any data, we just call &lt;code&gt;fEmpty ()&lt;/code&gt; and pass it the &lt;strong&gt;unit&lt;/strong&gt; value.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Cons&lt;/code&gt; case contains two datums. It contains the &lt;em&gt;head&lt;/em&gt; and the &lt;em&gt;tail&lt;/em&gt; element. But we
do not pass the &lt;em&gt;tail&lt;/em&gt; element directly. Just think about it for a minute. The purpose of
the &lt;code&gt;cata&lt;/code&gt; function is to abstract the recursion, so the function passed to &lt;code&gt;cata&lt;/code&gt;
don't need to handle the recursion. If we would pass &lt;code&gt;t&lt;/code&gt; directly to &lt;code&gt;fCons&lt;/code&gt; then
&lt;code&gt;fCons&lt;/code&gt; again would need to handle the recursion. Instead of passing &lt;code&gt;t&lt;/code&gt;, we pass the
result of the recursive call.&lt;/p&gt;
&lt;p&gt;If this transformation looks strange. Actually we have written this kind of code multiple
times already. Let's look again at the first &lt;code&gt;listLength'&lt;/code&gt; and lets think how we could
transform &lt;code&gt;listLength'&lt;/code&gt; to the more abstract &lt;code&gt;listCata'&lt;/code&gt;. When we look at the &lt;code&gt;Cons&lt;/code&gt; line
It looked like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At first we can treat &lt;code&gt;+&lt;/code&gt; just as a function. Instead of writing it infix between two arguments
we also can write it prefix before its arguments. Then it looks like a normal function call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;|&lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But in our &lt;code&gt;listCata'&lt;/code&gt; function we don't want to calculate &lt;code&gt;(+)&lt;/code&gt;, a hard-coded function, we
want to execute the function the user provided, so we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;|&lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listLength&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Additionally, we don't want to pass &lt;code&gt;1&lt;/code&gt;. &lt;code&gt;1&lt;/code&gt; was the replacement for &lt;code&gt;h&lt;/code&gt; for the length function.
In the abstracted version we just pass &lt;code&gt;h&lt;/code&gt; to &lt;code&gt;fCons&lt;/code&gt; and &lt;code&gt;fCons&lt;/code&gt; decide what to do
with &lt;code&gt;h&lt;/code&gt;. And the last thing, our function is named &lt;code&gt;listCata'&lt;/code&gt; so we need to recurs on
&lt;code&gt;listCata'&lt;/code&gt; not &lt;code&gt;listLength'&lt;/code&gt;. So we end with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;|&lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listCata&amp;#39;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fEmpty&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now let's improve &lt;code&gt;listCata'&lt;/code&gt; step by step. In the list example this isn't so obvious,
but as we see later when we have other discriminated unions with much more cases and a lot
more recursive cases, then calling a &lt;code&gt;cata&lt;/code&gt; function can become annoying. We can fix that by
creating a partial applied function before we &lt;code&gt;match&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 133)&quot; onmouseover=&quot;showTip(event, 'fs34', 133)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 134)&quot; onmouseover=&quot;showTip(event, 'fs28', 134)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 135)&quot; onmouseover=&quot;showTip(event, 'fs29', 135)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 136)&quot; onmouseover=&quot;showTip(event, 'fs35', 136)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 137)&quot; onmouseover=&quot;showTip(event, 'fs36', 137)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 138)&quot; onmouseover=&quot;showTip(event, 'fs34', 138)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 139)&quot; onmouseover=&quot;showTip(event, 'fs28', 139)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 140)&quot; onmouseover=&quot;showTip(event, 'fs29', 140)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 141)&quot; onmouseover=&quot;showTip(event, 'fs35', 141)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 142)&quot; onmouseover=&quot;showTip(event, 'fs5', 142)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 143)&quot; onmouseover=&quot;showTip(event, 'fs28', 143)&quot; class=&quot;f&quot;&gt;fEmpty&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 144)&quot; onmouseover=&quot;showTip(event, 'fs6', 144)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs30', 145)&quot; onmouseover=&quot;showTip(event, 'fs30', 145)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs31', 146)&quot; onmouseover=&quot;showTip(event, 'fs31', 146)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 147)&quot; onmouseover=&quot;showTip(event, 'fs29', 147)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 148)&quot; onmouseover=&quot;showTip(event, 'fs30', 148)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs36', 149)&quot; onmouseover=&quot;showTip(event, 'fs36', 149)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 150)&quot; onmouseover=&quot;showTip(event, 'fs31', 150)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the case of a list this isn't a big improvement, we also cannot use the &lt;code&gt;function&lt;/code&gt; keyword anymore.
But usually it is a good idea and it makes the code a little bit cleaner, especially when we create
a &lt;code&gt;cata&lt;/code&gt; function for more complicated discriminated unions.&lt;/p&gt;
&lt;p&gt;A second improvement. Actually functions that take &lt;code&gt;unit&lt;/code&gt; as a value are bad! A pure function that
expects &lt;code&gt;unit&lt;/code&gt; always only can return the exact same value when it is called. F# is not a
pure-functional language, so theoretically &lt;code&gt;fEmpty&lt;/code&gt; could do some kind of side-effects and always
return something different. But, I don't encourage such things. A &lt;code&gt;cata&lt;/code&gt; function is really
the idea to transform a data-structure, there shouldn't be side-effects in it. So instead
of a function, we just expect a direct value that should be used for the &lt;code&gt;Empty&lt;/code&gt; case. On top,
I name the return type &lt;code&gt;'State&lt;/code&gt;. This is just a &lt;em&gt;generic-type&lt;/em&gt;, but by having a more descriptive
name as &lt;code&gt;'a&lt;/code&gt;, &lt;code&gt;'b&lt;/code&gt; and so on, it can help in understanding the function signatures. Now our
third &lt;code&gt;listCata'''&lt;/code&gt; version looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 151)&quot; onmouseover=&quot;showTip(event, 'fs37', 151)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 152)&quot; onmouseover=&quot;showTip(event, 'fs38', 152)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 153)&quot; onmouseover=&quot;showTip(event, 'fs39', 153)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 154)&quot; onmouseover=&quot;showTip(event, 'fs16', 154)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 155)&quot; onmouseover=&quot;showTip(event, 'fs40', 155)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 156)&quot; onmouseover=&quot;showTip(event, 'fs37', 156)&quot; class=&quot;f&quot;&gt;listCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 157)&quot; onmouseover=&quot;showTip(event, 'fs38', 157)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 158)&quot; onmouseover=&quot;showTip(event, 'fs39', 158)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 159)&quot; onmouseover=&quot;showTip(event, 'fs16', 159)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 160)&quot; onmouseover=&quot;showTip(event, 'fs5', 160)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 161)&quot; onmouseover=&quot;showTip(event, 'fs38', 161)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 162)&quot; onmouseover=&quot;showTip(event, 'fs6', 162)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 163)&quot; onmouseover=&quot;showTip(event, 'fs9', 163)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 164)&quot; onmouseover=&quot;showTip(event, 'fs10', 164)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 165)&quot; onmouseover=&quot;showTip(event, 'fs39', 165)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 166)&quot; onmouseover=&quot;showTip(event, 'fs9', 166)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs40', 167)&quot; onmouseover=&quot;showTip(event, 'fs40', 167)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 168)&quot; onmouseover=&quot;showTip(event, 'fs10', 168)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When we look at the type-signature of our function the type-signature should look familiar!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 169)&quot; onmouseover=&quot;showTip(event, 'fs41', 169)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs42', 170)&quot; onmouseover=&quot;showTip(event, 'fs42', 170)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It is nearly the same as &lt;code&gt;foldBack&lt;/code&gt;! The only difference is that the arguments are in another
order. Let's compare it with the signature of &lt;code&gt;List.foldBack&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;(&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 171)&quot; onmouseover=&quot;showTip(event, 'fs41', 171)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 172)&quot; onmouseover=&quot;showTip(event, 'fs41', 172)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It just expects the &lt;code&gt;fCons&lt;/code&gt; function first, here named &lt;code&gt;folder&lt;/code&gt;, then the list to operator
on, and finally the value for the empty case, here just named &lt;code&gt;state&lt;/code&gt;. So let's also
do this kind of re-order, and finally we end up with our final &lt;code&gt;listCata&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 173)&quot; onmouseover=&quot;showTip(event, 'fs43', 173)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 174)&quot; onmouseover=&quot;showTip(event, 'fs39', 174)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 175)&quot; onmouseover=&quot;showTip(event, 'fs16', 175)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 176)&quot; onmouseover=&quot;showTip(event, 'fs44', 176)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 177)&quot; onmouseover=&quot;showTip(event, 'fs16', 177)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 178)&quot; onmouseover=&quot;showTip(event, 'fs5', 178)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 179)&quot; onmouseover=&quot;showTip(event, 'fs44', 179)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 180)&quot; onmouseover=&quot;showTip(event, 'fs6', 180)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 181)&quot; onmouseover=&quot;showTip(event, 'fs9', 181)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 182)&quot; onmouseover=&quot;showTip(event, 'fs10', 182)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 183)&quot; onmouseover=&quot;showTip(event, 'fs39', 183)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 184)&quot; onmouseover=&quot;showTip(event, 'fs9', 184)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs43', 185)&quot; onmouseover=&quot;showTip(event, 'fs43', 185)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 186)&quot; onmouseover=&quot;showTip(event, 'fs39', 186)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 187)&quot; onmouseover=&quot;showTip(event, 'fs10', 187)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 188)&quot; onmouseover=&quot;showTip(event, 'fs44', 188)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Usually, i wouldn't do such a re-order for a &lt;code&gt;cata&lt;/code&gt; function. We also lost the ability
to use partial application with the &lt;code&gt;recurs&lt;/code&gt; function. But because our list type is anyway
so small, the re-order doesn't hurt much. Here, it is more an example to show more clearly
the relation that &lt;code&gt;cata&lt;/code&gt; always has the same behaviour as &lt;code&gt;foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
It is important to understand that it behaves like &lt;code&gt;foldBack&lt;/code&gt; not like
&lt;code&gt;fold&lt;/code&gt;! I will later go more deeply into this topic and show how &lt;code&gt;fold&lt;/code&gt;
and &lt;code&gt;foldBack&lt;/code&gt; differ, and why that difference is important.
&lt;/div&gt;
&lt;p&gt;Our goal why we created a &lt;code&gt;cata&lt;/code&gt; function was that we have an abstraction, instead of writing
functions that do the recursion all over by themselves, we now can use &lt;code&gt;listCata&lt;/code&gt; that abstract
this kind of thing for us. Now, we also should use &lt;code&gt;listCata&lt;/code&gt; and rewrite all our functions
we created so far by using our abstraction. Here are the final list functions re-written with
&lt;code&gt;listCata&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 189)&quot; onmouseover=&quot;showTip(event, 'fs45', 189)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 190)&quot; onmouseover=&quot;showTip(event, 'fs16', 190)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 191)&quot; onmouseover=&quot;showTip(event, 'fs43', 191)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 192)&quot; onmouseover=&quot;showTip(event, 'fs26', 192)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 193)&quot; onmouseover=&quot;showTip(event, 'fs46', 193)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 194)&quot; onmouseover=&quot;showTip(event, 'fs46', 194)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 195)&quot; onmouseover=&quot;showTip(event, 'fs16', 195)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 196)&quot; onmouseover=&quot;showTip(event, 'fs47', 196)&quot; class=&quot;f&quot;&gt;listSum&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs48', 197)&quot; onmouseover=&quot;showTip(event, 'fs48', 197)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 198)&quot; onmouseover=&quot;showTip(event, 'fs43', 198)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 199)&quot; onmouseover=&quot;showTip(event, 'fs22', 199)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 200)&quot; onmouseover=&quot;showTip(event, 'fs46', 200)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 201)&quot; onmouseover=&quot;showTip(event, 'fs22', 201)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 202)&quot; onmouseover=&quot;showTip(event, 'fs46', 202)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs48', 203)&quot; onmouseover=&quot;showTip(event, 'fs48', 203)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 204)&quot; onmouseover=&quot;showTip(event, 'fs49', 204)&quot; class=&quot;f&quot;&gt;listMap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 205)&quot; onmouseover=&quot;showTip(event, 'fs21', 205)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs16', 206)&quot; onmouseover=&quot;showTip(event, 'fs16', 206)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 207)&quot; onmouseover=&quot;showTip(event, 'fs43', 207)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 208)&quot; onmouseover=&quot;showTip(event, 'fs26', 208)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 209)&quot; onmouseover=&quot;showTip(event, 'fs50', 209)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 210)&quot; onmouseover=&quot;showTip(event, 'fs8', 210)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 211)&quot; onmouseover=&quot;showTip(event, 'fs21', 211)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 212)&quot; onmouseover=&quot;showTip(event, 'fs26', 212)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs50', 213)&quot; onmouseover=&quot;showTip(event, 'fs50', 213)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 214)&quot; onmouseover=&quot;showTip(event, 'fs16', 214)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 215)&quot; onmouseover=&quot;showTip(event, 'fs7', 215)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 216)&quot; onmouseover=&quot;showTip(event, 'fs51', 216)&quot; class=&quot;f&quot;&gt;listSnoc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 217)&quot; onmouseover=&quot;showTip(event, 'fs26', 217)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 218)&quot; onmouseover=&quot;showTip(event, 'fs16', 218)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 219)&quot; onmouseover=&quot;showTip(event, 'fs43', 219)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 220)&quot; onmouseover=&quot;showTip(event, 'fs26', 220)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 221)&quot; onmouseover=&quot;showTip(event, 'fs52', 221)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 222)&quot; onmouseover=&quot;showTip(event, 'fs8', 222)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 223)&quot; onmouseover=&quot;showTip(event, 'fs26', 223)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 224)&quot; onmouseover=&quot;showTip(event, 'fs52', 224)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs16', 225)&quot; onmouseover=&quot;showTip(event, 'fs16', 225)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs8', 226)&quot; onmouseover=&quot;showTip(event, 'fs8', 226)&quot; class=&quot;f&quot;&gt;cons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 227)&quot; onmouseover=&quot;showTip(event, 'fs26', 227)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 228)&quot; onmouseover=&quot;showTip(event, 'fs7', 228)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And some examples to see that they work like expected:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 229)&quot; onmouseover=&quot;showTip(event, 'fs45', 229)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 230)&quot; onmouseover=&quot;showTip(event, 'fs12', 230)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 231)&quot; onmouseover=&quot;showTip(event, 'fs45', 231)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 232)&quot; onmouseover=&quot;showTip(event, 'fs13', 232)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs45', 233)&quot; onmouseover=&quot;showTip(event, 'fs45', 233)&quot; class=&quot;f&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 234)&quot; onmouseover=&quot;showTip(event, 'fs14', 234)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs47', 235)&quot; onmouseover=&quot;showTip(event, 'fs47', 235)&quot; class=&quot;f&quot;&gt;listSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 236)&quot; onmouseover=&quot;showTip(event, 'fs12', 236)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs47', 237)&quot; onmouseover=&quot;showTip(event, 'fs47', 237)&quot; class=&quot;f&quot;&gt;listSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 238)&quot; onmouseover=&quot;showTip(event, 'fs13', 238)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 239)&quot; onmouseover=&quot;showTip(event, 'fs49', 239)&quot; class=&quot;f&quot;&gt;listMap&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 240)&quot; onmouseover=&quot;showTip(event, 'fs22', 240)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 241)&quot; onmouseover=&quot;showTip(event, 'fs22', 241)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 242)&quot; onmouseover=&quot;showTip(event, 'fs22', 242)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs12', 243)&quot; onmouseover=&quot;showTip(event, 'fs12', 243)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Empty)))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs49', 244)&quot; onmouseover=&quot;showTip(event, 'fs49', 244)&quot; class=&quot;f&quot;&gt;listMap&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 245)&quot; onmouseover=&quot;showTip(event, 'fs22', 245)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 246)&quot; onmouseover=&quot;showTip(event, 'fs22', 246)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 247)&quot; onmouseover=&quot;showTip(event, 'fs22', 247)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs13', 248)&quot; onmouseover=&quot;showTip(event, 'fs13', 248)&quot; class=&quot;i&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (4,Cons (9,Cons (16,Cons (25,Empty)))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs51', 249)&quot; onmouseover=&quot;showTip(event, 'fs51', 249)&quot; class=&quot;f&quot;&gt;listSnoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 250)&quot; onmouseover=&quot;showTip(event, 'fs12', 250)&quot; class=&quot;i&quot;&gt;l1&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// Cons (1,Cons (2,Cons (3,Cons (4,Empty))))&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs51', 251)&quot; onmouseover=&quot;showTip(event, 'fs51', 251)&quot; class=&quot;f&quot;&gt;listSnoc&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Kazoom&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 252)&quot; onmouseover=&quot;showTip(event, 'fs14', 252)&quot; class=&quot;i&quot;&gt;l3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Cons (&amp;quot;Hello&amp;quot;,Cons (&amp;quot; &amp;quot;,Cons (&amp;quot;World!&amp;quot;,Cons (&amp;quot;Kazoom&amp;quot;,Empty))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's summarize what we have done so far:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We usually start with a recursively defined discriminated union.&lt;/li&gt;
&lt;li&gt;When we work with such a type, we need to write recursive functions.&lt;/li&gt;
&lt;li&gt;
Instead of writing functions with recursion directly, we create a &lt;code&gt;cata&lt;/code&gt; function
that abstracts the recursion for us.
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cata&lt;/code&gt; function expects a function for every case.&lt;/li&gt;
&lt;li&gt;Cases without data can be simple values instead of functions.&lt;/li&gt;
&lt;li&gt;We just pass all data associated with that case to the correct function.&lt;/li&gt;
&lt;li&gt;
We don't pass a datum that is recursive to the functions. Those datum must be
first passed to &lt;code&gt;cata&lt;/code&gt; itself.
&lt;/li&gt;
&lt;li&gt;The behaviour of &lt;code&gt;cata&lt;/code&gt; is the same as &lt;code&gt;foldBack&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cata&lt;/code&gt; is not tail-recursive.&lt;/li&gt;
&lt;/ol&gt;
&lt;a name=&quot;tail-recursion&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tail Recursion with FoldBack&lt;/h2&gt;
&lt;p&gt;At this point we should ask ourselves if we really need tail-recursion. The answer is
not always &lt;strong&gt;yes&lt;/strong&gt;. We really should think of the use-cases we have, and what kind
of data-structure we defined. And in the most cases, the answer is &lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is important to understand that we only run into problems with recursion when we
have a data-structure with a linear depth. In our list example, this is the case.
What does it mean exactly? It means that it is pretty normal to have very deep
recursion, usually a case where every additional element increases the depth by one.&lt;/p&gt;
&lt;p&gt;For a single linked list this is the case. A list with 10,000 elements will also
create a stack depth of 10,000. So it is important to create tail-recursive
functions. But does that mean all the work on &lt;code&gt;cata&lt;/code&gt; was wasted?&lt;/p&gt;
&lt;p&gt;Absolutely not. We just take &lt;code&gt;cata&lt;/code&gt; as the starting point and we just try to make
&lt;code&gt;cata&lt;/code&gt; tail-recursive. The tail recursive version then is what we call &lt;code&gt;foldBack&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And this leads to the next articles in my series. Converting functions into
tail-recursive functions is a task on its own that needs proper explanation.&lt;/p&gt;
&lt;p&gt;One technique that is most often used is the idea of an accumulator. Instead of
doing a calculation once a function finished, we do the calculations immediately and
pass the result to the next function call. I explain this conept in more detail
in: &lt;a href=&quot;/blog/2016/04/05/mutable-loops-to-immutability&quot;&gt;From mutable loops to immutability&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another idea is to use a continuation function, I already provide two articles explaining
the ideas behind this technique. In &lt;a href=&quot;/blog/2016/04/16/fold-continuations&quot;&gt;Continuations and foldBack&lt;/a&gt;
I explain in deep how a tail-recursive &lt;code&gt;foldBack&lt;/code&gt; works. And in my article
&lt;a href=&quot;/blog/2016/05/07/cps-fold&quot;&gt;CPS fold -- fold with early exit&lt;/a&gt; I explain
the idea of a continuation function a second time with &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But it doesn't mean both ideas are interchangeable. When we directly want to create
a tail-recursive &lt;code&gt;foldBack&lt;/code&gt; function then we need to use the continuation-function
approach. We cannot create a tail-recursive &lt;code&gt;foldBack&lt;/code&gt; with an accumulator approach.&lt;/p&gt;
&lt;p&gt;As I already have three articles on those topics I don't go into much further
detail, so I just provide a quick explanation. We just start with the &lt;code&gt;cata&lt;/code&gt; function.
In &lt;code&gt;cata&lt;/code&gt; we see something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;listCata&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;state&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, the second argument to &lt;code&gt;fCons&lt;/code&gt; is a recursive call. Let's shortly rethink what it does.
It calls the function and it will return some kind of data, this data is then passed to
the &lt;code&gt;fCons&lt;/code&gt; function as the second argument. With the continuation approach we just assume
we already have that data. So we just replace every recursive call with some variable
we don't have yet.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Sure, that wouldn't compile now, because we didn't define &lt;code&gt;racc&lt;/code&gt; anywhere, so we wrap it
inside a function, that functions then becomes &lt;code&gt;racc&lt;/code&gt; somewhere in the future.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Cons&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;fCons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But that isn't anything, we still need to somehow traverse our list, and call that function.
In short, we change our previously defined &lt;code&gt;cata&lt;/code&gt; all in all to something like that.
Let's see the &lt;code&gt;cata&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; directly to each other.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 173)&quot; onmouseover=&quot;showTip(event, 'fs43', 173)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 174)&quot; onmouseover=&quot;showTip(event, 'fs39', 174)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 175)&quot; onmouseover=&quot;showTip(event, 'fs16', 175)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 176)&quot; onmouseover=&quot;showTip(event, 'fs44', 176)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 177)&quot; onmouseover=&quot;showTip(event, 'fs16', 177)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 178)&quot; onmouseover=&quot;showTip(event, 'fs5', 178)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 179)&quot; onmouseover=&quot;showTip(event, 'fs44', 179)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 180)&quot; onmouseover=&quot;showTip(event, 'fs6', 180)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 181)&quot; onmouseover=&quot;showTip(event, 'fs9', 181)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 182)&quot; onmouseover=&quot;showTip(event, 'fs10', 182)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 183)&quot; onmouseover=&quot;showTip(event, 'fs39', 183)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 184)&quot; onmouseover=&quot;showTip(event, 'fs9', 184)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs43', 185)&quot; onmouseover=&quot;showTip(event, 'fs43', 185)&quot; class=&quot;f&quot;&gt;listCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 186)&quot; onmouseover=&quot;showTip(event, 'fs39', 186)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 187)&quot; onmouseover=&quot;showTip(event, 'fs10', 187)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 188)&quot; onmouseover=&quot;showTip(event, 'fs44', 188)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 253)&quot; onmouseover=&quot;showTip(event, 'fs53', 253)&quot; class=&quot;f&quot;&gt;listFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 254)&quot; onmouseover=&quot;showTip(event, 'fs39', 254)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 255)&quot; onmouseover=&quot;showTip(event, 'fs16', 255)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 256)&quot; onmouseover=&quot;showTip(event, 'fs44', 256)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 257)&quot; onmouseover=&quot;showTip(event, 'fs54', 257)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 258)&quot; onmouseover=&quot;showTip(event, 'fs16', 258)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 259)&quot; onmouseover=&quot;showTip(event, 'fs55', 259)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 260)&quot; onmouseover=&quot;showTip(event, 'fs16', 260)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs5', 261)&quot; onmouseover=&quot;showTip(event, 'fs5', 261)&quot; class=&quot;p&quot;&gt;Empty&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 262)&quot; onmouseover=&quot;showTip(event, 'fs55', 262)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 263)&quot; onmouseover=&quot;showTip(event, 'fs44', 263)&quot; class=&quot;i&quot;&gt;state&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs6', 264)&quot; onmouseover=&quot;showTip(event, 'fs6', 264)&quot; class=&quot;p&quot;&gt;Cons&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs9', 265)&quot; onmouseover=&quot;showTip(event, 'fs9', 265)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs10', 266)&quot; onmouseover=&quot;showTip(event, 'fs10', 266)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 267)&quot; onmouseover=&quot;showTip(event, 'fs54', 267)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 268)&quot; onmouseover=&quot;showTip(event, 'fs10', 268)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 269)&quot; onmouseover=&quot;showTip(event, 'fs56', 269)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 270)&quot; onmouseover=&quot;showTip(event, 'fs55', 270)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs39', 271)&quot; onmouseover=&quot;showTip(event, 'fs39', 271)&quot; class=&quot;f&quot;&gt;fCons&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 272)&quot; onmouseover=&quot;showTip(event, 'fs9', 272)&quot; class=&quot;i&quot;&gt;h&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 273)&quot; onmouseover=&quot;showTip(event, 'fs56', 273)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt;))
    &lt;span onmouseout=&quot;hideTip(event, 'fs54', 274)&quot; onmouseover=&quot;showTip(event, 'fs54', 274)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 275)&quot; onmouseover=&quot;showTip(event, 'fs16', 275)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 276)&quot; onmouseover=&quot;showTip(event, 'fs57', 276)&quot; class=&quot;f&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The implementation of our list functions also didn't change at all. Instead of
&lt;code&gt;listCata&lt;/code&gt; they just use &lt;code&gt;listFoldBack&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 277)&quot; onmouseover=&quot;showTip(event, 'fs41', 277)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 278)&quot; onmouseover=&quot;showTip(event, 'fs41', 278)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listSum&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs41', 279)&quot; onmouseover=&quot;showTip(event, 'fs41', 279)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 280)&quot; onmouseover=&quot;showTip(event, 'fs41', 280)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listMap&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;f&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs41', 281)&quot; onmouseover=&quot;showTip(event, 'fs41', 281)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 282)&quot; onmouseover=&quot;showTip(event, 'fs41', 282)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listSnoc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 283)&quot; onmouseover=&quot;showTip(event, 'fs41', 283)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;listFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs41', 284)&quot; onmouseover=&quot;showTip(event, 'fs41', 284)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;empty&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;binary-trees&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Binary Trees&lt;/h2&gt;
&lt;p&gt;Up so far we explored the concept of the &lt;code&gt;cata&lt;/code&gt; function only with the list and when we make that
function tail-recursive we call it &lt;code&gt;foldBack&lt;/code&gt;. But as said before, Catamorphisms are a generalization.
That means, the concept of writing a &lt;code&gt;cata&lt;/code&gt; function and creating tail-recursive version out of it
should also be done for other discriminated unions, not just for a list.&lt;/p&gt;
&lt;p&gt;For the next example we will look at a binary tree. A binary tree is quite interesting
because it is very similar to a list. But let's see that in more detail:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 285)&quot; onmouseover=&quot;showTip(event, 'fs58', 285)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 286)&quot; onmouseover=&quot;showTip(event, 'fs59', 286)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 287)&quot; onmouseover=&quot;showTip(event, 'fs60', 287)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 288)&quot; onmouseover=&quot;showTip(event, 'fs58', 288)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 289)&quot; onmouseover=&quot;showTip(event, 'fs58', 289)&quot; class=&quot;t&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once again I also introduce some helper functions to create the cases.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 290)&quot; onmouseover=&quot;showTip(event, 'fs61', 290)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 291)&quot; onmouseover=&quot;showTip(event, 'fs26', 291)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 292)&quot; onmouseover=&quot;showTip(event, 'fs62', 292)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 293)&quot; onmouseover=&quot;showTip(event, 'fs63', 293)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs60', 294)&quot; onmouseover=&quot;showTip(event, 'fs60', 294)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 295)&quot; onmouseover=&quot;showTip(event, 'fs26', 295)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 296)&quot; onmouseover=&quot;showTip(event, 'fs62', 296)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 297)&quot; onmouseover=&quot;showTip(event, 'fs63', 297)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs64', 298)&quot; onmouseover=&quot;showTip(event, 'fs64', 298)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 299)&quot; onmouseover=&quot;showTip(event, 'fs26', 299)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 300)&quot; onmouseover=&quot;showTip(event, 'fs61', 300)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 301)&quot; onmouseover=&quot;showTip(event, 'fs26', 301)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 302)&quot; onmouseover=&quot;showTip(event, 'fs59', 302)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 303)&quot; onmouseover=&quot;showTip(event, 'fs59', 303)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And a simple tree that contains the numbers 1 to 7 ordered.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 304)&quot; onmouseover=&quot;showTip(event, 'fs65', 304)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    (&lt;span onmouseout=&quot;hideTip(event, 'fs61', 305)&quot; onmouseover=&quot;showTip(event, 'fs61', 305)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;
        (&lt;span onmouseout=&quot;hideTip(event, 'fs61', 306)&quot; onmouseover=&quot;showTip(event, 'fs61', 306)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 307)&quot; onmouseover=&quot;showTip(event, 'fs64', 307)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 308)&quot; onmouseover=&quot;showTip(event, 'fs64', 308)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;))
        (&lt;span onmouseout=&quot;hideTip(event, 'fs61', 309)&quot; onmouseover=&quot;showTip(event, 'fs61', 309)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 310)&quot; onmouseover=&quot;showTip(event, 'fs64', 310)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 311)&quot; onmouseover=&quot;showTip(event, 'fs64', 311)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, why is a Tree similar to a list? Because the definition is nearly the same. If you look closer
you see that a tree has two cases exactly like a list has. &lt;code&gt;Leaf&lt;/code&gt; marks the end exactly like
&lt;code&gt;Empty&lt;/code&gt; did for the list. Instead of &lt;code&gt;Cons&lt;/code&gt; with two datums, we have &lt;code&gt;Node&lt;/code&gt; with three datums.&lt;/p&gt;
&lt;p&gt;The only difference between a list and a binary tree is that every element in a list only has one
child, while a binary tree has two child's. Those child's are often named &lt;em&gt;Left&lt;/em&gt; and &lt;em&gt;Right&lt;/em&gt;.
That's also the reason why I named the variables &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; in the functions.&lt;/p&gt;
&lt;a name=&quot;tree-cata&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Cata for Tree&lt;/h2&gt;
&lt;p&gt;So, let's start by creating a &lt;code&gt;cata&lt;/code&gt; function for our tree.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 312)&quot; onmouseover=&quot;showTip(event, 'fs66', 312)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 313)&quot; onmouseover=&quot;showTip(event, 'fs67', 313)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 314)&quot; onmouseover=&quot;showTip(event, 'fs68', 314)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 315)&quot; onmouseover=&quot;showTip(event, 'fs69', 315)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 316)&quot; onmouseover=&quot;showTip(event, 'fs69', 316)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 317)&quot; onmouseover=&quot;showTip(event, 'fs59', 317)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 318)&quot; onmouseover=&quot;showTip(event, 'fs67', 318)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 319)&quot; onmouseover=&quot;showTip(event, 'fs60', 319)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 320)&quot; onmouseover=&quot;showTip(event, 'fs70', 320)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 321)&quot; onmouseover=&quot;showTip(event, 'fs71', 321)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 322)&quot; onmouseover=&quot;showTip(event, 'fs72', 322)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 323)&quot; onmouseover=&quot;showTip(event, 'fs68', 323)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 324)&quot; onmouseover=&quot;showTip(event, 'fs70', 324)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 325)&quot; onmouseover=&quot;showTip(event, 'fs66', 325)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 326)&quot; onmouseover=&quot;showTip(event, 'fs67', 326)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 327)&quot; onmouseover=&quot;showTip(event, 'fs68', 327)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 328)&quot; onmouseover=&quot;showTip(event, 'fs71', 328)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs66', 329)&quot; onmouseover=&quot;showTip(event, 'fs66', 329)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 330)&quot; onmouseover=&quot;showTip(event, 'fs67', 330)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 331)&quot; onmouseover=&quot;showTip(event, 'fs68', 331)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 332)&quot; onmouseover=&quot;showTip(event, 'fs72', 332)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We started by just turning every case into a function. This time we name them &lt;code&gt;fLeaf&lt;/code&gt;
and &lt;code&gt;fNode&lt;/code&gt;, after the cases. The pattern is the same. The &lt;code&gt;Leaf&lt;/code&gt; case has no data, so
we just call &lt;code&gt;fLeaf&lt;/code&gt; with the unit value &lt;code&gt;()&lt;/code&gt;. We should remember that we can eliminate
the function in a next version.&lt;/p&gt;
&lt;p&gt;The difference in the &lt;code&gt;Node&lt;/code&gt; case to the previous &lt;code&gt;Cons&lt;/code&gt; case in the list is, that we have
three datums. So &lt;code&gt;fNode&lt;/code&gt; will also receive three arguments. But the second and third
argument is a tree again. So before we pass those, we need to recursively call &lt;code&gt;treeCata'&lt;/code&gt;
on those trees again.&lt;/p&gt;
&lt;p&gt;The two recursive calls looks quite long, so we first create a partial applied &lt;code&gt;recurs&lt;/code&gt;
function. Now we have:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 333)&quot; onmouseover=&quot;showTip(event, 'fs73', 333)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 334)&quot; onmouseover=&quot;showTip(event, 'fs67', 334)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 335)&quot; onmouseover=&quot;showTip(event, 'fs68', 335)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 336)&quot; onmouseover=&quot;showTip(event, 'fs69', 336)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 337)&quot; onmouseover=&quot;showTip(event, 'fs74', 337)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs73', 338)&quot; onmouseover=&quot;showTip(event, 'fs73', 338)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 339)&quot; onmouseover=&quot;showTip(event, 'fs67', 339)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 340)&quot; onmouseover=&quot;showTip(event, 'fs68', 340)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 341)&quot; onmouseover=&quot;showTip(event, 'fs69', 341)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 342)&quot; onmouseover=&quot;showTip(event, 'fs59', 342)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 343)&quot; onmouseover=&quot;showTip(event, 'fs67', 343)&quot; class=&quot;f&quot;&gt;fLeaf&lt;/span&gt; ()
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 344)&quot; onmouseover=&quot;showTip(event, 'fs60', 344)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 345)&quot; onmouseover=&quot;showTip(event, 'fs70', 345)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 346)&quot; onmouseover=&quot;showTip(event, 'fs71', 346)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 347)&quot; onmouseover=&quot;showTip(event, 'fs72', 347)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 348)&quot; onmouseover=&quot;showTip(event, 'fs68', 348)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 349)&quot; onmouseover=&quot;showTip(event, 'fs70', 349)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 350)&quot; onmouseover=&quot;showTip(event, 'fs74', 350)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 351)&quot; onmouseover=&quot;showTip(event, 'fs71', 351)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 352)&quot; onmouseover=&quot;showTip(event, 'fs74', 352)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 353)&quot; onmouseover=&quot;showTip(event, 'fs72', 353)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Next, we eliminate the function for the leaf case.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 354)&quot; onmouseover=&quot;showTip(event, 'fs75', 354)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 355)&quot; onmouseover=&quot;showTip(event, 'fs76', 355)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 356)&quot; onmouseover=&quot;showTip(event, 'fs68', 356)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 357)&quot; onmouseover=&quot;showTip(event, 'fs69', 357)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs74', 358)&quot; onmouseover=&quot;showTip(event, 'fs74', 358)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs75', 359)&quot; onmouseover=&quot;showTip(event, 'fs75', 359)&quot; class=&quot;f&quot;&gt;treeCata&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 360)&quot; onmouseover=&quot;showTip(event, 'fs76', 360)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 361)&quot; onmouseover=&quot;showTip(event, 'fs68', 361)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 362)&quot; onmouseover=&quot;showTip(event, 'fs69', 362)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 363)&quot; onmouseover=&quot;showTip(event, 'fs59', 363)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 364)&quot; onmouseover=&quot;showTip(event, 'fs76', 364)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 365)&quot; onmouseover=&quot;showTip(event, 'fs60', 365)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 366)&quot; onmouseover=&quot;showTip(event, 'fs70', 366)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 367)&quot; onmouseover=&quot;showTip(event, 'fs71', 367)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 368)&quot; onmouseover=&quot;showTip(event, 'fs72', 368)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 369)&quot; onmouseover=&quot;showTip(event, 'fs68', 369)&quot; class=&quot;f&quot;&gt;fNode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 370)&quot; onmouseover=&quot;showTip(event, 'fs70', 370)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 371)&quot; onmouseover=&quot;showTip(event, 'fs74', 371)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 372)&quot; onmouseover=&quot;showTip(event, 'fs71', 372)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs74', 373)&quot; onmouseover=&quot;showTip(event, 'fs74', 373)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 374)&quot; onmouseover=&quot;showTip(event, 'fs72', 374)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As a tree also only has two cases, and one of them is not a function, we already see that
we already have a signature like &lt;code&gt;foldBack&lt;/code&gt;. So let's re-order the function arguments.
Previously I said we loose the ability for the partial applied &lt;code&gt;recurs&lt;/code&gt; function. But
we still can write a &lt;code&gt;recurs&lt;/code&gt; function. We only need to know which argument changes.&lt;/p&gt;
&lt;p&gt;In the code above you see that we call &lt;code&gt;(recurs l)&lt;/code&gt; and &lt;code&gt;(recurs r)&lt;/code&gt;. So we only want
to pass the next tree it should work on. So we create a &lt;code&gt;recurs&lt;/code&gt; function that only
expects the remaining tree. All in one, we now end with:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 375)&quot; onmouseover=&quot;showTip(event, 'fs77', 375)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 376)&quot; onmouseover=&quot;showTip(event, 'fs78', 376)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 377)&quot; onmouseover=&quot;showTip(event, 'fs79', 377)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 378)&quot; onmouseover=&quot;showTip(event, 'fs80', 378)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 379)&quot; onmouseover=&quot;showTip(event, 'fs81', 379)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 380)&quot; onmouseover=&quot;showTip(event, 'fs82', 380)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 381)&quot; onmouseover=&quot;showTip(event, 'fs77', 381)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 382)&quot; onmouseover=&quot;showTip(event, 'fs78', 382)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 383)&quot; onmouseover=&quot;showTip(event, 'fs82', 383)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 384)&quot; onmouseover=&quot;showTip(event, 'fs80', 384)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 385)&quot; onmouseover=&quot;showTip(event, 'fs79', 385)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 386)&quot; onmouseover=&quot;showTip(event, 'fs59', 386)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 387)&quot; onmouseover=&quot;showTip(event, 'fs80', 387)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 388)&quot; onmouseover=&quot;showTip(event, 'fs60', 388)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 389)&quot; onmouseover=&quot;showTip(event, 'fs26', 389)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 390)&quot; onmouseover=&quot;showTip(event, 'fs62', 390)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 391)&quot; onmouseover=&quot;showTip(event, 'fs63', 391)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 392)&quot; onmouseover=&quot;showTip(event, 'fs78', 392)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 393)&quot; onmouseover=&quot;showTip(event, 'fs26', 393)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 394)&quot; onmouseover=&quot;showTip(event, 'fs81', 394)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 395)&quot; onmouseover=&quot;showTip(event, 'fs62', 395)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 396)&quot; onmouseover=&quot;showTip(event, 'fs81', 396)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 397)&quot; onmouseover=&quot;showTip(event, 'fs63', 397)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's create a &lt;code&gt;length&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt; and a &lt;code&gt;map&lt;/code&gt; function with our &lt;code&gt;cata&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 398)&quot; onmouseover=&quot;showTip(event, 'fs83', 398)&quot; class=&quot;f&quot;&gt;treeLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 399)&quot; onmouseover=&quot;showTip(event, 'fs79', 399)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 400)&quot; onmouseover=&quot;showTip(event, 'fs77', 400)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 401)&quot; onmouseover=&quot;showTip(event, 'fs26', 401)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 402)&quot; onmouseover=&quot;showTip(event, 'fs84', 402)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 403)&quot; onmouseover=&quot;showTip(event, 'fs85', 403)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 404)&quot; onmouseover=&quot;showTip(event, 'fs84', 404)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 405)&quot; onmouseover=&quot;showTip(event, 'fs85', 405)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs79', 406)&quot; onmouseover=&quot;showTip(event, 'fs79', 406)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 407)&quot; onmouseover=&quot;showTip(event, 'fs86', 407)&quot; class=&quot;f&quot;&gt;treeSum&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs87', 408)&quot; onmouseover=&quot;showTip(event, 'fs87', 408)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 409)&quot; onmouseover=&quot;showTip(event, 'fs77', 409)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 410)&quot; onmouseover=&quot;showTip(event, 'fs22', 410)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 411)&quot; onmouseover=&quot;showTip(event, 'fs84', 411)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 412)&quot; onmouseover=&quot;showTip(event, 'fs85', 412)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 413)&quot; onmouseover=&quot;showTip(event, 'fs22', 413)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 414)&quot; onmouseover=&quot;showTip(event, 'fs84', 414)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 415)&quot; onmouseover=&quot;showTip(event, 'fs85', 415)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs87', 416)&quot; onmouseover=&quot;showTip(event, 'fs87', 416)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs88', 417)&quot; onmouseover=&quot;showTip(event, 'fs88', 417)&quot; class=&quot;f&quot;&gt;treeMap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 418)&quot; onmouseover=&quot;showTip(event, 'fs21', 418)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;  &lt;span onmouseout=&quot;hideTip(event, 'fs79', 419)&quot; onmouseover=&quot;showTip(event, 'fs79', 419)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 420)&quot; onmouseover=&quot;showTip(event, 'fs77', 420)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 421)&quot; onmouseover=&quot;showTip(event, 'fs26', 421)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 422)&quot; onmouseover=&quot;showTip(event, 'fs71', 422)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 423)&quot; onmouseover=&quot;showTip(event, 'fs72', 423)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 424)&quot; onmouseover=&quot;showTip(event, 'fs61', 424)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 425)&quot; onmouseover=&quot;showTip(event, 'fs21', 425)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 426)&quot; onmouseover=&quot;showTip(event, 'fs26', 426)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 427)&quot; onmouseover=&quot;showTip(event, 'fs71', 427)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 428)&quot; onmouseover=&quot;showTip(event, 'fs72', 428)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs79', 429)&quot; onmouseover=&quot;showTip(event, 'fs79', 429)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 430)&quot; onmouseover=&quot;showTip(event, 'fs59', 430)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// tree was:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// (node 4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 2 (endNode 1) (endNode 3))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 6 (endNode 5) (endNode 7)))&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs83', 431)&quot; onmouseover=&quot;showTip(event, 'fs83', 431)&quot; class=&quot;f&quot;&gt;treeLength&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 432)&quot; onmouseover=&quot;showTip(event, 'fs65', 432)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 7&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs86', 433)&quot; onmouseover=&quot;showTip(event, 'fs86', 433)&quot; class=&quot;f&quot;&gt;treeSum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 434)&quot; onmouseover=&quot;showTip(event, 'fs65', 434)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 28&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs88', 435)&quot; onmouseover=&quot;showTip(event, 'fs88', 435)&quot; class=&quot;f&quot;&gt;treeMap&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 436)&quot; onmouseover=&quot;showTip(event, 'fs22', 436)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 437)&quot; onmouseover=&quot;showTip(event, 'fs22', 437)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 438)&quot; onmouseover=&quot;showTip(event, 'fs22', 438)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 439)&quot; onmouseover=&quot;showTip(event, 'fs65', 439)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// (node 16&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 4  (endNode 1)  (endNode 9))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//   (node 36 (endNode 25) (endNode 49)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;fold-vs-foldback&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Fold vs. FoldBack&lt;/h2&gt;
&lt;p&gt;Before we talk about how to turn &lt;code&gt;cata&lt;/code&gt; into a tail-recursive function we should talk
about the difference between &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt;. I explained that if we turn &lt;code&gt;cata&lt;/code&gt;
into a tail-recursive function we get back &lt;code&gt;foldBack&lt;/code&gt;. If I mention &lt;code&gt;cata&lt;/code&gt; or &lt;code&gt;foldBack&lt;/code&gt;
i use the terms interchangeable. The fact that one is tail-recursive and the other not,
is not important right now, it is more important how they behave.&lt;/p&gt;
&lt;p&gt;But it opens up an important question. When we forget for a moment the mechanical
implementation to create the &lt;code&gt;cata&lt;/code&gt; function. How do we know how to implement &lt;code&gt;fold&lt;/code&gt; and
&lt;code&gt;foldBack&lt;/code&gt; and how do we know how they should behave? Or what is anyway the exact
behaviour of &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;If the question is unclear, let's look again at a list and lets see how &lt;code&gt;fold&lt;/code&gt;
and &lt;code&gt;foldBack&lt;/code&gt; behaves.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016/catamorphisms/list.svg&quot; alt=&quot;Single-Linked list&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can visualize a single-linked list like boxes, and every box points to the next element
in the list. Until the last element points to the end &lt;code&gt;Empty&lt;/code&gt;. In the visualization above
represented as &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The functions &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; are also often named &lt;code&gt;foldLeft&lt;/code&gt; and &lt;code&gt;foldRight&lt;/code&gt; in
other languages. They are named like this, because they describe how a list will be
traversed. &lt;code&gt;fold&lt;/code&gt; (or &lt;code&gt;foldLeft&lt;/code&gt;) traverses a list from left-to-right, while &lt;code&gt;foldBack&lt;/code&gt;
(or &lt;code&gt;foldRight&lt;/code&gt;) traverses the list from right-to-left.&lt;/p&gt;
&lt;p&gt;So when we use &lt;code&gt;fold&lt;/code&gt; the function we provide &lt;code&gt;fold&lt;/code&gt; first sees &lt;code&gt;1&lt;/code&gt;, then &lt;code&gt;2&lt;/code&gt;, then &lt;code&gt;3&lt;/code&gt;
and so on. While when using &lt;code&gt;foldBack&lt;/code&gt; we first encounter &lt;code&gt;5&lt;/code&gt;, then &lt;code&gt;4&lt;/code&gt;, then &lt;code&gt;3&lt;/code&gt; and so
on. This is easy to understand.&lt;/p&gt;
&lt;p&gt;But how do they anyway translate to something like a binary tree? Our &lt;code&gt;tree&lt;/code&gt; that we used
so far looks like this:&lt;/p&gt;
&lt;div style=&quot;width:50%;margin: 0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/tree.svg&quot; alt=&quot;Binary Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;When we think of &lt;code&gt;fold&lt;/code&gt; as left-to-right and &lt;code&gt;foldBack&lt;/code&gt; as right-to-left, how do we translate
that to a tree? The problem we have, there doesn't exists only one way to traverse a tree.
&lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_traversal&quot;&gt;There are many way to traverse a tree&lt;/a&gt;, and even then the question
is which traversal we identify as &lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Up so far I made it easy, as I just said that &lt;code&gt;cata&lt;/code&gt; is &lt;code&gt;foldBack&lt;/code&gt; without further describing
the idea behind it why that is so. So let's re-look at &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; for the list
and let's see if we can describe the operation slightly different.&lt;/p&gt;
&lt;p&gt;Previously we already noticed that a list and a binary tree are very similar. We can think of
a list that contains one-element and a one recursive argument, or one-child. A binary
tree on the other hand is one-element and two-child's. When we visualize a tree we usually
show the deeper (recursive) layers underneath an element. In the above visualization we
have &lt;code&gt;4&lt;/code&gt; and underneath it &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt;. But we also can think of a list in such a way.&lt;/p&gt;
&lt;div style=&quot;width:25%;margin:0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/list_as_tree.svg&quot; alt=&quot;List as Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;We have &lt;code&gt;1&lt;/code&gt; and we have the recursive child &lt;code&gt;2&lt;/code&gt;. Instead of thinking of traversing a list
from left-to-right or right-to-left, we look at the &lt;strong&gt;folder-function&lt;/strong&gt;, and we describe
what the &lt;strong&gt;folder-function&lt;/strong&gt; sees. So when we sum all elements in a list like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 440)&quot; onmouseover=&quot;showTip(event, 'fs4', 440)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs89', 441)&quot; onmouseover=&quot;showTip(event, 'fs89', 441)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 442)&quot; onmouseover=&quot;showTip(event, 'fs46', 442)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 443)&quot; onmouseover=&quot;showTip(event, 'fs22', 443)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 444)&quot; onmouseover=&quot;showTip(event, 'fs46', 444)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 445)&quot; onmouseover=&quot;showTip(event, 'fs22', 445)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What does the &lt;strong&gt;folder-function&lt;/strong&gt; &lt;code&gt;(fun acc x -&amp;gt; acc + x)&lt;/code&gt; sees exactly? Let's say &lt;code&gt;fold&lt;/code&gt;
is at the element &lt;code&gt;1&lt;/code&gt;, which values do we have?&lt;/p&gt;
&lt;p&gt;We have &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. Or more precisely, we get the accumulator so-far, and one-element
of our data-structure. What do we see when &lt;code&gt;fold&lt;/code&gt; is at element &lt;code&gt;2&lt;/code&gt;? We get &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;.
Once again we get the accumulator so far, and the current element.&lt;/p&gt;
&lt;p&gt;Generally speaking, with &lt;code&gt;fold&lt;/code&gt; we get the current element and an accumulator that
is the combination of all the things we already have seen. When &lt;code&gt;fold&lt;/code&gt; hits &lt;code&gt;3&lt;/code&gt;,
then we get &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;. The first &lt;code&gt;3&lt;/code&gt; the &lt;em&gt;accumulator&lt;/em&gt; was computed by the already seen
elements &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; (1 + 2).&lt;/p&gt;
&lt;p&gt;We also can think of &lt;code&gt;fold&lt;/code&gt; as looping. Because in looping we usually start with some
mutable initial value, and when we loop over a data-structure we combine the current element
with some outer element.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 446)&quot; onmouseover=&quot;showTip(event, 'fs90', 446)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 447)&quot; onmouseover=&quot;showTip(event, 'fs22', 447)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs90', 448)&quot; onmouseover=&quot;showTip(event, 'fs90', 448)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs90', 449)&quot; onmouseover=&quot;showTip(event, 'fs90', 449)&quot; class=&quot;v&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 450)&quot; onmouseover=&quot;showTip(event, 'fs22', 450)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we look at &lt;code&gt;foldBack&lt;/code&gt; it behaves differently. When we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs4', 451)&quot; onmouseover=&quot;showTip(event, 'fs4', 451)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs91', 452)&quot; onmouseover=&quot;showTip(event, 'fs91', 452)&quot; class=&quot;f&quot;&gt;foldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 453)&quot; onmouseover=&quot;showTip(event, 'fs22', 453)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 454)&quot; onmouseover=&quot;showTip(event, 'fs46', 454)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 455)&quot; onmouseover=&quot;showTip(event, 'fs22', 455)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 456)&quot; onmouseover=&quot;showTip(event, 'fs46', 456)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;) [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We get the same result, because the order of &lt;code&gt;+&lt;/code&gt; operation doesn't matter. But the behaviour
is different. When our &lt;strong&gt;folder-function&lt;/strong&gt; hits the element &lt;code&gt;1&lt;/code&gt;, which data, do we get?&lt;/p&gt;
&lt;p&gt;We get &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;9&lt;/code&gt;. &lt;code&gt;1&lt;/code&gt; is the current element. But what is &lt;code&gt;9&lt;/code&gt;? &lt;code&gt;9&lt;/code&gt; is the result of the combination
of the child we have at this point. In &lt;code&gt;foldBack&lt;/code&gt; we don't get an accumulation of the things
we already have seen, we get the combination of the things we didn't have seen so far!&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;foldBack&lt;/code&gt; we get the current element, and the combination of all its child elements. When
we hit &lt;code&gt;2&lt;/code&gt; for example, then we just see &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;7&lt;/code&gt;. Because the child of &lt;code&gt;2&lt;/code&gt; is &lt;code&gt;3 + 4&lt;/code&gt;. But
we didn't see &lt;code&gt;1&lt;/code&gt;, because &lt;code&gt;1&lt;/code&gt; is on top of &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All in one we can say that &lt;code&gt;foldBack&lt;/code&gt; is a &lt;em&gt;structure-preserving&lt;/em&gt; function. We not get
the current element and an accumulation so far, we get the current element including one
value for each child. And with a tree this distinction becomes more clear. When we look again
at our tree.&lt;/p&gt;
&lt;div style=&quot;width:50%;margin: 0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/tree.svg&quot; alt=&quot;Binary Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Which arguments does the &lt;em&gt;folder-functions&lt;/em&gt; sees when we are at the top element &lt;code&gt;4&lt;/code&gt;? We see
&lt;code&gt;4&lt;/code&gt; the current element, &lt;code&gt;6&lt;/code&gt; for the left child (1 + 2 + 3) and &lt;code&gt;18&lt;/code&gt; (5 + 6 + 7) for the
&lt;em&gt;right-child&lt;/em&gt;. In &lt;code&gt;foldBack&lt;/code&gt; we always get the exact same amount of arguments a case has.&lt;/p&gt;
&lt;p&gt;The definition of &lt;code&gt;Node&lt;/code&gt; was &lt;code&gt;Node of 'a * Tree&amp;lt;'a&amp;gt; * Tree&amp;lt;'a&amp;gt;&lt;/code&gt; so we also get three
arguments in the folder function. But instead of two trees, we already get the result
of them. That means, while &lt;code&gt;fold&lt;/code&gt; is like iteration/looping, &lt;code&gt;foldBack&lt;/code&gt; is like recursion.&lt;/p&gt;
&lt;p&gt;Consider how we would write a recursive &lt;code&gt;sum&lt;/code&gt; function without &lt;code&gt;cata&lt;/code&gt;, the &lt;code&gt;Node&lt;/code&gt; case
would look something like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;| &lt;span class=&quot;i&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As &lt;code&gt;(sum l)&lt;/code&gt; is a function call it just starts calculating a value, but when it returns
it contains the sum of the left child. So once &lt;code&gt;(sum l)&lt;/code&gt; and &lt;code&gt;(sum r)&lt;/code&gt; completes we have
a line like &lt;code&gt;x + y + z&lt;/code&gt;. We just add three values together. &lt;code&gt;foldBack&lt;/code&gt; is exactly that
behaviour. &lt;code&gt;foldBack&lt;/code&gt; always works like recursion. That is why &lt;code&gt;cata&lt;/code&gt; is always
like &lt;code&gt;foldBack&lt;/code&gt;. &lt;code&gt;foldBack&lt;/code&gt; only ensures that we have tail-recursion.&lt;/p&gt;
&lt;p&gt;So how does &lt;code&gt;fold&lt;/code&gt; for a tree look like? In fact the &lt;em&gt;folder-function&lt;/em&gt; only sees &lt;strong&gt;two&lt;/strong&gt;
arguments not &lt;strong&gt;three&lt;/strong&gt;. Why is that so? Because &lt;code&gt;fold&lt;/code&gt; only sees the things it already
have seen.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Node&lt;/code&gt; case only contains a single non-recursive datum. That means the &lt;code&gt;fold&lt;/code&gt; function only
sees an accumulator so far and all the current non-recursive elements. For our specified binary
tree that are only two arguments.&lt;/p&gt;
&lt;p&gt;But how does &lt;code&gt;fold&lt;/code&gt; traverse a tree? The answer is, it doesn't matter. The purpose
of &lt;code&gt;fold&lt;/code&gt; is not to provide a specific order. The purpose of &lt;code&gt;fold&lt;/code&gt; is just to visit
every element. &lt;code&gt;fold&lt;/code&gt; is ideal for things that behave like &lt;a href=&quot;/blog/2016/05/24/monoids&quot;&gt;Monoids&lt;/a&gt;. &lt;code&gt;fold&lt;/code&gt;
is in general a good choice if the operation you have doesn't depend on the structure
itself only on the elements itself.&lt;/p&gt;
&lt;p&gt;You also can compare &lt;code&gt;fold&lt;/code&gt; with &lt;code&gt;foreach&lt;/code&gt; in C#. With &lt;code&gt;foreach&lt;/code&gt; in C#, you just iterate
through a data-structure. You also can iterate through a dictionary, and you get the
&lt;em&gt;key&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt; of every element, but you don't get any information of the structure
of the Dictionary itself. When you loop over a dictionary with foreach you just expect
to somehow get all the values, but you don't expect a particular order.&lt;/p&gt;
&lt;p&gt;But if you need the additional information of the structure and somehow work with the
full tree, then you must use &lt;code&gt;foldBack&lt;/code&gt;. Because of that, &lt;code&gt;foldBack&lt;/code&gt; is more powerful than
&lt;code&gt;fold&lt;/code&gt; as you always can use &lt;code&gt;foldBack&lt;/code&gt; instead of &lt;code&gt;fold&lt;/code&gt;. But the reverse is not true.&lt;/p&gt;
&lt;a name=&quot;tree-foldback&quot;&gt;&lt;/a&gt;
&lt;h2&gt;FoldBack for Tree&lt;/h2&gt;
&lt;p&gt;I will implement &lt;code&gt;foldBack&lt;/code&gt; with the Continuation approach, but I don't go into
much detail how the implementation works exactly, you can read more of those
details here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2016/04/16/fold-continuations&quot;&gt;Continuations and foldBack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/blog/2016/05/07/cps-fold&quot;&gt;CPS Fold -- fold with early exit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, we look again at &lt;code&gt;cata&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 375)&quot; onmouseover=&quot;showTip(event, 'fs77', 375)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 376)&quot; onmouseover=&quot;showTip(event, 'fs78', 376)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 377)&quot; onmouseover=&quot;showTip(event, 'fs79', 377)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 378)&quot; onmouseover=&quot;showTip(event, 'fs80', 378)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 379)&quot; onmouseover=&quot;showTip(event, 'fs81', 379)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 380)&quot; onmouseover=&quot;showTip(event, 'fs82', 380)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 381)&quot; onmouseover=&quot;showTip(event, 'fs77', 381)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 382)&quot; onmouseover=&quot;showTip(event, 'fs78', 382)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 383)&quot; onmouseover=&quot;showTip(event, 'fs82', 383)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 384)&quot; onmouseover=&quot;showTip(event, 'fs80', 384)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 385)&quot; onmouseover=&quot;showTip(event, 'fs79', 385)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 386)&quot; onmouseover=&quot;showTip(event, 'fs59', 386)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 387)&quot; onmouseover=&quot;showTip(event, 'fs80', 387)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 388)&quot; onmouseover=&quot;showTip(event, 'fs60', 388)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 389)&quot; onmouseover=&quot;showTip(event, 'fs26', 389)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 390)&quot; onmouseover=&quot;showTip(event, 'fs62', 390)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 391)&quot; onmouseover=&quot;showTip(event, 'fs63', 391)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 392)&quot; onmouseover=&quot;showTip(event, 'fs78', 392)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 393)&quot; onmouseover=&quot;showTip(event, 'fs26', 393)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 394)&quot; onmouseover=&quot;showTip(event, 'fs81', 394)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 395)&quot; onmouseover=&quot;showTip(event, 'fs62', 395)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs81', 396)&quot; onmouseover=&quot;showTip(event, 'fs81', 396)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 397)&quot; onmouseover=&quot;showTip(event, 'fs63', 397)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of a recursive &lt;code&gt;treeCata&lt;/code&gt; we will create an inner &lt;code&gt;loop&lt;/code&gt; function that
is used for recursion.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;treeCata&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;)
    &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;As we now have an inner recursive loop we also need to explicitly
start the recursion with &lt;code&gt;loop tree&lt;/code&gt;. In the next step we expand the
&lt;code&gt;Node&lt;/code&gt; case and remove the nested &lt;code&gt;loop&lt;/code&gt; calls and put each on its own line.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;treeCata&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span class=&quot;i&quot;&gt;Node&lt;/span&gt;(&lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;
            &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt;
    &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Finally, we add &lt;code&gt;cont&lt;/code&gt; (the continuation) to the &lt;code&gt;loop&lt;/code&gt; function and
rename the function to &lt;code&gt;treeFoldBack&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 457)&quot; onmouseover=&quot;showTip(event, 'fs92', 457)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs78', 458)&quot; onmouseover=&quot;showTip(event, 'fs78', 458)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 459)&quot; onmouseover=&quot;showTip(event, 'fs79', 459)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 460)&quot; onmouseover=&quot;showTip(event, 'fs80', 460)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs93', 461)&quot; onmouseover=&quot;showTip(event, 'fs93', 461)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 462)&quot; onmouseover=&quot;showTip(event, 'fs82', 462)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 463)&quot; onmouseover=&quot;showTip(event, 'fs55', 463)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 464)&quot; onmouseover=&quot;showTip(event, 'fs82', 464)&quot; class=&quot;i&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 465)&quot; onmouseover=&quot;showTip(event, 'fs59', 465)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 466)&quot; onmouseover=&quot;showTip(event, 'fs55', 466)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 467)&quot; onmouseover=&quot;showTip(event, 'fs80', 467)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 468)&quot; onmouseover=&quot;showTip(event, 'fs60', 468)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs26', 469)&quot; onmouseover=&quot;showTip(event, 'fs26', 469)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs62', 470)&quot; onmouseover=&quot;showTip(event, 'fs62', 470)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs63', 471)&quot; onmouseover=&quot;showTip(event, 'fs63', 471)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs93', 472)&quot; onmouseover=&quot;showTip(event, 'fs93', 472)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 473)&quot; onmouseover=&quot;showTip(event, 'fs62', 473)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 474)&quot; onmouseover=&quot;showTip(event, 'fs94', 474)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs93', 475)&quot; onmouseover=&quot;showTip(event, 'fs93', 475)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs63', 476)&quot; onmouseover=&quot;showTip(event, 'fs63', 476)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 477)&quot; onmouseover=&quot;showTip(event, 'fs56', 477)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span onmouseout=&quot;hideTip(event, 'fs55', 478)&quot; onmouseover=&quot;showTip(event, 'fs55', 478)&quot; class=&quot;f&quot;&gt;cont&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs78', 479)&quot; onmouseover=&quot;showTip(event, 'fs78', 479)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 480)&quot; onmouseover=&quot;showTip(event, 'fs26', 480)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs94', 481)&quot; onmouseover=&quot;showTip(event, 'fs94', 481)&quot; class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 482)&quot; onmouseover=&quot;showTip(event, 'fs56', 482)&quot; class=&quot;i&quot;&gt;racc&lt;/span&gt;)
                ))
    &lt;span onmouseout=&quot;hideTip(event, 'fs93', 483)&quot; onmouseover=&quot;showTip(event, 'fs93', 483)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs79', 484)&quot; onmouseover=&quot;showTip(event, 'fs79', 484)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 485)&quot; onmouseover=&quot;showTip(event, 'fs57', 485)&quot; class=&quot;f&quot;&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Before, we had code like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;lacc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;it was recursive and it meant: Recurse on &lt;code&gt;loop l&lt;/code&gt;. Somewhere in the future
(after many more recursive calls) it will return a result that we save in &lt;code&gt;lacc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we executed:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;racc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It was recursive again and after many more recursive calls we got the result
and saved it in &lt;code&gt;racc&lt;/code&gt;. But all of this is not tail-recursive. The new
&lt;code&gt;treeFoldBack&lt;/code&gt; function really only has one function call.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The idea of continuations is like this: Please execute &lt;code&gt;loop l callback&lt;/code&gt;. When
you finished calculating the result, please call the &lt;code&gt;callback&lt;/code&gt; function
and pass it the result. &lt;em&gt;Callback&lt;/em&gt; or &lt;em&gt;Continuation&lt;/em&gt; really means the same.&lt;/p&gt;
&lt;p&gt;But in this case we call &lt;code&gt;loop&lt;/code&gt; that is in tail position. So we end up with a
tail-recursive function.&lt;/p&gt;
&lt;a name=&quot;tree-foldback-examples&quot;&gt;&lt;/a&gt;
&lt;h2&gt;FoldBack examples&lt;/h2&gt;
&lt;p&gt;Instead let's focus on things we can do with &lt;code&gt;foldBack&lt;/code&gt; but not with &lt;code&gt;fold&lt;/code&gt;. As &lt;code&gt;foldBack&lt;/code&gt;
preserves the structure, we can actually very easily convert a Tree into a string representation.&lt;/p&gt;
&lt;p&gt;We just convert a &lt;code&gt;Leaf&lt;/code&gt; node into the String &lt;code&gt;&quot;Leaf&quot;&lt;/code&gt;, and a &lt;code&gt;Node&lt;/code&gt; will be converted with
&lt;code&gt;Node(%d, %s, %s)&lt;/code&gt; into a string. Because we get the string results instead of the recursive
values, this kind of task is pretty easy.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs77', 486)&quot; onmouseover=&quot;showTip(event, 'fs77', 486)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt;     (&lt;span onmouseout=&quot;hideTip(event, 'fs95', 487)&quot; onmouseover=&quot;showTip(event, 'fs95', 487)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Node(&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;quot;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 488)&quot; onmouseover=&quot;showTip(event, 'fs65', 488)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Leaf&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs92', 489)&quot; onmouseover=&quot;showTip(event, 'fs92', 489)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs95', 490)&quot; onmouseover=&quot;showTip(event, 'fs95', 490)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Node(&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;quot;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 491)&quot; onmouseover=&quot;showTip(event, 'fs65', 491)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Leaf&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;treeCata&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; both return the same string:
&lt;code&gt;&quot;Node(4, Node(2, Node(1, Leaf, Leaf), Node(3, Leaf, Leaf)), Node(6, Node(5, Leaf, Leaf), Node(7, Leaf, Leaf)))&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I used the &lt;code&gt;tree&lt;/code&gt; variable so far as a binary search tree. That means it is ordered. The left child's are
smaller, the right child's are bigger then the current element. We also can create an ordered list from
our tree. A Leaf node must be converted into an empty list. Otherwise we just need to concat the left,
current and the right node.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs96', 492)&quot; onmouseover=&quot;showTip(event, 'fs96', 492)&quot; class=&quot;i&quot;&gt;ordered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 493)&quot; onmouseover=&quot;showTip(event, 'fs92', 493)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 494)&quot; onmouseover=&quot;showTip(event, 'fs22', 494)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 495)&quot; onmouseover=&quot;showTip(event, 'fs97', 495)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 496)&quot; onmouseover=&quot;showTip(event, 'fs98', 496)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 497)&quot; onmouseover=&quot;showTip(event, 'fs97', 497)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 498)&quot; onmouseover=&quot;showTip(event, 'fs22', 498)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 499)&quot; onmouseover=&quot;showTip(event, 'fs98', 499)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 500)&quot; onmouseover=&quot;showTip(event, 'fs65', 500)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6;7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;or any other order we like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs99', 501)&quot; onmouseover=&quot;showTip(event, 'fs99', 501)&quot; class=&quot;i&quot;&gt;reversed&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 502)&quot; onmouseover=&quot;showTip(event, 'fs92', 502)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 503)&quot; onmouseover=&quot;showTip(event, 'fs22', 503)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 504)&quot; onmouseover=&quot;showTip(event, 'fs97', 504)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 505)&quot; onmouseover=&quot;showTip(event, 'fs98', 505)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 506)&quot; onmouseover=&quot;showTip(event, 'fs98', 506)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 507)&quot; onmouseover=&quot;showTip(event, 'fs22', 507)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 508)&quot; onmouseover=&quot;showTip(event, 'fs97', 508)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 509)&quot; onmouseover=&quot;showTip(event, 'fs65', 509)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [7;6;5;4;3;2;1]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs100', 510)&quot; onmouseover=&quot;showTip(event, 'fs100', 510)&quot; class=&quot;i&quot;&gt;preOrder&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 511)&quot; onmouseover=&quot;showTip(event, 'fs92', 511)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 512)&quot; onmouseover=&quot;showTip(event, 'fs22', 512)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 513)&quot; onmouseover=&quot;showTip(event, 'fs97', 513)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 514)&quot; onmouseover=&quot;showTip(event, 'fs98', 514)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 515)&quot; onmouseover=&quot;showTip(event, 'fs22', 515)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 516)&quot; onmouseover=&quot;showTip(event, 'fs97', 516)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 517)&quot; onmouseover=&quot;showTip(event, 'fs98', 517)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 518)&quot; onmouseover=&quot;showTip(event, 'fs65', 518)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [4;2;1;3;6;5;7]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs101', 519)&quot; onmouseover=&quot;showTip(event, 'fs101', 519)&quot; class=&quot;i&quot;&gt;postOrder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 520)&quot; onmouseover=&quot;showTip(event, 'fs92', 520)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 521)&quot; onmouseover=&quot;showTip(event, 'fs22', 521)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 522)&quot; onmouseover=&quot;showTip(event, 'fs97', 522)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 523)&quot; onmouseover=&quot;showTip(event, 'fs98', 523)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs97', 524)&quot; onmouseover=&quot;showTip(event, 'fs97', 524)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs98', 525)&quot; onmouseover=&quot;showTip(event, 'fs98', 525)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs22', 526)&quot; onmouseover=&quot;showTip(event, 'fs22', 526)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;]) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 527)&quot; onmouseover=&quot;showTip(event, 'fs65', 527)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; [] &lt;span class=&quot;c&quot;&gt;// [1;3;2;5;7;6;4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's turn the Tree into Lisp code. In Lisp a tree is just represented as a list with
tree elements. The first element is the current node, the second and third element represent
the left and right node, and are just lists themselves. The Leaf node is represented as the
empty list.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(quote &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 528)&quot; onmouseover=&quot;showTip(event, 'fs92', 528)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs95', 529)&quot; onmouseover=&quot;showTip(event, 'fs95', 529)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)&amp;quot;&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs65', 530)&quot; onmouseover=&quot;showTip(event, 'fs65', 530)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;empty&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// &amp;quot;(quote (4 (2 (1 empty empty) (3 empty empty)) (6 (5 empty empty) (7 empty empty))))&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's test it in Racket.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;racket&quot;&gt;(define tree (quote (4 (2 (1 empty empty) (3 empty empty)) (6 (5 empty empty) (7 empty empty)))))
(define (left tree)  (car (cdr tree)))
(define (right tree) (car (cdr (cdr tree))))
(define (datum tree) (car tree))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;and in the REPL:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;console&quot;&gt;&amp;gt; (datum (left (left tree)))
1
&amp;gt; (datum (left (right tree)))
5
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Nice, this is correct. For the last example let's look again at our example tree:&lt;/p&gt;
&lt;div style=&quot;width:50%;margin: 0 auto&quot;&gt;
&lt;img src=&quot;/images/2016/catamorphisms/tree.svg&quot; alt=&quot;Binary Tree&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Let's say we want to create a path to a specific element. For example when we search for &lt;code&gt;5&lt;/code&gt;, we want
the steps to find &lt;code&gt;5&lt;/code&gt;. When we start at &lt;code&gt;4&lt;/code&gt; we first must go right, and then Left. So we want &quot;Right Left&quot;
as a result. When we search for &lt;code&gt;1&lt;/code&gt; we get &quot;Left Left&quot; and so on.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs102', 531)&quot; onmouseover=&quot;showTip(event, 'fs102', 531)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs103', 532)&quot; onmouseover=&quot;showTip(event, 'fs103', 532)&quot; class=&quot;i&quot;&gt;search&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 533)&quot; onmouseover=&quot;showTip(event, 'fs104', 533)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 534)&quot; onmouseover=&quot;showTip(event, 'fs105', 534)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, [])
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs106', 535)&quot; onmouseover=&quot;showTip(event, 'fs106', 535)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 536)&quot; onmouseover=&quot;showTip(event, 'fs107', 536)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs108', 537)&quot; onmouseover=&quot;showTip(event, 'fs108', 537)&quot; class=&quot;i&quot;&gt;lb&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs109', 538)&quot; onmouseover=&quot;showTip(event, 'fs109', 538)&quot; class=&quot;i&quot;&gt;lp&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs110', 539)&quot; onmouseover=&quot;showTip(event, 'fs110', 539)&quot; class=&quot;i&quot;&gt;rb&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs111', 540)&quot; onmouseover=&quot;showTip(event, 'fs111', 540)&quot; class=&quot;i&quot;&gt;rp&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs107', 541)&quot; onmouseover=&quot;showTip(event, 'fs107', 541)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs103', 542)&quot; onmouseover=&quot;showTip(event, 'fs103', 542)&quot; class=&quot;i&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, [])
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs108', 543)&quot; onmouseover=&quot;showTip(event, 'fs108', 543)&quot; class=&quot;i&quot;&gt;lb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Left&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs109', 544)&quot; onmouseover=&quot;showTip(event, 'fs109', 544)&quot; class=&quot;i&quot;&gt;lp&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs110', 545)&quot; onmouseover=&quot;showTip(event, 'fs110', 545)&quot; class=&quot;i&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;s&quot;&gt;&amp;quot;Right&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs111', 546)&quot; onmouseover=&quot;showTip(event, 'fs111', 546)&quot; class=&quot;i&quot;&gt;rp&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            (&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, [])
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 547)&quot; onmouseover=&quot;showTip(event, 'fs112', 547)&quot; class=&quot;i&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 548)&quot; onmouseover=&quot;showTip(event, 'fs92', 548)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs106', 549)&quot; onmouseover=&quot;showTip(event, 'fs106', 549)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs104', 550)&quot; onmouseover=&quot;showTip(event, 'fs104', 550)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs105', 551)&quot; onmouseover=&quot;showTip(event, 'fs105', 551)&quot; class=&quot;i&quot;&gt;leaf&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs112', 552)&quot; onmouseover=&quot;showTip(event, 'fs112', 552)&quot; class=&quot;i&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, []) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;First element&amp;quot;&lt;/span&gt;
    | (&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs113', 553)&quot; onmouseover=&quot;showTip(event, 'fs113', 553)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;)  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 554)&quot; onmouseover=&quot;showTip(event, 'fs23', 554)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs114', 555)&quot; onmouseover=&quot;showTip(event, 'fs114', 555)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs113', 556)&quot; onmouseover=&quot;showTip(event, 'fs113', 556)&quot; class=&quot;i&quot;&gt;p&lt;/span&gt;
    | (&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;, _) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Not in Tree&amp;quot;&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs102', 557)&quot; onmouseover=&quot;showTip(event, 'fs102', 557)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 558)&quot; onmouseover=&quot;showTip(event, 'fs65', 558)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Left Left&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 559)&quot; onmouseover=&quot;showTip(event, 'fs102', 559)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 560)&quot; onmouseover=&quot;showTip(event, 'fs65', 560)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Left&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 561)&quot; onmouseover=&quot;showTip(event, 'fs102', 561)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 562)&quot; onmouseover=&quot;showTip(event, 'fs65', 562)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Left Right&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 563)&quot; onmouseover=&quot;showTip(event, 'fs102', 563)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 564)&quot; onmouseover=&quot;showTip(event, 'fs65', 564)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;First Element&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 565)&quot; onmouseover=&quot;showTip(event, 'fs102', 565)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 566)&quot; onmouseover=&quot;showTip(event, 'fs65', 566)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Right Left&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs102', 567)&quot; onmouseover=&quot;showTip(event, 'fs102', 567)&quot; class=&quot;f&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 568)&quot; onmouseover=&quot;showTip(event, 'fs65', 568)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Not in Tree&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In the solution I just transform every node into a tuple that contains two informations. A boolean that
contains the information if the child contains the searched element. And when it is &lt;code&gt;true&lt;/code&gt; the
node above prepend either &lt;code&gt;&quot;Left&quot;&lt;/code&gt; or &lt;code&gt;&quot;Right&quot;&lt;/code&gt; to the list. As an example, when we search for
&lt;code&gt;5&lt;/code&gt; we get the following transformations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016/catamorphisms/tree_path_5.svg&quot; alt=&quot;Tree with path to 5&quot; /&gt;&lt;/p&gt;
&lt;a name=&quot;tree-fold&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Fold for Tree&lt;/h2&gt;
&lt;p&gt;At last we want to look at &lt;code&gt;fold&lt;/code&gt;. As we learned so far, we don't need to implement a particular
tree traversal order. For &lt;code&gt;fold&lt;/code&gt; it is only important that we visit every node and we treat an
accumulator through the calculation. For implementing &lt;code&gt;fold&lt;/code&gt; we should just pick the easiest
or fastest way we can come up with.&lt;/p&gt;
&lt;p&gt;Up so far, including the other blog posts, I showed two ways how to achieve tail-recursion. Either
way through an accumulator or through a continuation function. But both ideas don't work
with our tree. The problem is that we don't just have a simple calculation that we can forward
as an accumulator, we always must traverse two child's for every node.&lt;/p&gt;
&lt;p&gt;The solution to fix that is that we manage the stack ourselves. This is the typical solution
how languages without proper tail-call-optimization handles recursion. But in the F#
case we don't need to switch completely to looping. We just make the stack part as an additional
value on the recursive inner loop function. We also could say, we use two accumulators. One
for the value we computed so far, and another that keeps track of task we still need to do later.&lt;/p&gt;
&lt;p&gt;So here is the idea. At first we identify what we actually need to do in the &lt;code&gt;Node&lt;/code&gt; case.
And they are three things we need to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process the current element&lt;/li&gt;
&lt;li&gt;Recurs on the left child&lt;/li&gt;
&lt;li&gt;Recurs on the right child&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We should pick a order of the operation so that only one task remains open. And this task is pushed
onto a stack that can be later processed. One way to achieve that is.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We process the current element&lt;/li&gt;
&lt;li&gt;We put the right child onto the stack&lt;/li&gt;
&lt;li&gt;We loop on the left child&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's give it a first try:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs115', 569)&quot; onmouseover=&quot;showTip(event, 'fs115', 569)&quot; class=&quot;f&quot;&gt;treeFold&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 570)&quot; onmouseover=&quot;showTip(event, 'fs116', 570)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 571)&quot; onmouseover=&quot;showTip(event, 'fs117', 571)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 572)&quot; onmouseover=&quot;showTip(event, 'fs69', 572)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 573)&quot; onmouseover=&quot;showTip(event, 'fs118', 573)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 574)&quot; onmouseover=&quot;showTip(event, 'fs117', 574)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 575)&quot; onmouseover=&quot;showTip(event, 'fs119', 575)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 576)&quot; onmouseover=&quot;showTip(event, 'fs69', 576)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 577)&quot; onmouseover=&quot;showTip(event, 'fs69', 577)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 578)&quot; onmouseover=&quot;showTip(event, 'fs59', 578)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 579)&quot; onmouseover=&quot;showTip(event, 'fs117', 579)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 580)&quot; onmouseover=&quot;showTip(event, 'fs60', 580)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 581)&quot; onmouseover=&quot;showTip(event, 'fs70', 581)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 582)&quot; onmouseover=&quot;showTip(event, 'fs71', 582)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 583)&quot; onmouseover=&quot;showTip(event, 'fs72', 583)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 584)&quot; onmouseover=&quot;showTip(event, 'fs118', 584)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs116', 585)&quot; onmouseover=&quot;showTip(event, 'fs116', 585)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 586)&quot; onmouseover=&quot;showTip(event, 'fs117', 586)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 587)&quot; onmouseover=&quot;showTip(event, 'fs70', 587)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs72', 588)&quot; onmouseover=&quot;showTip(event, 'fs72', 588)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 589)&quot; onmouseover=&quot;showTip(event, 'fs119', 589)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 590)&quot; onmouseover=&quot;showTip(event, 'fs71', 590)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs118', 591)&quot; onmouseover=&quot;showTip(event, 'fs118', 591)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 592)&quot; onmouseover=&quot;showTip(event, 'fs117', 592)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; [] &lt;span onmouseout=&quot;hideTip(event, 'fs69', 593)&quot; onmouseover=&quot;showTip(event, 'fs69', 593)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's test it:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs115', 594)&quot; onmouseover=&quot;showTip(event, 'fs115', 594)&quot; class=&quot;f&quot;&gt;treeFold&amp;#39;&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 595)&quot; onmouseover=&quot;showTip(event, 'fs120', 595)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 596)&quot; onmouseover=&quot;showTip(event, 'fs22', 596)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs121', 597)&quot; onmouseover=&quot;showTip(event, 'fs121', 597)&quot; class=&quot;f&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 598)&quot; onmouseover=&quot;showTip(event, 'fs22', 598)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) () &lt;span onmouseout=&quot;hideTip(event, 'fs65', 599)&quot; onmouseover=&quot;showTip(event, 'fs65', 599)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 4 2 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, that's not quite right, but I wrote it in this way so we can discuss what happens. This makes it
easier to understand the full solution. At first, if you find the short &lt;code&gt;Node&lt;/code&gt; case hard to understand,
you can expand it. The line:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) (&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;stack&lt;/span&gt;) &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;is the same as:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newAcc&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;stack&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newAcc&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;newStack&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But all in one, here are the things that are happening:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We enter the tree.&lt;/li&gt;
&lt;li&gt;We process element &lt;code&gt;4&lt;/code&gt;, by printing it &lt;code&gt;(folder acc x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The right child of &lt;code&gt;4&lt;/code&gt; is added to the stack &lt;code&gt;r :: stack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We loop on the left-child&lt;/li&gt;
&lt;li&gt;We process element &lt;code&gt;2&lt;/code&gt;, by printing it&lt;/li&gt;
&lt;li&gt;The right child of &lt;code&gt;2&lt;/code&gt; is added to the stack&lt;/li&gt;
&lt;li&gt;We loop on the left-child&lt;/li&gt;
&lt;li&gt;We process element &lt;code&gt;1&lt;/code&gt;, by printing it&lt;/li&gt;
&lt;li&gt;The right child of &lt;code&gt;1&lt;/code&gt; is added to the stack (a Leaf)&lt;/li&gt;
&lt;li&gt;We loop on the left-child&lt;/li&gt;
&lt;li&gt;We hit a Leaf, and we return &lt;code&gt;acc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what are we missing? Sure, we forgot to process the &lt;em&gt;right-child's&lt;/em&gt;. We put them all
onto the stack, but we never look at them. So what we need to do is to extend the &lt;code&gt;Leaf&lt;/code&gt; case.
Instead of immediately returning &lt;code&gt;acc&lt;/code&gt;, we first need to check if there are pending
trees in the &lt;code&gt;stack&lt;/code&gt;. If yes, we need to loop on those. Only if the &lt;code&gt;stack&lt;/code&gt; is empty
we can return &lt;code&gt;acc&lt;/code&gt;. So our final &lt;code&gt;treeFold&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 600)&quot; onmouseover=&quot;showTip(event, 'fs122', 600)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 601)&quot; onmouseover=&quot;showTip(event, 'fs116', 601)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 602)&quot; onmouseover=&quot;showTip(event, 'fs117', 602)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 603)&quot; onmouseover=&quot;showTip(event, 'fs69', 603)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 604)&quot; onmouseover=&quot;showTip(event, 'fs118', 604)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 605)&quot; onmouseover=&quot;showTip(event, 'fs117', 605)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 606)&quot; onmouseover=&quot;showTip(event, 'fs119', 606)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 607)&quot; onmouseover=&quot;showTip(event, 'fs69', 607)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 608)&quot; onmouseover=&quot;showTip(event, 'fs69', 608)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 609)&quot; onmouseover=&quot;showTip(event, 'fs59', 609)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 610)&quot; onmouseover=&quot;showTip(event, 'fs119', 610)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
            | []          &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 611)&quot; onmouseover=&quot;showTip(event, 'fs117', 611)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
            | &lt;span onmouseout=&quot;hideTip(event, 'fs69', 612)&quot; onmouseover=&quot;showTip(event, 'fs69', 612)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs119', 613)&quot; onmouseover=&quot;showTip(event, 'fs119', 613)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 614)&quot; onmouseover=&quot;showTip(event, 'fs118', 614)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 615)&quot; onmouseover=&quot;showTip(event, 'fs117', 615)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 616)&quot; onmouseover=&quot;showTip(event, 'fs119', 616)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 617)&quot; onmouseover=&quot;showTip(event, 'fs69', 617)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 618)&quot; onmouseover=&quot;showTip(event, 'fs60', 618)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 619)&quot; onmouseover=&quot;showTip(event, 'fs70', 619)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 620)&quot; onmouseover=&quot;showTip(event, 'fs71', 620)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 621)&quot; onmouseover=&quot;showTip(event, 'fs72', 621)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs118', 622)&quot; onmouseover=&quot;showTip(event, 'fs118', 622)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs116', 623)&quot; onmouseover=&quot;showTip(event, 'fs116', 623)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 624)&quot; onmouseover=&quot;showTip(event, 'fs117', 624)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 625)&quot; onmouseover=&quot;showTip(event, 'fs70', 625)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs72', 626)&quot; onmouseover=&quot;showTip(event, 'fs72', 626)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs119', 627)&quot; onmouseover=&quot;showTip(event, 'fs119', 627)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 628)&quot; onmouseover=&quot;showTip(event, 'fs71', 628)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs118', 629)&quot; onmouseover=&quot;showTip(event, 'fs118', 629)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 630)&quot; onmouseover=&quot;showTip(event, 'fs117', 630)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; [] &lt;span onmouseout=&quot;hideTip(event, 'fs69', 631)&quot; onmouseover=&quot;showTip(event, 'fs69', 631)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now we get all numbers printed.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs122', 632)&quot; onmouseover=&quot;showTip(event, 'fs122', 632)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs120', 633)&quot; onmouseover=&quot;showTip(event, 'fs120', 633)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 634)&quot; onmouseover=&quot;showTip(event, 'fs22', 634)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs121', 635)&quot; onmouseover=&quot;showTip(event, 'fs121', 635)&quot; class=&quot;f&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 636)&quot; onmouseover=&quot;showTip(event, 'fs22', 636)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) () &lt;span onmouseout=&quot;hideTip(event, 'fs65', 637)&quot; onmouseover=&quot;showTip(event, 'fs65', 637)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 4 2 1 3 6 5 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And if you noticed, this kind of tree-traversal is a pre-order tree traversal. But it is only pre-order
traversal by accident. I just thought of an easy way to traverse so we need to put as few things as possible
onto the &lt;code&gt;stack&lt;/code&gt; variable. Someone should not expect a specific tree traversal order for &lt;code&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;a name=&quot;benchmarking&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Some Benchmarking&lt;/h2&gt;
&lt;p&gt;I think some simple benchmarks are quite good. At first, we always talk about tail-recursion and
I provided ways to achieve it, but never looked at performance. And there are two things to say here.&lt;/p&gt;
&lt;p&gt;First, tail-recursion is not about performance. Yes, sometimes it also improves performance, but the
main point of tail-recursion is that we don't end up with stack overflows. We first care for
correctness, only then comes speed. If you think otherwise, then answer me the following question:
What exactly do we get out of a function that is theoretically fast, but practically we cannot
execute it because it crashes with a stack overflow? So the main point of tail-recursion is
Correctness, that it is &lt;em&gt;sometimes&lt;/em&gt; faster is more an additional benefit.&lt;/p&gt;
&lt;p&gt;Second, tail-recursion with a continuation approach how i used it with &lt;code&gt;foldBack&lt;/code&gt; is usually
&lt;strong&gt;slower&lt;/strong&gt; than pure recursion!&lt;/p&gt;
&lt;p&gt;All of those are important. At first, you shouldn't implement tail-recursion just because someone
told you it is better or faster. It not only can be slower, it also can be harder to understand
and to maintain. So you really should ask yourself if you really need tail-recursion. And
for a binary tree this question is already legit. If you create a binary tree that always balance
itself, then you will less likely run into any kind of problems with a non tail-recursive &lt;code&gt;cata&lt;/code&gt;
function.&lt;/p&gt;
&lt;p&gt;With a stack depth of 1 you can handle two values (empty and one value), with a stack depth
of 2 you can handle 4 values. 3 is already 8 values. So the amount of values doubles by just
increasing the depth by one. With a stack depth of 32, what is just peanuts, you already
can handle 4.294.967.296 values. Before you run into problems with the stack depth you run
into completely other problems! Even if you just save 32-bit integers just the integers alone
already need 16 GiB of memory, and that does not include the &lt;code&gt;Node(x,l,r)&lt;/code&gt; objects that also
consumes memory. So you should ask yourself if you really need a &lt;code&gt;fold&lt;/code&gt; or &lt;code&gt;foldback&lt;/code&gt; function
that are harder to develop and probably even can be slower!&lt;/p&gt;
&lt;p&gt;But let's see some benchmarks. First I create some helper functions for the creation of some trees.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 638)&quot; onmouseover=&quot;showTip(event, 'fs123', 638)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs124', 639)&quot; onmouseover=&quot;showTip(event, 'fs124', 639)&quot; class=&quot;f&quot;&gt;builder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 640)&quot; onmouseover=&quot;showTip(event, 'fs125', 640)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 641)&quot; onmouseover=&quot;showTip(event, 'fs126', 641)&quot; class=&quot;i&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 642)&quot; onmouseover=&quot;showTip(event, 'fs127', 642)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs128', 643)&quot; onmouseover=&quot;showTip(event, 'fs128', 643)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 644)&quot; onmouseover=&quot;showTip(event, 'fs129', 644)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs128', 645)&quot; onmouseover=&quot;showTip(event, 'fs128', 645)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs126', 646)&quot; onmouseover=&quot;showTip(event, 'fs126', 646)&quot; class=&quot;i&quot;&gt;depth&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs127', 647)&quot; onmouseover=&quot;showTip(event, 'fs127', 647)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs128', 648)&quot; onmouseover=&quot;showTip(event, 'fs128', 648)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs124', 649)&quot; onmouseover=&quot;showTip(event, 'fs124', 649)&quot; class=&quot;f&quot;&gt;builder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 650)&quot; onmouseover=&quot;showTip(event, 'fs129', 650)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;)
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs129', 651)&quot; onmouseover=&quot;showTip(event, 'fs129', 651)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs127', 652)&quot; onmouseover=&quot;showTip(event, 'fs127', 652)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs125', 653)&quot; onmouseover=&quot;showTip(event, 'fs125', 653)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 654)&quot; onmouseover=&quot;showTip(event, 'fs130', 654)&quot; class=&quot;f&quot;&gt;createLeftTree&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 655)&quot; onmouseover=&quot;showTip(event, 'fs123', 655)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 656)&quot; onmouseover=&quot;showTip(event, 'fs87', 656)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 657)&quot; onmouseover=&quot;showTip(event, 'fs61', 657)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 658)&quot; onmouseover=&quot;showTip(event, 'fs87', 658)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 659)&quot; onmouseover=&quot;showTip(event, 'fs59', 659)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 660)&quot; onmouseover=&quot;showTip(event, 'fs64', 660)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs131', 661)&quot; onmouseover=&quot;showTip(event, 'fs131', 661)&quot; class=&quot;f&quot;&gt;createRightTree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 662)&quot; onmouseover=&quot;showTip(event, 'fs123', 662)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 663)&quot; onmouseover=&quot;showTip(event, 'fs87', 663)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 664)&quot; onmouseover=&quot;showTip(event, 'fs61', 664)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 665)&quot; onmouseover=&quot;showTip(event, 'fs59', 665)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 666)&quot; onmouseover=&quot;showTip(event, 'fs87', 666)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 667)&quot; onmouseover=&quot;showTip(event, 'fs64', 667)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs132', 668)&quot; onmouseover=&quot;showTip(event, 'fs132', 668)&quot; class=&quot;f&quot;&gt;createBalanced&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs123', 669)&quot; onmouseover=&quot;showTip(event, 'fs123', 669)&quot; class=&quot;f&quot;&gt;createTree&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 670)&quot; onmouseover=&quot;showTip(event, 'fs87', 670)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 671)&quot; onmouseover=&quot;showTip(event, 'fs61', 671)&quot; class=&quot;f&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 672)&quot; onmouseover=&quot;showTip(event, 'fs87', 672)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 673)&quot; onmouseover=&quot;showTip(event, 'fs87', 673)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs64', 674)&quot; onmouseover=&quot;showTip(event, 'fs64', 674)&quot; class=&quot;f&quot;&gt;endNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So let's create some small trees with 10K nodes.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 675)&quot; onmouseover=&quot;showTip(event, 'fs133', 675)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs130', 676)&quot; onmouseover=&quot;showTip(event, 'fs130', 676)&quot; class=&quot;f&quot;&gt;createLeftTree&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 677)&quot; onmouseover=&quot;showTip(event, 'fs134', 677)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs131', 678)&quot; onmouseover=&quot;showTip(event, 'fs131', 678)&quot; class=&quot;f&quot;&gt;createRightTree&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Those trees are not balanced, but they can still be handled by &lt;code&gt;cata&lt;/code&gt; on my machine. But just benchmarking
one call is still too fast, so I create a &lt;code&gt;bench&lt;/code&gt; function that calls some code a specific amount of time.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs135', 679)&quot; onmouseover=&quot;showTip(event, 'fs135', 679)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 680)&quot; onmouseover=&quot;showTip(event, 'fs136', 680)&quot; class=&quot;i&quot;&gt;times&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs137', 681)&quot; onmouseover=&quot;showTip(event, 'fs137', 681)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs138', 682)&quot; onmouseover=&quot;showTip(event, 'fs138', 682)&quot; class=&quot;i&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs139', 683)&quot; onmouseover=&quot;showTip(event, 'fs139', 683)&quot; class=&quot;t&quot;&gt;Stopwatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs140', 684)&quot; onmouseover=&quot;showTip(event, 'fs140', 684)&quot; class=&quot;f&quot;&gt;StartNew&lt;/span&gt;()
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs141', 685)&quot; onmouseover=&quot;showTip(event, 'fs141', 685)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs136', 686)&quot; onmouseover=&quot;showTip(event, 'fs136', 686)&quot; class=&quot;i&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs137', 687)&quot; onmouseover=&quot;showTip(event, 'fs137', 687)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; () &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs142', 688)&quot; onmouseover=&quot;showTip(event, 'fs142', 688)&quot; class=&quot;f&quot;&gt;ignore&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs138', 689)&quot; onmouseover=&quot;showTip(event, 'fs138', 689)&quot; class=&quot;i&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs143', 690)&quot; onmouseover=&quot;showTip(event, 'fs143', 690)&quot; class=&quot;f&quot;&gt;Stop&lt;/span&gt;()
    &lt;span onmouseout=&quot;hideTip(event, 'fs144', 691)&quot; onmouseover=&quot;showTip(event, 'fs144', 691)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Timing: &lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%O&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs138', 692)&quot; onmouseover=&quot;showTip(event, 'fs138', 692)&quot; class=&quot;i&quot;&gt;sw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs145', 693)&quot; onmouseover=&quot;showTip(event, 'fs145', 693)&quot; class=&quot;i&quot;&gt;Elapsed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So, when we sum up every 10.000 nodes with &lt;code&gt;treeCata&lt;/code&gt; and do that 10.000 times, which timings do we
get for &lt;code&gt;treeCata&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt;? I run every &lt;code&gt;bench&lt;/code&gt; line twice.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs135', 694)&quot; onmouseover=&quot;showTip(event, 'fs135', 694)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 695)&quot; onmouseover=&quot;showTip(event, 'fs77', 695)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 696)&quot; onmouseover=&quot;showTip(event, 'fs22', 696)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 697)&quot; onmouseover=&quot;showTip(event, 'fs84', 697)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 698)&quot; onmouseover=&quot;showTip(event, 'fs85', 698)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 699)&quot; onmouseover=&quot;showTip(event, 'fs22', 699)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 700)&quot; onmouseover=&quot;showTip(event, 'fs84', 700)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 701)&quot; onmouseover=&quot;showTip(event, 'fs85', 701)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs133', 702)&quot; onmouseover=&quot;showTip(event, 'fs133', 702)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.290, CPU: 00:00:04.296, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.292, CPU: 00:00:04.265, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 703)&quot; onmouseover=&quot;showTip(event, 'fs135', 703)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs77', 704)&quot; onmouseover=&quot;showTip(event, 'fs77', 704)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 705)&quot; onmouseover=&quot;showTip(event, 'fs22', 705)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 706)&quot; onmouseover=&quot;showTip(event, 'fs84', 706)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 707)&quot; onmouseover=&quot;showTip(event, 'fs85', 707)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 708)&quot; onmouseover=&quot;showTip(event, 'fs22', 708)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 709)&quot; onmouseover=&quot;showTip(event, 'fs84', 709)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 710)&quot; onmouseover=&quot;showTip(event, 'fs85', 710)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs134', 711)&quot; onmouseover=&quot;showTip(event, 'fs134', 711)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.145, CPU: 00:00:04.140, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.144, CPU: 00:00:04.140, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 712)&quot; onmouseover=&quot;showTip(event, 'fs135', 712)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 713)&quot; onmouseover=&quot;showTip(event, 'fs92', 713)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 714)&quot; onmouseover=&quot;showTip(event, 'fs22', 714)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 715)&quot; onmouseover=&quot;showTip(event, 'fs84', 715)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 716)&quot; onmouseover=&quot;showTip(event, 'fs85', 716)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 717)&quot; onmouseover=&quot;showTip(event, 'fs22', 717)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 718)&quot; onmouseover=&quot;showTip(event, 'fs84', 718)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 719)&quot; onmouseover=&quot;showTip(event, 'fs85', 719)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs133', 720)&quot; onmouseover=&quot;showTip(event, 'fs133', 720)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:07.518, CPU: 00:00:07.546, GC gen0: 1617, gen1: 1616, gen2: 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:07.448, CPU: 00:00:07.437, GC gen0: 1621, gen1: 1621, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 721)&quot; onmouseover=&quot;showTip(event, 'fs135', 721)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs92', 722)&quot; onmouseover=&quot;showTip(event, 'fs92', 722)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 723)&quot; onmouseover=&quot;showTip(event, 'fs22', 723)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 724)&quot; onmouseover=&quot;showTip(event, 'fs84', 724)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 725)&quot; onmouseover=&quot;showTip(event, 'fs85', 725)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 726)&quot; onmouseover=&quot;showTip(event, 'fs22', 726)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 727)&quot; onmouseover=&quot;showTip(event, 'fs84', 727)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 728)&quot; onmouseover=&quot;showTip(event, 'fs85', 728)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs134', 729)&quot; onmouseover=&quot;showTip(event, 'fs134', 729)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:08.076, CPU: 00:00:08.078, GC gen0: 1628, gen1: 1628, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:08.146, CPU: 00:00:08.140, GC gen0: 1625, gen1: 1625, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;So overall, the &lt;code&gt;foldBack&lt;/code&gt; result are disastrous. At first, creating a lot of continuation
functions creates a lot of garbage, all those closure functions needs to be managed on
the heap. As a result the garbage collector runs quite often. 1600 gen0 and 1600 gen1 clean-ups!
Overall &lt;code&gt;foldBack&lt;/code&gt; is tail-recursive, but takes the double of time to finish compared
to the &lt;code&gt;cata&lt;/code&gt; functions. On top, the &lt;code&gt;cata&lt;/code&gt; functions trigger not a single garbage collection
clean-up, that is probably also the reason why they are faster.&lt;/p&gt;
&lt;p&gt;But we also should consider &lt;code&gt;treeFold&lt;/code&gt;. Actually just summing up the nodes is also a task
that can be done by &lt;code&gt;treeFold&lt;/code&gt;, so how fast is &lt;code&gt;treeFold&lt;/code&gt;?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs135', 730)&quot; onmouseover=&quot;showTip(event, 'fs135', 730)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 731)&quot; onmouseover=&quot;showTip(event, 'fs122', 731)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 732)&quot; onmouseover=&quot;showTip(event, 'fs133', 732)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.882, CPU: 00:00:02.890, GC gen0: 508, gen1: 508, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.864, CPU: 00:00:02.859, GC gen0: 508, gen1: 508, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 733)&quot; onmouseover=&quot;showTip(event, 'fs135', 733)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs122', 734)&quot; onmouseover=&quot;showTip(event, 'fs122', 734)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 735)&quot; onmouseover=&quot;showTip(event, 'fs134', 735)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.830, CPU: 00:00:02.812, GC gen0: 508, gen1: 508, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.824, CPU: 00:00:02.828, GC gen0: 509, gen1: 509, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Those results are quite interesting. They are faster as &lt;code&gt;treeCata&lt;/code&gt; and &lt;code&gt;treeFoldback&lt;/code&gt;. I
expected that it is faster as &lt;code&gt;foldBack&lt;/code&gt;, because just handling a stack of trees should
be way more efficient as handling a lot of closure functions. But even the fact that
they still trigger quite a lot of garbage clean-ups, it is still nearly twice as fast
as the &lt;code&gt;cata&lt;/code&gt; function! By the way, we can even get the amount of GCs down. Actually
there is no point in using an immutable stack. We also can use an mutable stack
in &lt;code&gt;fold&lt;/code&gt;. This makes the implementation a little bit harder again.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs146', 736)&quot; onmouseover=&quot;showTip(event, 'fs146', 736)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs116', 737)&quot; onmouseover=&quot;showTip(event, 'fs116', 737)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 738)&quot; onmouseover=&quot;showTip(event, 'fs117', 738)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 739)&quot; onmouseover=&quot;showTip(event, 'fs69', 739)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs147', 740)&quot; onmouseover=&quot;showTip(event, 'fs147', 740)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 741)&quot; onmouseover=&quot;showTip(event, 'fs2', 741)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs148', 742)&quot; onmouseover=&quot;showTip(event, 'fs148', 742)&quot; class=&quot;i&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs149', 743)&quot; onmouseover=&quot;showTip(event, 'fs149', 743)&quot; class=&quot;i&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs150', 744)&quot; onmouseover=&quot;showTip(event, 'fs150', 744)&quot; class=&quot;t&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;_&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;()
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs151', 745)&quot; onmouseover=&quot;showTip(event, 'fs151', 745)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 746)&quot; onmouseover=&quot;showTip(event, 'fs117', 746)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 747)&quot; onmouseover=&quot;showTip(event, 'fs69', 747)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 748)&quot; onmouseover=&quot;showTip(event, 'fs69', 748)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs59', 749)&quot; onmouseover=&quot;showTip(event, 'fs59', 749)&quot; class=&quot;p&quot;&gt;Leaf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs147', 750)&quot; onmouseover=&quot;showTip(event, 'fs147', 750)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs152', 751)&quot; onmouseover=&quot;showTip(event, 'fs152', 751)&quot; class=&quot;i&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs151', 752)&quot; onmouseover=&quot;showTip(event, 'fs151', 752)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 753)&quot; onmouseover=&quot;showTip(event, 'fs117', 753)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs147', 754)&quot; onmouseover=&quot;showTip(event, 'fs147', 754)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs153', 755)&quot; onmouseover=&quot;showTip(event, 'fs153', 755)&quot; class=&quot;f&quot;&gt;Pop&lt;/span&gt;())
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 756)&quot; onmouseover=&quot;showTip(event, 'fs117', 756)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt;
        | &lt;span onmouseout=&quot;hideTip(event, 'fs60', 757)&quot; onmouseover=&quot;showTip(event, 'fs60', 757)&quot; class=&quot;p&quot;&gt;Node&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs70', 758)&quot; onmouseover=&quot;showTip(event, 'fs70', 758)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs71', 759)&quot; onmouseover=&quot;showTip(event, 'fs71', 759)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs72', 760)&quot; onmouseover=&quot;showTip(event, 'fs72', 760)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs147', 761)&quot; onmouseover=&quot;showTip(event, 'fs147', 761)&quot; class=&quot;i&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs154', 762)&quot; onmouseover=&quot;showTip(event, 'fs154', 762)&quot; class=&quot;f&quot;&gt;Push&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 763)&quot; onmouseover=&quot;showTip(event, 'fs72', 763)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs151', 764)&quot; onmouseover=&quot;showTip(event, 'fs151', 764)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs116', 765)&quot; onmouseover=&quot;showTip(event, 'fs116', 765)&quot; class=&quot;f&quot;&gt;folder&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 766)&quot; onmouseover=&quot;showTip(event, 'fs117', 766)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 767)&quot; onmouseover=&quot;showTip(event, 'fs70', 767)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs71', 768)&quot; onmouseover=&quot;showTip(event, 'fs71', 768)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs151', 769)&quot; onmouseover=&quot;showTip(event, 'fs151', 769)&quot; class=&quot;f&quot;&gt;loop&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs117', 770)&quot; onmouseover=&quot;showTip(event, 'fs117', 770)&quot; class=&quot;i&quot;&gt;acc&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs69', 771)&quot; onmouseover=&quot;showTip(event, 'fs69', 771)&quot; class=&quot;i&quot;&gt;tree&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Let's see how it compares to &lt;code&gt;treeFold&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs135', 772)&quot; onmouseover=&quot;showTip(event, 'fs135', 772)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs146', 773)&quot; onmouseover=&quot;showTip(event, 'fs146', 773)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs133', 774)&quot; onmouseover=&quot;showTip(event, 'fs133', 774)&quot; class=&quot;i&quot;&gt;smallL&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.018, CPU: 00:00:04.015, GC gen0: 416, gen1: 416, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.029, CPU: 00:00:04.015, GC gen0: 416, gen1: 416, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs135', 775)&quot; onmouseover=&quot;showTip(event, 'fs135', 775)&quot; class=&quot;f&quot;&gt;bench&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs146', 776)&quot; onmouseover=&quot;showTip(event, 'fs146', 776)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs134', 777)&quot; onmouseover=&quot;showTip(event, 'fs134', 777)&quot; class=&quot;i&quot;&gt;smallR&lt;/span&gt;)
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:04.000, CPU: 00:00:03.984, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:03.994, CPU: 00:00:03.953, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Also, this is not what I expected, it becomes slower to the speed of the &lt;code&gt;cata&lt;/code&gt; function. And
in the &lt;code&gt;smallL&lt;/code&gt; case it still triggers a lot of GC clean-ups. On a tree only with right nodes
we don't have any clean-ups because we don't save anything in the stack. It is still quite interesting
to see that the timing with and without GC clean-ups are the same. So it seems the GC clean-ups are
so fast that they overall don't matter at all for the overall timing. At least on my machine.&lt;/p&gt;
&lt;p&gt;So, how are the timings for really big but balanced trees? A balanced tree with a depth
of 25 contains 33.554.431 entries. How are the timings here?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 778)&quot; onmouseover=&quot;showTip(event, 'fs155', 778)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs132', 779)&quot; onmouseover=&quot;showTip(event, 'fs132', 779)&quot; class=&quot;f&quot;&gt;createBalanced&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 780)&quot; onmouseover=&quot;showTip(event, 'fs156', 780)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 781)&quot; onmouseover=&quot;showTip(event, 'fs22', 781)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 782)&quot; onmouseover=&quot;showTip(event, 'fs84', 782)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 783)&quot; onmouseover=&quot;showTip(event, 'fs85', 783)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 784)&quot; onmouseover=&quot;showTip(event, 'fs22', 784)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 785)&quot; onmouseover=&quot;showTip(event, 'fs84', 785)&quot; class=&quot;i&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 786)&quot; onmouseover=&quot;showTip(event, 'fs85', 786)&quot; class=&quot;i&quot;&gt;r&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs77', 787)&quot; onmouseover=&quot;showTip(event, 'fs77', 787)&quot; class=&quot;f&quot;&gt;treeCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 788)&quot; onmouseover=&quot;showTip(event, 'fs156', 788)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 789)&quot; onmouseover=&quot;showTip(event, 'fs155', 789)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.242, CPU: 00:00:01.234, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.239, CPU: 00:00:01.218, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs92', 790)&quot; onmouseover=&quot;showTip(event, 'fs92', 790)&quot; class=&quot;f&quot;&gt;treeFoldBack&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs156', 791)&quot; onmouseover=&quot;showTip(event, 'fs156', 791)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 792)&quot; onmouseover=&quot;showTip(event, 'fs155', 792)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.501, CPU: 00:00:02.500, GC gen0: 556, gen1: 555, gen2: 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:02.451, CPU: 00:00:02.453, GC gen0: 555, gen1: 555, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs122', 793)&quot; onmouseover=&quot;showTip(event, 'fs122', 793)&quot; class=&quot;f&quot;&gt;treeFold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 794)&quot; onmouseover=&quot;showTip(event, 'fs155', 794)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.000, CPU: 00:00:00.968, GC gen0: 171, gen1: 171, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.000, CPU: 00:00:01.000, GC gen0: 171, gen1: 171, gen2: 0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs146', 795)&quot; onmouseover=&quot;showTip(event, 'fs146', 795)&quot; class=&quot;f&quot;&gt;treeFoldStack&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs155', 796)&quot; onmouseover=&quot;showTip(event, 'fs155', 796)&quot; class=&quot;i&quot;&gt;balanced25&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.418, CPU: 00:00:01.421, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Real: 00:00:01.412, CPU: 00:00:01.406, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;All in one, the &lt;code&gt;cata&lt;/code&gt; function overall is usually the easiest to implement, in its performance it is
also quite good, at least better as a naive implementation with continuation functions. Because
most memory get handled by the stack, it also don't causes garbage collection.&lt;/p&gt;
&lt;p&gt;An implementation with a mutable stack also can be efficient in terms of garbage collection, but at least
on my machine it is still slower compared to the pure recursive version.&lt;/p&gt;
&lt;p&gt;As an overall result you shouldn't abandon the &lt;code&gt;cata&lt;/code&gt; function, just because you fear that
non tail-recursive functions are automatically slower. Usually they are very easy to implement
and the speed is quite good. Instead you should consider if you expect problems with the stack depth.
When you create balanced trees this is quite uncommon that you run into problems with the stack depth.&lt;/p&gt;
&lt;p&gt;But with a type like a list that has linear recursion, where every element increases the stack depth
by one, you should consider more time in writing tail-recursive functions.&lt;/p&gt;
&lt;a name=&quot;markdown&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Markdown&lt;/h2&gt;
&lt;p&gt;Up so far I only talked about lists and binary trees, but both types basically contain everything
you need to know. Any other type is basically just repetition of what was said so far. As a last
example I want to show the small Markdown example that I created in the
&lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic-Data Types&lt;/a&gt; article. It is not a full description of the Markdown definition,
but is good enough as an example.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs157', 797)&quot; onmouseover=&quot;showTip(event, 'fs157', 797)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs158', 798)&quot; onmouseover=&quot;showTip(event, 'fs158', 798)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs159', 799)&quot; onmouseover=&quot;showTip(event, 'fs159', 799)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs160', 800)&quot; onmouseover=&quot;showTip(event, 'fs160', 800)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs161', 801)&quot; onmouseover=&quot;showTip(event, 'fs161', 801)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs160', 802)&quot; onmouseover=&quot;showTip(event, 'fs160', 802)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs162', 803)&quot; onmouseover=&quot;showTip(event, 'fs162', 803)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs160', 804)&quot; onmouseover=&quot;showTip(event, 'fs160', 804)&quot; class=&quot;t&quot;&gt;string&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs163', 805)&quot; onmouseover=&quot;showTip(event, 'fs163', 805)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs157', 806)&quot; onmouseover=&quot;showTip(event, 'fs157', 806)&quot; class=&quot;t&quot;&gt;Markdown&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 807)&quot; onmouseover=&quot;showTip(event, 'fs41', 807)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Our Markdown definition contains 4 non-recursive cases and one recursive case. We just did what we did
so far. We create a &lt;code&gt;cata&lt;/code&gt; function that expects a function for every case. As &lt;code&gt;NewLine&lt;/code&gt; contains no
data, we can just expect a plain value.&lt;/p&gt;
&lt;p&gt;The recursive element is quite different from what we have seen so far. Instead of a single recursive
element we have a list of recursive elements. But that shouldn't be much of a difference. We just
call the &lt;code&gt;recurs&lt;/code&gt; function for every element in the list with &lt;code&gt;List.map&lt;/code&gt;. Overall we end up
with the following &lt;code&gt;cata&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs164', 808)&quot; onmouseover=&quot;showTip(event, 'fs164', 808)&quot; class=&quot;f&quot;&gt;markCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 809)&quot; onmouseover=&quot;showTip(event, 'fs165', 809)&quot; class=&quot;i&quot;&gt;newline&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs166', 810)&quot; onmouseover=&quot;showTip(event, 'fs166', 810)&quot; class=&quot;f&quot;&gt;literal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 811)&quot; onmouseover=&quot;showTip(event, 'fs167', 811)&quot; class=&quot;f&quot;&gt;bold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 812)&quot; onmouseover=&quot;showTip(event, 'fs168', 812)&quot; class=&quot;f&quot;&gt;code&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 813)&quot; onmouseover=&quot;showTip(event, 'fs169', 813)&quot; class=&quot;f&quot;&gt;block&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 814)&quot; onmouseover=&quot;showTip(event, 'fs170', 814)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs171', 815)&quot; onmouseover=&quot;showTip(event, 'fs171', 815)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs164', 816)&quot; onmouseover=&quot;showTip(event, 'fs164', 816)&quot; class=&quot;f&quot;&gt;markCata&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 817)&quot; onmouseover=&quot;showTip(event, 'fs165', 817)&quot; class=&quot;i&quot;&gt;newline&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs166', 818)&quot; onmouseover=&quot;showTip(event, 'fs166', 818)&quot; class=&quot;f&quot;&gt;literal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 819)&quot; onmouseover=&quot;showTip(event, 'fs167', 819)&quot; class=&quot;f&quot;&gt;bold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 820)&quot; onmouseover=&quot;showTip(event, 'fs168', 820)&quot; class=&quot;f&quot;&gt;code&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 821)&quot; onmouseover=&quot;showTip(event, 'fs169', 821)&quot; class=&quot;f&quot;&gt;block&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs170', 822)&quot; onmouseover=&quot;showTip(event, 'fs170', 822)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs158', 823)&quot; onmouseover=&quot;showTip(event, 'fs158', 823)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs165', 824)&quot; onmouseover=&quot;showTip(event, 'fs165', 824)&quot; class=&quot;i&quot;&gt;newline&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs159', 825)&quot; onmouseover=&quot;showTip(event, 'fs159', 825)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt;    &lt;span onmouseout=&quot;hideTip(event, 'fs172', 826)&quot; onmouseover=&quot;showTip(event, 'fs172', 826)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs166', 827)&quot; onmouseover=&quot;showTip(event, 'fs166', 827)&quot; class=&quot;f&quot;&gt;literal&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 828)&quot; onmouseover=&quot;showTip(event, 'fs172', 828)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs161', 829)&quot; onmouseover=&quot;showTip(event, 'fs161', 829)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt;       &lt;span onmouseout=&quot;hideTip(event, 'fs172', 830)&quot; onmouseover=&quot;showTip(event, 'fs172', 830)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs167', 831)&quot; onmouseover=&quot;showTip(event, 'fs167', 831)&quot; class=&quot;f&quot;&gt;bold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 832)&quot; onmouseover=&quot;showTip(event, 'fs172', 832)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs162', 833)&quot; onmouseover=&quot;showTip(event, 'fs162', 833)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 834)&quot; onmouseover=&quot;showTip(event, 'fs172', 834)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs168', 835)&quot; onmouseover=&quot;showTip(event, 'fs168', 835)&quot; class=&quot;f&quot;&gt;code&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 836)&quot; onmouseover=&quot;showTip(event, 'fs172', 836)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs163', 837)&quot; onmouseover=&quot;showTip(event, 'fs163', 837)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt;      &lt;span onmouseout=&quot;hideTip(event, 'fs173', 838)&quot; onmouseover=&quot;showTip(event, 'fs173', 838)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs169', 839)&quot; onmouseover=&quot;showTip(event, 'fs169', 839)&quot; class=&quot;f&quot;&gt;block&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs4', 840)&quot; onmouseover=&quot;showTip(event, 'fs4', 840)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs174', 841)&quot; onmouseover=&quot;showTip(event, 'fs174', 841)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs171', 842)&quot; onmouseover=&quot;showTip(event, 'fs171', 842)&quot; class=&quot;f&quot;&gt;recurs&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs173', 843)&quot; onmouseover=&quot;showTip(event, 'fs173', 843)&quot; class=&quot;i&quot;&gt;doc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Do we need a &lt;code&gt;fold&lt;/code&gt; or &lt;code&gt;foldBack&lt;/code&gt;? Well, I don't know you, but I don't think we ever see a markdown
document that has some ten thousand of nested blocks so recursion becomes a problem. Probably even
a nesting more than 5 is already rare. So overall I think writing &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldBack&lt;/code&gt; is probably
just a waste of time. So let's once again write a function that turns a markdown document into
HTML.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs175', 844)&quot; onmouseover=&quot;showTip(event, 'fs175', 844)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs176', 845)&quot; onmouseover=&quot;showTip(event, 'fs176', 845)&quot; class=&quot;f&quot;&gt;escape&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 846)&quot; onmouseover=&quot;showTip(event, 'fs2', 846)&quot; class=&quot;i&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs177', 847)&quot; onmouseover=&quot;showTip(event, 'fs177', 847)&quot; class=&quot;i&quot;&gt;Web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs178', 848)&quot; onmouseover=&quot;showTip(event, 'fs178', 848)&quot; class=&quot;t&quot;&gt;HttpUtility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs179', 849)&quot; onmouseover=&quot;showTip(event, 'fs179', 849)&quot; class=&quot;f&quot;&gt;HtmlEncode&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 850)&quot; onmouseover=&quot;showTip(event, 'fs180', 850)&quot; class=&quot;f&quot;&gt;wrap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 851)&quot; onmouseover=&quot;showTip(event, 'fs181', 851)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 852)&quot; onmouseover=&quot;showTip(event, 'fs172', 852)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs95', 853)&quot; onmouseover=&quot;showTip(event, 'fs95', 853)&quot; class=&quot;f&quot;&gt;sprintf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 854)&quot; onmouseover=&quot;showTip(event, 'fs181', 854)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs172', 855)&quot; onmouseover=&quot;showTip(event, 'fs172', 855)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 856)&quot; onmouseover=&quot;showTip(event, 'fs181', 856)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs182', 857)&quot; onmouseover=&quot;showTip(event, 'fs182', 857)&quot; class=&quot;f&quot;&gt;wrapEscape&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 858)&quot; onmouseover=&quot;showTip(event, 'fs181', 858)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs180', 859)&quot; onmouseover=&quot;showTip(event, 'fs180', 859)&quot; class=&quot;f&quot;&gt;wrap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs181', 860)&quot; onmouseover=&quot;showTip(event, 'fs181', 860)&quot; class=&quot;i&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs176', 861)&quot; onmouseover=&quot;showTip(event, 'fs176', 861)&quot; class=&quot;f&quot;&gt;escape&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs164', 862)&quot; onmouseover=&quot;showTip(event, 'fs164', 862)&quot; class=&quot;f&quot;&gt;markCata&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs176', 863)&quot; onmouseover=&quot;showTip(event, 'fs176', 863)&quot; class=&quot;f&quot;&gt;escape&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs182', 864)&quot; onmouseover=&quot;showTip(event, 'fs182', 864)&quot; class=&quot;f&quot;&gt;wrapEscape&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs182', 865)&quot; onmouseover=&quot;showTip(event, 'fs182', 865)&quot; class=&quot;f&quot;&gt;wrapEscape&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs180', 866)&quot; onmouseover=&quot;showTip(event, 'fs180', 866)&quot; class=&quot;f&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 867)&quot; onmouseover=&quot;showTip(event, 'fs23', 867)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs114', 868)&quot; onmouseover=&quot;showTip(event, 'fs114', 868)&quot; class=&quot;f&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably there isn't much to say here. The &lt;code&gt;escape&lt;/code&gt; function correctly escapes HTML characters.
As I always need to wrap string into tags I just created a &lt;code&gt;wrap&lt;/code&gt; function that I can pass a
&lt;em&gt;tag&lt;/em&gt; and a &lt;em&gt;string&lt;/em&gt; that does that. But I need a version that escapes the string, and one that
doesn't. The last one is important for a recursive case. Because we don't want to escape the HTML
tags itself. The arguments of the &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;wrapEscape&lt;/code&gt; function are chosen in a way so I can
use currying, so I don't need to create a lot of lambda expressions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs183', 869)&quot; onmouseover=&quot;showTip(event, 'fs183', 869)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs163', 870)&quot; onmouseover=&quot;showTip(event, 'fs163', 870)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
        &lt;span onmouseout=&quot;hideTip(event, 'fs159', 871)&quot; onmouseover=&quot;showTip(event, 'fs159', 871)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs161', 872)&quot; onmouseover=&quot;showTip(event, 'fs161', 872)&quot; class=&quot;p&quot;&gt;Bold&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs158', 873)&quot; onmouseover=&quot;showTip(event, 'fs158', 873)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs159', 874)&quot; onmouseover=&quot;showTip(event, 'fs159', 874)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;InlineCode of&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs162', 875)&quot; onmouseover=&quot;showTip(event, 'fs162', 875)&quot; class=&quot;p&quot;&gt;InlineCode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;let sum x y = x + y&amp;quot;&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs158', 876)&quot; onmouseover=&quot;showTip(event, 'fs158', 876)&quot; class=&quot;p&quot;&gt;NewLine&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs163', 877)&quot; onmouseover=&quot;showTip(event, 'fs163', 877)&quot; class=&quot;p&quot;&gt;Block&lt;/span&gt; [
            &lt;span onmouseout=&quot;hideTip(event, 'fs159', 878)&quot; onmouseover=&quot;showTip(event, 'fs159', 878)&quot; class=&quot;p&quot;&gt;Literal&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This is the end with some &amp;lt;html&amp;gt;that should be escaped&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;
        ]
    ]

&lt;span onmouseout=&quot;hideTip(event, 'fs175', 879)&quot; onmouseover=&quot;showTip(event, 'fs175', 879)&quot; class=&quot;f&quot;&gt;produceHtml&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs183', 880)&quot; onmouseover=&quot;showTip(event, 'fs183', 880)&quot; class=&quot;i&quot;&gt;document&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// &amp;quot;&amp;lt;p&amp;gt;Hello&amp;lt;strong&amp;gt;World!&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;InlineCode of&amp;lt;code&amp;gt;let sum x y = x + y&amp;lt;/code&amp;gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//  &amp;lt;p&amp;gt;This is the end with some &amp;amp;lt;html&amp;amp;gt;that should be escaped&amp;amp;lt;/html&amp;amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;We have seen how to create a &lt;code&gt;cata&lt;/code&gt; function, and we learned that &lt;code&gt;foldBack&lt;/code&gt; is just &lt;code&gt;cata&lt;/code&gt;
written tail-recursive. For the &lt;code&gt;fold&lt;/code&gt; implementation of the tree, i choosed another way to
create a tail-recursive function that manages the stack directly.&lt;/p&gt;
&lt;p&gt;In benchmarking we also saw that the last way is also quite better in terms of speed and
garbage collection compared to a continuation approach. With a mutable stack we can even further
eliminate garbage collection cleanup.&lt;/p&gt;
&lt;p&gt;But overall we have seen that &lt;code&gt;cata&lt;/code&gt; is very fast and it doesn't mean that tail-recursion
is automatically better or faster.&lt;/p&gt;
&lt;a name=&quot;further&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharpforfunandprofit.com/series/recursive-types-and-folds.html&quot;&gt;Recursive types and folds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lorgonblog.wordpress.com/2008/04/05/catamorphisms-part-one/&quot;&gt;Catamorphisms, part one&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;comments&quot;&gt;&lt;/a&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;namespace System.Diagnostics&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;a&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Empty&lt;br /&gt;&amp;#160;&amp;#160;| Cons of head: &amp;#39;a * tail: List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;union case List.Empty: List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;union case List.Cons: head: &amp;#39;a * tail: List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val empty : List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.empty&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val cons : h:&amp;#39;a -&amp;gt; t:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.cons&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val h : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val t : List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val xs : obj&lt;br /&gt;&lt;br /&gt;Full name: catamorphisms.xs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val l1 : List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.l1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val l2 : List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.l2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val l3 : List&amp;lt;string&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.l3&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val listLength&amp;#39; : list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listLength&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;Multiple items&lt;br /&gt;val list : List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val listSum&amp;#39; : _arg1:List&amp;lt;int&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listSum&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val h : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val t : List&amp;lt;int&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val listMap&amp;#39; : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; _arg1:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listMap&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;module String&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val length : str:string -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.length&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val listSnoc&amp;#39; : x:&amp;#39;a -&amp;gt; _arg1:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listSnoc&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val listCata&amp;#39; : fEmpty:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fCons:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; _arg1:List&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val fEmpty : (unit -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val fCons : (&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val h : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val t : List&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val listLength&amp;#39;&amp;#39; : list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listLength&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val t : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val listCata&amp;#39;&amp;#39; : fEmpty:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fCons:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; list:List&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;Multiple items&lt;br /&gt;val list : List&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val recurs : (List&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val listCata&amp;#39;&amp;#39;&amp;#39; : empty:&amp;#39;State -&amp;gt; fCons:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&amp;#39;&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val empty : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val fCons : (&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val recurs : (List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val listCata : fCons:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.listCata&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val state : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val listLength : list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listLength&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val acc : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val listSum : list:List&amp;lt;int&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.listSum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;Multiple items&lt;br /&gt;val list : List&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val listMap : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listMap&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val acc : List&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val listSnoc : x:&amp;#39;a -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; List&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.listSnoc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val acc : List&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val listFoldBack : fCons:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.listFoldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val loop : (List&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; (&amp;#39;State -&amp;gt; &amp;#39;b) -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val cont : (&amp;#39;State -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val racc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val id : x:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.id&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;type Tree&amp;lt;&amp;#39;a&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Leaf&lt;br /&gt;&amp;#160;&amp;#160;| Node of &amp;#39;a * Tree&amp;lt;&amp;#39;a&amp;gt; * Tree&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Tree&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;union case Tree.Leaf: Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;union case Tree.Node: &amp;#39;a * Tree&amp;lt;&amp;#39;a&amp;gt; * Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;val node : x:&amp;#39;a -&amp;gt; l:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; r:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Tree&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.node&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;val l : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;val r : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;val endNode : x:&amp;#39;a -&amp;gt; Tree&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.endNode&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val tree : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.tree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val treeCata&amp;#39; : fLeaf:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fNode:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val fLeaf : (unit -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val fNode : (&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val tree : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;val x : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val l : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val r : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;val treeCata&amp;#39;&amp;#39; : fLeaf:(unit -&amp;gt; &amp;#39;a) -&amp;gt; fNode:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;val recurs : (Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;val treeCata&amp;#39;&amp;#39;&amp;#39; : leaf:&amp;#39;a -&amp;gt; fNode:(&amp;#39;b -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&amp;#39;&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val leaf : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;val treeCata : folder:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; acc:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.treeCata&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;val tree : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val acc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val recurs : (Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; &amp;#39;State)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val t : Tree&amp;lt;&amp;#39;a&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val treeLength : tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.treeLength&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val l : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val r : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;val treeSum : tree:Tree&amp;lt;int&amp;gt; -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.treeSum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val tree : Tree&amp;lt;int&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs88&quot;&gt;val treeMap : f:(&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.treeMap&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs89&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs90&quot;&gt;val mutable acc : int&lt;br /&gt;&lt;br /&gt;Full name: Main.acc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs91&quot;&gt;val foldBack : folder:(&amp;#39;T -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; list:&amp;#39;T list -&amp;gt; state:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.foldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs92&quot;&gt;val treeFoldBack : folder:(&amp;#39;a -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State -&amp;gt; &amp;#39;State) -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; acc:&amp;#39;State -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFoldBack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs93&quot;&gt;val loop : (Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; (&amp;#39;State -&amp;gt; &amp;#39;b) -&amp;gt; &amp;#39;b)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs94&quot;&gt;val lacc : &amp;#39;State&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs95&quot;&gt;val sprintf : format:Printf.StringFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.sprintf&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs96&quot;&gt;val ordered : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.ordered&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs97&quot;&gt;val l : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs98&quot;&gt;val r : int list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs99&quot;&gt;val reversed : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.reversed&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs100&quot;&gt;val preOrder : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.preOrder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs101&quot;&gt;val postOrder : int list&lt;br /&gt;&lt;br /&gt;Full name: Main.postOrder&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs102&quot;&gt;val path : search:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; string (requires equality)&lt;br /&gt;&lt;br /&gt;Full name: Main.path&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs103&quot;&gt;val search : &amp;#39;a (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs104&quot;&gt;val tree : Tree&amp;lt;&amp;#39;a&amp;gt; (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs105&quot;&gt;val leaf : bool * &amp;#39;b list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs106&quot;&gt;val node : (&amp;#39;a -&amp;gt; bool * string list -&amp;gt; bool * string list -&amp;gt; bool * string list) (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs107&quot;&gt;val x : &amp;#39;a (requires equality)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs108&quot;&gt;val lb : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs109&quot;&gt;val lp : string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs110&quot;&gt;val rb : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs111&quot;&gt;val rp : string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs112&quot;&gt;val path : bool * string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs113&quot;&gt;val p : string list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs114&quot;&gt;val concat : sep:string -&amp;gt; strings:seq&amp;lt;string&amp;gt; -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.concat&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs115&quot;&gt;val treeFold&amp;#39; : folder:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a) -&amp;gt; acc:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFold&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs116&quot;&gt;val folder : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs117&quot;&gt;val acc : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs118&quot;&gt;val loop : (&amp;#39;a -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt; list -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs119&quot;&gt;val stack : Tree&amp;lt;&amp;#39;b&amp;gt; list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs120&quot;&gt;val acc : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs121&quot;&gt;val printf : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printf&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs122&quot;&gt;val treeFold : folder:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a) -&amp;gt; acc:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs123&quot;&gt;val createTree : builder:(&amp;#39;a -&amp;gt; &amp;#39;a) -&amp;gt; init:&amp;#39;a -&amp;gt; depth:int -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.createTree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs124&quot;&gt;val builder : (&amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs125&quot;&gt;val init : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs126&quot;&gt;val depth : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs127&quot;&gt;val loop : (int -&amp;gt; &amp;#39;a -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs128&quot;&gt;val count : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs129&quot;&gt;val tree : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs130&quot;&gt;val createLeftTree : (int -&amp;gt; Tree&amp;lt;int&amp;gt;)&lt;br /&gt;&lt;br /&gt;Full name: Main.createLeftTree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs131&quot;&gt;val createRightTree : (int -&amp;gt; Tree&amp;lt;int&amp;gt;)&lt;br /&gt;&lt;br /&gt;Full name: Main.createRightTree&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs132&quot;&gt;val createBalanced : (int -&amp;gt; Tree&amp;lt;int&amp;gt;)&lt;br /&gt;&lt;br /&gt;Full name: Main.createBalanced&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs133&quot;&gt;val smallL : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.smallL&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs134&quot;&gt;val smallR : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.smallR&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs135&quot;&gt;val bench : times:int -&amp;gt; f:(unit -&amp;gt; &amp;#39;a) -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.bench&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs136&quot;&gt;val times : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs137&quot;&gt;val f : (unit -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs138&quot;&gt;val sw : Stopwatch&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs139&quot;&gt;Multiple items&lt;br /&gt;type Stopwatch =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Stopwatch&lt;br /&gt;&amp;#160;&amp;#160;member Elapsed : TimeSpan&lt;br /&gt;&amp;#160;&amp;#160;member ElapsedMilliseconds : int64&lt;br /&gt;&amp;#160;&amp;#160;member ElapsedTicks : int64&lt;br /&gt;&amp;#160;&amp;#160;member IsRunning : bool&lt;br /&gt;&amp;#160;&amp;#160;member Reset : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Restart : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Start : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Stop : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;static val Frequency : int64&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Diagnostics.Stopwatch&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;Stopwatch() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs140&quot;&gt;Stopwatch.StartNew() : Stopwatch&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs141&quot;&gt;val i : int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs142&quot;&gt;val ignore : value:&amp;#39;T -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.ignore&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs143&quot;&gt;Stopwatch.Stop() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs144&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs145&quot;&gt;property Stopwatch.Elapsed: System.TimeSpan&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs146&quot;&gt;val treeFoldStack : folder:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;a) -&amp;gt; acc:&amp;#39;a -&amp;gt; tree:Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.treeFoldStack&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs147&quot;&gt;val stack : System.Collections.Generic.Stack&amp;lt;Tree&amp;lt;&amp;#39;b&amp;gt;&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs148&quot;&gt;namespace System.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs149&quot;&gt;namespace System.Collections.Generic&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs150&quot;&gt;Multiple items&lt;br /&gt;type Stack&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; Stack&amp;lt;&amp;#39;T&amp;gt; + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Clear : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Contains : item:&amp;#39;T -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member CopyTo : array:&amp;#39;T[] * arrayIndex:int -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Count : int&lt;br /&gt;&amp;#160;&amp;#160;member GetEnumerator : unit -&amp;gt; Enumerator&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Peek : unit -&amp;gt; &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member Pop : unit -&amp;gt; &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member Push : item:&amp;#39;T -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member ToArray : unit -&amp;gt; &amp;#39;T[]&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&amp;#160;&amp;#160;nested type Enumerator&lt;br /&gt;&lt;br /&gt;Full name: System.Collections.Generic.Stack&amp;lt;_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Collections.Generic.Stack() : unit&lt;br /&gt;System.Collections.Generic.Stack(capacity: int) : unit&lt;br /&gt;System.Collections.Generic.Stack(collection: System.Collections.Generic.IEnumerable&amp;lt;&amp;#39;T&amp;gt;) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs151&quot;&gt;val loop : (&amp;#39;a -&amp;gt; Tree&amp;lt;&amp;#39;b&amp;gt; -&amp;gt; &amp;#39;a)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs152&quot;&gt;property System.Collections.Generic.Stack.Count: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs153&quot;&gt;System.Collections.Generic.Stack.Pop() : Tree&amp;lt;&amp;#39;b&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs154&quot;&gt;System.Collections.Generic.Stack.Push(item: Tree&amp;lt;&amp;#39;b&amp;gt;) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs155&quot;&gt;val balanced25 : Tree&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.balanced25&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs156&quot;&gt;val sum : x:int -&amp;gt; l:int -&amp;gt; r:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs157&quot;&gt;type Markdown =&lt;br /&gt;&amp;#160;&amp;#160;| NewLine&lt;br /&gt;&amp;#160;&amp;#160;| Literal of string&lt;br /&gt;&amp;#160;&amp;#160;| Bold of string&lt;br /&gt;&amp;#160;&amp;#160;| InlineCode of string&lt;br /&gt;&amp;#160;&amp;#160;| Block of Markdown list&lt;br /&gt;&lt;br /&gt;Full name: Main.Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs158&quot;&gt;union case Markdown.NewLine: Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs159&quot;&gt;Multiple items&lt;br /&gt;union case Markdown.Literal: string -&amp;gt; Markdown&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type LiteralAttribute =&lt;br /&gt;&amp;#160;&amp;#160;inherit Attribute&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; LiteralAttribute&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.LiteralAttribute&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : unit -&amp;gt; LiteralAttribute&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs160&quot;&gt;Multiple items&lt;br /&gt;val string : value:&amp;#39;T -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.string&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type string = System.String&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs161&quot;&gt;union case Markdown.Bold: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs162&quot;&gt;union case Markdown.InlineCode: string -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs163&quot;&gt;union case Markdown.Block: Markdown list -&amp;gt; Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs164&quot;&gt;val markCata : newline:&amp;#39;r -&amp;gt; literal:(string -&amp;gt; &amp;#39;r) -&amp;gt; bold:(string -&amp;gt; &amp;#39;r) -&amp;gt; code:(string -&amp;gt; &amp;#39;r) -&amp;gt; block:(&amp;#39;r list -&amp;gt; &amp;#39;r) -&amp;gt; doc:Markdown -&amp;gt; &amp;#39;r&lt;br /&gt;&lt;br /&gt;Full name: Main.markCata&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs165&quot;&gt;val newline : &amp;#39;r&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs166&quot;&gt;val literal : (string -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs167&quot;&gt;val bold : (string -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs168&quot;&gt;val code : (string -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs169&quot;&gt;val block : (&amp;#39;r list -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs170&quot;&gt;val doc : Markdown&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs171&quot;&gt;val recurs : (Markdown -&amp;gt; &amp;#39;r)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs172&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs173&quot;&gt;val doc : Markdown list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs174&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs175&quot;&gt;val produceHtml : (Markdown -&amp;gt; string)&lt;br /&gt;&lt;br /&gt;Full name: Main.produceHtml&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs176&quot;&gt;val escape : (string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs177&quot;&gt;namespace System.Web&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs178&quot;&gt;Multiple items&lt;br /&gt;type HttpUtility =&lt;br /&gt;&amp;#160;&amp;#160;new : unit -&amp;gt; HttpUtility&lt;br /&gt;&amp;#160;&amp;#160;static member HtmlAttributeEncode : s:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member HtmlDecode : s:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member HtmlEncode : s:string -&amp;gt; string + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member JavaScriptStringEncode : value:string -&amp;gt; string + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member ParseQueryString : query:string -&amp;gt; NameValueCollection + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;static member UrlDecode : str:string -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member UrlDecodeToBytes : str:string -&amp;gt; byte[] + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member UrlEncode : str:string -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;static member UrlEncodeToBytes : str:string -&amp;gt; byte[] + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.Web.HttpUtility&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;System.Web.HttpUtility() : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs179&quot;&gt;System.Web.HttpUtility.HtmlEncode(value: obj) : string&lt;br /&gt;System.Web.HttpUtility.HtmlEncode(s: string) : string&lt;br /&gt;System.Web.HttpUtility.HtmlEncode(s: string, output: System.IO.TextWriter) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs180&quot;&gt;val wrap : (string -&amp;gt; string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs181&quot;&gt;val tag : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs182&quot;&gt;val wrapEscape : (string -&amp;gt; string -&amp;gt; string)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs183&quot;&gt;val document : Markdown&lt;br /&gt;&lt;br /&gt;Full name: Main.document&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><category term="fold" /><category term="list" /><category term="data" /><category term="types" /><category term="recursion" /><summary type="html">Up to this point I created various articles about fold, in my Series I also created a category named Fold (Catamorphisms) but up till now I didn't explained how this articles related to each other, or what Catamorphisms mean. In this article I want to talk about the remaining parts. Table of Content The List Introducing Cata Tail Recursion with FoldBack Binary Trees Cata for Tree Fold vs. FoldBack FoldBack for Tree FoldBack examples Fold for Tree Some Benchmarking Markdown Summary Further Reading Comments The List Catamorphisms is a generalization that emerged from the list data-structure. The list data-structure, how it is found in functional programming, is usually build as a single linked list. Or to be more precise, it is build as a recursive data type expressed as a Discriminated Union. That is the reason why Algebraic Data-Types is the very first entry. Catamorphisms is the idea that we also implement fold and foldBack functions for other discriminated unions besides list. Because of this it is important to first understand how to define data-types, especially recursive discriminated unions. To get a better understanding of the concept, this time we implement our own list type. 1: 2: 3: type List&amp;lt;&amp;#39;a&amp;gt; = | Empty | Cons of head:&amp;#39;a * tail:List&amp;lt;&amp;#39;a&amp;gt; I also create additionally constructor functions for each case: 1: 2: let empty = Empty let cons h t = Cons(h,t) When you wonder about the name Cons this dates back to Lisp. For example in Racket (a Lisp dialect) you can build a list in such way. 1: (define xs (cons 1 (cons 2 (cons 3 empty)))) with the helper functions we defined in F# it almost looks the same. 1: let xs = (cons 1 (cons 2 (cons 3 empty))) As soon we have any kind of discriminated union, working with such a type follows a straight pattern. Usually we create a function that matches on our type, and we must provide code for every case we have. In our list case that means we must match on the Empty case and on the Cons(h,t) case and do something with every case. But the Cons case is special, because it is recursive. So how do we work with it? We just write a recursive function that recurs! Once you notice this pattern, writing any kind of function for a recursive discriminated union becomes easy. First, let's define some example data that we will use from now on: 1: 2: 3: let l1 = (cons 1 (cons 2 (cons 3 empty))) let l2 = (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 empty))))) let l3 = (cons &amp;quot;Hello&amp;quot; (cons &amp;quot; &amp;quot; (cons &amp;quot;World!&amp;quot; empty))) And our first example function listLength' 1: 2: 3: 4: 5: 6: 7: 8: let rec listLength&amp;#39; list = match list with | Empty -&amp;gt; 0 | Cons(h,t) -&amp;gt; 1 + (listLength&amp;#39; t)</summary></entry><entry><title type="html">Monoids</title><link href="https://sidburn.github.io/blog/2016/05/24/monoids" rel="alternate" type="text/html" title="Monoids" /><published>2016-05-24T00:00:00+02:00</published><updated>2016-05-24T00:00:00+02:00</updated><id>https://sidburn.github.io/blog/2016/05/24/monoids</id><content type="html" xml:base="https://sidburn.github.io/blog/2016/05/24/monoids">&lt;p&gt;A monoid is a simple concept. It is a generalization of some patterns that you
very likely already have seen. Being aware of those can help in designing some
operations, and can simplify things. Without much further ado, let us look at
three simple math equations.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;math&quot;&gt;1 + 2       = 3
(1 + 2) + 3 = 1 + (2 + 3)
1 + 0       = 0 + 1
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h2&gt;Table of Content&lt;/h2&gt;
&lt;ul class=&quot;toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#binary&quot;&gt;Binary Operations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#assoc&quot;&gt;Associativity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#identity&quot;&gt;Identity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monoids&quot;&gt;Monoids&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#example-sub&quot;&gt;Subtraction&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#example-mul&quot;&gt;Multiplication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#example-div&quot;&gt;Division&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#purpose&quot;&gt;What is the purpose of all of this?&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#pur-bin&quot;&gt;Binary Operations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pur-assoc&quot;&gt;Associativity&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pur-identity&quot;&gt;Identity&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#mono&quot;&gt;Monoids Examples&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-str-concat&quot;&gt;String concatenation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-list-appending&quot;&gt;List appending&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-max-value&quot;&gt;Maximum value&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mono-sets&quot;&gt;Combining Sets&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#comm-monoids&quot;&gt;Commutative Monoids&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#type&quot;&gt;Creating Monoids Types&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#type-sum&quot;&gt;Sum Monoid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#type-product&quot;&gt;Product Monoid&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#type-ordering&quot;&gt;Ordering Monoid&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;binary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Binary Operations&lt;/h2&gt;
&lt;p&gt;When we look at the first equation we just see the following: There exists some kind
of binary operation that takes two things of the same type, and somehow &lt;em&gt;combines&lt;/em&gt;
those two things into one result of the same type. When we look at the type-signature
of our &lt;code&gt;+&lt;/code&gt; operation we see something like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;no&quot;&gt;int -&amp;gt; int -&amp;gt; int
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;or when we generalize the idea, we expect any type. So we think of functions with
the signature&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;no&quot;&gt;'a -&amp;gt; 'a -&amp;gt; 'a
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;a name=&quot;assoc&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Associativity&lt;/h2&gt;
&lt;p&gt;The second equation tells us that our binary operation &lt;code&gt;+&lt;/code&gt; has another property. The
order in which we do the calculation don't change the end result. We can first
calculate &lt;code&gt;1 + 2&lt;/code&gt; and then add &lt;code&gt;3&lt;/code&gt; or we can first calculate &lt;code&gt;2 + 3&lt;/code&gt; and then
add &lt;code&gt;1&lt;/code&gt;. Both result in &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;a name=&quot;identity&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Identity&lt;/h2&gt;
&lt;p&gt;The last equation tells us that there exists some kind of &lt;em&gt;zero-element&lt;/em&gt; or in mathematics
named &lt;em&gt;identity&lt;/em&gt; that don't effect the result of the operation. It works as some
kind of &lt;em&gt;noop-operation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the binary operation &lt;code&gt;+&lt;/code&gt; this kind of element is &lt;code&gt;0&lt;/code&gt;. No matter which number we have,
when we add zero to it, it doesn't change the number at all.&lt;/p&gt;
&lt;a name=&quot;monoids&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Monoids&lt;/h2&gt;
&lt;p&gt;Whenever all three properties are fulfilled, we name it a monoid. The question is probably
how such kind of simple generalization is even helpful. But before we look into this, let's
look at some other example first, to get a better hang of the three rules. First all three rules again.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There exists a binary operation that combines two things, and returns something of the same type.&lt;/li&gt;
&lt;li&gt;The binary operation is associative.&lt;/li&gt;
&lt;li&gt;There is some kind of &lt;em&gt;Zero/Identity/Noop-element&lt;/em&gt; for the binary operation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To understand the rules better let's look at &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;. As all of those are binary
operations all of them already fulfil the first rule, but do they also fulfil the
second and third rule?&lt;/p&gt;
&lt;a name=&quot;example-sub&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Subtraction&lt;/h3&gt;
&lt;p&gt;Subtraction is not associative. &lt;code&gt;(1 - 2) - 3&lt;/code&gt; gives us &lt;code&gt;-1 - 3&lt;/code&gt; that result in &lt;code&gt;-4&lt;/code&gt;. But
&lt;code&gt;1 - (2 - 3)&lt;/code&gt; gives us &lt;code&gt;1 - (-1)&lt;/code&gt; and this returns &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There also does not exists an identity element. We could think once again of &lt;code&gt;0&lt;/code&gt;. As &lt;code&gt;1 - 0&lt;/code&gt;
return once again &lt;code&gt;1&lt;/code&gt; unchanged. But when we do &lt;code&gt;0 - 1&lt;/code&gt; we get &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;a name=&quot;example-mul&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Multiplication&lt;/h3&gt;
&lt;p&gt;Multiplication is a monoid as both rules are fulfilled. We can do multiplication in any order
and it always yield the same result. But what is our identity element? This time it is &lt;code&gt;1&lt;/code&gt;
not &lt;code&gt;0&lt;/code&gt;. Multiplying a number with &lt;code&gt;1&lt;/code&gt; never changes the number itself.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;math&quot;&gt;(1 * 2) * 3 = 6
1 * (2 * 3) = 6
6 * 1 = 6
1 * 6 = 6
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;a name=&quot;example-div&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Division&lt;/h3&gt;
&lt;p&gt;Division is not associative:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;code lang=&quot;math&quot;&gt;(100.0 / 2.0) / 5.0 =  50.0 / 5.0 = 10.0
100.0 / (2.0 / 5.0) = 100.0 / 0.4 = 250.0
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;and we also don't have an identity element. We could once again think of &lt;code&gt;1&lt;/code&gt;. As &lt;code&gt;3.0 / 1.0&lt;/code&gt;
don't change &lt;code&gt;3.0&lt;/code&gt;, but the reverse &lt;code&gt;1.0 / 3.0&lt;/code&gt; is once again something different.&lt;/p&gt;
&lt;a name=&quot;purpose&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is the purpose of all of this?&lt;/h2&gt;
&lt;p&gt;Now that we have seen more examples we should get familiar with the concept. But why are those
rules anyway useful? Actually, all three rules gives us an ability that we can use in programming.&lt;/p&gt;
&lt;a name=&quot;pur-bin&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Binary Operations&lt;/h3&gt;
&lt;p&gt;When we have a binary operation that combines two things that returns another new thing of the same
type. It simply means we always can combine a whole list of elements with &lt;code&gt;List.reduce&lt;/code&gt;. Let's
assume we have a list of numbers and we just want to add, subtract, multiply or divide all numbers.
Then we just can write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10.0&lt;/span&gt;]

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 7)&quot; onmouseover=&quot;showTip(event, 'fs7', 7)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 8)&quot; onmouseover=&quot;showTip(event, 'fs8', 8)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs6', 9)&quot; onmouseover=&quot;showTip(event, 'fs6', 9)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 55.0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 10)&quot; onmouseover=&quot;showTip(event, 'fs7', 10)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 11)&quot; onmouseover=&quot;showTip(event, 'fs8', 11)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs6', 12)&quot; onmouseover=&quot;showTip(event, 'fs6', 12)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// -53.0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 13)&quot; onmouseover=&quot;showTip(event, 'fs7', 13)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 14)&quot; onmouseover=&quot;showTip(event, 'fs8', 14)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*)&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 15)&quot; onmouseover=&quot;showTip(event, 'fs6', 15)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 3628800.0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 16)&quot; onmouseover=&quot;showTip(event, 'fs7', 16)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 17)&quot; onmouseover=&quot;showTip(event, 'fs8', 17)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs6', 18)&quot; onmouseover=&quot;showTip(event, 'fs6', 18)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 2.755731922e-07&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;If you are unfamiliar with &lt;code&gt;List.reduce&lt;/code&gt;. You can think of it as a way to always combines the first two
elements of a list, until you only have a single element left. When we use &lt;code&gt;List.reduce&lt;/code&gt; on&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;it basically combines the first two elements. &lt;code&gt;1 + 2&lt;/code&gt; and replaces it with &lt;code&gt;3&lt;/code&gt;. So what happens is
just:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;]
[&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once there is only a single result, it returns it.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
This is not how it exactly works, but this is one way how you can think of it.
&lt;/div&gt;
&lt;p&gt;But think about it why it makes in general sense that we can reduce a list of something to
a single value. When we can combine two things into one thing, we always can keep
going combining two things until we end up with a single element. A &lt;code&gt;reduce&lt;/code&gt; operation
just does that repetitive combining for us.&lt;/p&gt;
&lt;a name=&quot;pur-assoc&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Associativity&lt;/h3&gt;
&lt;p&gt;Associativity can enhance the reduce operation. If the exact order doesn't play a role. It means
the combining can be done in Parallel on multiple CPUs. As a simple example let's look at a list
with four elements.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;CPU1 could start combining &lt;code&gt;1 + 2&lt;/code&gt; while CPU2 starts combining &lt;code&gt;3 + 4&lt;/code&gt;. Once both are finished
CPU1 could combine the result &lt;code&gt;3 + 7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But note that this is a naive approach, when we just combine numbers and always split every addition
on it's own CPU the whole combining process would be probably slower and not faster as before. To
be more efficient we need to better divide the input. For example combine the first 1000 elements
of a list on CPU1, and the elements 1001-2000 on CPU2 and so on. To get a fast operation it is a
little bit more complicated. But there usually already exists libraries that addresses those
problems. We could for example use &lt;a href=&quot;http://fsprojects.github.io/FSharp.Collections.ParallelSeq/&quot;&gt;FSharp.Collections.ParallelSeq&lt;/a&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Sequence of all number from 1 to 10.000.000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 19)&quot; onmouseover=&quot;showTip(event, 'fs9', 19)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; [| &lt;span class=&quot;n&quot;&gt;1L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10000000L&lt;/span&gt; |]

&lt;span class=&quot;c&quot;&gt;// Reduce just with one CPU&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs10', 20)&quot; onmouseover=&quot;showTip(event, 'fs10', 20)&quot; class=&quot;t&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 21)&quot; onmouseover=&quot;showTip(event, 'fs11', 21)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs9', 22)&quot; onmouseover=&quot;showTip(event, 'fs9', 22)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//Real: 00:00:00.103, CPU: 00:00:00.093, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//val it : int64 = 50000005000000L&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Reduce with multiple CPUs&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 23)&quot; onmouseover=&quot;showTip(event, 'fs12', 23)&quot; class=&quot;t&quot;&gt;PSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs13', 24)&quot; onmouseover=&quot;showTip(event, 'fs13', 24)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs9', 25)&quot; onmouseover=&quot;showTip(event, 'fs9', 25)&quot; class=&quot;i&quot;&gt;nums&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;//Real: 00:00:00.107, CPU: 00:00:00.390, GC gen0: 0, gen1: 0, gen2: 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//val it : int64 = 50000005000000L&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And as you see, even then you have no guarantee that it is faster (I use a quad-core machine).
The problem is that the combine operation itself is already fast, or probably the reduce algorithm
in &lt;code&gt;PSeq&lt;/code&gt; is not good enough. But still general speaking. Associativity opens up Parallelism, in the
case of using multiple CPUs or using multiple computers (distributed computing).&lt;/p&gt;
&lt;p&gt;But it also allows you to divide an operations into chunks so you can save intermediate result
or calculate a result incrementally. In a reporting system you could for example aggregate all
data for one day, and save the result. If you want to create a month report, you always just
need to combine the results of let's say the last 30 days. You don't need to rerun the combine
operation completely from the start.&lt;/p&gt;
&lt;a name=&quot;pur-identity&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Identity&lt;/h3&gt;
&lt;p&gt;There is one problem with &lt;code&gt;reduce&lt;/code&gt; or in general we have one problem. Our binary operations
always expect to combine two things. But what happens if we have zero or only one element? You
probably ask why we then even want to run a &lt;code&gt;reduce&lt;/code&gt; operation. But in normal circumstances
we don't want to check the amount of elements in a list. But this leads to a problem.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;reduce&lt;/code&gt; operation with a single element just returns the single element, as there is nothing
to combine. But with an empty list it just throws an exception as it don't know what
it should return.&lt;/p&gt;
&lt;p&gt;In such a case, the identity element is helpful, as we just can return the identity element.
But it is also useful in other cases. We just have some kind of starting value that we can
begin with. To solve the problem with &lt;code&gt;reduce&lt;/code&gt; we can use &lt;code&gt;fold&lt;/code&gt; instead of &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 26)&quot; onmouseover=&quot;showTip(event, 'fs7', 26)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 27)&quot; onmouseover=&quot;showTip(event, 'fs14', 27)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; []          &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 28)&quot; onmouseover=&quot;showTip(event, 'fs7', 28)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 29)&quot; onmouseover=&quot;showTip(event, 'fs14', 29)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 30)&quot; onmouseover=&quot;showTip(event, 'fs7', 30)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; []          &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 32)&quot; onmouseover=&quot;showTip(event, 'fs7', 32)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 33)&quot; onmouseover=&quot;showTip(event, 'fs14', 33)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(*)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The additional value we pass to &lt;code&gt;fold&lt;/code&gt; acts in this case as the identity element.&lt;/p&gt;
&lt;a name=&quot;mono&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Monoids examples&lt;/h2&gt;
&lt;p&gt;As we now have a rough view what an monoid is, and what it allows us to do, let's look at some
more simple monoids.&lt;/p&gt;
&lt;a name=&quot;mono-str-concat&quot;&gt;&lt;/a&gt;
&lt;h3&gt;String concatenation&lt;/h3&gt;
&lt;p&gt;String concatenation is a monoid, the identity element is just the empty string.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 34)&quot; onmouseover=&quot;showTip(event, 'fs7', 34)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 35)&quot; onmouseover=&quot;showTip(event, 'fs14', 35)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// &amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;mono-list-appending&quot;&gt;&lt;/a&gt;
&lt;h3&gt;List appending&lt;/h3&gt;
&lt;p&gt;Appending lists is a monoid. The identity element is just the empty list.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 36)&quot; onmouseover=&quot;showTip(event, 'fs7', 36)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 37)&quot; onmouseover=&quot;showTip(event, 'fs14', 37)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 38)&quot; onmouseover=&quot;showTip(event, 'fs7', 38)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 39)&quot; onmouseover=&quot;showTip(event, 'fs15', 39)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [] [[&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;]; [&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;]]   &lt;span class=&quot;c&quot;&gt;// [&amp;quot;foo&amp;quot;; &amp;quot;bar&amp;quot;; &amp;quot;baz&amp;quot;]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 40)&quot; onmouseover=&quot;showTip(event, 'fs7', 40)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 42)&quot; onmouseover=&quot;showTip(event, 'fs7', 42)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 43)&quot; onmouseover=&quot;showTip(event, 'fs15', 43)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [] [[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;]; [&lt;span class=&quot;n&quot;&gt;7&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;8&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;]] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6;7;8;9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;mono-max-value&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Maximum value&lt;/h3&gt;
&lt;p&gt;We can threat the &lt;code&gt;max&lt;/code&gt; operation as a monoid. It just takes two values, and returns
the one which is greater. Notice that combining doesn't literally mean we really have
to work with both values and &lt;em&gt;combine&lt;/em&gt; them. A function that just throws away one
value is still valid.&lt;/p&gt;
&lt;p&gt;If you wonder why. The only thing we must ensure is that we can combine two things into
one result. There is no restriction on the result itself. It only matters that we
get the same result.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs16', 44)&quot; onmouseover=&quot;showTip(event, 'fs16', 44)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 45)&quot; onmouseover=&quot;showTip(event, 'fs16', 45)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs16', 46)&quot; onmouseover=&quot;showTip(event, 'fs16', 46)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs16', 47)&quot; onmouseover=&quot;showTip(event, 'fs16', 47)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)) &lt;span class=&quot;c&quot;&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;or with reduce.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 48)&quot; onmouseover=&quot;showTip(event, 'fs7', 48)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 49)&quot; onmouseover=&quot;showTip(event, 'fs8', 49)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 50)&quot; onmouseover=&quot;showTip(event, 'fs16', 50)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;]         &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 51)&quot; onmouseover=&quot;showTip(event, 'fs7', 51)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs8', 52)&quot; onmouseover=&quot;showTip(event, 'fs8', 52)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs16', 53)&quot; onmouseover=&quot;showTip(event, 'fs16', 53)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;; &lt;span class=&quot;s&quot;&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// &amp;quot;zoo&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But what is the identity element? Well it depends on the type we use. Just consider what
the purpose of the identity element is. It acts as a noop-operation. When we have one value
and use it with the identity element, we always must get the input value back.&lt;/p&gt;
&lt;p&gt;When we use &lt;code&gt;max&lt;/code&gt; with &lt;code&gt;int&lt;/code&gt;, we must find an &lt;code&gt;int&lt;/code&gt; that always makes sure we get our input
value unchanged back, no matter what our input is. That means the identity element
for &lt;code&gt;max&lt;/code&gt; with the &lt;code&gt;int&lt;/code&gt; type is &lt;code&gt;Int32.MinValue&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 54)&quot; onmouseover=&quot;showTip(event, 'fs16', 54)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 55)&quot; onmouseover=&quot;showTip(event, 'fs17', 55)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 56)&quot; onmouseover=&quot;showTip(event, 'fs18', 56)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;2147483648&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// -2147483648&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 57)&quot; onmouseover=&quot;showTip(event, 'fs16', 57)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 58)&quot; onmouseover=&quot;showTip(event, 'fs17', 58)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 59)&quot; onmouseover=&quot;showTip(event, 'fs18', 59)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 60)&quot; onmouseover=&quot;showTip(event, 'fs16', 60)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 61)&quot; onmouseover=&quot;showTip(event, 'fs17', 61)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 62)&quot; onmouseover=&quot;showTip(event, 'fs18', 62)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12345&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;// 12345&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 63)&quot; onmouseover=&quot;showTip(event, 'fs16', 63)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 64)&quot; onmouseover=&quot;showTip(event, 'fs17', 64)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs18', 65)&quot; onmouseover=&quot;showTip(event, 'fs18', 65)&quot; class=&quot;i&quot;&gt;MinValue&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 66)&quot; onmouseover=&quot;showTip(event, 'fs17', 66)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs19', 67)&quot; onmouseover=&quot;showTip(event, 'fs19', 67)&quot; class=&quot;i&quot;&gt;MaxValue&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 2147483647&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The identity element for string is just the empty string&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 68)&quot; onmouseover=&quot;showTip(event, 'fs16', 68)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 69)&quot; onmouseover=&quot;showTip(event, 'fs16', 69)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Foo&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 70)&quot; onmouseover=&quot;showTip(event, 'fs16', 70)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Bar&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs16', 71)&quot; onmouseover=&quot;showTip(event, 'fs16', 71)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;Baz&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;mono-sets&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Combining Sets&lt;/h3&gt;
&lt;p&gt;Also combining two Sets is a monoid, once again with just the empty set as the identity element.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 72)&quot; onmouseover=&quot;showTip(event, 'fs20', 72)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 73)&quot; onmouseover=&quot;showTip(event, 'fs21', 73)&quot; class=&quot;f&quot;&gt;set&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 74)&quot; onmouseover=&quot;showTip(event, 'fs22', 74)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 75)&quot; onmouseover=&quot;showTip(event, 'fs21', 75)&quot; class=&quot;f&quot;&gt;set&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 76)&quot; onmouseover=&quot;showTip(event, 'fs23', 76)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 77)&quot; onmouseover=&quot;showTip(event, 'fs21', 77)&quot; class=&quot;f&quot;&gt;set&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]

(&lt;span onmouseout=&quot;hideTip(event, 'fs24', 78)&quot; onmouseover=&quot;showTip(event, 'fs24', 78)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 79)&quot; onmouseover=&quot;showTip(event, 'fs25', 79)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 80)&quot; onmouseover=&quot;showTip(event, 'fs24', 80)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 81)&quot; onmouseover=&quot;showTip(event, 'fs25', 81)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 82)&quot; onmouseover=&quot;showTip(event, 'fs20', 82)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 83)&quot; onmouseover=&quot;showTip(event, 'fs22', 83)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs23', 84)&quot; onmouseover=&quot;showTip(event, 'fs23', 84)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// set [1;2;3;4]&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs24', 85)&quot; onmouseover=&quot;showTip(event, 'fs24', 85)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 86)&quot; onmouseover=&quot;showTip(event, 'fs25', 86)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 87)&quot; onmouseover=&quot;showTip(event, 'fs20', 87)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs24', 88)&quot; onmouseover=&quot;showTip(event, 'fs24', 88)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 89)&quot; onmouseover=&quot;showTip(event, 'fs25', 89)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 90)&quot; onmouseover=&quot;showTip(event, 'fs22', 90)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 91)&quot; onmouseover=&quot;showTip(event, 'fs23', 91)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;)) &lt;span class=&quot;c&quot;&gt;// set [1;2;3;4]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 92)&quot; onmouseover=&quot;showTip(event, 'fs7', 92)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 93)&quot; onmouseover=&quot;showTip(event, 'fs14', 93)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 94)&quot; onmouseover=&quot;showTip(event, 'fs24', 94)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 95)&quot; onmouseover=&quot;showTip(event, 'fs25', 95)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 96)&quot; onmouseover=&quot;showTip(event, 'fs24', 96)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 97)&quot; onmouseover=&quot;showTip(event, 'fs26', 97)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs20', 98)&quot; onmouseover=&quot;showTip(event, 'fs20', 98)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 99)&quot; onmouseover=&quot;showTip(event, 'fs22', 99)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 100)&quot; onmouseover=&quot;showTip(event, 'fs23', 100)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 101)&quot; onmouseover=&quot;showTip(event, 'fs7', 101)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 102)&quot; onmouseover=&quot;showTip(event, 'fs14', 102)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 103)&quot; onmouseover=&quot;showTip(event, 'fs24', 103)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs25', 104)&quot; onmouseover=&quot;showTip(event, 'fs25', 104)&quot; class=&quot;f&quot;&gt;union&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 105)&quot; onmouseover=&quot;showTip(event, 'fs24', 105)&quot; class=&quot;t&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 106)&quot; onmouseover=&quot;showTip(event, 'fs26', 106)&quot; class=&quot;i&quot;&gt;empty&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs23', 107)&quot; onmouseover=&quot;showTip(event, 'fs23', 107)&quot; class=&quot;i&quot;&gt;sc&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 108)&quot; onmouseover=&quot;showTip(event, 'fs22', 108)&quot; class=&quot;i&quot;&gt;sb&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 109)&quot; onmouseover=&quot;showTip(event, 'fs20', 109)&quot; class=&quot;i&quot;&gt;sa&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;comm-monoids&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Commutative Monoids&lt;/h2&gt;
&lt;p&gt;Up so far you probably noticed one additional variation. For some combine operations
the whole order on how we combine them don't play a role. Actually &lt;code&gt;+&lt;/code&gt; for
numbers and the &lt;code&gt;Set.union&lt;/code&gt; fall into this category. But other operation are
&lt;em&gt;just&lt;/em&gt; associative, for example List or String concatenation. When we concatenate
three strings, it doesn't matter if we do &lt;code&gt;(a + b) + c&lt;/code&gt; or &lt;code&gt;a + (b + c)&lt;/code&gt;. But
we cannot do &lt;code&gt;(a + c) + b&lt;/code&gt;. This will give us a completely different string.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;foobarbaz&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// &amp;quot;foobarbaz&amp;quot;&lt;/span&gt;
(&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// &amp;quot;foobazbar&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But for other operations, the whole order doesn't matter&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can even shuffle an array before summing it, it will always give us the same sum.
But shuffling an array of strings, will return another string. When we have a monoid
where the whole order doesn't play a role. then we have a &lt;em&gt;Commutative Monoid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example adding numbers or multiplying them, combining sets with &lt;code&gt;Set.union&lt;/code&gt; or
getting the &lt;code&gt;max&lt;/code&gt; value are &lt;em&gt;Commutative Monoids&lt;/em&gt;.&lt;/p&gt;
&lt;a name=&quot;type&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Creating Monoids Types&lt;/h2&gt;
&lt;p&gt;Up so far we always used &lt;code&gt;List.fold&lt;/code&gt; or &lt;code&gt;List.reduce&lt;/code&gt; directly and provided the identity
element directly. But overall it can help to create a type that combines the binary
operation with the identity element in its own type.&lt;/p&gt;
&lt;p&gt;We can overload the &lt;code&gt;+&lt;/code&gt; and the &lt;code&gt;Zero&lt;/code&gt; operator to get some nice behaviour. We treat
&lt;code&gt;+&lt;/code&gt; just as our &lt;em&gt;combine&lt;/em&gt; operation. And &lt;code&gt;Zero&lt;/code&gt; is our &lt;em&gt;identity&lt;/em&gt; element.&lt;/p&gt;
&lt;a name=&quot;type-sum&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Sum Monoid&lt;/h3&gt;
&lt;p&gt;As a simple example let's create a &lt;code&gt;Sum&lt;/code&gt; type.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 110)&quot; onmouseover=&quot;showTip(event, 'fs27', 110)&quot; class=&quot;t&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 111)&quot; onmouseover=&quot;showTip(event, 'fs27', 111)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 112)&quot; onmouseover=&quot;showTip(event, 'fs28', 112)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs27', 113)&quot; onmouseover=&quot;showTip(event, 'fs27', 113)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 114)&quot; onmouseover=&quot;showTip(event, 'fs29', 114)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs27', 115)&quot; onmouseover=&quot;showTip(event, 'fs27', 115)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 116)&quot; onmouseover=&quot;showTip(event, 'fs30', 116)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 117)&quot; onmouseover=&quot;showTip(event, 'fs27', 117)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs29', 118)&quot; onmouseover=&quot;showTip(event, 'fs29', 118)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 119)&quot; onmouseover=&quot;showTip(event, 'fs30', 119)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 120)&quot; onmouseover=&quot;showTip(event, 'fs31', 120)&quot; class=&quot;i&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 121)&quot; onmouseover=&quot;showTip(event, 'fs27', 121)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The advantage is that we can use &lt;code&gt;List.sum&lt;/code&gt; with such a type. &lt;code&gt;List.sum&lt;/code&gt; adds all elements
together with the &lt;code&gt;+&lt;/code&gt; operator. So it is like &lt;code&gt;reduce&lt;/code&gt;, but in the case of an empty list,
it returns the &lt;code&gt;Zero&lt;/code&gt; element.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 122)&quot; onmouseover=&quot;showTip(event, 'fs7', 122)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 123)&quot; onmouseover=&quot;showTip(event, 'fs32', 123)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs27', 124)&quot; onmouseover=&quot;showTip(event, 'fs27', 124)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 125)&quot; onmouseover=&quot;showTip(event, 'fs27', 125)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 126)&quot; onmouseover=&quot;showTip(event, 'fs27', 126)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;]  &lt;span class=&quot;c&quot;&gt;// Sum 6&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 127)&quot; onmouseover=&quot;showTip(event, 'fs7', 127)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 128)&quot; onmouseover=&quot;showTip(event, 'fs32', 128)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs27', 129)&quot; onmouseover=&quot;showTip(event, 'fs27', 129)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 130)&quot; onmouseover=&quot;showTip(event, 'fs27', 130)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 131)&quot; onmouseover=&quot;showTip(event, 'fs27', 131)&quot; class=&quot;p&quot;&gt;Sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// Sum 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Defining a Sum type for &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; doesn't seems like much value, and it isn't. But it
is only one example to understand the concept. A Product for example seems much more usable.&lt;/p&gt;
&lt;a name=&quot;type-product&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Product Monoid&lt;/h3&gt;
&lt;p&gt;The product Monoid just multiplies the numbers and we use &lt;code&gt;1&lt;/code&gt; as Zero.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 132)&quot; onmouseover=&quot;showTip(event, 'fs33', 132)&quot; class=&quot;t&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 133)&quot; onmouseover=&quot;showTip(event, 'fs33', 133)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 134)&quot; onmouseover=&quot;showTip(event, 'fs28', 134)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs33', 135)&quot; onmouseover=&quot;showTip(event, 'fs33', 135)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 136)&quot; onmouseover=&quot;showTip(event, 'fs29', 136)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs33', 137)&quot; onmouseover=&quot;showTip(event, 'fs33', 137)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 138)&quot; onmouseover=&quot;showTip(event, 'fs30', 138)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 139)&quot; onmouseover=&quot;showTip(event, 'fs33', 139)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs29', 140)&quot; onmouseover=&quot;showTip(event, 'fs29', 140)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 141)&quot; onmouseover=&quot;showTip(event, 'fs30', 141)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 142)&quot; onmouseover=&quot;showTip(event, 'fs34', 142)&quot; class=&quot;i&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 143)&quot; onmouseover=&quot;showTip(event, 'fs33', 143)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 144)&quot; onmouseover=&quot;showTip(event, 'fs7', 144)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 145)&quot; onmouseover=&quot;showTip(event, 'fs32', 145)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs33', 146)&quot; onmouseover=&quot;showTip(event, 'fs33', 146)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 147)&quot; onmouseover=&quot;showTip(event, 'fs33', 147)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 148)&quot; onmouseover=&quot;showTip(event, 'fs33', 148)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// Product 150&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 149)&quot; onmouseover=&quot;showTip(event, 'fs7', 149)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 150)&quot; onmouseover=&quot;showTip(event, 'fs32', 150)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs33', 151)&quot; onmouseover=&quot;showTip(event, 'fs33', 151)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 152)&quot; onmouseover=&quot;showTip(event, 'fs33', 152)&quot; class=&quot;p&quot;&gt;Product&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;]             &lt;span class=&quot;c&quot;&gt;// Product 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;type-ordering&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Ordering Monoid&lt;/h3&gt;
&lt;p&gt;Let's create a Monoid that adds two list together and sorts the list while doing it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 153)&quot; onmouseover=&quot;showTip(event, 'fs35', 153)&quot; class=&quot;t&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;comparison&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 154)&quot; onmouseover=&quot;showTip(event, 'fs35', 154)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 155)&quot; onmouseover=&quot;showTip(event, 'fs36', 155)&quot; class=&quot;t&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs35', 156)&quot; onmouseover=&quot;showTip(event, 'fs35', 156)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 157)&quot; onmouseover=&quot;showTip(event, 'fs37', 157)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 158)&quot; onmouseover=&quot;showTip(event, 'fs35', 158)&quot; class=&quot;t&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span onmouseout=&quot;hideTip(event, 'fs35', 159)&quot; onmouseover=&quot;showTip(event, 'fs35', 159)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 160)&quot; onmouseover=&quot;showTip(event, 'fs38', 160)&quot; class=&quot;i&quot;&gt;ys&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 161)&quot; onmouseover=&quot;showTip(event, 'fs35', 161)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 162)&quot; onmouseover=&quot;showTip(event, 'fs7', 162)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 163)&quot; onmouseover=&quot;showTip(event, 'fs39', 163)&quot; class=&quot;f&quot;&gt;sort&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 164)&quot; onmouseover=&quot;showTip(event, 'fs7', 164)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs15', 165)&quot; onmouseover=&quot;showTip(event, 'fs15', 165)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 166)&quot; onmouseover=&quot;showTip(event, 'fs6', 166)&quot; class=&quot;i&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;ys&lt;/span&gt;))
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 167)&quot; onmouseover=&quot;showTip(event, 'fs40', 167)&quot; class=&quot;i&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 168)&quot; onmouseover=&quot;showTip(event, 'fs35', 168)&quot; class=&quot;t&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 169)&quot; onmouseover=&quot;showTip(event, 'fs35', 169)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; []

&lt;span onmouseout=&quot;hideTip(event, 'fs35', 170)&quot; onmouseover=&quot;showTip(event, 'fs35', 170)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 171)&quot; onmouseover=&quot;showTip(event, 'fs35', 171)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 172)&quot; onmouseover=&quot;showTip(event, 'fs35', 172)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;6;6;10]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs35', 173)&quot; onmouseover=&quot;showTip(event, 'fs35', 173)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 174)&quot; onmouseover=&quot;showTip(event, 'fs35', 174)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt;]        &lt;span class=&quot;c&quot;&gt;// [&amp;quot;bar&amp;quot;; &amp;quot;foo&amp;quot;; &amp;quot;zoo&amp;quot;]&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs7', 175)&quot; onmouseover=&quot;showTip(event, 'fs7', 175)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 176)&quot; onmouseover=&quot;showTip(event, 'fs32', 176)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs35', 177)&quot; onmouseover=&quot;showTip(event, 'fs35', 177)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;]; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 178)&quot; onmouseover=&quot;showTip(event, 'fs35', 178)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;]]           &lt;span class=&quot;c&quot;&gt;// [1;2;3;4]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 179)&quot; onmouseover=&quot;showTip(event, 'fs7', 179)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs32', 180)&quot; onmouseover=&quot;showTip(event, 'fs32', 180)&quot; class=&quot;f&quot;&gt;sum&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs35', 181)&quot; onmouseover=&quot;showTip(event, 'fs35', 181)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;]; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 182)&quot; onmouseover=&quot;showTip(event, 'fs35', 182)&quot; class=&quot;p&quot;&gt;Order&lt;/span&gt; [&lt;span class=&quot;s&quot;&gt;&amp;quot;zoo&amp;quot;&lt;/span&gt;]] &lt;span class=&quot;c&quot;&gt;// [&amp;quot;bar&amp;quot;; &amp;quot;foo&amp;quot;; &amp;quot;zoo&amp;quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;A Monoid is a simple way to aggregate data. When you design functions consider if there exists
binary operations to somehow combine types. If you can implement them you get the ability
to combine a list of types for free.&lt;/p&gt;
&lt;p&gt;Additionally it opens up the possibility to allow combining data in parallel or build data
incrementally.&lt;/p&gt;
&lt;a name=&quot;further&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/monoids-without-tears/&quot;&gt;Monoid without Tears&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gettingsharper.de/2015/03/03/understanding-monoids-using-f/&quot;&gt;Understanding Monoids using F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://learnyouahaskell.com/functors-applicative-functors-and-monoids#monoids&quot;&gt;[Haskell] Learn You a Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Monoids&quot;&gt;[Haskell] Monoids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;comments&quot;&gt;&lt;/a&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;Multiple items&lt;br /&gt;namespace FSharp&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;namespace Microsoft.FSharp&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;Multiple items&lt;br /&gt;namespace FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;namespace Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;namespace FSharp.Collections.ParallelSeq&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val xs : float list&lt;br /&gt;&lt;br /&gt;Full name: Main.xs&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val nums : int64 []&lt;br /&gt;&lt;br /&gt;Full name: Main.nums&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;module Seq&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Seq.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;module PSeq&lt;br /&gt;&lt;br /&gt;from FSharp.Collections.ParallelSeq&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; source:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: FSharp.Collections.ParallelSeq.PSeq.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val append : list1:&amp;#39;T list -&amp;gt; list2:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.append&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;field int.MinValue = -2147483648&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;field int.MaxValue = 2147483647&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val sa : Set&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sa&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val set : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.set&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val sb : Set&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sb&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val sc : Set&amp;lt;int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.sc&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;Multiple items&lt;br /&gt;module Set&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Set&amp;lt;&amp;#39;T (requires comparison)&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;interface IComparable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface ICollection&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;new : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Add : value:&amp;#39;T -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Contains : value:&amp;#39;T -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;override Equals : obj -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member IsProperSubsetOf : otherSet:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member IsProperSupersetOf : otherSet:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Set&amp;lt;_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : elements:seq&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val union : set1:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; set2:Set&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Set.union&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val empty&amp;lt;&amp;#39;T (requires comparison)&amp;gt; : Set&amp;lt;&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Set.empty&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;Multiple items&lt;br /&gt;union case Sum.Sum: int -&amp;gt; Sum&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Sum =&lt;br /&gt;&amp;#160;&amp;#160;| Sum of int&lt;br /&gt;&amp;#160;&amp;#160;static member Zero : Sum&lt;br /&gt;&amp;#160;&amp;#160;static member ( + ) : Sum * Sum -&amp;gt; Sum&lt;br /&gt;&lt;br /&gt;Full name: Main.Sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;static member Sum.Zero : Sum&lt;br /&gt;&lt;br /&gt;Full name: Main.Sum.Zero&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val sum : list:&amp;#39;T list -&amp;gt; &amp;#39;T (requires member ( + ) and member get_Zero)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.sum&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;Multiple items&lt;br /&gt;union case Product.Product: int -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Product =&lt;br /&gt;&amp;#160;&amp;#160;| Product of int&lt;br /&gt;&amp;#160;&amp;#160;static member Zero : Product&lt;br /&gt;&amp;#160;&amp;#160;static member ( + ) : Product * Product -&amp;gt; Product&lt;br /&gt;&lt;br /&gt;Full name: Main.Product&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;static member Product.Zero : Product&lt;br /&gt;&lt;br /&gt;Full name: Main.Product.Zero&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;Multiple items&lt;br /&gt;union case Order.Order: &amp;#39;a list -&amp;gt; Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Order&amp;lt;&amp;#39;a (requires comparison)&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| Order of &amp;#39;a list&lt;br /&gt;&amp;#160;&amp;#160;static member Zero : Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;static member ( + ) : Order&amp;lt;&amp;#39;a&amp;gt; * Order&amp;lt;&amp;#39;a&amp;gt; -&amp;gt; Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Order&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val xs : &amp;#39;a list (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;val ys : &amp;#39;a list (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val sort : list:&amp;#39;T list -&amp;gt; &amp;#39;T list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.sort&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;static member Order.Zero : Order&amp;lt;&amp;#39;a&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.Order`1.Zero&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><category term="monoids" /><summary type="html">A monoid is a simple concept. It is a generalization of some patterns that you very likely already have seen. Being aware of those can help in designing some operations, and can simplify things. Without much further ado, let us look at three simple math equations. 1: 2: 3: 1 + 2 = 3 (1 + 2) + 3 = 1 + (2 + 3) 1 + 0 = 0 + 1 Table of Content Binary Operations Associativity Identity Monoids Subtraction Multiplication Division What is the purpose of all of this? Binary Operations Associativity Identity Monoids Examples String concatenation List appending Maximum value Combining Sets Commutative Monoids Creating Monoids Types Sum Monoid Product Monoid Ordering Monoid Summary Further Reading Comments Binary Operations When we look at the first equation we just see the following: There exists some kind of binary operation that takes two things of the same type, and somehow combines those two things into one result of the same type. When we look at the type-signature of our + operation we see something like 1: int -&amp;gt; int -&amp;gt; int or when we generalize the idea, we expect any type. So we think of functions with the signature 1: 'a -&amp;gt; 'a -&amp;gt; 'a Associativity The second equation tells us that our binary operation + has another property. The order in which we do the calculation don't change the end result. We can first calculate 1 + 2 and then add 3 or we can first calculate 2 + 3 and then add 1. Both result in 6. Identity The last equation tells us that there exists some kind of zero-element or in mathematics named identity that don't effect the result of the operation. It works as some kind of noop-operation. For the binary operation + this kind of element is 0. No matter which number we have, when we add zero to it, it doesn't change the number at all. Monoids Whenever all three properties are fulfilled, we name it a monoid. The question is probably how such kind of simple generalization is even helpful. But before we look into this, let's look at some other example first, to get a better hang of the three rules. First all three rules again. There exists a binary operation that combines two things, and returns something of the same type. The binary operation is associative. There is some kind of Zero/Identity/Noop-element for the binary operation. To understand the rules better let's look at -, * and /. As all of those are binary operations all of them already fulfil the first rule, but do they also fulfil the second and third rule? Subtraction Subtraction is not associative. (1 - 2) - 3 gives us -1 - 3 that result in -4. But 1 - (2 - 3) gives us 1 - (-1) and this returns 2. There also does not exists an identity element. We could think once again of 0. As 1 - 0 return once again 1 unchanged. But when we do 0 - 1 we get -1. Multiplication Multiplication is a monoid as both rules are fulfilled. We can do multiplication in any order and it always yield the same result. But what is our identity element? This time it is 1 not 0. Multiplying a number with 1 never changes the number itself. 1: 2: 3: 4: (1 * 2) * 3 = 6 1 * (2 * 3) = 6 6 * 1 = 6 1 * 6 = 6 Division Division is not associative: 1: 2: (100.0 / 2.0) / 5.0 = 50.0 / 5.0 = 10.0 100.0 / (2.0 / 5.0) = 100.0 / 0.4 = 250.0 and we also don't have an identity element. We could once again think of 1. As 3.0 / 1.0 don't change 3.0, but the reverse 1.0 / 3.0 is once again something different. What is the purpose of all of this? Now that we have seen more examples we should get familiar with the concept. But why are those rules anyway useful? Actually, all three rules gives us an ability that we can use in programming. Binary Operations When we have a binary operation that combines two things that returns another new thing of the same type. It simply means we always can combine a whole list of elements with List.reduce. Let's assume we have a list of numbers and we just want to add, subtract, multiply or divide all numbers. Then we just can write: 1: 2: 3: 4: 5: 6: let xs = [1.0 .. 10.0]</summary></entry><entry><title type="html">Introduction to Functional Programming</title><link href="https://sidburn.github.io/blog/2016/05/20/introduction-to-functional-programming" rel="alternate" type="text/html" title="Introduction to Functional Programming" /><published>2016-05-20T00:00:00+02:00</published><updated>2016-05-20T00:00:00+02:00</updated><id>https://sidburn.github.io/blog/2016/05/20/introduction-to-functional-programming</id><content type="html" xml:base="https://sidburn.github.io/blog/2016/05/20/introduction-to-functional-programming">&lt;p&gt;In this article I want to give a general introduction to some of the fundamental ideas of
functional programming. I just start with the idea of function as data, and explain
why functions are viewed as data and why it makes sense to pass functions as arguments.&lt;/p&gt;
&lt;p&gt;When we understand this concept, I start explaining lambda expression,
currying, partial application and closures. All of this ideas built on each other.&lt;/p&gt;
&lt;p&gt;But I don't stop at functional programming. Instead I will go back to OO programming
and show you, how you can translate all of these ideas into OO code. Probably
you will be surprised how similar functional and OO code is, and that most ideas
are things you already know.&lt;/p&gt;
&lt;p&gt;Overall I show why functional programming and object-oriented programming are
orthogonal. I hope that by the end of the article you learned something about
functional programming, but also widen your view on object-oriented programming.&lt;/p&gt;
&lt;h2&gt;Table of Content&lt;/h2&gt;
&lt;ul class=&quot;toc&quot;&gt;
  &lt;li&gt;Functional Programming&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-data&quot;&gt;Functions as Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-function&quot;&gt;What is a function?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-exp-functions&quot;&gt;Exploiting Functions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-retn-functions&quot;&gt;Functions as return values&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-lambda&quot;&gt;There is only lambda&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-currying&quot;&gt;Currying&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-closures&quot;&gt;Closures&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#fp-example&quot;&gt;Example: Currying and Closures&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#oo&quot;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-class&quot;&gt;What is a Class?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-function&quot;&gt;Functions as Data&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-curry-partial-closure&quot;&gt;Currying, Partial Application and Closures&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-currying&quot;&gt;Currying&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#oo-exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;fp-data&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Functions as data&lt;/h2&gt;
&lt;p&gt;One important concept in functional programming is the ability to use functions just
as data. This means you can create functions and store them in variables.
But that also means you can pass those functions to other functions as arguments
or retrieve a function from a function.&lt;/p&gt;
&lt;p&gt;Sometimes people new to functional programming have some problems to understand
this idea and how it is useful, but in fact, when you do OO programming
you do that kind of idea basically all over the place. You do it even more
often as in a functional language.&lt;/p&gt;
&lt;p&gt;But even if you don't see the connection at the moment, you still could ask
yourself if that idea really makes sense, or what useful thinks you can
do with that idea.&lt;/p&gt;
&lt;a name=&quot;fp-function&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is a function?&lt;/h2&gt;
&lt;p&gt;Before we go deeper we have to ask ourself: What is a function anyway? Depending
on the language there are also multiple terms for the word function. Terms
like procedures, static methods or subroutines.&lt;/p&gt;
&lt;p&gt;When I talk about functions I just mean the concept that you have some kind
of thing that you can pass some arguments, and it returns a result. As a simple
example we can think of a &lt;code&gt;square&lt;/code&gt; function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 89)&quot; onmouseover=&quot;showTip(event, 'fs2', 89)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 90)&quot; onmouseover=&quot;showTip(event, 'fs3', 90)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 91)&quot; onmouseover=&quot;showTip(event, 'fs3', 91)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 92)&quot; onmouseover=&quot;showTip(event, 'fs3', 92)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We can pass it several different values, and it will return a result.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 6)&quot; onmouseover=&quot;showTip(event, 'fs2', 6)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 7)&quot; onmouseover=&quot;showTip(event, 'fs2', 7)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 8)&quot; onmouseover=&quot;showTip(event, 'fs2', 8)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 9)&quot; onmouseover=&quot;showTip(event, 'fs2', 9)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Despite its simpleness. There are two ways how we can interpret &lt;code&gt;square&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A function is a series of commands that executes one by one returning some value.&lt;/li&gt;
&lt;li&gt;A function is a transformation of values. We pass some value in, and we get some value out.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if those definitions seems similar, the focus is different. The first definition is
often used by imperative languages. Functions are &lt;em&gt;just&lt;/em&gt; a tool to get rid of
code-duplication. You have a series of commands? Put them in a function and you later
can call it again. What do you do if you want to understand
what a function does? Just explore the commands it executes step-by-step.&lt;/p&gt;
&lt;p&gt;The second definition is how functional languages interpret functions. The focus lies on the
input and the output. A function is not just a series of commands, it transforms an
input to an output. You want to know what a function does? Examine the input and output
of a function. The best would be if the types of a function is already self-speaking enough.
Otherwise the function name itself should give us enough information what it does.&lt;/p&gt;
&lt;p&gt;But we don't really care how a function work or how it exactly achieve the output
it returns. South Park teaches this thinking already:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016/south_park_profit.png&quot; alt=&quot;Underpants and Profit&quot; /&gt;&lt;/p&gt;
&lt;p&gt;A function is just something that takes some underpants, then do something, and
we get some profit out of it. We just have:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;Underpants&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;Profit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What happens between those steps? We don't know, but we also don't care. The only
thing that matters is that we can somehow turn underpants into profit.&lt;/p&gt;
&lt;a name=&quot;fp-exp-functions&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Exploiting functions&lt;/h2&gt;
&lt;p&gt;The idea that only the input and output of a function matters is quite interesting.
We could take that idea further and for example rewrite our &lt;code&gt;square&lt;/code&gt; function
into the following way:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 10)&quot; onmouseover=&quot;showTip(event, 'fs4', 10)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 11)&quot; onmouseover=&quot;showTip(event, 'fs3', 11)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 12)&quot; onmouseover=&quot;showTip(event, 'fs5', 12)&quot; class=&quot;i&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs6', 13)&quot; onmouseover=&quot;showTip(event, 'fs6', 13)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 14)&quot; onmouseover=&quot;showTip(event, 'fs7', 14)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
            (&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
            (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)
            (&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;)
            (&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;)
        ]
    &lt;span onmouseout=&quot;hideTip(event, 'fs8', 15)&quot; onmouseover=&quot;showTip(event, 'fs8', 15)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 16)&quot; onmouseover=&quot;showTip(event, 'fs6', 16)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 17)&quot; onmouseover=&quot;showTip(event, 'fs9', 17)&quot; class=&quot;f&quot;&gt;tryFind&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 18)&quot; onmouseover=&quot;showTip(event, 'fs3', 18)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 19)&quot; onmouseover=&quot;showTip(event, 'fs5', 19)&quot; class=&quot;i&quot;&gt;output&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs4', 20)&quot; onmouseover=&quot;showTip(event, 'fs4', 20)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 1&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 21)&quot; onmouseover=&quot;showTip(event, 'fs4', 21)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 22)&quot; onmouseover=&quot;showTip(event, 'fs4', 22)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 9&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 23)&quot; onmouseover=&quot;showTip(event, 'fs4', 23)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 16&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs4', 24)&quot; onmouseover=&quot;showTip(event, 'fs4', 24)&quot; class=&quot;f&quot;&gt;squareM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Okay, now you are probably saying that this is cheating and not the same. We also get
a wrong output when we pass it &lt;code&gt;5&lt;/code&gt;. We only get correct output for the numbers one
to four. But actually the previous version was also not &lt;em&gt;correct&lt;/em&gt;. When we do:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 25)&quot; onmouseover=&quot;showTip(event, 'fs2', 25)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 1410065408&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;we also get a wrong result. The problem is that we have an integer overflow here.
&lt;code&gt;square&lt;/code&gt; is also not correct, it only happens that our first &lt;code&gt;square&lt;/code&gt; function returns
right result for a lot more arguments, but still not for all inputs.&lt;/p&gt;
&lt;p&gt;But the more important idea is that we could replace a function just with a data-structure.
A functions just maps some input to its output. That is exactly what the &lt;code&gt;Map&lt;/code&gt; data-structure
does.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
A &lt;code&gt;Map&lt;/code&gt; is basically a key/value store. In F# it is immutable. In other
languages a &lt;code&gt;Map&lt;/code&gt; is a Dictionary, Hash or Associative Array. In
non-functional languages they are most often mutable. Another example:
In JavaScript it is also called an object.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; squares &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;9&lt;/span&gt;,
    &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;
}

squares[&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;We could spent a lot of time filling out the remaining inputs in &lt;code&gt;squareM&lt;/code&gt; to get it
&lt;em&gt;more correct&lt;/em&gt;, but doing a task like this feels a little bit silly. But wait.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A function and a map data-structure are equivalent&lt;/li&gt;
&lt;li&gt;It makes sense to pass a data-structure as an argument&lt;/li&gt;
&lt;li&gt;Then it also must make sense to pass a function instead&lt;/li&gt;
&lt;li&gt;
If it feels silly to create all possible input/output combinations in
a map data-structure to emulate a function, then passing a function
makes more sense as passing a data-structure.
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you look at it then it indeed makes more sense. We actually can think
of a function just as a lazy-data-structure. Instead of generating all
possible input/output values that could exists and save them into a
data-structure. We just describe how every element can be computed, and
pass this description instead.&lt;/p&gt;
&lt;p&gt;But lets at least once imagine our language don't support passing functions
as values. How could we create something similar to the &lt;code&gt;List.map&lt;/code&gt; function?
This is the &lt;code&gt;List.map&lt;/code&gt; function:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 26)&quot; onmouseover=&quot;showTip(event, 'fs10', 26)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 27)&quot; onmouseover=&quot;showTip(event, 'fs11', 27)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 28)&quot; onmouseover=&quot;showTip(event, 'fs2', 28)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;4;9;16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Without the ability to pass functions as values we just expect a &lt;code&gt;Map&lt;/code&gt;
data-structure as the first argument instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// The map function with a `Map` data-structure&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rec&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 29)&quot; onmouseover=&quot;showTip(event, 'fs12', 29)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 30)&quot; onmouseover=&quot;showTip(event, 'fs13', 30)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 31)&quot; onmouseover=&quot;showTip(event, 'fs14', 31)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 32)&quot; onmouseover=&quot;showTip(event, 'fs14', 32)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | []      &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; []
    | &lt;span onmouseout=&quot;hideTip(event, 'fs15', 33)&quot; onmouseover=&quot;showTip(event, 'fs15', 33)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs14', 34)&quot; onmouseover=&quot;showTip(event, 'fs14', 34)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs6', 35)&quot; onmouseover=&quot;showTip(event, 'fs6', 35)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 36)&quot; onmouseover=&quot;showTip(event, 'fs16', 36)&quot; class=&quot;f&quot;&gt;find&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 37)&quot; onmouseover=&quot;showTip(event, 'fs15', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 38)&quot; onmouseover=&quot;showTip(event, 'fs13', 38)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs12', 39)&quot; onmouseover=&quot;showTip(event, 'fs12', 39)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 40)&quot; onmouseover=&quot;showTip(event, 'fs13', 40)&quot; class=&quot;i&quot;&gt;data&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 41)&quot; onmouseover=&quot;showTip(event, 'fs14', 41)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// We pre-compute the squares from 1 to 10000&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 42)&quot; onmouseover=&quot;showTip(event, 'fs17', 42)&quot; class=&quot;i&quot;&gt;squares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs6', 43)&quot; onmouseover=&quot;showTip(event, 'fs6', 43)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 44)&quot; onmouseover=&quot;showTip(event, 'fs7', 44)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 45)&quot; onmouseover=&quot;showTip(event, 'fs3', 45)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;10000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 46)&quot; onmouseover=&quot;showTip(event, 'fs3', 46)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;, (&lt;span onmouseout=&quot;hideTip(event, 'fs2', 47)&quot; onmouseover=&quot;showTip(event, 'fs2', 47)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 48)&quot; onmouseover=&quot;showTip(event, 'fs3', 48)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    ]

&lt;span class=&quot;c&quot;&gt;// Now we call map with our pre-computed values&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 49)&quot; onmouseover=&quot;showTip(event, 'fs12', 49)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 50)&quot; onmouseover=&quot;showTip(event, 'fs17', 50)&quot; class=&quot;i&quot;&gt;squares&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;20&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// [1;16;400]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of writing all possible value combinations ourself we even could use the &lt;code&gt;square&lt;/code&gt;
function to create the needed data-structure. This even shows more clearly why a function
and a &lt;code&gt;Map&lt;/code&gt; data-structure is basically the same. Our own &lt;code&gt;map&lt;/code&gt; function with a
data-structure is basically the same as the built-in &lt;code&gt;List.map&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
The fact that our own &lt;code&gt;map&lt;/code&gt; is not tail-recursive and fails with big input lists is not important
for this article. We could spent some more time in optimizing our own &lt;code&gt;map&lt;/code&gt; and make it tail-recursive,
but the focus is not tail-recursion or performance, the focus is to understand that we can substitute
a function with a &lt;code&gt;Map&lt;/code&gt; data-structure.
&lt;/div&gt;
&lt;p&gt;It is even interesting to see how similar both &lt;code&gt;map&lt;/code&gt; functions are. When we look at both
definitions we see:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs10', 51)&quot; onmouseover=&quot;showTip(event, 'fs10', 51)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs11', 52)&quot; onmouseover=&quot;showTip(event, 'fs11', 52)&quot; class=&quot;i&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 53)&quot; onmouseover=&quot;showTip(event, 'fs18', 53)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;span class=&quot;i&quot;&gt;map&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 55)&quot; onmouseover=&quot;showTip(event, 'fs6', 55)&quot; class=&quot;i&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;a&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 56)&quot; onmouseover=&quot;showTip(event, 'fs18', 56)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;b&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 57)&quot; onmouseover=&quot;showTip(event, 'fs18', 57)&quot; class=&quot;i&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;List.map&lt;/code&gt; expects a function that maps &lt;code&gt;'a&lt;/code&gt; values to &lt;code&gt;'b&lt;/code&gt; values, while our own &lt;code&gt;map&lt;/code&gt; expects
a &lt;code&gt;Map&lt;/code&gt; data-structure that maps &lt;code&gt;'a&lt;/code&gt; to &lt;code&gt;'b&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;But once again, generating all possible input values before-hand feels a little bit silly.
We need to create a lot of possible values that we probably never need. It also costs more
memory as we need to save all possible combinations. That is why we pass a function instead.
We just pass the description how to compute the values instead.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;
It is quite important to understand that passing a data-structure instead of a function is only
&lt;em&gt;theoretically&lt;/em&gt; possible. &lt;em&gt;Practically&lt;/em&gt; there exists a lot of cases where
such an approach will not work. When we for example try to create a data-structure that
maps any string to the length of a string, then it is practically impossible to create
a data-structure.
&lt;/p&gt;
&lt;p&gt;We actually would need to create a data-structure that contains any possible input string and returns
the length of it. Even when we just consider the stone-age view that they are only 128 characters
(aka ASCII) and we restrict us on a maximum length of 10 characters there already exists
1.180.591.620.717.411.303.424 possible input strings we need to handle.&lt;/p&gt;
&lt;p&gt;Creating a data-structure that contains all possible input strings that maps it to the
length is theoretically possible. But already for 10 characters and just considering ASCII
we have such a large amount of possible input strings that it just exceeds the amount of memory
a single computer could have.&lt;/p&gt;
&lt;p&gt;That doesn't mean passing functions doesn't make sense. It is quite the opposite, because the needed
data to represent a function is so huge, it is even more important that we can pass a function
that only calculates those things we truly need.
&lt;/div&gt;&lt;/p&gt;
&lt;a name=&quot;fp-retn-functions&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Functions as return values&lt;/h2&gt;
&lt;p&gt;Let's consider the following function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 58)&quot; onmouseover=&quot;showTip(event, 'fs19', 58)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 59)&quot; onmouseover=&quot;showTip(event, 'fs3', 59)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs6', 60)&quot; onmouseover=&quot;showTip(event, 'fs6', 60)&quot; class=&quot;t&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs7', 61)&quot; onmouseover=&quot;showTip(event, 'fs7', 61)&quot; class=&quot;f&quot;&gt;ofList&lt;/span&gt; [
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 62)&quot; onmouseover=&quot;showTip(event, 'fs20', 62)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 63)&quot; onmouseover=&quot;showTip(event, 'fs20', 63)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt;, (&lt;span onmouseout=&quot;hideTip(event, 'fs20', 64)&quot; onmouseover=&quot;showTip(event, 'fs20', 64)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 65)&quot; onmouseover=&quot;showTip(event, 'fs3', 65)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
    ]

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 66)&quot; onmouseover=&quot;showTip(event, 'fs21', 66)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 67)&quot; onmouseover=&quot;showTip(event, 'fs19', 67)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs21', 68)&quot; onmouseover=&quot;showTip(event, 'fs21', 68)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs21', 69)&quot; onmouseover=&quot;showTip(event, 'fs21', 69)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 12&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs21', 70)&quot; onmouseover=&quot;showTip(event, 'fs21', 70)&quot; class=&quot;i&quot;&gt;add10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;c&quot;&gt;// 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We have a function that returns a new Map structure. When we call &lt;code&gt;generateAdd 10&lt;/code&gt; we get
the following Map data-structure back.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[(&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;13&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;14&lt;/span&gt;); (&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;15&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But we already have seen this kind of code before. This was the way how we turned
our &lt;code&gt;square&lt;/code&gt; function into a data-structure, so we could pass it to our own &lt;code&gt;map&lt;/code&gt; function. But
this time we create a &lt;code&gt;Map&lt;/code&gt; data-structure inside a function and return it from a function.
This is the same as creating a function inside a function and returning it.&lt;/p&gt;
&lt;p&gt;When we look at &lt;code&gt;generateAdd&lt;/code&gt; then we see the following. We loop over the number from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;.
Those represents the inputs of a function we pre-calculate. With &lt;code&gt;yield&lt;/code&gt; we return the mapping
&lt;code&gt;i&lt;/code&gt; to &lt;code&gt;(i + x)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we want to turn it into a function we just need to return the code &lt;code&gt;(i + x)&lt;/code&gt; somehow.
So how do we return a function with that code? That is the purpose of &lt;em&gt;lambda&lt;/em&gt;. &lt;em&gt;lambda&lt;/em&gt;
is the idea of a function as a value. In F# we just use the &lt;code&gt;fun&lt;/code&gt; keyword to create
a function/lambda.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 71)&quot; onmouseover=&quot;showTip(event, 'fs22', 71)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 72)&quot; onmouseover=&quot;showTip(event, 'fs3', 72)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 73)&quot; onmouseover=&quot;showTip(event, 'fs20', 73)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 74)&quot; onmouseover=&quot;showTip(event, 'fs20', 74)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 75)&quot; onmouseover=&quot;showTip(event, 'fs3', 75)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 76)&quot; onmouseover=&quot;showTip(event, 'fs23', 76)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 77)&quot; onmouseover=&quot;showTip(event, 'fs22', 77)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs23', 78)&quot; onmouseover=&quot;showTip(event, 'fs23', 78)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 79)&quot; onmouseover=&quot;showTip(event, 'fs23', 79)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 12&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 80)&quot; onmouseover=&quot;showTip(event, 'fs23', 80)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 81)&quot; onmouseover=&quot;showTip(event, 'fs23', 81)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Instead of pre-calculating &lt;code&gt;i + x&lt;/code&gt; for a dozen of numbers, now we just return the whole
computation itself. When we call &lt;code&gt;generateAdd 10&lt;/code&gt; we now get a new function back that
can turn any input &lt;code&gt;int&lt;/code&gt; into an output &lt;code&gt;int&lt;/code&gt; where we added &lt;code&gt;10&lt;/code&gt; to it.&lt;/p&gt;
&lt;p&gt;As you can see, both versions with a data-structure or the functions are quite similar.
But the last version still contains some interesting things that are worth to talk about.&lt;/p&gt;
&lt;a name=&quot;fp-lambda&quot;&gt;&lt;/a&gt;
&lt;h2&gt;There is only lambda&lt;/h2&gt;
&lt;p&gt;When we want to create an &lt;code&gt;int&lt;/code&gt;. How do we do that? Well we just write it. For example &lt;code&gt;5&lt;/code&gt; is
just &lt;code&gt;5&lt;/code&gt;. We can work with &lt;code&gt;5&lt;/code&gt; however we want. We can pass it to a function, use it in
calculations and so on.&lt;/p&gt;
&lt;p&gt;This works with any number, but when we for example want to work with &lt;code&gt;587452198&lt;/code&gt; then
always rewriting this number can become annoying and tedious. Instead of working with numbers
directly we can bind a number to a symbol and give it a name. We bind something to
a name with &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;587452198&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once we have written this kind of thing, we now can use &lt;code&gt;bigNumber&lt;/code&gt;. But what happens exactly
when we write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;bigNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;bigNumber&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A process named &lt;em&gt;Substitution&lt;/em&gt; starts. The language cannot do anything with &lt;code&gt;bigNumber&lt;/code&gt; but
&lt;code&gt;bigNumber&lt;/code&gt; was anyway just a name for something different. The language just replaces &lt;code&gt;bigNumber&lt;/code&gt;
with the number it stands for. And now we see something like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;587452198&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;587452198&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;After the &lt;em&gt;substitution&lt;/em&gt; we can calculate the result &lt;code&gt;1174904396&lt;/code&gt; and bind the result to &lt;code&gt;y&lt;/code&gt;.
Now also &lt;code&gt;y&lt;/code&gt; can be used in other calculations. This substitution process is quite
important. It is basically the foundation of a function. Previously we defined &lt;code&gt;square&lt;/code&gt;
like that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In fact, the language cannot execute anything in this example, as there is nothing to
execute. &lt;code&gt;x&lt;/code&gt; has no meaning at this point. To really calculate something we must substitute &lt;code&gt;x&lt;/code&gt; with
something different. How do we substitute it? We do it when we write:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We then say that &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;square&lt;/code&gt; should be substituted with &lt;code&gt;10&lt;/code&gt;. Instead of &lt;code&gt;x * x&lt;/code&gt; it
substitutes &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;10&lt;/code&gt; and it calculates &lt;code&gt;10 * 10&lt;/code&gt;. What we see here are three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have a concrete value like &lt;code&gt;10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can bind a concrete value to a symbol with &lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Symbols get substituted with a concrete value&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The interesting part is. Technically a function definition does not exists. The only
way to create a function is through the &lt;code&gt;fun&lt;/code&gt; keyword (also named: lambda expression). So when
we want to write a calculation with a symbol. We just write.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How do we execute the lambda? We just provide a value that should be substituted for &lt;code&gt;x&lt;/code&gt;
after the lambda expression.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//  4&lt;/span&gt;
(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;//  9&lt;/span&gt;
(&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But this overall makes less sense. We also could have written &lt;code&gt;2 * 2&lt;/code&gt; or &lt;code&gt;4 * 4&lt;/code&gt; directly. And
overall we don't want to rewrite the function all over again and again because that is annoying.
But we already have seen what we do in such a case. We just bind it to a symbol with &lt;code&gt;let&lt;/code&gt;!&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 82)&quot; onmouseover=&quot;showTip(event, 'fs2', 82)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 83)&quot; onmouseover=&quot;showTip(event, 'fs3', 83)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 84)&quot; onmouseover=&quot;showTip(event, 'fs3', 84)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 85)&quot; onmouseover=&quot;showTip(event, 'fs3', 85)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How do we work with &lt;code&gt;square&lt;/code&gt;? You already have done it before.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs2', 86)&quot; onmouseover=&quot;showTip(event, 'fs2', 86)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;//  25&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 87)&quot; onmouseover=&quot;showTip(event, 'fs2', 87)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs2', 88)&quot; onmouseover=&quot;showTip(event, 'fs2', 88)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 625&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Actually what really happens. &lt;code&gt;square&lt;/code&gt; is just a symbol and it is once again substituted by
&lt;code&gt;(fun x -&amp;gt; x * x)&lt;/code&gt;. When we write &lt;code&gt;5&lt;/code&gt; after it, then &lt;code&gt;x&lt;/code&gt; in our function gets substituted by &lt;code&gt;5&lt;/code&gt;.
But creating functions and binding it to a symbol happens so often that we just have a shortcut
for that.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs2', 89)&quot; onmouseover=&quot;showTip(event, 'fs2', 89)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 90)&quot; onmouseover=&quot;showTip(event, 'fs3', 90)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 91)&quot; onmouseover=&quot;showTip(event, 'fs3', 91)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 92)&quot; onmouseover=&quot;showTip(event, 'fs3', 92)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This definition is the exact same as the &lt;code&gt;square&lt;/code&gt; definition with an explicit &lt;code&gt;fun&lt;/code&gt;. That is also
the reason why calling &lt;code&gt;square&lt;/code&gt; looks exactly the same. We have two different ways to define
a function.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 93)&quot; onmouseover=&quot;showTip(event, 'fs24', 93)&quot; class=&quot;f&quot;&gt;squareA&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 94)&quot; onmouseover=&quot;showTip(event, 'fs3', 94)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 95)&quot; onmouseover=&quot;showTip(event, 'fs3', 95)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 96)&quot; onmouseover=&quot;showTip(event, 'fs3', 96)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 97)&quot; onmouseover=&quot;showTip(event, 'fs25', 97)&quot; class=&quot;f&quot;&gt;squareB&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 98)&quot; onmouseover=&quot;showTip(event, 'fs3', 98)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 99)&quot; onmouseover=&quot;showTip(event, 'fs3', 99)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 100)&quot; onmouseover=&quot;showTip(event, 'fs3', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But there is no difference in calling both functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs24', 101)&quot; onmouseover=&quot;showTip(event, 'fs24', 101)&quot; class=&quot;f&quot;&gt;squareA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 25&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs25', 102)&quot; onmouseover=&quot;showTip(event, 'fs25', 102)&quot; class=&quot;f&quot;&gt;squareB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It just shows that the second &lt;code&gt;let&lt;/code&gt; definition that already includes the function arguments
is only a shortcut to the more explicit lambda expression.&lt;/p&gt;
&lt;a name=&quot;fp-currying&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Currying&lt;/h2&gt;
&lt;p&gt;In fact the simplification don't stop here. We don't even have functions with more than one
argument. There only exists functions with one arguments. So what do you do when you for
example want to add two numbers?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 103)&quot; onmouseover=&quot;showTip(event, 'fs26', 103)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 104)&quot; onmouseover=&quot;showTip(event, 'fs3', 104)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 105)&quot; onmouseover=&quot;showTip(event, 'fs27', 105)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span onmouseout=&quot;hideTip(event, 'fs3', 106)&quot; onmouseover=&quot;showTip(event, 'fs3', 106)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 107)&quot; onmouseover=&quot;showTip(event, 'fs27', 107)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs26', 108)&quot; onmouseover=&quot;showTip(event, 'fs26', 108)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs26', 109)&quot; onmouseover=&quot;showTip(event, 'fs26', 109)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But creating such kind of nested functions is quite annoying. So there is a shortcut. You just can
use &lt;code&gt;fun&lt;/code&gt; with multiple arguments and it creates the nesting for you.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 110)&quot; onmouseover=&quot;showTip(event, 'fs28', 110)&quot; class=&quot;f&quot;&gt;add&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 111)&quot; onmouseover=&quot;showTip(event, 'fs3', 111)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 112)&quot; onmouseover=&quot;showTip(event, 'fs27', 112)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs3', 113)&quot; onmouseover=&quot;showTip(event, 'fs3', 113)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 114)&quot; onmouseover=&quot;showTip(event, 'fs27', 114)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs28', 115)&quot; onmouseover=&quot;showTip(event, 'fs28', 115)&quot; class=&quot;f&quot;&gt;add&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs28', 116)&quot; onmouseover=&quot;showTip(event, 'fs28', 116)&quot; class=&quot;f&quot;&gt;add&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And there is once again a shortcut by just using &lt;code&gt;let&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs29', 117)&quot; onmouseover=&quot;showTip(event, 'fs29', 117)&quot; class=&quot;f&quot;&gt;add&amp;#39;&amp;#39;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 118)&quot; onmouseover=&quot;showTip(event, 'fs3', 118)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 119)&quot; onmouseover=&quot;showTip(event, 'fs27', 119)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 120)&quot; onmouseover=&quot;showTip(event, 'fs3', 120)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 121)&quot; onmouseover=&quot;showTip(event, 'fs27', 121)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs29', 122)&quot; onmouseover=&quot;showTip(event, 'fs29', 122)&quot; class=&quot;f&quot;&gt;add&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 30&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs29', 123)&quot; onmouseover=&quot;showTip(event, 'fs29', 123)&quot; class=&quot;f&quot;&gt;add&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In practice you will usually only use the last way of defining a function. But it is quite
important to understand that all three ways of writing a function are interchangeable
and mean the exact same.&lt;/p&gt;
&lt;p&gt;How does those information help us? We can rewrite our &lt;code&gt;add10&lt;/code&gt; function that we created
previously. Previously we wrote &lt;code&gt;add10&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 124)&quot; onmouseover=&quot;showTip(event, 'fs22', 124)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 125)&quot; onmouseover=&quot;showTip(event, 'fs3', 125)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 126)&quot; onmouseover=&quot;showTip(event, 'fs20', 126)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 127)&quot; onmouseover=&quot;showTip(event, 'fs20', 127)&quot; class=&quot;i&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 128)&quot; onmouseover=&quot;showTip(event, 'fs3', 128)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 129)&quot; onmouseover=&quot;showTip(event, 'fs23', 129)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 130)&quot; onmouseover=&quot;showTip(event, 'fs22', 130)&quot; class=&quot;f&quot;&gt;generateAdd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But this is the same as:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 131)&quot; onmouseover=&quot;showTip(event, 'fs26', 131)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 132)&quot; onmouseover=&quot;showTip(event, 'fs3', 132)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 133)&quot; onmouseover=&quot;showTip(event, 'fs27', 133)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 134)&quot; onmouseover=&quot;showTip(event, 'fs3', 134)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 135)&quot; onmouseover=&quot;showTip(event, 'fs27', 135)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 136)&quot; onmouseover=&quot;showTip(event, 'fs23', 136)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs26', 137)&quot; onmouseover=&quot;showTip(event, 'fs26', 137)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs23', 138)&quot; onmouseover=&quot;showTip(event, 'fs23', 138)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 139)&quot; onmouseover=&quot;showTip(event, 'fs23', 139)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It is quite important to understand what happens here. We start with &lt;code&gt;add&lt;/code&gt;, but this is
a function that expects a single value &lt;code&gt;x&lt;/code&gt;. That is the reason why we just can call &lt;code&gt;add 10&lt;/code&gt; with
one argument. This then returns a lambda like &lt;code&gt;(fun y -&amp;gt; 10 + y)&lt;/code&gt;. That means
we substituted &lt;code&gt;x&lt;/code&gt; with &lt;code&gt;10&lt;/code&gt; and then returned a new function.&lt;/p&gt;
&lt;p&gt;This new function is then bounded to the symbol &lt;code&gt;add10&lt;/code&gt;. When we finally call &lt;code&gt;add10 5&lt;/code&gt; then
we also substitute &lt;code&gt;y&lt;/code&gt; and we get &lt;code&gt;10 + 5&lt;/code&gt; and this evaluates to &lt;code&gt;15&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Only passing some arguments is what we call &lt;em&gt;Partial Application&lt;/em&gt;. But it is more important
to understand that we get &lt;em&gt;Partial Application&lt;/em&gt; for free because we have Currying and all
functions are one-argument functions that return new functions.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;
If you wonder about the apostrophes in &lt;code&gt;add'&lt;/code&gt; or &lt;code&gt;add''&lt;/code&gt;. They are
not special and just part of the function name. This is usual the way how
functional programmers say: This is another version/implementation of a function.
&lt;/p&gt;
&lt;p&gt;I also could just numbered the functions with &lt;code&gt;add2&lt;/code&gt;, &lt;code&gt;add3&lt;/code&gt; and so on.
But this creates conflict with Partial Applied functions. When i write &lt;code&gt;add3&lt;/code&gt; i
would expect that it is a partial applied function with the first argument set to &lt;code&gt;3&lt;/code&gt;.
&lt;/div&gt;&lt;/p&gt;
&lt;a name=&quot;fp-closures&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Closures&lt;/h2&gt;
&lt;p&gt;Previously I said that when you call a function then some kind of substitution happens.
When you call &lt;code&gt;add 10&lt;/code&gt; in the last example then &lt;code&gt;x&lt;/code&gt; gets substituted by &lt;code&gt;10&lt;/code&gt; and it returns
a function &lt;code&gt;10 + y&lt;/code&gt;. But this is not quite correct. What really happens is that the actual
variable &lt;code&gt;x&lt;/code&gt; is just &lt;em&gt;remembered&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It seems not like a big distinction, but the difference becomes more obvious when we use
a mutable variable.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 140)&quot; onmouseover=&quot;showTip(event, 'fs30', 140)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 141)&quot; onmouseover=&quot;showTip(event, 'fs31', 141)&quot; class=&quot;f&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 142)&quot; onmouseover=&quot;showTip(event, 'fs32', 142)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 143)&quot; onmouseover=&quot;showTip(event, 'fs33', 143)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 144)&quot; onmouseover=&quot;showTip(event, 'fs27', 144)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs33', 145)&quot; onmouseover=&quot;showTip(event, 'fs33', 145)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 146)&quot; onmouseover=&quot;showTip(event, 'fs27', 146)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 147)&quot; onmouseover=&quot;showTip(event, 'fs23', 147)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 148)&quot; onmouseover=&quot;showTip(event, 'fs32', 148)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 149)&quot; onmouseover=&quot;showTip(event, 'fs30', 149)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs23', 150)&quot; onmouseover=&quot;showTip(event, 'fs23', 150)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs30', 151)&quot; onmouseover=&quot;showTip(event, 'fs30', 151)&quot; class=&quot;v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs23', 152)&quot; onmouseover=&quot;showTip(event, 'fs23', 152)&quot; class=&quot;f&quot;&gt;add10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Because the value of &lt;code&gt;x&lt;/code&gt; changes between both calls we now get &lt;code&gt;15&lt;/code&gt; and &lt;code&gt;10&lt;/code&gt;. The
reason why we anyway get different values is because the returned function only refers
to &lt;code&gt;x&lt;/code&gt; and does not do a real substitution of the value.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
&lt;p&gt;
Usually the difference between referring and substitution only becomes a problem with
mutable variables. Something we anyway avoid in functional programming. When we think
of referential transparency (this is how functional programming is usually defined)
we could even say that this code is not functional at all.
&lt;/p&gt;
&lt;p&gt;But i don't go further into this topic. Usually we don't use mutable variables, but
as F# is not a pure-functional language and it supports mutation, i still think it
is important to mention.
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;But there is an even more fundamental idea that emerges from that example. How long do
we need to keep &lt;code&gt;x&lt;/code&gt; in memory? The answer is, as long we have some code that still refers
to it. In our case &lt;code&gt;add10&lt;/code&gt; refers to &lt;code&gt;x&lt;/code&gt;, we always must keep &lt;code&gt;x&lt;/code&gt; in memory, as long
we have access to &lt;code&gt;add10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is also the reason why the first Lisp compiler already provided automatic memory
management with garbage collection (invented 1962). More precisely I don't even know
of any functional language that don't provide automatic memory management. While it
might be theoretically possible to not provide automatic memory management. It
is probably not a good practical decision.&lt;/p&gt;
&lt;p&gt;Whenever we &lt;em&gt;remember&lt;/em&gt; a variable or refer to a variable from a lambda expression,
we call it a &lt;em&gt;Closure&lt;/em&gt;.&lt;/p&gt;
&lt;a name=&quot;fp-example&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Example: Currying and Closures&lt;/h2&gt;
&lt;p&gt;I want to give a small example that shows functions as value and return values,
currying and closures all in action. In F# we have an option type. An option type can have
two states, &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. The &lt;code&gt;Some&lt;/code&gt; state can carry an additional value with it.
Usually the option type is used for the idea of &lt;em&gt;No Value&lt;/em&gt;, but it also can be used as
the idea of a &lt;em&gt;Success&lt;/em&gt; or &lt;em&gt;Failure&lt;/em&gt;, or how I use it as &lt;em&gt;Valid&lt;/em&gt; or &lt;em&gt;Invalid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We could for example write two functions that check if a number is greater or smaller
than a limit. If the number is valid (smaller or greater) then we just return the number
unchanged, otherwise we return &lt;code&gt;None&lt;/code&gt;. But it also could be that we already get a &lt;code&gt;None&lt;/code&gt; as
input. In this case we just return &lt;code&gt;None&lt;/code&gt;. We could write &lt;code&gt;smaller&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt; like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 153)&quot; onmouseover=&quot;showTip(event, 'fs34', 153)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 154)&quot; onmouseover=&quot;showTip(event, 'fs35', 154)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 155)&quot; onmouseover=&quot;showTip(event, 'fs36', 155)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 156)&quot; onmouseover=&quot;showTip(event, 'fs36', 156)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 157)&quot; onmouseover=&quot;showTip(event, 'fs37', 157)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 158)&quot; onmouseover=&quot;showTip(event, 'fs37', 158)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 159)&quot; onmouseover=&quot;showTip(event, 'fs38', 159)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 160)&quot; onmouseover=&quot;showTip(event, 'fs39', 160)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs39', 161)&quot; onmouseover=&quot;showTip(event, 'fs39', 161)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 162)&quot; onmouseover=&quot;showTip(event, 'fs35', 162)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 163)&quot; onmouseover=&quot;showTip(event, 'fs38', 163)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 164)&quot; onmouseover=&quot;showTip(event, 'fs39', 164)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 165)&quot; onmouseover=&quot;showTip(event, 'fs37', 165)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 166)&quot; onmouseover=&quot;showTip(event, 'fs40', 166)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 167)&quot; onmouseover=&quot;showTip(event, 'fs41', 167)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 168)&quot; onmouseover=&quot;showTip(event, 'fs36', 168)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 169)&quot; onmouseover=&quot;showTip(event, 'fs36', 169)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 170)&quot; onmouseover=&quot;showTip(event, 'fs37', 170)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 171)&quot; onmouseover=&quot;showTip(event, 'fs37', 171)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 172)&quot; onmouseover=&quot;showTip(event, 'fs38', 172)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 173)&quot; onmouseover=&quot;showTip(event, 'fs39', 173)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs39', 174)&quot; onmouseover=&quot;showTip(event, 'fs39', 174)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 175)&quot; onmouseover=&quot;showTip(event, 'fs41', 175)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 176)&quot; onmouseover=&quot;showTip(event, 'fs38', 176)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs39', 177)&quot; onmouseover=&quot;showTip(event, 'fs39', 177)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 178)&quot; onmouseover=&quot;showTip(event, 'fs37', 178)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs34', 179)&quot; onmouseover=&quot;showTip(event, 'fs34', 179)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 180)&quot; onmouseover=&quot;showTip(event, 'fs38', 180)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs34', 181)&quot; onmouseover=&quot;showTip(event, 'fs34', 181)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 182)&quot; onmouseover=&quot;showTip(event, 'fs38', 182)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs40', 183)&quot; onmouseover=&quot;showTip(event, 'fs40', 183)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 184)&quot; onmouseover=&quot;showTip(event, 'fs38', 184)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs40', 185)&quot; onmouseover=&quot;showTip(event, 'fs40', 185)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 186)&quot; onmouseover=&quot;showTip(event, 'fs38', 186)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But when we look closer, &lt;code&gt;smaller&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt; are nearly identical functions. The only
difference is the &lt;code&gt;if&lt;/code&gt; check itself. But what does the &lt;code&gt;if&lt;/code&gt; anyway? The &lt;code&gt;if&lt;/code&gt; itself
just turns a &lt;code&gt;number&lt;/code&gt; somehow into a boolean value.&lt;/p&gt;
&lt;p&gt;Instead of hard-coding the &lt;code&gt;if&lt;/code&gt; behaviour we also could call a function that we give the number
and returns us a boolean. This way we could get rid of the whole code-duplication. We just
abstract both functions into a new function that expects a function for the transformation
of &lt;code&gt;number -&amp;gt; Bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With such a new function we then could easily rewrite &lt;code&gt;smaller&lt;/code&gt; and &lt;code&gt;greater&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 187)&quot; onmouseover=&quot;showTip(event, 'fs42', 187)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 188)&quot; onmouseover=&quot;showTip(event, 'fs43', 188)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 189)&quot; onmouseover=&quot;showTip(event, 'fs44', 189)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 190)&quot; onmouseover=&quot;showTip(event, 'fs44', 190)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 191)&quot; onmouseover=&quot;showTip(event, 'fs37', 191)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 192)&quot; onmouseover=&quot;showTip(event, 'fs37', 192)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 193)&quot; onmouseover=&quot;showTip(event, 'fs38', 193)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 194)&quot; onmouseover=&quot;showTip(event, 'fs45', 194)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs43', 195)&quot; onmouseover=&quot;showTip(event, 'fs43', 195)&quot; class=&quot;f&quot;&gt;predicate&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 196)&quot; onmouseover=&quot;showTip(event, 'fs45', 196)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 197)&quot; onmouseover=&quot;showTip(event, 'fs38', 197)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 198)&quot; onmouseover=&quot;showTip(event, 'fs45', 198)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 199)&quot; onmouseover=&quot;showTip(event, 'fs37', 199)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 200)&quot; onmouseover=&quot;showTip(event, 'fs46', 200)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 201)&quot; onmouseover=&quot;showTip(event, 'fs35', 201)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 202)&quot; onmouseover=&quot;showTip(event, 'fs15', 202)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 203)&quot; onmouseover=&quot;showTip(event, 'fs15', 203)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 204)&quot; onmouseover=&quot;showTip(event, 'fs35', 204)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 205)&quot; onmouseover=&quot;showTip(event, 'fs47', 205)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 206)&quot; onmouseover=&quot;showTip(event, 'fs41', 206)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 207)&quot; onmouseover=&quot;showTip(event, 'fs15', 207)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 208)&quot; onmouseover=&quot;showTip(event, 'fs15', 208)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 209)&quot; onmouseover=&quot;showTip(event, 'fs41', 209)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs42', 210)&quot; onmouseover=&quot;showTip(event, 'fs42', 210)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 211)&quot; onmouseover=&quot;showTip(event, 'fs46', 211)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 212)&quot; onmouseover=&quot;showTip(event, 'fs38', 212)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs42', 213)&quot; onmouseover=&quot;showTip(event, 'fs42', 213)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 214)&quot; onmouseover=&quot;showTip(event, 'fs46', 214)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 215)&quot; onmouseover=&quot;showTip(event, 'fs38', 215)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs42', 216)&quot; onmouseover=&quot;showTip(event, 'fs42', 216)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 217)&quot; onmouseover=&quot;showTip(event, 'fs47', 217)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 218)&quot; onmouseover=&quot;showTip(event, 'fs38', 218)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs42', 219)&quot; onmouseover=&quot;showTip(event, 'fs42', 219)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 220)&quot; onmouseover=&quot;showTip(event, 'fs47', 220)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 221)&quot; onmouseover=&quot;showTip(event, 'fs38', 221)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now the whole code is written with currying in mind. &lt;code&gt;is&lt;/code&gt; expects a function that turns
a number into a &lt;code&gt;bool&lt;/code&gt;. When we write &lt;code&gt;(smaller 10)&lt;/code&gt; we just get back such a function.
We get back a new function that contains &lt;code&gt;10&lt;/code&gt; as a closure. This function is then passed
as a value to the &lt;code&gt;is&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;We also could nest the calls, for example when we want to do two checks at once. The second
argument to &lt;code&gt;is&lt;/code&gt; must be an option value. But this is also what &lt;code&gt;is&lt;/code&gt; returns. So we could
use the output of another &lt;code&gt;is&lt;/code&gt; as the input for the first &lt;code&gt;is&lt;/code&gt;. What we then get is very
Lisp-like code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs42', 222)&quot; onmouseover=&quot;showTip(event, 'fs42', 222)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 223)&quot; onmouseover=&quot;showTip(event, 'fs47', 223)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
  (&lt;span onmouseout=&quot;hideTip(event, 'fs42', 224)&quot; onmouseover=&quot;showTip(event, 'fs42', 224)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 225)&quot; onmouseover=&quot;showTip(event, 'fs46', 225)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
    (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 226)&quot; onmouseover=&quot;showTip(event, 'fs38', 226)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;))) &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;At least in F# most people would prefer the piping idiom. With pipe we can write
the last argument of a function in front of the function. With this idea we end up with a
more sequential way.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 227)&quot; onmouseover=&quot;showTip(event, 'fs38', 227)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 228)&quot; onmouseover=&quot;showTip(event, 'fs42', 228)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 229)&quot; onmouseover=&quot;showTip(event, 'fs47', 229)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 230)&quot; onmouseover=&quot;showTip(event, 'fs42', 230)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 231)&quot; onmouseover=&quot;showTip(event, 'fs46', 231)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;(Some 3)&lt;/code&gt; is now the input to &lt;code&gt;is (greater 0)&lt;/code&gt; the return value of this is then the input value
to &lt;code&gt;is (smaller 10)&lt;/code&gt; and so on. But checking if a number is between some values is quite common.
Why not combine both things into a single function?&lt;/p&gt;
&lt;p&gt;We already have &lt;code&gt;is&lt;/code&gt; that does the handling of the option for us. But it only works
with a single predicate function. This is okay, but to be more flexible we should write
a way to combine two predicate functions into a single new predicate function.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
A predicate is a function that always returns a &lt;code&gt;bool&lt;/code&gt;. Predicates are often used for
validation or filtering. For example:
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;[&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;] &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 232)&quot; onmouseover=&quot;showTip(event, 'fs10', 232)&quot; class=&quot;i&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs48', 233)&quot; onmouseover=&quot;showTip(event, 'fs48', 233)&quot; class=&quot;i&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// [2;4;6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 234)&quot; onmouseover=&quot;showTip(event, 'fs49', 234)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 235)&quot; onmouseover=&quot;showTip(event, 'fs50', 235)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 236)&quot; onmouseover=&quot;showTip(event, 'fs51', 236)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 237)&quot; onmouseover=&quot;showTip(event, 'fs52', 237)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs50', 238)&quot; onmouseover=&quot;showTip(event, 'fs50', 238)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 239)&quot; onmouseover=&quot;showTip(event, 'fs52', 239)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 240)&quot; onmouseover=&quot;showTip(event, 'fs51', 240)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 241)&quot; onmouseover=&quot;showTip(event, 'fs52', 241)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The idea is simple, we have two functions, and both functions must return &lt;code&gt;true&lt;/code&gt; for the given
input &lt;code&gt;x&lt;/code&gt;. Only when both return &lt;code&gt;true&lt;/code&gt; our &lt;code&gt;combine&lt;/code&gt; function also returns &lt;code&gt;true&lt;/code&gt;. Now we can
easily combine two predicates into a single new predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 242)&quot; onmouseover=&quot;showTip(event, 'fs53', 242)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 243)&quot; onmouseover=&quot;showTip(event, 'fs35', 243)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 244)&quot; onmouseover=&quot;showTip(event, 'fs41', 244)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs49', 245)&quot; onmouseover=&quot;showTip(event, 'fs49', 245)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 246)&quot; onmouseover=&quot;showTip(event, 'fs46', 246)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 247)&quot; onmouseover=&quot;showTip(event, 'fs41', 247)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 248)&quot; onmouseover=&quot;showTip(event, 'fs47', 248)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 249)&quot; onmouseover=&quot;showTip(event, 'fs35', 249)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;))

(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 250)&quot; onmouseover=&quot;showTip(event, 'fs38', 250)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 251)&quot; onmouseover=&quot;showTip(event, 'fs42', 251)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 252)&quot; onmouseover=&quot;showTip(event, 'fs53', 252)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 253)&quot; onmouseover=&quot;showTip(event, 'fs38', 253)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 254)&quot; onmouseover=&quot;showTip(event, 'fs42', 254)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 255)&quot; onmouseover=&quot;showTip(event, 'fs53', 255)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// Some 3&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 256)&quot; onmouseover=&quot;showTip(event, 'fs38', 256)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 257)&quot; onmouseover=&quot;showTip(event, 'fs42', 257)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 258)&quot; onmouseover=&quot;showTip(event, 'fs53', 258)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Once again you can see how we use currying. We don't provide the second argument to &lt;code&gt;smaller&lt;/code&gt; or
&lt;code&gt;greater&lt;/code&gt;. That means both calls return predicates. And those two predicates are then provided
to &lt;code&gt;combine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But we also don't provide the third argument to &lt;code&gt;combine&lt;/code&gt;. That means once again we get another
new predicate function back. This way we can create the &lt;code&gt;between&lt;/code&gt; predicate. It doesn't look like
it, but &lt;code&gt;between&lt;/code&gt; is a function that takes three arguments. &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are the visible
arguments. But we only called &lt;code&gt;combine&lt;/code&gt; with two arguments. That means it returns a lambda,
that makes &lt;code&gt;between&lt;/code&gt; a three argument function (or a chain of three functions taking one-argument).&lt;/p&gt;
&lt;p&gt;What do we do if we want to combine three, four or more predicate functions? &lt;code&gt;combine&lt;/code&gt; currently
can turn two predicates into a single predicate. So we only need to &lt;code&gt;combine&lt;/code&gt; all our predicates until
we end up with a single predicate. This task is already written for us and named &lt;code&gt;reduce&lt;/code&gt;.
Let's create a &lt;code&gt;check&lt;/code&gt; function that we can pass a list of predicates that combines it
into a single predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 259)&quot; onmouseover=&quot;showTip(event, 'fs54', 259)&quot; class=&quot;f&quot;&gt;check&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 260)&quot; onmouseover=&quot;showTip(event, 'fs55', 260)&quot; class=&quot;i&quot;&gt;predicates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 261)&quot; onmouseover=&quot;showTip(event, 'fs10', 261)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs56', 262)&quot; onmouseover=&quot;showTip(event, 'fs56', 262)&quot; class=&quot;f&quot;&gt;reduce&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 263)&quot; onmouseover=&quot;showTip(event, 'fs49', 263)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 264)&quot; onmouseover=&quot;showTip(event, 'fs55', 264)&quot; class=&quot;i&quot;&gt;predicates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now let's combine three predicates at once to create a new predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 265)&quot; onmouseover=&quot;showTip(event, 'fs57', 265)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 266)&quot; onmouseover=&quot;showTip(event, 'fs3', 266)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 267)&quot; onmouseover=&quot;showTip(event, 'fs3', 267)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 268)&quot; onmouseover=&quot;showTip(event, 'fs58', 268)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 269)&quot; onmouseover=&quot;showTip(event, 'fs54', 269)&quot; class=&quot;f&quot;&gt;check&lt;/span&gt; [&lt;span onmouseout=&quot;hideTip(event, 'fs47', 270)&quot; onmouseover=&quot;showTip(event, 'fs47', 270)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 271)&quot; onmouseover=&quot;showTip(event, 'fs46', 271)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 272)&quot; onmouseover=&quot;showTip(event, 'fs57', 272)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt;]

(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 273)&quot; onmouseover=&quot;showTip(event, 'fs38', 273)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 274)&quot; onmouseover=&quot;showTip(event, 'fs42', 274)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 275)&quot; onmouseover=&quot;showTip(event, 'fs58', 275)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 276)&quot; onmouseover=&quot;showTip(event, 'fs38', 276)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 277)&quot; onmouseover=&quot;showTip(event, 'fs42', 277)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 278)&quot; onmouseover=&quot;showTip(event, 'fs58', 278)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 279)&quot; onmouseover=&quot;showTip(event, 'fs38', 279)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 280)&quot; onmouseover=&quot;showTip(event, 'fs42', 280)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 281)&quot; onmouseover=&quot;showTip(event, 'fs58', 281)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 4&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 282)&quot; onmouseover=&quot;showTip(event, 'fs38', 282)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;)  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 283)&quot; onmouseover=&quot;showTip(event, 'fs42', 283)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 284)&quot; onmouseover=&quot;showTip(event, 'fs58', 284)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 6&lt;/span&gt;
(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 285)&quot; onmouseover=&quot;showTip(event, 'fs38', 285)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 286)&quot; onmouseover=&quot;showTip(event, 'fs42', 286)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs58', 287)&quot; onmouseover=&quot;showTip(event, 'fs58', 287)&quot; class=&quot;f&quot;&gt;evenAnd1To9&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;This idea of writing small functions, or basically decomposing a task into small functions and
then composing them into bigger functions is the heart of functional programming. In functional
programming we directly work with functions and we even write our own combinators
to compose functions.&lt;/p&gt;
&lt;a name=&quot;oo&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Object-Oriented programming&lt;/h2&gt;
&lt;p&gt;At the start of the article i said we can achieve the same ideas in Object-Oriented programming
or that you probably already know these things. I want to show you some C# code to achieve the
same things. C# already has some functional features like lambda-expressions. But there is
really no point in showing C# code that uses functional features as an example that OO
and functional programming are orthogonal. Because of this i will only use classes.&lt;/p&gt;
&lt;a name=&quot;oo-class&quot;&gt;&lt;/a&gt;
&lt;h2&gt;What is a class?&lt;/h2&gt;
&lt;p&gt;We start with the same idea. What is actually a class anyway? A class is actually some
kind of compose-able type. It always has at least one constructor, beyond that it can contain
multiple data in the form of public and private fields, additional it can contain multiple
functions operating on those data, often named &lt;em&gt;methods&lt;/em&gt;. I make no distinction between
functions and methods.&lt;/p&gt;
&lt;p&gt;But one important aspect is that there is no technical restriction to create classes with no
data or no functions. There is also no restriction that tells you how many data fields or
functions you must implement.&lt;/p&gt;
&lt;a name=&quot;oo-function&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Function as data&lt;/h2&gt;
&lt;p&gt;I started with the idea of functions as data. I created a &lt;code&gt;square&lt;/code&gt; function and passed the function
around. We wrote our own &lt;code&gt;map&lt;/code&gt; function that showed that we could replace a function by data.
But also the opposite that we could pass a function instead of a data-structure. Re-doing that
proof makes less sense as this idea doesn't invalidate just because we now use classes. But
you probably wonder how we pass a function.&lt;/p&gt;
&lt;p&gt;In fact, when you do OO programming you pass functions all over the place in your code. You do
it even more often as in a functional language. Every object is a container for functions. So
when you pass an object you also pass functions around. In fact you not only pass a single
function, you usually pass dozens of functions including data as a single object around.&lt;/p&gt;
&lt;p&gt;And because you usually return objects that include functions, you also return functions. In fact
in OO it is even hard to find a place where you don't do that. Functional programming
is more a simplification. We only pass a single function. And on top, we have lambda expression
to easily create a single function directly where we need it. That is why it looks different
but actually passing a single function or returning it shouldn't be hard to understand. You
already do that all over the place in an OO language.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Some languages also have the ability to create whole classes/objects inline like you do
with a lambda expression. In fact F# is such a language and supports
&lt;a href=&quot;https://msdn.microsoft.com/visualfsharpdocs/conceptual/object-expressions-%5bfsharp%5d&quot;&gt;Object expressions&lt;/a&gt;
C# also supports &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb397696.aspx&quot;&gt;Anonymous Types&lt;/a&gt;,
but they are more limited. Java supports &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html&quot;&gt;Anonymous classes&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;So, how do we create a &lt;code&gt;List.map&lt;/code&gt; function in C# just with classes and how do we pass it
a function like &lt;code&gt;square&lt;/code&gt;?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; IFunction&amp;lt;A,B&amp;gt; {
    B Call(A a);
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Square &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Call(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; x;
    }
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; List {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; List&amp;lt;B&amp;gt; map&amp;lt;A,B&amp;gt;(IFunction&amp;lt;A,B&amp;gt; func, List&amp;lt;A&amp;gt; values) {
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; newList &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; List&amp;lt;B&amp;gt;();
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; values) {
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; mapping &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; func.Call(x);
            newList.Add(mapping);
        }
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; newList;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;At first, we need to create a &lt;code&gt;IFunction&lt;/code&gt; interface. This interface just tells us that we have
a single method that takes some input and produces some output. We don't even care how that method
is named. I use &lt;code&gt;Call&lt;/code&gt;, but we also could use &lt;code&gt;Run&lt;/code&gt;, &lt;code&gt;Execute&lt;/code&gt; or whatever you like.&lt;/p&gt;
&lt;p&gt;Because we want to pass the square function as a value, we now must write a whole class and wrap
our function inside a class. Now we are able to create an object and pass that function around.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;List.map&lt;/code&gt; just expects such a one-method interface (functional interface) and executes the
function for every element. We now can write something like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; ints    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; List&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; { &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; };
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; squared &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; List.map(&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Square(), ints);
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And &lt;code&gt;squared&lt;/code&gt; is a new list with all elements squared. The &lt;code&gt;IFunction&lt;/code&gt; interface is sure a thing
you only need to write once. Because we don't have currying in C#, we probably also want to
write a version with two or three arguments, but overall you only need to define those once.&lt;/p&gt;
&lt;p&gt;Writing everything this way feels a little bit dumb. Mainly because most often the time there is a
(IMHO: dumb) rule that tells you to put every class into its own file. The above code leads to
an explosion of classes/files. But instead of criticizing the code, you should probably criticize
your rules and OO on why such a simple example is already so complex.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
Once again I want to highlight the importance that i ignore the functional features. You
sure could easily achieve the same with just static methods (functions). Using &lt;code&gt;Func&lt;int,int&gt;&lt;/code&gt;
in &lt;code&gt;List.map&lt;/code&gt; and using a lambda &lt;code&gt;x =&gt; x * x&lt;/code&gt; to call &lt;code&gt;List.map&lt;/code&gt;.
But those are the functional features that were added with C# 3. There is no point in showing
functional concepts with functional features in an OO language to prove that they are orthogonal.
&lt;/div&gt;
&lt;a name=&quot;oo-curry-partial-closure&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Currying, Partial Application and Closures&lt;/h2&gt;
&lt;p&gt;All three things are somehow connected to each other. In the functional code I first introduced
currying, but I primarily used it to show Partial Application (only providing some arguments
to a function, not all) and explained why this needs the concept of a closure. I will first ignore
currying and only talk about the later two. So how can we create a function like &lt;code&gt;add&lt;/code&gt; and partial apply
the first argument?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Add &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; x;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Call(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We now can use it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;.Call(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;What is Partial Application in OO really? It is just an argument to a constructor that is saved in
a private field. All other methods in your class then have access to this private field. The value
that was passed to the constructor is &lt;em&gt;remembered&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This shows what a closure is. Our &lt;code&gt;add10&lt;/code&gt; object just have some internal private fields and
all of those fields must remain in memory as long we have access to &lt;code&gt;add10&lt;/code&gt;. This shows one
fundamental idea. A closure and an object is the same.&lt;/p&gt;
&lt;p&gt;Whenever you create an object in OO programming. It is the same as calling a function that returns
a function. The returned function then has access to the input through a closure. In the functional
code I only returned a single function, but you also can return multiple functions or data-structure
like a &lt;em&gt;Tuple&lt;/em&gt; or &lt;em&gt;Record&lt;/em&gt; that contains those functions.&lt;/p&gt;
&lt;p&gt;In C# we could for example create a class like:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Counter {
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; counter;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; Counter(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; init) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; init;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Current() {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Increment() {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Decrement() {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.counter &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;and use it like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; counter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Counter(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
counter.Increment();
counter.Increment();
counter.Decrement();
Console.WriteLine(counter.Current()); &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;In F# (without using classes in F#) we could achieve the same just with a closure&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// A Record describing three functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs59', 288)&quot; onmouseover=&quot;showTip(event, 'fs59', 288)&quot; class=&quot;t&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; {
    &lt;span onmouseout=&quot;hideTip(event, 'fs60', 289)&quot; onmouseover=&quot;showTip(event, 'fs60', 289)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs61', 290)&quot; onmouseover=&quot;showTip(event, 'fs61', 290)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs62', 291)&quot; onmouseover=&quot;showTip(event, 'fs62', 291)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs63', 292)&quot; onmouseover=&quot;showTip(event, 'fs63', 292)&quot; class=&quot;i&quot;&gt;Increment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 293)&quot; onmouseover=&quot;showTip(event, 'fs61', 293)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 294)&quot; onmouseover=&quot;showTip(event, 'fs61', 294)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs64', 295)&quot; onmouseover=&quot;showTip(event, 'fs64', 295)&quot; class=&quot;i&quot;&gt;Decrement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 296)&quot; onmouseover=&quot;showTip(event, 'fs61', 296)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs61', 297)&quot; onmouseover=&quot;showTip(event, 'fs61', 297)&quot; class=&quot;t&quot;&gt;unit&lt;/span&gt;
}

&lt;span class=&quot;c&quot;&gt;// A function that has `counter` as a closure and returns a Counter Record&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 298)&quot; onmouseover=&quot;showTip(event, 'fs65', 298)&quot; class=&quot;f&quot;&gt;counter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 299)&quot; onmouseover=&quot;showTip(event, 'fs66', 299)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 300)&quot; onmouseover=&quot;showTip(event, 'fs67', 300)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs31', 301)&quot; onmouseover=&quot;showTip(event, 'fs31', 301)&quot; class=&quot;f&quot;&gt;ref&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 302)&quot; onmouseover=&quot;showTip(event, 'fs66', 302)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;
    {
        &lt;span class=&quot;i&quot;&gt;Current&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 303)&quot; onmouseover=&quot;showTip(event, 'fs67', 303)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt;)
        &lt;span class=&quot;i&quot;&gt;Increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 304)&quot; onmouseover=&quot;showTip(event, 'fs67', 304)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 305)&quot; onmouseover=&quot;showTip(event, 'fs67', 305)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
        &lt;span class=&quot;i&quot;&gt;Decrement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs67', 306)&quot; onmouseover=&quot;showTip(event, 'fs67', 306)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs67', 307)&quot; onmouseover=&quot;showTip(event, 'fs67', 307)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;And you use it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs68', 308)&quot; onmouseover=&quot;showTip(event, 'fs68', 308)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs65', 309)&quot; onmouseover=&quot;showTip(event, 'fs65', 309)&quot; class=&quot;f&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs68', 310)&quot; onmouseover=&quot;showTip(event, 'fs68', 310)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 311)&quot; onmouseover=&quot;showTip(event, 'fs63', 311)&quot; class=&quot;i&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs68', 312)&quot; onmouseover=&quot;showTip(event, 'fs68', 312)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs63', 313)&quot; onmouseover=&quot;showTip(event, 'fs63', 313)&quot; class=&quot;i&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs68', 314)&quot; onmouseover=&quot;showTip(event, 'fs68', 314)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs64', 315)&quot; onmouseover=&quot;showTip(event, 'fs64', 315)&quot; class=&quot;i&quot;&gt;Decrement&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs69', 316)&quot; onmouseover=&quot;showTip(event, 'fs69', 316)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs68', 317)&quot; onmouseover=&quot;showTip(event, 'fs68', 317)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs60', 318)&quot; onmouseover=&quot;showTip(event, 'fs60', 318)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;()) &lt;span class=&quot;c&quot;&gt;// 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;An object is just a collection of functions that still has access to some hidden fields.
Objects and closures are the same. Probably you have heard that &quot;Objects are poor man closures&quot;,
now you know why. But it is also the same reversed. &quot;Closures are poor man objects&quot;. Why? A
class is basically an &lt;em&gt;optimization&lt;/em&gt; of this use-case.&lt;/p&gt;
&lt;p&gt;A class contains the definition, fields and so on in one unit. Instead of creating a record
definition, using &lt;code&gt;counter&lt;/code&gt; as a closure and return a record, I also could just define
a class with the members (methods) and a private field. Defining a class is shorter.&lt;/p&gt;
&lt;p&gt;So a class is a poor man closures because it did not add anything more useful as what a
function with closure already gives you (functional languages, lambdas, closures and so
on already existed before OO). But on the other hand, OO optimized this use-case in such
a way that Closures are really &quot;poor man objects&quot;.&lt;/p&gt;
&lt;p&gt;As F# also supports classes, if you really want to write something like this i would suggest you
also should create a class, and not use a record with functions and a closure. A class is just
much shorter.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 319)&quot; onmouseover=&quot;showTip(event, 'fs70', 319)&quot; class=&quot;t&quot;&gt;CounterClass&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs66', 320)&quot; onmouseover=&quot;showTip(event, 'fs66', 320)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs62', 321)&quot; onmouseover=&quot;showTip(event, 'fs62', 321)&quot; class=&quot;t&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mutable&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 322)&quot; onmouseover=&quot;showTip(event, 'fs71', 322)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs66', 323)&quot; onmouseover=&quot;showTip(event, 'fs66', 323)&quot; class=&quot;i&quot;&gt;init&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 324)&quot; onmouseover=&quot;showTip(event, 'fs72', 324)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs73', 325)&quot; onmouseover=&quot;showTip(event, 'fs73', 325)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 326)&quot; onmouseover=&quot;showTip(event, 'fs71', 326)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 327)&quot; onmouseover=&quot;showTip(event, 'fs72', 327)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs74', 328)&quot; onmouseover=&quot;showTip(event, 'fs74', 328)&quot; class=&quot;f&quot;&gt;Increment&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 329)&quot; onmouseover=&quot;showTip(event, 'fs71', 329)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 330)&quot; onmouseover=&quot;showTip(event, 'fs71', 330)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;member&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs72', 331)&quot; onmouseover=&quot;showTip(event, 'fs72', 331)&quot; class=&quot;i&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs75', 332)&quot; onmouseover=&quot;showTip(event, 'fs75', 332)&quot; class=&quot;f&quot;&gt;Decrement&lt;/span&gt;() &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 333)&quot; onmouseover=&quot;showTip(event, 'fs71', 333)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs71', 334)&quot; onmouseover=&quot;showTip(event, 'fs71', 334)&quot; class=&quot;v&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;The usage of a class in F# is actually nearly the same as the code with the record:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 335)&quot; onmouseover=&quot;showTip(event, 'fs76', 335)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs70', 336)&quot; onmouseover=&quot;showTip(event, 'fs70', 336)&quot; class=&quot;t&quot;&gt;CounterClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs76', 337)&quot; onmouseover=&quot;showTip(event, 'fs76', 337)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs77', 338)&quot; onmouseover=&quot;showTip(event, 'fs77', 338)&quot; class=&quot;f&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs76', 339)&quot; onmouseover=&quot;showTip(event, 'fs76', 339)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs77', 340)&quot; onmouseover=&quot;showTip(event, 'fs77', 340)&quot; class=&quot;f&quot;&gt;Increment&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs76', 341)&quot; onmouseover=&quot;showTip(event, 'fs76', 341)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs78', 342)&quot; onmouseover=&quot;showTip(event, 'fs78', 342)&quot; class=&quot;f&quot;&gt;Decrement&lt;/span&gt;()
&lt;span onmouseout=&quot;hideTip(event, 'fs69', 343)&quot; onmouseover=&quot;showTip(event, 'fs69', 343)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;pf&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs76', 344)&quot; onmouseover=&quot;showTip(event, 'fs76', 344)&quot; class=&quot;i&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs79', 345)&quot; onmouseover=&quot;showTip(event, 'fs79', 345)&quot; class=&quot;i&quot;&gt;Current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;But as a final note. Writing things like this is anyway not idiomatic functional code. Functional
code uses immutability. With immutable data you don't really need a class at all. A class gives you
the ability to hide &lt;em&gt;mutable data&lt;/em&gt; so you only have specific functions that can manipulate those.&lt;/p&gt;
&lt;a name=&quot;oo-currying&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Currying&lt;/h2&gt;
&lt;p&gt;F# does automatic currying by default, but it doesn't mean just because your language doesn't do
currying you can't have it. While most modern functional languages usually do it by default some
older languages especially those based on Lisp also don't do it by default.&lt;/p&gt;
&lt;p&gt;I give a short recap on what currying is, because it is still often miss-interpreted as
partial application.&lt;/p&gt;
&lt;p&gt;Currying is the idea that every function only has one input and one output argument. A function
with multiple input arguments must then be converted into a function that returns another
function. This transformation process is what we name currying. Once a function is in curried
form we don't have to specify all arguments at once. Not providing all arguments at once is
partial application. But you don't need currying to use partial application.&lt;/p&gt;
&lt;p&gt;Often beginners have a problem to differentiate both. We also can write a curry
function in F#. And probably that can help to demonstrate the distinction. First
we create a function that expects two arguments in tupled form.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 346)&quot; onmouseover=&quot;showTip(event, 'fs80', 346)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs3', 347)&quot; onmouseover=&quot;showTip(event, 'fs3', 347)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs27', 348)&quot; onmouseover=&quot;showTip(event, 'fs27', 348)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 349)&quot; onmouseover=&quot;showTip(event, 'fs3', 349)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 350)&quot; onmouseover=&quot;showTip(event, 'fs27', 350)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Now &lt;code&gt;add&lt;/code&gt; expects a single argument, a tuple that contains two variables. You can use it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs80', 351)&quot; onmouseover=&quot;showTip(event, 'fs80', 351)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// 13&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs80', 352)&quot; onmouseover=&quot;showTip(event, 'fs80', 352)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Probably at this point you will notice how similar this is to a function in a C-style language.
It is probably not an accident that we use &lt;code&gt;,&lt;/code&gt; for the creation of a tuple. The disadvantage
of a tuple is that we now must provide both values at once. We now could write a &lt;code&gt;curry&lt;/code&gt;
function to turn a function expecting a tuple into a chain of functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;9: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Extended version&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 353)&quot; onmouseover=&quot;showTip(event, 'fs81', 353)&quot; class=&quot;f&quot;&gt;curry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 354)&quot; onmouseover=&quot;showTip(event, 'fs82', 354)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 355)&quot; onmouseover=&quot;showTip(event, 'fs52', 355)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 356)&quot; onmouseover=&quot;showTip(event, 'fs83', 356)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span onmouseout=&quot;hideTip(event, 'fs82', 357)&quot; onmouseover=&quot;showTip(event, 'fs82', 357)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs52', 358)&quot; onmouseover=&quot;showTip(event, 'fs52', 358)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs83', 359)&quot; onmouseover=&quot;showTip(event, 'fs83', 359)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// Short version&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 360)&quot; onmouseover=&quot;showTip(event, 'fs81', 360)&quot; class=&quot;f&quot;&gt;curry&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 361)&quot; onmouseover=&quot;showTip(event, 'fs82', 361)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 362)&quot; onmouseover=&quot;showTip(event, 'fs52', 362)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs83', 363)&quot; onmouseover=&quot;showTip(event, 'fs83', 363)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs82', 364)&quot; onmouseover=&quot;showTip(event, 'fs82', 364)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs52', 365)&quot; onmouseover=&quot;showTip(event, 'fs52', 365)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs83', 366)&quot; onmouseover=&quot;showTip(event, 'fs83', 366)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Using &lt;code&gt;curry&lt;/code&gt; only with the first argument returns a curried version of &lt;code&gt;add&lt;/code&gt;. After we have
a curried function we can partial apply it.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 367)&quot; onmouseover=&quot;showTip(event, 'fs84', 367)&quot; class=&quot;f&quot;&gt;addC&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs81', 368)&quot; onmouseover=&quot;showTip(event, 'fs81', 368)&quot; class=&quot;f&quot;&gt;curry&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs80', 369)&quot; onmouseover=&quot;showTip(event, 'fs80', 369)&quot; class=&quot;f&quot;&gt;add&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs85', 370)&quot; onmouseover=&quot;showTip(event, 'fs85', 370)&quot; class=&quot;f&quot;&gt;addC10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs84', 371)&quot; onmouseover=&quot;showTip(event, 'fs84', 371)&quot; class=&quot;f&quot;&gt;addC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs85', 372)&quot; onmouseover=&quot;showTip(event, 'fs85', 372)&quot; class=&quot;f&quot;&gt;addC10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;To be more formal. We started with a function signature that looked like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;) &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;and &lt;code&gt;curry&lt;/code&gt; turned it into a chain of functions&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When you are not used to reading functional signatures. The &lt;code&gt;-&amp;gt;&lt;/code&gt; stands for a function. The left
is the input and the right is the output. &lt;code&gt;-&amp;gt;&lt;/code&gt; is left-associative. So you can read it like&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A function that takes &lt;code&gt;A&lt;/code&gt; and returns a new function that takes a &lt;code&gt;B&lt;/code&gt; and returns &lt;code&gt;C&lt;/code&gt;. When we
now go back to the OO world. We already defined a generic interface with one argument and output.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How could the interface for a function with two arguments, without currying, look like?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;How does it look with currying?&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;A&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;IFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;i&quot;&gt;B&lt;/span&gt;,&lt;span class=&quot;i&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;A &lt;code&gt;curry&lt;/code&gt; function would take a &lt;code&gt;IFunction&amp;lt;A,B,C&amp;gt;&lt;/code&gt; and return a &lt;code&gt;IFunction&amp;lt;A,IFunction&amp;lt;B,C&amp;gt;&amp;gt;&lt;/code&gt;.
The problem is, without the ability to create a lambda or anonymous classes such a task is hard
up to impossible.&lt;/p&gt;
&lt;p&gt;Instead of focusing on currying, we could focus on partial application instead. We already
have seen what partial application means in OO. It just means we already provide the arguments
to the constructor when we create a class. But it is really bad that we have to do that kind
of thing explicitly and manually.&lt;/p&gt;
&lt;p&gt;Instead of creating classes that expects its value explicitly in the constructor, we should
write a generic version that can partial apply any two argument IFunction instead. We
could write it like that:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; IFunction&amp;lt;A,B&amp;gt; {
    B Call(A a);
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; IFunction&amp;lt;A,B,C&amp;gt; {
    C Call(A a, B b);
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Partial&amp;lt;A,B,C&amp;gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;B,C&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; A a;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; IFunction&amp;lt;A,B,C&amp;gt; func;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; Partial(IFunction&amp;lt;A,B,C&amp;gt; func, A a) {
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; a;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.func &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; func;
    }
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; C Call(B b) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.func.Call(&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;.a, b);
    }
}

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Func {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; IFunction&amp;lt;B,C&amp;gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt;&amp;lt;A,B,C&amp;gt;(IFunction&amp;lt;A,B,C&amp;gt; func, A a) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Partial&amp;lt;A,B,C&amp;gt;(func, a);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;We don't need the static &lt;code&gt;Func&lt;/code&gt; class, but without this helper function and by directly
using &lt;code&gt;new Partial()&lt;/code&gt; we need to specify the generic values like &lt;code&gt;new Partial&amp;lt;int,int,int&amp;gt;()&lt;/code&gt;
as otherwise the C# compiler cannot infer the types. The helper functions helps us here.
With such a setup we now can write our &lt;code&gt;Add&lt;/code&gt; function like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Add &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; IFunction&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Call(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;And now we are able to partial apply the first argument. We can work with it like this.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Add();
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Func.&lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt;(add, &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);
Console.WriteLine(add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;.Call(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;)); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;It is a little bit boiler-plate to define everything, but we only need to define it once,
now we are able to partial apply any two argument function without that we explicitly
need to create a private field or think about which or how many arguments we want
to partial apply.&lt;/p&gt;
&lt;div class=&quot;info&quot;&gt;
When we don't restrict ourself and use all functional features of C#, that means lambdas,
and static methods (that we then can pass as arguments) then all of the examples become easier.
We also can easily define &lt;code&gt;curry&lt;/code&gt; functions.
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; Lambda {
    &lt;span class=&quot;c&quot;&gt;// 2-args&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; Func&amp;lt;A,Func&amp;lt;B,C&amp;gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Curry&amp;lt;A,B,C&amp;gt;(Func&amp;lt;A,B,C&amp;gt; func) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; func(a,b);
    }
    &lt;span class=&quot;c&quot;&gt;// 3-args&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; Func&amp;lt;A,Func&amp;lt;B,Func&amp;lt;C,D&amp;gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Curry&amp;lt;A,B,C,D&amp;gt;(Func&amp;lt;A,B,C,D&amp;gt; func) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; c &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; func(a,b,c);
    }
}

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; MainClass {
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; Add(&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;k&quot;&gt;int&lt;/span&gt; y) {
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; y;
    }

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; Main(&lt;span class=&quot;k&quot;&gt;string&lt;/span&gt;[] args) {
        &lt;span class=&quot;c&quot;&gt;// We must specify the generic-types when we pass a static method&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// to the Curry() function as an argument&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Lambda.Curry&amp;lt;&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;k&quot;&gt;int&lt;/span&gt;&amp;gt;(Add);

        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;);   &lt;span class=&quot;c&quot;&gt;// It is now a chained function&lt;/span&gt;
        Console.WriteLine(x); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add(&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;);  &lt;span class=&quot;c&quot;&gt;// Easily Partial Application&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; y     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; add&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;(&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;);
        Console.WriteLine(y); &lt;span class=&quot;c&quot;&gt;// 15&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;a name=&quot;oo-exercise&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Exercise&lt;/h2&gt;
&lt;p&gt;Previously I provided a small exercise with validation, but I leave the task to implement it
in your favourite language. Up to this point you should know enough about currying and
partial application. Most languages today also support lambda statements. Not every language
has automatic currying, but I showed how to create a curry function in F# and C#.&lt;/p&gt;
&lt;p&gt;Otherwise you still can use partial application instead of currying. The example is still
small and still heavily rely on currying or in general the ability to take functions as
arguments and return new functions from other functions. When you want a better understanding
of the concepts then there is no better way to somehow rewrite the given example.&lt;/p&gt;
&lt;p&gt;As a full overview, here is the full F# code.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Takes a predicate and a value and returns a valid/invalid value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 373)&quot; onmouseover=&quot;showTip(event, 'fs86', 373)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 374)&quot; onmouseover=&quot;showTip(event, 'fs50', 374)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 375)&quot; onmouseover=&quot;showTip(event, 'fs44', 375)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 376)&quot; onmouseover=&quot;showTip(event, 'fs44', 376)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs37', 377)&quot; onmouseover=&quot;showTip(event, 'fs37', 377)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 378)&quot; onmouseover=&quot;showTip(event, 'fs37', 378)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span onmouseout=&quot;hideTip(event, 'fs38', 379)&quot; onmouseover=&quot;showTip(event, 'fs38', 379)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 380)&quot; onmouseover=&quot;showTip(event, 'fs45', 380)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs50', 381)&quot; onmouseover=&quot;showTip(event, 'fs50', 381)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 382)&quot; onmouseover=&quot;showTip(event, 'fs45', 382)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 383)&quot; onmouseover=&quot;showTip(event, 'fs38', 383)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs45', 384)&quot; onmouseover=&quot;showTip(event, 'fs45', 384)&quot; class=&quot;i&quot;&gt;number&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 385)&quot; onmouseover=&quot;showTip(event, 'fs37', 385)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Combinator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 386)&quot; onmouseover=&quot;showTip(event, 'fs49', 386)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs50', 387)&quot; onmouseover=&quot;showTip(event, 'fs50', 387)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 388)&quot; onmouseover=&quot;showTip(event, 'fs51', 388)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 389)&quot; onmouseover=&quot;showTip(event, 'fs52', 389)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs50', 390)&quot; onmouseover=&quot;showTip(event, 'fs50', 390)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 391)&quot; onmouseover=&quot;showTip(event, 'fs52', 391)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 392)&quot; onmouseover=&quot;showTip(event, 'fs51', 392)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 393)&quot; onmouseover=&quot;showTip(event, 'fs52', 393)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;)

&lt;span class=&quot;c&quot;&gt;// Predicates&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 394)&quot; onmouseover=&quot;showTip(event, 'fs46', 394)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 395)&quot; onmouseover=&quot;showTip(event, 'fs35', 395)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 396)&quot; onmouseover=&quot;showTip(event, 'fs15', 396)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 397)&quot; onmouseover=&quot;showTip(event, 'fs15', 397)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 398)&quot; onmouseover=&quot;showTip(event, 'fs35', 398)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 399)&quot; onmouseover=&quot;showTip(event, 'fs47', 399)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 400)&quot; onmouseover=&quot;showTip(event, 'fs41', 400)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 401)&quot; onmouseover=&quot;showTip(event, 'fs15', 401)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 402)&quot; onmouseover=&quot;showTip(event, 'fs15', 402)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 403)&quot; onmouseover=&quot;showTip(event, 'fs41', 403)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 404)&quot; onmouseover=&quot;showTip(event, 'fs87', 404)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 405)&quot; onmouseover=&quot;showTip(event, 'fs3', 405)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 406)&quot; onmouseover=&quot;showTip(event, 'fs3', 406)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 407)&quot; onmouseover=&quot;showTip(event, 'fs53', 407)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 408)&quot; onmouseover=&quot;showTip(event, 'fs35', 408)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 409)&quot; onmouseover=&quot;showTip(event, 'fs41', 409)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs49', 410)&quot; onmouseover=&quot;showTip(event, 'fs49', 410)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs46', 411)&quot; onmouseover=&quot;showTip(event, 'fs46', 411)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs41', 412)&quot; onmouseover=&quot;showTip(event, 'fs41', 412)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs47', 413)&quot; onmouseover=&quot;showTip(event, 'fs47', 413)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 414)&quot; onmouseover=&quot;showTip(event, 'fs35', 414)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Some notes on the implementation. &lt;code&gt;Some&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; is an option type. In a language without
&lt;a href=&quot;/blog/2016/04/26/algebraic-data-types&quot;&gt;Algebraic Data-Types&lt;/a&gt; you have some problems to
build this. But you can create a class that contains a bool and a data field. The bool contains
the information if the data-field is valid or not. In the case it is invalid, the data-field
is empty/null.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;combine&lt;/code&gt; is a combinator, it expects two predicate functions as an argument and returns
a new predicate that applies both checks on a value. In a language without automatic
currying this should be a two-argument function (returning a function).&lt;/p&gt;
&lt;p&gt;You can use the functions above like this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 415)&quot; onmouseover=&quot;showTip(event, 'fs38', 415)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 416)&quot; onmouseover=&quot;showTip(event, 'fs86', 416)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 417)&quot; onmouseover=&quot;showTip(event, 'fs53', 417)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 418)&quot; onmouseover=&quot;showTip(event, 'fs86', 418)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 419)&quot; onmouseover=&quot;showTip(event, 'fs87', 419)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;

(&lt;span onmouseout=&quot;hideTip(event, 'fs38', 420)&quot; onmouseover=&quot;showTip(event, 'fs38', 420)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 421)&quot; onmouseover=&quot;showTip(event, 'fs86', 421)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 422)&quot; onmouseover=&quot;showTip(event, 'fs53', 422)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs86', 423)&quot; onmouseover=&quot;showTip(event, 'fs86', 423)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 424)&quot; onmouseover=&quot;showTip(event, 'fs87', 424)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When you get stuck writing it in such a sequential way, first try to write it in a nested style.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;(&lt;span onmouseout=&quot;hideTip(event, 'fs86', 425)&quot; onmouseover=&quot;showTip(event, 'fs86', 425)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 426)&quot; onmouseover=&quot;showTip(event, 'fs53', 426)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
  (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 427)&quot; onmouseover=&quot;showTip(event, 'fs86', 427)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 428)&quot; onmouseover=&quot;showTip(event, 'fs87', 428)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt;
    (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 429)&quot; onmouseover=&quot;showTip(event, 'fs38', 429)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;))) &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;

(&lt;span onmouseout=&quot;hideTip(event, 'fs86', 430)&quot; onmouseover=&quot;showTip(event, 'fs86', 430)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs53', 431)&quot; onmouseover=&quot;showTip(event, 'fs53', 431)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
  (&lt;span onmouseout=&quot;hideTip(event, 'fs86', 432)&quot; onmouseover=&quot;showTip(event, 'fs86', 432)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs87', 433)&quot; onmouseover=&quot;showTip(event, 'fs87', 433)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt;
    (&lt;span onmouseout=&quot;hideTip(event, 'fs38', 434)&quot; onmouseover=&quot;showTip(event, 'fs38', 434)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;))) &lt;span class=&quot;c&quot;&gt;// Some 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;When you have problems to understand the nested-style. The only difference in C-Style code is
the position of the open-parenthesis. It is placed after the function name instead before.
And often &lt;code&gt;,&lt;/code&gt; is used to separate the arguments.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(between(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;),
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(even,
    Some(&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;Writing it in a sequential style is possible in every language that also supports lambdas. In C#
you want to look at &lt;em&gt;Extension Methods&lt;/em&gt;, in Java look at &lt;em&gt;Default Methods&lt;/em&gt;. In a language without
such features. The &lt;code&gt;is&lt;/code&gt; function will be part of your validation class. Your final code should
then look similar to this:&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; Validate(&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;)
    .&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(between(&lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;))
    .&lt;span class=&quot;k&quot;&gt;is&lt;/span&gt;(even);
x.IsValid() &lt;span class=&quot;c&quot;&gt;// False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;But first try to write it only with functions/static methods. The predicates itself
like &lt;code&gt;smaller&lt;/code&gt;, &lt;code&gt;greater&lt;/code&gt; and so on should never be part of the validation class you create.&lt;/p&gt;
&lt;p&gt;When you create a solution in your favourite language, you can leave a message in the Disqus
chat, or sent me a notification via Twitter, I add a link to your solution here.&lt;/p&gt;
&lt;a name=&quot;summary&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I started with the idea of functions as data and why it makes sense that we can pass functions
as arguments or return functions from other functions. A lambda expression is a way to
create a function on-the-fly, so we can easily pass functions as arguments or return them from
functions without explicitly defining them. Then we learned that a language like F# basically
treats all functions just as lambdas. We also have seen that multi-arguments functions didn't
exists, they are just a chain of one argument functions. This on the other hand means we can easily
partial apply any function. But not only that, it means every multi argument function is automatically
a function that can generate other functions.&lt;/p&gt;
&lt;p&gt;When we looked at C# we basically re-implemented all the ideas and we have seen how those
ideas translate to OO. You also should now know why Functional Programming is Orthogonal
to Object-Oriented programming and why closures and objects are the same.&lt;/p&gt;
&lt;p&gt;I overall hope that this introduction helped you not only in understanding functional programming
better, but also widen your view on object-oriented programming.&lt;/p&gt;
&lt;a name=&quot;reading&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lihaoyi.com/post/WhatsFunctionalProgrammingAllAbout.html&quot;&gt;What's Functional Programming All About?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536&quot;&gt;So You Want to be a Functional Programmer (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a name=&quot;comments&quot;&gt;&lt;/a&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;val square : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.square&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val squareM : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.squareM&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;val output : Map&amp;lt;int,int&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;Multiple items&lt;br /&gt;module Map&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type Map&amp;lt;&amp;#39;Key,&amp;#39;Value (requires comparison)&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IComparable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;KeyValuePair&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface ICollection&amp;lt;KeyValuePair&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;interface IDictionary&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;new : elements:seq&amp;lt;&amp;#39;Key * &amp;#39;Value&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member Add : key:&amp;#39;Key * value:&amp;#39;Value -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member ContainsKey : key:&amp;#39;Key -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;override Equals : obj -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member Remove : key:&amp;#39;Key -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map&amp;lt;_,_&amp;gt;&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : elements:seq&amp;lt;&amp;#39;Key * &amp;#39;Value&amp;gt; -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;Value&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;val ofList : elements:(&amp;#39;Key * &amp;#39;T) list -&amp;gt; Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.ofList&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;val defaultArg : arg:&amp;#39;T option -&amp;gt; defaultValue:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.defaultArg&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val tryFind : key:&amp;#39;Key -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.tryFind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;U list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;val map : data:Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; -&amp;gt; list:&amp;#39;a list -&amp;gt; &amp;#39;b list (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val data : Map&amp;lt;&amp;#39;a,&amp;#39;b&amp;gt; (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;Multiple items&lt;br /&gt;val list : &amp;#39;a list (requires comparison)&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val x : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val find : key:&amp;#39;Key -&amp;gt; table:Map&amp;lt;&amp;#39;Key,&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.Map.find&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val squares : Map&amp;lt;int,int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.squares&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;type &amp;#39;T list = List&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.list&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val generateAdd : x:int -&amp;gt; Map&amp;lt;int,int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.generateAdd&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val i : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val add10 : Map&amp;lt;int,int&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Main.add10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val generateAdd : x:int -&amp;gt; i:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.generateAdd&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val add10 : (int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.add10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val squareA : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.squareA&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val squareB : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.squareB&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val add : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val y : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val add&amp;#39; : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val add&amp;#39;&amp;#39; : x:int -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&amp;#39;&amp;#39;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val x : int ref&lt;br /&gt;&lt;br /&gt;Full name: Main.x&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;Multiple items&lt;br /&gt;val ref : value:&amp;#39;T -&amp;gt; &amp;#39;T ref&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.ref&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type &amp;#39;T ref = Ref&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ref&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val add : x:int ref -&amp;gt; y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val x : int ref&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val smaller : min:&amp;#39;a -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.smaller&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val min : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val x : &amp;#39;a option (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val number : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;val greater : max:&amp;#39;a -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.greater&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val max : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val is : predicate:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.is&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val predicate : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;val x : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;val number : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val smaller : min:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.smaller&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val greater : max:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.greater&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val combine : f:(&amp;#39;a -&amp;gt; bool) -&amp;gt; g:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.combine&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val f : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val g : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val between : min:&amp;#39;a -&amp;gt; max:&amp;#39;a -&amp;gt; (&amp;#39;a -&amp;gt; bool) (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.between&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val check : predicates:(&amp;#39;a -&amp;gt; bool) list -&amp;gt; (&amp;#39;a -&amp;gt; bool)&lt;br /&gt;&lt;br /&gt;Full name: Main.check&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val predicates : (&amp;#39;a -&amp;gt; bool) list&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val reduce : reduction:(&amp;#39;T -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;T) -&amp;gt; list:&amp;#39;T list -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.reduce&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val isEven : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.isEven&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs58&quot;&gt;val evenAnd1To9 : (int -&amp;gt; bool)&lt;br /&gt;&lt;br /&gt;Full name: Main.evenAnd1To9&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs59&quot;&gt;type Counter =&lt;br /&gt;&amp;#160;&amp;#160;{Current: unit -&amp;gt; int;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Increment: unit -&amp;gt; unit;&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;Decrement: unit -&amp;gt; unit;}&lt;br /&gt;&lt;br /&gt;Full name: Main.Counter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs60&quot;&gt;Counter.Current: unit -&amp;gt; int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs61&quot;&gt;type unit = Unit&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs62&quot;&gt;Multiple items&lt;br /&gt;val int : value:&amp;#39;T -&amp;gt; int (requires member op_Explicit)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int = int32&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type int&amp;lt;&amp;#39;Measure&amp;gt; = int&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.int&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs63&quot;&gt;Counter.Increment: unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs64&quot;&gt;Counter.Decrement: unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs65&quot;&gt;val counter : init:int -&amp;gt; Counter&lt;br /&gt;&lt;br /&gt;Full name: Main.counter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs66&quot;&gt;val init : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs67&quot;&gt;val counter : int ref&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs68&quot;&gt;val count : Counter&lt;br /&gt;&lt;br /&gt;Full name: Main.count&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs69&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs70&quot;&gt;Multiple items&lt;br /&gt;type CounterClass =&lt;br /&gt;&amp;#160;&amp;#160;new : init:int -&amp;gt; CounterClass&lt;br /&gt;&amp;#160;&amp;#160;member Decrement : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Increment : unit -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member Current : int&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;new : init:int -&amp;gt; CounterClass&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs71&quot;&gt;val mutable counter : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs72&quot;&gt;val this : CounterClass&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs73&quot;&gt;member CounterClass.Current : int&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass.Current&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs74&quot;&gt;member CounterClass.Increment : unit -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass.Increment&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs75&quot;&gt;member CounterClass.Decrement : unit -&amp;gt; unit&lt;br /&gt;&lt;br /&gt;Full name: Main.CounterClass.Decrement&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs76&quot;&gt;val count : CounterClass&lt;br /&gt;&lt;br /&gt;Full name: Main.count&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs77&quot;&gt;member CounterClass.Increment : unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs78&quot;&gt;member CounterClass.Decrement : unit -&amp;gt; unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs79&quot;&gt;property CounterClass.Current: int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs80&quot;&gt;val add : x:int * y:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.add&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs81&quot;&gt;val curry : f:(&amp;#39;a * &amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;a -&amp;gt; y:&amp;#39;b -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: Main.curry&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs82&quot;&gt;val f : (&amp;#39;a * &amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs83&quot;&gt;val y : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs84&quot;&gt;val addC : (int -&amp;gt; int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.addC&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs85&quot;&gt;val addC10 : (int -&amp;gt; int)&lt;br /&gt;&lt;br /&gt;Full name: Main.addC10&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs86&quot;&gt;val is : f:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a option -&amp;gt; &amp;#39;a option&lt;br /&gt;&lt;br /&gt;Full name: Main.is&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs87&quot;&gt;val even : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.even&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><category term="C#" /><category term="intro" /><category term="data" /><category term="oop" /><category term="currying" /><category term="closure" /><summary type="html">In this article I want to give a general introduction to some of the fundamental ideas of functional programming. I just start with the idea of function as data, and explain why functions are viewed as data and why it makes sense to pass functions as arguments. When we understand this concept, I start explaining lambda expression, currying, partial application and closures. All of this ideas built on each other. But I don't stop at functional programming. Instead I will go back to OO programming and show you, how you can translate all of these ideas into OO code. Probably you will be surprised how similar functional and OO code is, and that most ideas are things you already know. Overall I show why functional programming and object-oriented programming are orthogonal. I hope that by the end of the article you learned something about functional programming, but also widen your view on object-oriented programming. Table of Content Functional Programming Functions as Data What is a function? Exploiting Functions Functions as return values There is only lambda Currying Closures Example: Currying and Closures Object-Oriented Programming What is a Class? Functions as Data Currying, Partial Application and Closures Currying Exercise Summary Further Reading Comments Functions as data One important concept in functional programming is the ability to use functions just as data. This means you can create functions and store them in variables. But that also means you can pass those functions to other functions as arguments or retrieve a function from a function. Sometimes people new to functional programming have some problems to understand this idea and how it is useful, but in fact, when you do OO programming you do that kind of idea basically all over the place. You do it even more often as in a functional language. But even if you don't see the connection at the moment, you still could ask yourself if that idea really makes sense, or what useful thinks you can do with that idea. What is a function? Before we go deeper we have to ask ourself: What is a function anyway? Depending on the language there are also multiple terms for the word function. Terms like procedures, static methods or subroutines. When I talk about functions I just mean the concept that you have some kind of thing that you can pass some arguments, and it returns a result. As a simple example we can think of a square function. 1: let square x = x * x We can pass it several different values, and it will return a result. 1: 2: 3: 4: square 0 // 0 square 1 // 1 square 2 // 4 square 3 // 9 Despite its simpleness. There are two ways how we can interpret square. A function is a series of commands that executes one by one returning some value. A function is a transformation of values. We pass some value in, and we get some value out. Even if those definitions seems similar, the focus is different. The first definition is often used by imperative languages. Functions are just a tool to get rid of code-duplication. You have a series of commands? Put them in a function and you later can call it again. What do you do if you want to understand what a function does? Just explore the commands it executes step-by-step. The second definition is how functional languages interpret functions. The focus lies on the input and the output. A function is not just a series of commands, it transforms an input to an output. You want to know what a function does? Examine the input and output of a function. The best would be if the types of a function is already self-speaking enough. Otherwise the function name itself should give us enough information what it does. But we don't really care how a function work or how it exactly achieve the output it returns. South Park teaches this thinking already: A function is just something that takes some underpants, then do something, and we get some profit out of it. We just have: 1: Underpants -&amp;gt; Profit What happens between those steps? We don't know, but we also don't care. The only thing that matters is that we can somehow turn underpants into profit. Exploiting functions The idea that only the input and output of a function matters is quite interesting. We could take that idea further and for example rewrite our square function into the following way: 1: 2: 3: 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: 14: 15: let squareM x = let output = Map.ofList [ (1, 1) (2, 4) (3, 9) (4, 16) ] defaultArg (Map.tryFind x output) 0</summary></entry><entry><title type="html">The Option Module</title><link href="https://sidburn.github.io/blog/2016/05/11/option-module" rel="alternate" type="text/html" title="The Option Module" /><published>2016-05-11T00:00:00+02:00</published><updated>2016-05-11T00:00:00+02:00</updated><id>https://sidburn.github.io/blog/2016/05/11/option-module</id><content type="html" xml:base="https://sidburn.github.io/blog/2016/05/11/option-module">&lt;p&gt;The Option type is a well known and often used type, but at least for me, most of the
time I just used &lt;code&gt;Option.map&lt;/code&gt; and &lt;code&gt;Option.bind&lt;/code&gt; and ignored functions like &lt;code&gt;Option.exists&lt;/code&gt;,
&lt;code&gt;Option.filter&lt;/code&gt;, &lt;code&gt;Option.fold&lt;/code&gt; and so on. I spent some time with those functions to understand
when those are useful.&lt;/p&gt;
&lt;h2&gt;defaultArg&lt;/h2&gt;
&lt;p&gt;The first function i look at is actually not in the Option module. It is the &lt;code&gt;defaultArg&lt;/code&gt;
function. With &lt;code&gt;defaultArg&lt;/code&gt; we can extract an option type and provide a default value
in the case we had no value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs3', 3)&quot; onmouseover=&quot;showTip(event, 'fs3', 3)&quot; class=&quot;i&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 4)&quot; onmouseover=&quot;showTip(event, 'fs4', 4)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 5)&quot; onmouseover=&quot;showTip(event, 'fs5', 5)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs6', 6)&quot; onmouseover=&quot;showTip(event, 'fs6', 6)&quot; class=&quot;i&quot;&gt;o2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 7)&quot; onmouseover=&quot;showTip(event, 'fs4', 7)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 8)&quot; onmouseover=&quot;showTip(event, 'fs7', 8)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;One think I dislike is the order of the arguments. Because the Option type is expected first
as an argument, &lt;code&gt;defaultArg&lt;/code&gt; is unsuitable for piping or composition. That's why I most often
add a &lt;code&gt;orElse&lt;/code&gt; function to the Option module myself.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs8', 9)&quot; onmouseover=&quot;showTip(event, 'fs8', 9)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs9', 10)&quot; onmouseover=&quot;showTip(event, 'fs9', 10)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 11)&quot; onmouseover=&quot;showTip(event, 'fs10', 11)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 12)&quot; onmouseover=&quot;showTip(event, 'fs11', 12)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs4', 13)&quot; onmouseover=&quot;showTip(event, 'fs4', 13)&quot; class=&quot;f&quot;&gt;defaultArg&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 14)&quot; onmouseover=&quot;showTip(event, 'fs11', 14)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 15)&quot; onmouseover=&quot;showTip(event, 'fs10', 15)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs5', 16)&quot; onmouseover=&quot;showTip(event, 'fs5', 16)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 17)&quot; onmouseover=&quot;showTip(event, 'fs12', 17)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 18)&quot; onmouseover=&quot;showTip(event, 'fs9', 18)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 10&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs7', 19)&quot; onmouseover=&quot;showTip(event, 'fs7', 19)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 20)&quot; onmouseover=&quot;showTip(event, 'fs12', 20)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 21)&quot; onmouseover=&quot;showTip(event, 'fs9', 21)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;exists &amp;amp; forall&lt;/h2&gt;
&lt;p&gt;I must admit, i never looked closer at those functions. It is obvious that those functions are
&lt;em&gt;ported&lt;/em&gt; from the List/Array/Seq module. But because an option never contains more than one element,
I never looked closer to those functions. The truth is, because we know that an option only contains
either no value or a single value, the meaning of those functions just change.&lt;/p&gt;
&lt;p&gt;Let's look at some typical code with no option at all that you will sometimes have. You just
check a variable if some statement is true or false and you use that for branching.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs13', 22)&quot; onmouseover=&quot;showTip(event, 'fs13', 22)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs13', 23)&quot; onmouseover=&quot;showTip(event, 'fs13', 23)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 24)&quot; onmouseover=&quot;showTip(event, 'fs14', 24)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input smaller 10&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 25)&quot; onmouseover=&quot;showTip(event, 'fs14', 25)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Input must be smaller than 10&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input smaller 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;What do you do, when x is an &lt;code&gt;option&lt;/code&gt;? Then you can use &lt;code&gt;Option.exists&lt;/code&gt;&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;7: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 26)&quot; onmouseover=&quot;showTip(event, 'fs15', 26)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 27)&quot; onmouseover=&quot;showTip(event, 'fs5', 27)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs15', 28)&quot; onmouseover=&quot;showTip(event, 'fs15', 28)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 29)&quot; onmouseover=&quot;showTip(event, 'fs12', 29)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 30)&quot; onmouseover=&quot;showTip(event, 'fs16', 30)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 31)&quot; onmouseover=&quot;showTip(event, 'fs17', 31)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 32)&quot; onmouseover=&quot;showTip(event, 'fs17', 32)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 33)&quot; onmouseover=&quot;showTip(event, 'fs14', 33)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input smaller 10&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 34)&quot; onmouseover=&quot;showTip(event, 'fs14', 34)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Input must be smaller than 10&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input smaller 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Generally speaking. With &lt;code&gt;Option.exists&lt;/code&gt; you can check an option for a condition. &lt;code&gt;None&lt;/code&gt;
is treated as &lt;code&gt;false&lt;/code&gt;. Naming the function &lt;code&gt;check&lt;/code&gt; or some other name than
&lt;code&gt;exists&lt;/code&gt; would probably have been a better name. With some helper functions we can enhance
the validation process.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 35)&quot; onmouseover=&quot;showTip(event, 'fs18', 35)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 36)&quot; onmouseover=&quot;showTip(event, 'fs19', 36)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 37)&quot; onmouseover=&quot;showTip(event, 'fs20', 37)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 38)&quot; onmouseover=&quot;showTip(event, 'fs20', 38)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 39)&quot; onmouseover=&quot;showTip(event, 'fs19', 39)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 40)&quot; onmouseover=&quot;showTip(event, 'fs21', 40)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 41)&quot; onmouseover=&quot;showTip(event, 'fs22', 41)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 42)&quot; onmouseover=&quot;showTip(event, 'fs20', 42)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 43)&quot; onmouseover=&quot;showTip(event, 'fs20', 43)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 44)&quot; onmouseover=&quot;showTip(event, 'fs22', 44)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 45)&quot; onmouseover=&quot;showTip(event, 'fs15', 45)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 46)&quot; onmouseover=&quot;showTip(event, 'fs5', 46)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs15', 47)&quot; onmouseover=&quot;showTip(event, 'fs15', 47)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 48)&quot; onmouseover=&quot;showTip(event, 'fs12', 48)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 49)&quot; onmouseover=&quot;showTip(event, 'fs16', 49)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 50)&quot; onmouseover=&quot;showTip(event, 'fs21', 50)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 51)&quot; onmouseover=&quot;showTip(event, 'fs15', 51)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 52)&quot; onmouseover=&quot;showTip(event, 'fs12', 52)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 53)&quot; onmouseover=&quot;showTip(event, 'fs16', 53)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 54)&quot; onmouseover=&quot;showTip(event, 'fs18', 54)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 55)&quot; onmouseover=&quot;showTip(event, 'fs14', 55)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input between 0 and 10&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 56)&quot; onmouseover=&quot;showTip(event, 'fs14', 56)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input not valid&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input between 0 and 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Option.forall&lt;/code&gt; is basically the same, only that &lt;code&gt;None&lt;/code&gt; is threaten as &lt;code&gt;true&lt;/code&gt; instead of &lt;code&gt;false&lt;/code&gt;.
But I must admit, I cannot come up with a useful example for &lt;code&gt;forall&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;filter&lt;/h2&gt;
&lt;p&gt;In my last example I added a second check. While two checks are still somehow okay in terms of
readability it can become unhandy fast. Wouldn't it be better if we could chain the operations?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt; gives us exactly this ability. Instead of returning &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; it just returns
an option again. When the predicate we provided returns &lt;code&gt;true&lt;/code&gt; we just get back the original value
unchanged. Otherwise we get &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 57)&quot; onmouseover=&quot;showTip(event, 'fs23', 57)&quot; class=&quot;f&quot;&gt;isValid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 58)&quot; onmouseover=&quot;showTip(event, 'fs24', 58)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs24', 59)&quot; onmouseover=&quot;showTip(event, 'fs24', 59)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 60)&quot; onmouseover=&quot;showTip(event, 'fs12', 60)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 61)&quot; onmouseover=&quot;showTip(event, 'fs16', 61)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;)
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 62)&quot; onmouseover=&quot;showTip(event, 'fs25', 62)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 63)&quot; onmouseover=&quot;showTip(event, 'fs17', 63)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 64)&quot; onmouseover=&quot;showTip(event, 'fs17', 64)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs15', 65)&quot; onmouseover=&quot;showTip(event, 'fs15', 65)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs5', 66)&quot; onmouseover=&quot;showTip(event, 'fs5', 66)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 67)&quot; onmouseover=&quot;showTip(event, 'fs12', 67)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 68)&quot; onmouseover=&quot;showTip(event, 'fs26', 68)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 69)&quot; onmouseover=&quot;showTip(event, 'fs21', 69)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 70)&quot; onmouseover=&quot;showTip(event, 'fs12', 70)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 71)&quot; onmouseover=&quot;showTip(event, 'fs26', 71)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 72)&quot; onmouseover=&quot;showTip(event, 'fs18', 72)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 73)&quot; onmouseover=&quot;showTip(event, 'fs12', 73)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 74)&quot; onmouseover=&quot;showTip(event, 'fs26', 74)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 75)&quot; onmouseover=&quot;showTip(event, 'fs25', 75)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;   &lt;span onmouseout=&quot;hideTip(event, 'fs15', 76)&quot; onmouseover=&quot;showTip(event, 'fs15', 76)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs23', 77)&quot; onmouseover=&quot;showTip(event, 'fs23', 77)&quot; class=&quot;f&quot;&gt;isValid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 78)&quot; onmouseover=&quot;showTip(event, 'fs14', 78)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;input between 0 and 10 and even&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs14', 79)&quot; onmouseover=&quot;showTip(event, 'fs14', 79)&quot; class=&quot;f&quot;&gt;printfn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;invalid input&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// prints: input between 0 and 10 and even&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We also can use &lt;code&gt;Option.filter&lt;/code&gt; to easily turn a type into an option based on a predicate.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs5', 80)&quot; onmouseover=&quot;showTip(event, 'fs5', 80)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 81)&quot; onmouseover=&quot;showTip(event, 'fs12', 81)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 82)&quot; onmouseover=&quot;showTip(event, 'fs26', 82)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 83)&quot; onmouseover=&quot;showTip(event, 'fs25', 83)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// None&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs5', 84)&quot; onmouseover=&quot;showTip(event, 'fs5', 84)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 85)&quot; onmouseover=&quot;showTip(event, 'fs12', 85)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 86)&quot; onmouseover=&quot;showTip(event, 'fs26', 86)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs25', 87)&quot; onmouseover=&quot;showTip(event, 'fs25', 87)&quot; class=&quot;f&quot;&gt;isEven&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Some 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;h2&gt;fold&lt;/h2&gt;
&lt;p&gt;I started with &lt;code&gt;defaultArg&lt;/code&gt; and implemented &lt;code&gt;orElse&lt;/code&gt;. But overall we could replace those with
&lt;code&gt;fold&lt;/code&gt;. Besides the option itself, &lt;code&gt;fold&lt;/code&gt; expects two additional arguments. A function and an
accumulator. &lt;code&gt;fold&lt;/code&gt; either executes the function or it returns the accumulator as the default value.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs27', 88)&quot; onmouseover=&quot;showTip(event, 'fs27', 88)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs28', 89)&quot; onmouseover=&quot;showTip(event, 'fs28', 89)&quot; class=&quot;i&quot;&gt;def&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 90)&quot; onmouseover=&quot;showTip(event, 'fs11', 90)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 91)&quot; onmouseover=&quot;showTip(event, 'fs12', 91)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 92)&quot; onmouseover=&quot;showTip(event, 'fs29', 92)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span onmouseout=&quot;hideTip(event, 'fs10', 93)&quot; onmouseover=&quot;showTip(event, 'fs10', 93)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 94)&quot; onmouseover=&quot;showTip(event, 'fs10', 94)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs28', 95)&quot; onmouseover=&quot;showTip(event, 'fs28', 95)&quot; class=&quot;i&quot;&gt;def&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs11', 96)&quot; onmouseover=&quot;showTip(event, 'fs11', 96)&quot; class=&quot;i&quot;&gt;o&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;In general the idea of &lt;code&gt;fold&lt;/code&gt; is that we can return any other type that we want. &lt;code&gt;fold&lt;/code&gt; is
a general way to convert types. If that sounds a lot like &lt;code&gt;map&lt;/code&gt;. The difference is that &lt;code&gt;map&lt;/code&gt;
still only converts the wrapped type and we still get an option back. But with &lt;code&gt;fold&lt;/code&gt; we
directly get the wrapped type back. It just means that whenever you use a &lt;code&gt;map&lt;/code&gt; and then
&lt;code&gt;orElse&lt;/code&gt;. You also could use &lt;code&gt;fold&lt;/code&gt; instead.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt;1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;4: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 97)&quot; onmouseover=&quot;showTip(event, 'fs30', 97)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 98)&quot; onmouseover=&quot;showTip(event, 'fs17', 98)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 99)&quot; onmouseover=&quot;showTip(event, 'fs17', 99)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 100)&quot; onmouseover=&quot;showTip(event, 'fs17', 100)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs5', 101)&quot; onmouseover=&quot;showTip(event, 'fs5', 101)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 102)&quot; onmouseover=&quot;showTip(event, 'fs12', 102)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs31', 103)&quot; onmouseover=&quot;showTip(event, 'fs31', 103)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 104)&quot; onmouseover=&quot;showTip(event, 'fs30', 104)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 105)&quot; onmouseover=&quot;showTip(event, 'fs12', 105)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs9', 106)&quot; onmouseover=&quot;showTip(event, 'fs9', 106)&quot; class=&quot;f&quot;&gt;orElse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs5', 107)&quot; onmouseover=&quot;showTip(event, 'fs5', 107)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 108)&quot; onmouseover=&quot;showTip(event, 'fs12', 108)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 109)&quot; onmouseover=&quot;showTip(event, 'fs29', 109)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span onmouseout=&quot;hideTip(event, 'fs17', 110)&quot; onmouseover=&quot;showTip(event, 'fs17', 110)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 111)&quot; onmouseover=&quot;showTip(event, 'fs30', 111)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 112)&quot; onmouseover=&quot;showTip(event, 'fs17', 112)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Up to this point I always ignored the accumulator argument, and just used the accumulator
as the default argument. But in general it means whenever you want to use a function
where one argument is an option you could probably use &lt;code&gt;fold&lt;/code&gt;. In general &lt;code&gt;fold&lt;/code&gt; works
nicely together with binary functions.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs32', 113)&quot; onmouseover=&quot;showTip(event, 'fs32', 113)&quot; class=&quot;f&quot;&gt;swap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 114)&quot; onmouseover=&quot;showTip(event, 'fs33', 114)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 115)&quot; onmouseover=&quot;showTip(event, 'fs34', 115)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 116)&quot; onmouseover=&quot;showTip(event, 'fs35', 116)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs33', 117)&quot; onmouseover=&quot;showTip(event, 'fs33', 117)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs35', 118)&quot; onmouseover=&quot;showTip(event, 'fs35', 118)&quot; class=&quot;i&quot;&gt;y&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs34', 119)&quot; onmouseover=&quot;showTip(event, 'fs34', 119)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs12', 120)&quot; onmouseover=&quot;showTip(event, 'fs12', 120)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 121)&quot; onmouseover=&quot;showTip(event, 'fs29', 121)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 122)&quot; onmouseover=&quot;showTip(event, 'fs36', 122)&quot; class=&quot;f&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 123)&quot; onmouseover=&quot;showTip(event, 'fs5', 123)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 124)&quot; onmouseover=&quot;showTip(event, 'fs12', 124)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 125)&quot; onmouseover=&quot;showTip(event, 'fs29', 125)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 126)&quot; onmouseover=&quot;showTip(event, 'fs37', 126)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 127)&quot; onmouseover=&quot;showTip(event, 'fs5', 127)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 128)&quot; onmouseover=&quot;showTip(event, 'fs12', 128)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 129)&quot; onmouseover=&quot;showTip(event, 'fs29', 129)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs36', 130)&quot; onmouseover=&quot;showTip(event, 'fs36', 130)&quot; class=&quot;f&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 131)&quot; onmouseover=&quot;showTip(event, 'fs7', 131)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 132)&quot; onmouseover=&quot;showTip(event, 'fs12', 132)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 133)&quot; onmouseover=&quot;showTip(event, 'fs29', 133)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs37', 134)&quot; onmouseover=&quot;showTip(event, 'fs37', 134)&quot; class=&quot;f&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 135)&quot; onmouseover=&quot;showTip(event, 'fs7', 135)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 136)&quot; onmouseover=&quot;showTip(event, 'fs12', 136)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 137)&quot; onmouseover=&quot;showTip(event, 'fs29', 137)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 138)&quot; onmouseover=&quot;showTip(event, 'fs5', 138)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 139)&quot; onmouseover=&quot;showTip(event, 'fs12', 139)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 140)&quot; onmouseover=&quot;showTip(event, 'fs29', 140)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 141)&quot; onmouseover=&quot;showTip(event, 'fs7', 141)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)     &lt;span class=&quot;c&quot;&gt;// 0&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 142)&quot; onmouseover=&quot;showTip(event, 'fs12', 142)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 143)&quot; onmouseover=&quot;showTip(event, 'fs29', 143)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 144)&quot; onmouseover=&quot;showTip(event, 'fs32', 144)&quot; class=&quot;f&quot;&gt;swap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 145)&quot; onmouseover=&quot;showTip(event, 'fs38', 145)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 146)&quot; onmouseover=&quot;showTip(event, 'fs39', 146)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;) &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 147)&quot; onmouseover=&quot;showTip(event, 'fs5', 147)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// &amp;quot;xxxxx&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 148)&quot; onmouseover=&quot;showTip(event, 'fs12', 148)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 149)&quot; onmouseover=&quot;showTip(event, 'fs29', 149)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs32', 150)&quot; onmouseover=&quot;showTip(event, 'fs32', 150)&quot; class=&quot;f&quot;&gt;swap&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs38', 151)&quot; onmouseover=&quot;showTip(event, 'fs38', 151)&quot; class=&quot;t&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs39', 152)&quot; onmouseover=&quot;showTip(event, 'fs39', 152)&quot; class=&quot;f&quot;&gt;replicate&lt;/span&gt;) &lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 153)&quot; onmouseover=&quot;showTip(event, 'fs7', 153)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// &amp;quot;x&amp;quot;&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 154)&quot; onmouseover=&quot;showTip(event, 'fs12', 154)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 155)&quot; onmouseover=&quot;showTip(event, 'fs29', 155)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 156)&quot; onmouseover=&quot;showTip(event, 'fs40', 156)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 157)&quot; onmouseover=&quot;showTip(event, 'fs41', 157)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 158)&quot; onmouseover=&quot;showTip(event, 'fs5', 158)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;4&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;5&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;6&lt;/span&gt;])   &lt;span class=&quot;c&quot;&gt;// [1;2;3;4;5;6]&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs12', 159)&quot; onmouseover=&quot;showTip(event, 'fs12', 159)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 160)&quot; onmouseover=&quot;showTip(event, 'fs29', 160)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs40', 161)&quot; onmouseover=&quot;showTip(event, 'fs40', 161)&quot; class=&quot;t&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs41', 162)&quot; onmouseover=&quot;showTip(event, 'fs41', 162)&quot; class=&quot;f&quot;&gt;append&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;2&lt;/span&gt;;&lt;span class=&quot;n&quot;&gt;3&lt;/span&gt;] (&lt;span onmouseout=&quot;hideTip(event, 'fs7', 163)&quot; onmouseover=&quot;showTip(event, 'fs7', 163)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;)           &lt;span class=&quot;c&quot;&gt;// [1;2;3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;We either execute our function with two arguments, or if the second argument is a &lt;code&gt;None&lt;/code&gt; we return
the first argument as the default value. The arguments itself don't need to be of the same types.&lt;/p&gt;
&lt;h2&gt;Validation&lt;/h2&gt;
&lt;p&gt;With very few helper functions we could built a small validation framework that uses the option type.
Most of them are just other names instead of &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;
&lt;table class=&quot;pre&quot;&gt;&lt;tr&gt;&lt;td class=&quot;lines&quot;&gt;&lt;pre class=&quot;fssnip&quot;&gt;&lt;span class=&quot;l&quot;&gt; 1: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 4: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 5: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 6: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 7: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;11: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;15: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;17: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;18: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;20: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;21: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;22: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;23: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;24: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;25: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;26: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;27: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;28: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;30: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;31: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;32: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;33: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;34: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;35: &lt;/span&gt;
&lt;span class=&quot;l&quot;&gt;36: &lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;snippet&quot;&gt;&lt;pre class=&quot;fssnip highlighted&quot;&gt;&lt;code lang=&quot;fsharp&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Monadic functions -- Converter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 164)&quot; onmouseover=&quot;showTip(event, 'fs42', 164)&quot; class=&quot;f&quot;&gt;toInt&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 165)&quot; onmouseover=&quot;showTip(event, 'fs43', 165)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs44', 166)&quot; onmouseover=&quot;showTip(event, 'fs44', 166)&quot; class=&quot;t&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs45', 167)&quot; onmouseover=&quot;showTip(event, 'fs45', 167)&quot; class=&quot;f&quot;&gt;TryParse&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs43', 168)&quot; onmouseover=&quot;showTip(event, 'fs43', 168)&quot; class=&quot;i&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;,_ &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs7', 169)&quot; onmouseover=&quot;showTip(event, 'fs7', 169)&quot; class=&quot;p&quot;&gt;None&lt;/span&gt;
    | &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;,&lt;span onmouseout=&quot;hideTip(event, 'fs17', 170)&quot; onmouseover=&quot;showTip(event, 'fs17', 170)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 171)&quot; onmouseover=&quot;showTip(event, 'fs5', 171)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 172)&quot; onmouseover=&quot;showTip(event, 'fs17', 172)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Helper Functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 173)&quot; onmouseover=&quot;showTip(event, 'fs46', 173)&quot; class=&quot;f&quot;&gt;orReturn&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 174)&quot; onmouseover=&quot;showTip(event, 'fs10', 174)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 175)&quot; onmouseover=&quot;showTip(event, 'fs12', 175)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs29', 176)&quot; onmouseover=&quot;showTip(event, 'fs29', 176)&quot; class=&quot;f&quot;&gt;fold&lt;/span&gt; (&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; _ &lt;span onmouseout=&quot;hideTip(event, 'fs10', 177)&quot; onmouseover=&quot;showTip(event, 'fs10', 177)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 178)&quot; onmouseover=&quot;showTip(event, 'fs10', 178)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;) &lt;span onmouseout=&quot;hideTip(event, 'fs10', 179)&quot; onmouseover=&quot;showTip(event, 'fs10', 179)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 180)&quot; onmouseover=&quot;showTip(event, 'fs47', 180)&quot; class=&quot;f&quot;&gt;whenValid&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 181)&quot; onmouseover=&quot;showTip(event, 'fs12', 181)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs31', 182)&quot; onmouseover=&quot;showTip(event, 'fs31', 182)&quot; class=&quot;f&quot;&gt;map&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 183)&quot; onmouseover=&quot;showTip(event, 'fs48', 183)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 184)&quot; onmouseover=&quot;showTip(event, 'fs12', 184)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs26', 185)&quot; onmouseover=&quot;showTip(event, 'fs26', 185)&quot; class=&quot;f&quot;&gt;filter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 186)&quot; onmouseover=&quot;showTip(event, 'fs49', 186)&quot; class=&quot;f&quot;&gt;convert&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 187)&quot; onmouseover=&quot;showTip(event, 'fs12', 187)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs50', 188)&quot; onmouseover=&quot;showTip(event, 'fs50', 188)&quot; class=&quot;f&quot;&gt;bind&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs51', 189)&quot; onmouseover=&quot;showTip(event, 'fs51', 189)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 190)&quot; onmouseover=&quot;showTip(event, 'fs52', 190)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 191)&quot; onmouseover=&quot;showTip(event, 'fs53', 191)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 192)&quot; onmouseover=&quot;showTip(event, 'fs10', 192)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs5', 193)&quot; onmouseover=&quot;showTip(event, 'fs5', 193)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs10', 194)&quot; onmouseover=&quot;showTip(event, 'fs10', 194)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 195)&quot; onmouseover=&quot;showTip(event, 'fs48', 195)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs52', 196)&quot; onmouseover=&quot;showTip(event, 'fs52', 196)&quot; class=&quot;f&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs12', 197)&quot; onmouseover=&quot;showTip(event, 'fs12', 197)&quot; class=&quot;t&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span onmouseout=&quot;hideTip(event, 'fs16', 198)&quot; onmouseover=&quot;showTip(event, 'fs16', 198)&quot; class=&quot;f&quot;&gt;exists&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs53', 199)&quot; onmouseover=&quot;showTip(event, 'fs53', 199)&quot; class=&quot;f&quot;&gt;g&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Validation Functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs18', 200)&quot; onmouseover=&quot;showTip(event, 'fs18', 200)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 201)&quot; onmouseover=&quot;showTip(event, 'fs19', 201)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 202)&quot; onmouseover=&quot;showTip(event, 'fs20', 202)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 203)&quot; onmouseover=&quot;showTip(event, 'fs20', 203)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 204)&quot; onmouseover=&quot;showTip(event, 'fs19', 204)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs21', 205)&quot; onmouseover=&quot;showTip(event, 'fs21', 205)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 206)&quot; onmouseover=&quot;showTip(event, 'fs22', 206)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 207)&quot; onmouseover=&quot;showTip(event, 'fs20', 207)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs20', 208)&quot; onmouseover=&quot;showTip(event, 'fs20', 208)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 209)&quot; onmouseover=&quot;showTip(event, 'fs22', 209)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs54', 210)&quot; onmouseover=&quot;showTip(event, 'fs54', 210)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 211)&quot; onmouseover=&quot;showTip(event, 'fs19', 211)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 212)&quot; onmouseover=&quot;showTip(event, 'fs22', 212)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs51', 213)&quot; onmouseover=&quot;showTip(event, 'fs51', 213)&quot; class=&quot;f&quot;&gt;combine&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs21', 214)&quot; onmouseover=&quot;showTip(event, 'fs21', 214)&quot; class=&quot;f&quot;&gt;greater&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs19', 215)&quot; onmouseover=&quot;showTip(event, 'fs19', 215)&quot; class=&quot;i&quot;&gt;min&lt;/span&gt;) (&lt;span onmouseout=&quot;hideTip(event, 'fs18', 216)&quot; onmouseover=&quot;showTip(event, 'fs18', 216)&quot; class=&quot;f&quot;&gt;smaller&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs22', 217)&quot; onmouseover=&quot;showTip(event, 'fs22', 217)&quot; class=&quot;i&quot;&gt;max&lt;/span&gt;))
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 218)&quot; onmouseover=&quot;showTip(event, 'fs55', 218)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 219)&quot; onmouseover=&quot;showTip(event, 'fs17', 219)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 220)&quot; onmouseover=&quot;showTip(event, 'fs17', 220)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Mapping functions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 221)&quot; onmouseover=&quot;showTip(event, 'fs30', 221)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 222)&quot; onmouseover=&quot;showTip(event, 'fs17', 222)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 223)&quot; onmouseover=&quot;showTip(event, 'fs17', 223)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs17', 224)&quot; onmouseover=&quot;showTip(event, 'fs17', 224)&quot; class=&quot;i&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Usage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs56', 225)&quot; onmouseover=&quot;showTip(event, 'fs56', 225)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs57', 226)&quot; onmouseover=&quot;showTip(event, 'fs57', 226)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span onmouseout=&quot;hideTip(event, 'fs57', 227)&quot; onmouseover=&quot;showTip(event, 'fs57', 227)&quot; class=&quot;i&quot;&gt;input&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs49', 228)&quot; onmouseover=&quot;showTip(event, 'fs49', 228)&quot; class=&quot;f&quot;&gt;convert&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs42', 229)&quot; onmouseover=&quot;showTip(event, 'fs42', 229)&quot; class=&quot;f&quot;&gt;toInt&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 230)&quot; onmouseover=&quot;showTip(event, 'fs48', 230)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs54', 231)&quot; onmouseover=&quot;showTip(event, 'fs54', 231)&quot; class=&quot;f&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;100&lt;/span&gt;)
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs48', 232)&quot; onmouseover=&quot;showTip(event, 'fs48', 232)&quot; class=&quot;f&quot;&gt;is&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs55', 233)&quot; onmouseover=&quot;showTip(event, 'fs55', 233)&quot; class=&quot;f&quot;&gt;even&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs47', 234)&quot; onmouseover=&quot;showTip(event, 'fs47', 234)&quot; class=&quot;f&quot;&gt;whenValid&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs30', 235)&quot; onmouseover=&quot;showTip(event, 'fs30', 235)&quot; class=&quot;f&quot;&gt;square&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span onmouseout=&quot;hideTip(event, 'fs46', 236)&quot; onmouseover=&quot;showTip(event, 'fs46', 236)&quot; class=&quot;f&quot;&gt;orReturn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;0&lt;/span&gt;

&lt;span onmouseout=&quot;hideTip(event, 'fs56', 237)&quot; onmouseover=&quot;showTip(event, 'fs56', 237)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 238)&quot; onmouseover=&quot;showTip(event, 'fs5', 238)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 0   -- not valid int&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 239)&quot; onmouseover=&quot;showTip(event, 'fs56', 239)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 240)&quot; onmouseover=&quot;showTip(event, 'fs5', 240)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// 4&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 241)&quot; onmouseover=&quot;showTip(event, 'fs56', 241)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 242)&quot; onmouseover=&quot;showTip(event, 'fs5', 242)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;)   &lt;span class=&quot;c&quot;&gt;// 0   -- not even&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 243)&quot; onmouseover=&quot;showTip(event, 'fs56', 243)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 244)&quot; onmouseover=&quot;showTip(event, 'fs5', 244)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;)  &lt;span class=&quot;c&quot;&gt;// 100&lt;/span&gt;
&lt;span onmouseout=&quot;hideTip(event, 'fs56', 245)&quot; onmouseover=&quot;showTip(event, 'fs56', 245)&quot; class=&quot;f&quot;&gt;transformInput&lt;/span&gt; (&lt;span onmouseout=&quot;hideTip(event, 'fs5', 246)&quot; onmouseover=&quot;showTip(event, 'fs5', 246)&quot; class=&quot;p&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;102&amp;quot;&lt;/span&gt;) &lt;span class=&quot;c&quot;&gt;// 0   -- greater 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;


&lt;div class=&quot;tip&quot; id=&quot;fs1&quot;&gt;module Main&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs2&quot;&gt;namespace System&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs3&quot;&gt;val o1 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.o1&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs4&quot;&gt;val defaultArg : arg:&amp;#39;T option -&amp;gt; defaultValue:&amp;#39;T -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.defaultArg&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs5&quot;&gt;union case Option.Some: Value: &amp;#39;T -&amp;gt; Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs6&quot;&gt;val o2 : int&lt;br /&gt;&lt;br /&gt;Full name: Main.o2&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs7&quot;&gt;union case Option.None: Option&amp;lt;&amp;#39;T&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs8&quot;&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs9&quot;&gt;val orElse : x:&amp;#39;a -&amp;gt; o:&amp;#39;a option -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.Option.orElse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs10&quot;&gt;val x : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs11&quot;&gt;val o : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs12&quot;&gt;Multiple items&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Main&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;module Option&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Core&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs13&quot;&gt;val input : int&lt;br /&gt;&lt;br /&gt;Full name: Main.input&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs14&quot;&gt;val printfn : format:Printf.TextWriterFormat&amp;lt;&amp;#39;T&amp;gt; -&amp;gt; &amp;#39;T&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.ExtraTopLevelOperators.printfn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs15&quot;&gt;val input : int option&lt;br /&gt;&lt;br /&gt;Full name: Main.input&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs16&quot;&gt;val exists : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; option:&amp;#39;T option -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.exists&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs17&quot;&gt;val x : int&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs18&quot;&gt;val smaller : min:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.smaller&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs19&quot;&gt;val min : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs20&quot;&gt;val x : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs21&quot;&gt;val greater : max:&amp;#39;a -&amp;gt; x:&amp;#39;a -&amp;gt; bool (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.greater&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs22&quot;&gt;val max : &amp;#39;a (requires comparison)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs23&quot;&gt;val isValid : x:&amp;#39;a option -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.isValid&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs24&quot;&gt;val x : &amp;#39;a option&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs25&quot;&gt;val isEven : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.isEven&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs26&quot;&gt;val filter : predicate:(&amp;#39;T -&amp;gt; bool) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;T option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.filter&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs27&quot;&gt;val orElse : def:&amp;#39;a -&amp;gt; o:&amp;#39;a option -&amp;gt; &amp;#39;a&lt;br /&gt;&lt;br /&gt;Full name: Main.orElse&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs28&quot;&gt;val def : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs29&quot;&gt;val fold : folder:(&amp;#39;State -&amp;gt; &amp;#39;T -&amp;gt; &amp;#39;State) -&amp;gt; state:&amp;#39;State -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;State&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.fold&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs30&quot;&gt;val square : x:int -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.square&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs31&quot;&gt;val map : mapping:(&amp;#39;T -&amp;gt; &amp;#39;U) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.map&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs32&quot;&gt;val swap : f:(&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c) -&amp;gt; x:&amp;#39;b -&amp;gt; y:&amp;#39;a -&amp;gt; &amp;#39;c&lt;br /&gt;&lt;br /&gt;Full name: Main.swap&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs33&quot;&gt;val f : (&amp;#39;a -&amp;gt; &amp;#39;b -&amp;gt; &amp;#39;c)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs34&quot;&gt;val x : &amp;#39;b&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs35&quot;&gt;val y : &amp;#39;a&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs36&quot;&gt;val min : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.min&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs37&quot;&gt;val max : e1:&amp;#39;T -&amp;gt; e2:&amp;#39;T -&amp;gt; &amp;#39;T (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Operators.max&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs38&quot;&gt;Multiple items&lt;br /&gt;type String =&lt;br /&gt;&amp;#160;&amp;#160;new : value:char -&amp;gt; string + 7 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Chars : int -&amp;gt; char&lt;br /&gt;&amp;#160;&amp;#160;member Clone : unit -&amp;gt; obj&lt;br /&gt;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;member Contains : value:string -&amp;gt; bool&lt;br /&gt;&amp;#160;&amp;#160;member CopyTo : sourceIndex:int * destination:char[] * destinationIndex:int * count:int -&amp;gt; unit&lt;br /&gt;&amp;#160;&amp;#160;member EndsWith : value:string -&amp;gt; bool + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 2 overloads&lt;br /&gt;&amp;#160;&amp;#160;member GetEnumerator : unit -&amp;gt; CharEnumerator&lt;br /&gt;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;...&lt;br /&gt;&lt;br /&gt;Full name: System.String&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;String(value: nativeptr&amp;lt;char&amp;gt;) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;sbyte&amp;gt;) : unit&lt;br /&gt;String(value: char []) : unit&lt;br /&gt;String(c: char, count: int) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;char&amp;gt;, startIndex: int, length: int) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;sbyte&amp;gt;, startIndex: int, length: int) : unit&lt;br /&gt;String(value: char [], startIndex: int, length: int) : unit&lt;br /&gt;String(value: nativeptr&amp;lt;sbyte&amp;gt;, startIndex: int, length: int, enc: Text.Encoding) : unit&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs39&quot;&gt;val replicate : count:int -&amp;gt; str:string -&amp;gt; string&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.String.replicate&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs40&quot;&gt;Multiple items&lt;br /&gt;module List&lt;br /&gt;&lt;br /&gt;from Microsoft.FSharp.Collections&lt;br /&gt;&lt;br /&gt;--------------------&lt;br /&gt;type List&amp;lt;&amp;#39;T&amp;gt; =&lt;br /&gt;&amp;#160;&amp;#160;| ( [] )&lt;br /&gt;&amp;#160;&amp;#160;| ( :: ) of Head: &amp;#39;T * Tail: &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&lt;br /&gt;&amp;#160;&amp;#160;interface IEnumerable&amp;lt;&amp;#39;T&amp;gt;&lt;br /&gt;&amp;#160;&amp;#160;member GetSlice : startIndex:int option * endIndex:int option -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;member Head : &amp;#39;T&lt;br /&gt;&amp;#160;&amp;#160;member IsEmpty : bool&lt;br /&gt;&amp;#160;&amp;#160;member Item : index:int -&amp;gt; &amp;#39;T with get&lt;br /&gt;&amp;#160;&amp;#160;member Length : int&lt;br /&gt;&amp;#160;&amp;#160;member Tail : &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Cons : head:&amp;#39;T * tail:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&amp;#160;&amp;#160;static member Empty : &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List&amp;lt;_&amp;gt;&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs41&quot;&gt;val append : list1:&amp;#39;T list -&amp;gt; list2:&amp;#39;T list -&amp;gt; &amp;#39;T list&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Collections.List.append&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs42&quot;&gt;val toInt : str:string -&amp;gt; int option&lt;br /&gt;&lt;br /&gt;Full name: Main.toInt&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs43&quot;&gt;val str : string&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs44&quot;&gt;type Int32 =&lt;br /&gt;&amp;#160;&amp;#160;struct&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member CompareTo : value:obj -&amp;gt; int + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member Equals : obj:obj -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetHashCode : unit -&amp;gt; int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member GetTypeCode : unit -&amp;gt; TypeCode&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;member ToString : unit -&amp;gt; string + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MaxValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static val MinValue : int&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member Parse : s:string -&amp;gt; int + 3 overloads&lt;br /&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;static member TryParse : s:string * result:int -&amp;gt; bool + 1 overload&lt;br /&gt;&amp;#160;&amp;#160;end&lt;br /&gt;&lt;br /&gt;Full name: System.Int32&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs45&quot;&gt;Int32.TryParse(s: string, result: byref&amp;lt;int&amp;gt;) : bool&lt;br /&gt;Int32.TryParse(s: string, style: Globalization.NumberStyles, provider: IFormatProvider, result: byref&amp;lt;int&amp;gt;) : bool&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs46&quot;&gt;val orReturn : x:&amp;#39;a -&amp;gt; (&amp;#39;a option -&amp;gt; &amp;#39;a)&lt;br /&gt;&lt;br /&gt;Full name: Main.orReturn&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs47&quot;&gt;val whenValid : ((&amp;#39;a -&amp;gt; &amp;#39;b) -&amp;gt; &amp;#39;a option -&amp;gt; &amp;#39;b option)&lt;br /&gt;&lt;br /&gt;Full name: Main.whenValid&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs48&quot;&gt;val is : ((&amp;#39;a -&amp;gt; bool) -&amp;gt; &amp;#39;a option -&amp;gt; &amp;#39;a option)&lt;br /&gt;&lt;br /&gt;Full name: Main.is&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs49&quot;&gt;val convert : ((&amp;#39;a -&amp;gt; &amp;#39;b option) -&amp;gt; &amp;#39;a option -&amp;gt; &amp;#39;b option)&lt;br /&gt;&lt;br /&gt;Full name: Main.convert&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs50&quot;&gt;val bind : binder:(&amp;#39;T -&amp;gt; &amp;#39;U option) -&amp;gt; option:&amp;#39;T option -&amp;gt; &amp;#39;U option&lt;br /&gt;&lt;br /&gt;Full name: Microsoft.FSharp.Core.Option.bind&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs51&quot;&gt;val combine : f:(&amp;#39;a -&amp;gt; bool) -&amp;gt; g:(&amp;#39;a -&amp;gt; bool) -&amp;gt; x:&amp;#39;a -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.combine&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs52&quot;&gt;val f : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs53&quot;&gt;val g : (&amp;#39;a -&amp;gt; bool)&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs54&quot;&gt;val between : min:&amp;#39;a -&amp;gt; max:&amp;#39;a -&amp;gt; (&amp;#39;a -&amp;gt; bool) (requires comparison)&lt;br /&gt;&lt;br /&gt;Full name: Main.between&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs55&quot;&gt;val even : x:int -&amp;gt; bool&lt;br /&gt;&lt;br /&gt;Full name: Main.even&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs56&quot;&gt;val transformInput : input:string option -&amp;gt; int&lt;br /&gt;&lt;br /&gt;Full name: Main.transformInput&lt;/div&gt;
&lt;div class=&quot;tip&quot; id=&quot;fs57&quot;&gt;val input : string option&lt;/div&gt;</content><author><name>David Raab</name></author><category term="F#" /><category term="option" /><summary type="html">The Option type is a well known and often used type, but at least for me, most of the time I just used Option.map and Option.bind and ignored functions like Option.exists, Option.filter, Option.fold and so on. I spent some time with those functions to understand when those are useful. defaultArg The first function i look at is actually not in the Option module. It is the defaultArg function. With defaultArg we can extract an option type and provide a default value in the case we had no value. 1: 2: let o1 = defaultArg (Some 10) 0 // 10 let o2 = defaultArg (None) 0 // 0 One think I dislike is the order of the arguments. Because the Option type is expected first as an argument, defaultArg is unsuitable for piping or composition. That's why I most often add a orElse function to the Option module myself. 1: 2: 3: 4: 5: module Option = let orElse x o = defaultArg o x</summary></entry></feed>